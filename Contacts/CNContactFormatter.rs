//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Contacts::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum CNContactFormatterStyle {
    CNContactFormatterStyleFullName = 0,
    CNContactFormatterStylePhoneticFullName = 1,
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum CNContactDisplayNameOrder {
    CNContactDisplayNameOrderUserDefault = 0,
    CNContactDisplayNameOrderGivenNameFirst = 1,
    CNContactDisplayNameOrderFamilyNameFirst = 2,
}

#[objc2::interface(
    unsafe super = NSFormatter,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Contacts_CNContactFormatter")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type CNContactFormatter;
}

#[cfg(feature = "Contacts_CNContactFormatter")]
unsafe impl NSCoding for CNContactFormatter {}

#[cfg(feature = "Contacts_CNContactFormatter")]
unsafe impl NSObjectProtocol for CNContactFormatter {}

#[cfg(feature = "Contacts_CNContactFormatter")]
unsafe impl NSSecureCoding for CNContactFormatter {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Contacts_CNContactFormatter")]
    pub type CNContactFormatter;

    #[objc2::method(sel = "descriptorForRequiredKeysForStyle:", managed = "Other")]
    pub unsafe fn descriptorForRequiredKeysForStyle(
        style: CNContactFormatterStyle,
    ) -> Id<ProtocolObject<dyn CNKeyDescriptor>>;

    #[objc2::method(sel = "descriptorForRequiredKeysForNameOrder", managed = "Other")]
    pub unsafe fn descriptorForRequiredKeysForNameOrder() -> Id<ProtocolObject<dyn CNKeyDescriptor>>;

    #[objc2::method(sel = "descriptorForRequiredKeysForDelimiter", managed = "Other")]
    pub unsafe fn descriptorForRequiredKeysForDelimiter() -> Id<ProtocolObject<dyn CNKeyDescriptor>>;

    #[cfg(all(feature = "Contacts_CNContact", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "stringFromContact:style:", managed = "Other")]
    pub unsafe fn stringFromContact_style(
        contact: &CNContact,
        style: CNContactFormatterStyle,
    ) -> Option<Id<NSString>>;

    #[cfg(all(
        feature = "Contacts_CNContact",
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSDictionary"
    ))]
    #[objc2::method(
        sel = "attributedStringFromContact:style:defaultAttributes:",
        managed = "Other"
    )]
    pub unsafe fn attributedStringFromContact_style_defaultAttributes(
        contact: &CNContact,
        style: CNContactFormatterStyle,
        attributes: Option<&NSDictionary>,
    ) -> Option<Id<NSAttributedString>>;

    #[cfg(feature = "Contacts_CNContact")]
    #[objc2::method(sel = "nameOrderForContact:")]
    pub unsafe fn nameOrderForContact(contact: &CNContact) -> CNContactDisplayNameOrder;

    #[cfg(all(feature = "Contacts_CNContact", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "delimiterForContact:", managed = "Other")]
    pub unsafe fn delimiterForContact(contact: &CNContact) -> Id<NSString>;

    #[objc2::method(sel = "style")]
    pub unsafe fn style(&self) -> CNContactFormatterStyle;

    #[objc2::method(sel = "setStyle:")]
    pub unsafe fn setStyle(&self, style: CNContactFormatterStyle);

    #[cfg(all(feature = "Contacts_CNContact", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "stringFromContact:", managed = "Other")]
    pub unsafe fn stringFromContact(&self, contact: &CNContact) -> Option<Id<NSString>>;

    #[cfg(all(
        feature = "Contacts_CNContact",
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSDictionary"
    ))]
    #[objc2::method(
        sel = "attributedStringFromContact:defaultAttributes:",
        managed = "Other"
    )]
    pub unsafe fn attributedStringFromContact_defaultAttributes(
        &self,
        contact: &CNContact,
        attributes: Option<&NSDictionary>,
    ) -> Option<Id<NSAttributedString>>;
}

extern_static!(CNContactPropertyAttribute: &'static NSString);
