//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Contacts::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum CNContactType {
    CNContactTypePerson = 0,
    CNContactTypeOrganization = 1,
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum CNContactSortOrder {
    CNContactSortOrderNone = 0,
    CNContactSortOrderUserDefault = 1,
    CNContactSortOrderGivenName = 2,
    CNContactSortOrderFamilyName = 3,
}

#[objc2::protocol]
pub unsafe trait CNKeyDescriptor: NSObjectProtocol + NSSecureCoding {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSString")]
    pub type NSString;
}

#[cfg(feature = "Foundation_NSString")]
unsafe impl CNKeyDescriptor for NSString {}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Contacts_CNContact")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type CNContact;
}

#[cfg(feature = "Contacts_CNContact")]
unsafe impl NSCoding for CNContact {}

#[cfg(feature = "Contacts_CNContact")]
unsafe impl NSObjectProtocol for CNContact {}

#[cfg(feature = "Contacts_CNContact")]
unsafe impl NSSecureCoding for CNContact {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Contacts_CNContact")]
    pub type CNContact;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "identifier", managed = "Other")]
    pub unsafe fn identifier(&self) -> Id<NSString>;

    #[objc2::method(sel = "contactType")]
    pub unsafe fn contactType(&self) -> CNContactType;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "namePrefix", managed = "Other")]
    pub unsafe fn namePrefix(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "givenName", managed = "Other")]
    pub unsafe fn givenName(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "middleName", managed = "Other")]
    pub unsafe fn middleName(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "familyName", managed = "Other")]
    pub unsafe fn familyName(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "previousFamilyName", managed = "Other")]
    pub unsafe fn previousFamilyName(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "nameSuffix", managed = "Other")]
    pub unsafe fn nameSuffix(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "nickname", managed = "Other")]
    pub unsafe fn nickname(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "organizationName", managed = "Other")]
    pub unsafe fn organizationName(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "departmentName", managed = "Other")]
    pub unsafe fn departmentName(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "jobTitle", managed = "Other")]
    pub unsafe fn jobTitle(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "phoneticGivenName", managed = "Other")]
    pub unsafe fn phoneticGivenName(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "phoneticMiddleName", managed = "Other")]
    pub unsafe fn phoneticMiddleName(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "phoneticFamilyName", managed = "Other")]
    pub unsafe fn phoneticFamilyName(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "phoneticOrganizationName", managed = "Other")]
    pub unsafe fn phoneticOrganizationName(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "note", managed = "Other")]
    pub unsafe fn note(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "imageData", managed = "Other")]
    pub unsafe fn imageData(&self) -> Option<Id<NSData>>;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "thumbnailImageData", managed = "Other")]
    pub unsafe fn thumbnailImageData(&self) -> Option<Id<NSData>>;

    #[objc2::method(sel = "imageDataAvailable")]
    pub unsafe fn imageDataAvailable(&self) -> bool;

    #[cfg(all(
        feature = "Contacts_CNLabeledValue",
        feature = "Contacts_CNPhoneNumber",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(sel = "phoneNumbers", managed = "Other")]
    pub unsafe fn phoneNumbers(&self) -> Id<NSArray<CNLabeledValue<CNPhoneNumber>>>;

    #[cfg(all(
        feature = "Contacts_CNLabeledValue",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "emailAddresses", managed = "Other")]
    pub unsafe fn emailAddresses(&self) -> Id<NSArray<CNLabeledValue<NSString>>>;

    #[cfg(all(
        feature = "Contacts_CNLabeledValue",
        feature = "Contacts_CNPostalAddress",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(sel = "postalAddresses", managed = "Other")]
    pub unsafe fn postalAddresses(&self) -> Id<NSArray<CNLabeledValue<CNPostalAddress>>>;

    #[cfg(all(
        feature = "Contacts_CNLabeledValue",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "urlAddresses", managed = "Other")]
    pub unsafe fn urlAddresses(&self) -> Id<NSArray<CNLabeledValue<NSString>>>;

    #[cfg(all(
        feature = "Contacts_CNContactRelation",
        feature = "Contacts_CNLabeledValue",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(sel = "contactRelations", managed = "Other")]
    pub unsafe fn contactRelations(&self) -> Id<NSArray<CNLabeledValue<CNContactRelation>>>;

    #[cfg(all(
        feature = "Contacts_CNLabeledValue",
        feature = "Contacts_CNSocialProfile",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(sel = "socialProfiles", managed = "Other")]
    pub unsafe fn socialProfiles(&self) -> Id<NSArray<CNLabeledValue<CNSocialProfile>>>;

    #[cfg(all(
        feature = "Contacts_CNInstantMessageAddress",
        feature = "Contacts_CNLabeledValue",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(sel = "instantMessageAddresses", managed = "Other")]
    pub unsafe fn instantMessageAddresses(
        &self,
    ) -> Id<NSArray<CNLabeledValue<CNInstantMessageAddress>>>;

    #[cfg(feature = "Foundation_NSDateComponents")]
    #[objc2::method(sel = "birthday", managed = "Other")]
    pub unsafe fn birthday(&self) -> Option<Id<NSDateComponents>>;

    #[cfg(feature = "Foundation_NSDateComponents")]
    #[objc2::method(sel = "nonGregorianBirthday", managed = "Other")]
    pub unsafe fn nonGregorianBirthday(&self) -> Option<Id<NSDateComponents>>;

    #[cfg(all(
        feature = "Contacts_CNLabeledValue",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSDateComponents"
    ))]
    #[objc2::method(sel = "dates", managed = "Other")]
    pub unsafe fn dates(&self) -> Id<NSArray<CNLabeledValue<NSDateComponents>>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "isKeyAvailable:")]
    pub unsafe fn isKeyAvailable(&self, key: &NSString) -> bool;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "areKeysAvailable:")]
    pub unsafe fn areKeysAvailable(
        &self,
        key_descriptors: &NSArray<ProtocolObject<dyn CNKeyDescriptor>>,
    ) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "localizedStringForKey:", managed = "Other")]
    pub unsafe fn localizedStringForKey(key: &NSString) -> Id<NSString>;

    #[objc2::method(sel = "comparatorForNameSortOrder:")]
    pub unsafe fn comparatorForNameSortOrder(sort_order: CNContactSortOrder) -> NSComparator;

    #[objc2::method(sel = "descriptorForAllComparatorKeys", managed = "Other")]
    pub unsafe fn descriptorForAllComparatorKeys() -> Id<ProtocolObject<dyn CNKeyDescriptor>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "isUnifiedWithContactWithIdentifier:")]
    pub unsafe fn isUnifiedWithContactWithIdentifier(&self, contact_identifier: &NSString) -> bool;
}

extern_static!(CNContactPropertyNotFetchedExceptionName: &'static NSString);

extern_static!(CNContactIdentifierKey: &'static NSString);

extern_static!(CNContactNamePrefixKey: &'static NSString);

extern_static!(CNContactGivenNameKey: &'static NSString);

extern_static!(CNContactMiddleNameKey: &'static NSString);

extern_static!(CNContactFamilyNameKey: &'static NSString);

extern_static!(CNContactPreviousFamilyNameKey: &'static NSString);

extern_static!(CNContactNameSuffixKey: &'static NSString);

extern_static!(CNContactNicknameKey: &'static NSString);

extern_static!(CNContactOrganizationNameKey: &'static NSString);

extern_static!(CNContactDepartmentNameKey: &'static NSString);

extern_static!(CNContactJobTitleKey: &'static NSString);

extern_static!(CNContactPhoneticGivenNameKey: &'static NSString);

extern_static!(CNContactPhoneticMiddleNameKey: &'static NSString);

extern_static!(CNContactPhoneticFamilyNameKey: &'static NSString);

extern_static!(CNContactPhoneticOrganizationNameKey: &'static NSString);

extern_static!(CNContactBirthdayKey: &'static NSString);

extern_static!(CNContactNonGregorianBirthdayKey: &'static NSString);

extern_static!(CNContactNoteKey: &'static NSString);

extern_static!(CNContactImageDataKey: &'static NSString);

extern_static!(CNContactThumbnailImageDataKey: &'static NSString);

extern_static!(CNContactImageDataAvailableKey: &'static NSString);

extern_static!(CNContactTypeKey: &'static NSString);

extern_static!(CNContactPhoneNumbersKey: &'static NSString);

extern_static!(CNContactEmailAddressesKey: &'static NSString);

extern_static!(CNContactPostalAddressesKey: &'static NSString);

extern_static!(CNContactDatesKey: &'static NSString);

extern_static!(CNContactUrlAddressesKey: &'static NSString);

extern_static!(CNContactRelationsKey: &'static NSString);

extern_static!(CNContactSocialProfilesKey: &'static NSString);

extern_static!(CNContactInstantMessageAddressesKey: &'static NSString);
