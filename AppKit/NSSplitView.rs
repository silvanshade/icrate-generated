//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

pub type NSSplitViewAutosaveName = NSString;

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSSplitViewDividerStyle {
    NSSplitViewDividerStyleThick = 1,
    NSSplitViewDividerStyleThin = 2,
    NSSplitViewDividerStylePaneSplitter = 3,
}

#[objc2::interface(
    unsafe super = NSView,
    unsafe inherits = [
        NSResponder,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSSplitView")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSSplitView;
}

#[cfg(feature = "AppKit_NSSplitView")]
unsafe impl NSAccessibility for NSSplitView {}

#[cfg(feature = "AppKit_NSSplitView")]
unsafe impl NSAccessibilityElementProtocol for NSSplitView {}

#[cfg(feature = "AppKit_NSSplitView")]
unsafe impl NSAnimatablePropertyContainer for NSSplitView {}

#[cfg(feature = "AppKit_NSSplitView")]
unsafe impl NSAppearanceCustomization for NSSplitView {}

#[cfg(feature = "AppKit_NSSplitView")]
unsafe impl NSCoding for NSSplitView {}

#[cfg(feature = "AppKit_NSSplitView")]
unsafe impl NSDraggingDestination for NSSplitView {}

#[cfg(feature = "AppKit_NSSplitView")]
unsafe impl NSObjectProtocol for NSSplitView {}

#[cfg(feature = "AppKit_NSSplitView")]
unsafe impl NSUserInterfaceItemIdentification for NSSplitView {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSSplitView")]
    pub type NSSplitView;

    #[objc2::method(sel = "isVertical")]
    pub unsafe fn isVertical(&self) -> bool;

    #[objc2::method(sel = "setVertical:")]
    pub unsafe fn setVertical(&self, vertical: bool);

    #[objc2::method(sel = "dividerStyle")]
    pub unsafe fn dividerStyle(&self) -> NSSplitViewDividerStyle;

    #[objc2::method(sel = "setDividerStyle:")]
    pub unsafe fn setDividerStyle(&self, divider_style: NSSplitViewDividerStyle);

    #[objc2::method(sel = "autosaveName", managed = "Other")]
    pub unsafe fn autosaveName(&self) -> Option<Id<NSSplitViewAutosaveName>>;

    #[objc2::method(sel = "setAutosaveName:")]
    pub unsafe fn setAutosaveName(&self, autosave_name: Option<&NSSplitViewAutosaveName>);

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn NSSplitViewDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(&self, delegate: Option<&ProtocolObject<dyn NSSplitViewDelegate>>);

    #[objc2::method(sel = "drawDividerInRect:")]
    pub unsafe fn drawDividerInRect(&self, rect: NSRect);

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "dividerColor", managed = "Other")]
    pub unsafe fn dividerColor(&self) -> Id<NSColor>;

    #[objc2::method(sel = "dividerThickness")]
    pub unsafe fn dividerThickness(&self) -> CGFloat;

    #[objc2::method(sel = "adjustSubviews")]
    pub unsafe fn adjustSubviews(&self);

    #[objc2::method(sel = "isSubviewCollapsed:")]
    pub unsafe fn isSubviewCollapsed(&self, subview: &NSView) -> bool;

    #[objc2::method(sel = "minPossiblePositionOfDividerAtIndex:")]
    pub unsafe fn minPossiblePositionOfDividerAtIndex(&self, divider_index: NSInteger) -> CGFloat;

    #[objc2::method(sel = "maxPossiblePositionOfDividerAtIndex:")]
    pub unsafe fn maxPossiblePositionOfDividerAtIndex(&self, divider_index: NSInteger) -> CGFloat;

    #[objc2::method(sel = "setPosition:ofDividerAtIndex:")]
    pub unsafe fn setPosition_ofDividerAtIndex(&self, position: CGFloat, divider_index: NSInteger);

    #[objc2::method(sel = "holdingPriorityForSubviewAtIndex:")]
    pub unsafe fn holdingPriorityForSubviewAtIndex(
        &self,
        subview_index: NSInteger,
    ) -> NSLayoutPriority;

    #[objc2::method(sel = "setHoldingPriority:forSubviewAtIndex:")]
    pub unsafe fn setHoldingPriority_forSubviewAtIndex(
        &self,
        priority: NSLayoutPriority,
        subview_index: NSInteger,
    );
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSSplitView")]
    pub type NSSplitView;

    #[objc2::method(sel = "arrangesAllSubviews")]
    pub unsafe fn arrangesAllSubviews(&self) -> bool;

    #[objc2::method(sel = "setArrangesAllSubviews:")]
    pub unsafe fn setArrangesAllSubviews(&self, arranges_all_subviews: bool);

    #[cfg(all(feature = "AppKit_NSView", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "arrangedSubviews", managed = "Other")]
    pub unsafe fn arrangedSubviews(&self) -> Id<NSArray<NSView>>;

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "addArrangedSubview:")]
    pub unsafe fn addArrangedSubview(&self, view: &NSView);

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "insertArrangedSubview:atIndex:")]
    pub unsafe fn insertArrangedSubview_atIndex(&self, view: &NSView, index: NSInteger);

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "removeArrangedSubview:")]
    pub unsafe fn removeArrangedSubview(&self, view: &NSView);
}

#[objc2::protocol]
pub unsafe trait NSSplitViewDelegate: NSObjectProtocol {
    #[cfg(all(feature = "AppKit_NSSplitView", feature = "AppKit_NSView"))]
    #[objc2::method(optional, sel = "splitView:canCollapseSubview:")]
    unsafe fn splitView_canCollapseSubview(
        &self,
        split_view: &NSSplitView,
        subview: &NSView,
    ) -> bool;

    #[cfg(all(feature = "AppKit_NSSplitView", feature = "AppKit_NSView"))]
    #[deprecated = "NSSplitView no longer supports collapsing sections via double-click. This delegate method is never called."]
    #[objc2::method(
        optional,
        sel = "splitView:shouldCollapseSubview:forDoubleClickOnDividerAtIndex:"
    )]
    unsafe fn splitView_shouldCollapseSubview_forDoubleClickOnDividerAtIndex(
        &self,
        split_view: &NSSplitView,
        subview: &NSView,
        divider_index: NSInteger,
    ) -> bool;

    #[cfg(feature = "AppKit_NSSplitView")]
    #[objc2::method(optional, sel = "splitView:constrainMinCoordinate:ofSubviewAt:")]
    unsafe fn splitView_constrainMinCoordinate_ofSubviewAt(
        &self,
        split_view: &NSSplitView,
        proposed_minimum_position: CGFloat,
        divider_index: NSInteger,
    ) -> CGFloat;

    #[cfg(feature = "AppKit_NSSplitView")]
    #[objc2::method(optional, sel = "splitView:constrainMaxCoordinate:ofSubviewAt:")]
    unsafe fn splitView_constrainMaxCoordinate_ofSubviewAt(
        &self,
        split_view: &NSSplitView,
        proposed_maximum_position: CGFloat,
        divider_index: NSInteger,
    ) -> CGFloat;

    #[cfg(feature = "AppKit_NSSplitView")]
    #[objc2::method(optional, sel = "splitView:constrainSplitPosition:ofSubviewAt:")]
    unsafe fn splitView_constrainSplitPosition_ofSubviewAt(
        &self,
        split_view: &NSSplitView,
        proposed_position: CGFloat,
        divider_index: NSInteger,
    ) -> CGFloat;

    #[cfg(feature = "AppKit_NSSplitView")]
    #[objc2::method(optional, sel = "splitView:resizeSubviewsWithOldSize:")]
    unsafe fn splitView_resizeSubviewsWithOldSize(
        &self,
        split_view: &NSSplitView,
        old_size: NSSize,
    );

    #[cfg(all(feature = "AppKit_NSSplitView", feature = "AppKit_NSView"))]
    #[objc2::method(optional, sel = "splitView:shouldAdjustSizeOfSubview:")]
    unsafe fn splitView_shouldAdjustSizeOfSubview(
        &self,
        split_view: &NSSplitView,
        view: &NSView,
    ) -> bool;

    #[cfg(feature = "AppKit_NSSplitView")]
    #[objc2::method(optional, sel = "splitView:shouldHideDividerAtIndex:")]
    unsafe fn splitView_shouldHideDividerAtIndex(
        &self,
        split_view: &NSSplitView,
        divider_index: NSInteger,
    ) -> bool;

    #[cfg(feature = "AppKit_NSSplitView")]
    #[objc2::method(
        optional,
        sel = "splitView:effectiveRect:forDrawnRect:ofDividerAtIndex:"
    )]
    unsafe fn splitView_effectiveRect_forDrawnRect_ofDividerAtIndex(
        &self,
        split_view: &NSSplitView,
        proposed_effective_rect: NSRect,
        drawn_rect: NSRect,
        divider_index: NSInteger,
    ) -> NSRect;

    #[cfg(feature = "AppKit_NSSplitView")]
    #[objc2::method(optional, sel = "splitView:additionalEffectiveRectOfDividerAtIndex:")]
    unsafe fn splitView_additionalEffectiveRectOfDividerAtIndex(
        &self,
        split_view: &NSSplitView,
        divider_index: NSInteger,
    ) -> NSRect;

    #[cfg(feature = "Foundation_NSNotification")]
    #[objc2::method(optional, sel = "splitViewWillResizeSubviews:")]
    unsafe fn splitViewWillResizeSubviews(&self, notification: &NSNotification);

    #[cfg(feature = "Foundation_NSNotification")]
    #[objc2::method(optional, sel = "splitViewDidResizeSubviews:")]
    unsafe fn splitViewDidResizeSubviews(&self, notification: &NSNotification);
}

extern_static!(NSSplitViewWillResizeSubviewsNotification: &'static NSNotificationName);

extern_static!(NSSplitViewDidResizeSubviewsNotification: &'static NSNotificationName);

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSSplitView")]
    pub type NSSplitView;

    #[deprecated]
    #[objc2::method(sel = "setIsPaneSplitter:")]
    pub unsafe fn setIsPaneSplitter(&self, flag: bool);

    #[deprecated]
    #[objc2::method(sel = "isPaneSplitter")]
    pub unsafe fn isPaneSplitter(&self) -> bool;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSView`
    #[cfg(feature = "AppKit_NSSplitView")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSSplitView")]
    pub type NSSplitView;

    #[objc2::method(sel = "initWithFrame:", managed = "Init")]
    pub unsafe fn initWithFrame(this: Option<Allocated<Self>>, frame_rect: NSRect) -> Id<Self>;
}
