//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTintConfiguration")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSTintConfiguration;
}

#[cfg(feature = "AppKit_NSTintConfiguration")]
unsafe impl NSCoding for NSTintConfiguration {}

#[cfg(feature = "AppKit_NSTintConfiguration")]
unsafe impl NSObjectProtocol for NSTintConfiguration {}

#[cfg(feature = "AppKit_NSTintConfiguration")]
unsafe impl NSSecureCoding for NSTintConfiguration {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTintConfiguration")]
    pub type NSTintConfiguration;

    #[objc2::method(sel = "defaultTintConfiguration", managed = "Other")]
    pub unsafe fn defaultTintConfiguration() -> Id<NSTintConfiguration>;

    #[objc2::method(sel = "monochromeTintConfiguration", managed = "Other")]
    pub unsafe fn monochromeTintConfiguration() -> Id<NSTintConfiguration>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "tintConfigurationWithPreferredColor:", managed = "Other")]
    pub unsafe fn tintConfigurationWithPreferredColor(color: &NSColor) -> Id<Self>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "tintConfigurationWithFixedColor:", managed = "Other")]
    pub unsafe fn tintConfigurationWithFixedColor(color: &NSColor) -> Id<Self>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "baseTintColor", managed = "Other")]
    pub unsafe fn baseTintColor(&self) -> Option<Id<NSColor>>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "equivalentContentTintColor", managed = "Other")]
    pub unsafe fn equivalentContentTintColor(&self) -> Option<Id<NSColor>>;

    #[objc2::method(sel = "adaptsToUserAccentColor")]
    pub unsafe fn adaptsToUserAccentColor(&self) -> bool;
}
