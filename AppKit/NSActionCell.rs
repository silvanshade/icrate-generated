//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSCell,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSActionCell")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSActionCell;
}

#[cfg(feature = "AppKit_NSActionCell")]
unsafe impl NSAccessibility for NSActionCell {}

#[cfg(feature = "AppKit_NSActionCell")]
unsafe impl NSAccessibilityElementProtocol for NSActionCell {}

#[cfg(feature = "AppKit_NSActionCell")]
unsafe impl NSCoding for NSActionCell {}

#[cfg(feature = "AppKit_NSActionCell")]
unsafe impl NSObjectProtocol for NSActionCell {}

#[cfg(feature = "AppKit_NSActionCell")]
unsafe impl NSUserInterfaceItemIdentification for NSActionCell {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSActionCell")]
    pub type NSActionCell;

    #[objc2::method(sel = "target", managed = "Other")]
    pub unsafe fn target(&self) -> Option<Id<Object>>;

    #[objc2::method(sel = "setTarget:")]
    pub unsafe fn setTarget(&self, target: Option<&Object>);

    #[objc2::method(sel = "action")]
    pub unsafe fn action(&self) -> Option<Sel>;

    #[objc2::method(sel = "setAction:")]
    pub unsafe fn setAction(&self, action: Option<Sel>);

    #[objc2::method(sel = "tag")]
    pub unsafe fn tag(&self) -> NSInteger;

    #[objc2::method(sel = "setTag:")]
    pub unsafe fn setTag(&self, tag: NSInteger);
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSCell`
    #[cfg(feature = "AppKit_NSActionCell")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSActionCell")]
    pub type NSActionCell;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initTextCell:", managed = "Init")]
    pub unsafe fn initTextCell(this: Option<Allocated<Self>>, string: &NSString) -> Id<Self>;

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "initImageCell:", managed = "Init")]
    pub unsafe fn initImageCell(this: Option<Allocated<Self>>, image: Option<&NSImage>)
        -> Id<Self>;
}
