//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[extern_enum]
#[underlying(c_uint)]
pub enum __anonymous__ {
    NSAttachmentCharacter = 0xFFFC,
}

#[objc2::protocol]
pub unsafe trait NSTextAttachmentContainer: NSObjectProtocol {
    #[cfg(all(feature = "AppKit_NSImage", feature = "AppKit_NSTextContainer"))]
    #[objc2::method(
        sel = "imageForBounds:textContainer:characterIndex:",
        managed = "Other"
    )]
    unsafe fn imageForBounds_textContainer_characterIndex(
        &self,
        image_bounds: CGRect,
        text_container: Option<&NSTextContainer>,
        char_index: NSUInteger,
    ) -> Option<Id<NSImage>>;

    #[cfg(feature = "AppKit_NSTextContainer")]
    #[objc2::method(
        sel = "attachmentBoundsForTextContainer:proposedLineFragment:glyphPosition:characterIndex:"
    )]
    unsafe fn attachmentBoundsForTextContainer_proposedLineFragment_glyphPosition_characterIndex(
        &self,
        text_container: Option<&NSTextContainer>,
        line_frag: CGRect,
        position: CGPoint,
        char_index: NSUInteger,
    ) -> CGRect;
}

#[objc2::protocol]
pub unsafe trait NSTextAttachmentLayout: NSObjectProtocol {
    #[cfg(all(
        feature = "AppKit_NSImage",
        feature = "AppKit_NSTextContainer",
        feature = "Foundation_NSDictionary"
    ))]
    #[objc2::method(
        sel = "imageForBounds:attributes:location:textContainer:",
        managed = "Other"
    )]
    unsafe fn imageForBounds_attributes_location_textContainer(
        &self,
        bounds: CGRect,
        attributes: &NSDictionary<NSAttributedStringKey, Object>,
        location: &ProtocolObject<dyn NSTextLocation>,
        text_container: Option<&NSTextContainer>,
    ) -> Option<Id<NSImage>>;

    #[cfg(all(
        feature = "AppKit_NSTextContainer",
        feature = "Foundation_NSDictionary"
    ))]
    #[objc2::method(
        sel = "attachmentBoundsForAttributes:location:textContainer:proposedLineFragment:position:"
    )]
    unsafe fn attachmentBoundsForAttributes_location_textContainer_proposedLineFragment_position(
        &self,
        attributes: &NSDictionary<NSAttributedStringKey, Object>,
        location: &ProtocolObject<dyn NSTextLocation>,
        text_container: Option<&NSTextContainer>,
        proposed_line_fragment: CGRect,
        position: CGPoint,
    ) -> CGRect;

    #[cfg(all(
        feature = "AppKit_NSTextAttachmentViewProvider",
        feature = "AppKit_NSTextContainer",
        feature = "AppKit_NSView"
    ))]
    #[objc2::method(
        sel = "viewProviderForParentView:location:textContainer:",
        managed = "Other"
    )]
    unsafe fn viewProviderForParentView_location_textContainer(
        &self,
        parent_view: Option<&NSView>,
        location: &ProtocolObject<dyn NSTextLocation>,
        text_container: Option<&NSTextContainer>,
    ) -> Option<Id<NSTextAttachmentViewProvider>>;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextAttachment")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSTextAttachment;
}

#[cfg(feature = "AppKit_NSTextAttachment")]
unsafe impl NSCoding for NSTextAttachment {}

#[cfg(feature = "AppKit_NSTextAttachment")]
unsafe impl NSObjectProtocol for NSTextAttachment {}

#[cfg(feature = "AppKit_NSTextAttachment")]
unsafe impl NSSecureCoding for NSTextAttachment {}

#[cfg(feature = "AppKit_NSTextAttachment")]
unsafe impl NSTextAttachmentContainer for NSTextAttachment {}

#[cfg(feature = "AppKit_NSTextAttachment")]
unsafe impl NSTextAttachmentLayout for NSTextAttachment {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextAttachment")]
    pub type NSTextAttachment;

    #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "initWithData:ofType:", managed = "Init")]
    pub unsafe fn initWithData_ofType(
        this: Option<Allocated<Self>>,
        content_data: Option<&NSData>,
        uti: Option<&NSString>,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSFileWrapper")]
    #[objc2::method(sel = "initWithFileWrapper:", managed = "Init")]
    pub unsafe fn initWithFileWrapper(
        this: Option<Allocated<Self>>,
        file_wrapper: Option<&NSFileWrapper>,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "contents", managed = "Other")]
    pub unsafe fn contents(&self) -> Option<Id<NSData>>;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "setContents:")]
    pub unsafe fn setContents(&self, contents: Option<&NSData>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "fileType", managed = "Other")]
    pub unsafe fn fileType(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setFileType:")]
    pub unsafe fn setFileType(&self, file_type: Option<&NSString>);

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "image", managed = "Other")]
    pub unsafe fn image(&self) -> Option<Id<NSImage>>;

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "setImage:")]
    pub unsafe fn setImage(&self, image: Option<&NSImage>);

    #[objc2::method(sel = "bounds")]
    pub unsafe fn bounds(&self) -> CGRect;

    #[objc2::method(sel = "setBounds:")]
    pub unsafe fn setBounds(&self, bounds: CGRect);

    #[cfg(feature = "Foundation_NSFileWrapper")]
    #[objc2::method(sel = "fileWrapper", managed = "Other")]
    pub unsafe fn fileWrapper(&self) -> Option<Id<NSFileWrapper>>;

    #[cfg(feature = "Foundation_NSFileWrapper")]
    #[objc2::method(sel = "setFileWrapper:")]
    pub unsafe fn setFileWrapper(&self, file_wrapper: Option<&NSFileWrapper>);

    #[objc2::method(sel = "attachmentCell", managed = "Other")]
    pub unsafe fn attachmentCell(
        &self,
    ) -> Option<Id<ProtocolObject<dyn NSTextAttachmentCellProtocol>>>;

    #[objc2::method(sel = "setAttachmentCell:")]
    pub unsafe fn setAttachmentCell(
        &self,
        attachment_cell: Option<&ProtocolObject<dyn NSTextAttachmentCellProtocol>>,
    );

    #[objc2::method(sel = "lineLayoutPadding")]
    pub unsafe fn lineLayoutPadding(&self) -> CGFloat;

    #[objc2::method(sel = "setLineLayoutPadding:")]
    pub unsafe fn setLineLayoutPadding(&self, line_layout_padding: CGFloat);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "textAttachmentViewProviderClassForFileType:")]
    pub unsafe fn textAttachmentViewProviderClassForFileType(
        file_type: &NSString,
    ) -> Option<&'static Class>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "registerTextAttachmentViewProviderClass:forFileType:")]
    pub unsafe fn registerTextAttachmentViewProviderClass_forFileType(
        text_attachment_view_provider_class: &Class,
        file_type: &NSString,
    );

    #[objc2::method(sel = "allowsTextAttachmentView")]
    pub unsafe fn allowsTextAttachmentView(&self) -> bool;

    #[objc2::method(sel = "setAllowsTextAttachmentView:")]
    pub unsafe fn setAllowsTextAttachmentView(&self, allows_text_attachment_view: bool);

    #[objc2::method(sel = "usesTextAttachmentView")]
    pub unsafe fn usesTextAttachmentView(&self) -> bool;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSAttributedString")]
    pub type NSAttributedString;

    #[cfg(feature = "AppKit_NSTextAttachment")]
    #[objc2::method(sel = "attributedStringWithAttachment:", managed = "Other")]
    pub unsafe fn attributedStringWithAttachment(
        attachment: &NSTextAttachment,
    ) -> Id<NSAttributedString>;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextAttachmentViewProvider")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSTextAttachmentViewProvider;
}

#[cfg(feature = "AppKit_NSTextAttachmentViewProvider")]
unsafe impl NSObjectProtocol for NSTextAttachmentViewProvider {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextAttachmentViewProvider")]
    pub type NSTextAttachmentViewProvider;

    #[cfg(all(
        feature = "AppKit_NSTextAttachment",
        feature = "AppKit_NSTextLayoutManager",
        feature = "AppKit_NSView"
    ))]
    #[objc2::method(
        sel = "initWithTextAttachment:parentView:textLayoutManager:location:",
        managed = "Init"
    )]
    pub unsafe fn initWithTextAttachment_parentView_textLayoutManager_location(
        this: Option<Allocated<Self>>,
        text_attachment: &NSTextAttachment,
        parent_view: Option<&NSView>,
        text_layout_manager: Option<&NSTextLayoutManager>,
        location: &ProtocolObject<dyn NSTextLocation>,
    ) -> Id<Self>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;

    #[cfg(feature = "AppKit_NSTextAttachment")]
    #[objc2::method(sel = "textAttachment", managed = "Other")]
    pub unsafe fn textAttachment(&self) -> Option<Id<NSTextAttachment>>;

    #[cfg(feature = "AppKit_NSTextLayoutManager")]
    #[objc2::method(sel = "textLayoutManager", managed = "Other")]
    pub unsafe fn textLayoutManager(&self) -> Option<Id<NSTextLayoutManager>>;

    #[objc2::method(sel = "location", managed = "Other")]
    pub unsafe fn location(&self) -> Id<ProtocolObject<dyn NSTextLocation>>;

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "view", managed = "Other")]
    pub unsafe fn view(&self) -> Option<Id<NSView>>;

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "setView:")]
    pub unsafe fn setView(&self, view: Option<&NSView>);

    #[objc2::method(sel = "loadView")]
    pub unsafe fn loadView(&self);

    #[objc2::method(sel = "tracksTextAttachmentViewBounds")]
    pub unsafe fn tracksTextAttachmentViewBounds(&self) -> bool;

    #[objc2::method(sel = "setTracksTextAttachmentViewBounds:")]
    pub unsafe fn setTracksTextAttachmentViewBounds(
        &self,
        tracks_text_attachment_view_bounds: bool,
    );

    #[cfg(all(
        feature = "AppKit_NSTextContainer",
        feature = "Foundation_NSDictionary"
    ))]
    #[objc2::method(
        sel = "attachmentBoundsForAttributes:location:textContainer:proposedLineFragment:position:"
    )]
    pub unsafe fn attachmentBoundsForAttributes_location_textContainer_proposedLineFragment_position(
        &self,
        attributes: &NSDictionary<NSAttributedStringKey, Object>,
        location: &ProtocolObject<dyn NSTextLocation>,
        text_container: Option<&NSTextContainer>,
        proposed_line_fragment: CGRect,
        position: CGPoint,
    ) -> CGRect;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSMutableAttributedString")]
    pub type NSMutableAttributedString;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "updateAttachmentsFromPath:")]
    pub unsafe fn updateAttachmentsFromPath(&self, path: &NSString);
}
