//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSTextSelectionNavigationDirection {
    NSTextSelectionNavigationDirectionForward = 0,
    NSTextSelectionNavigationDirectionBackward = 1,
    NSTextSelectionNavigationDirectionRight = 2,
    NSTextSelectionNavigationDirectionLeft = 3,
    NSTextSelectionNavigationDirectionUp = 4,
    NSTextSelectionNavigationDirectionDown = 5,
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSTextSelectionNavigationDestination {
    NSTextSelectionNavigationDestinationCharacter = 0,
    NSTextSelectionNavigationDestinationWord = 1,
    NSTextSelectionNavigationDestinationLine = 2,
    NSTextSelectionNavigationDestinationSentence = 3,
    NSTextSelectionNavigationDestinationParagraph = 4,
    NSTextSelectionNavigationDestinationContainer = 5,
    NSTextSelectionNavigationDestinationDocument = 6,
}

#[ns_options]
#[underlying(NSUInteger)]
pub enum NSTextSelectionNavigationModifier {
    NSTextSelectionNavigationModifierExtend = 1 << 0,
    NSTextSelectionNavigationModifierVisual = 1 << 1,
    NSTextSelectionNavigationModifierMultiple = 1 << 2,
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSTextSelectionNavigationWritingDirection {
    NSTextSelectionNavigationWritingDirectionLeftToRight = 0,
    NSTextSelectionNavigationWritingDirectionRightToLeft = 1,
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSTextSelectionNavigationLayoutOrientation {
    NSTextSelectionNavigationLayoutOrientationHorizontal = 0,
    NSTextSelectionNavigationLayoutOrientationVertical = 1,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextSelectionNavigation")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSTextSelectionNavigation;
}

#[cfg(feature = "AppKit_NSTextSelectionNavigation")]
unsafe impl NSObjectProtocol for NSTextSelectionNavigation {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextSelectionNavigation")]
    pub type NSTextSelectionNavigation;

    #[objc2::method(sel = "initWithDataSource:", managed = "Init")]
    pub unsafe fn initWithDataSource(
        this: Option<Allocated<Self>>,
        data_source: &ProtocolObject<dyn NSTextSelectionDataSource>,
    ) -> Id<Self>;

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "textSelectionDataSource", managed = "Other")]
    pub unsafe fn textSelectionDataSource(
        &self,
    ) -> Option<Id<ProtocolObject<dyn NSTextSelectionDataSource>>>;

    #[objc2::method(sel = "allowsNonContiguousRanges")]
    pub unsafe fn allowsNonContiguousRanges(&self) -> bool;

    #[objc2::method(sel = "setAllowsNonContiguousRanges:")]
    pub unsafe fn setAllowsNonContiguousRanges(&self, allows_non_contiguous_ranges: bool);

    #[objc2::method(sel = "rotatesCoordinateSystemForLayoutOrientation")]
    pub unsafe fn rotatesCoordinateSystemForLayoutOrientation(&self) -> bool;

    #[objc2::method(sel = "setRotatesCoordinateSystemForLayoutOrientation:")]
    pub unsafe fn setRotatesCoordinateSystemForLayoutOrientation(
        &self,
        rotates_coordinate_system_for_layout_orientation: bool,
    );

    #[objc2::method(sel = "flushLayoutCache")]
    pub unsafe fn flushLayoutCache(&self);

    #[cfg(feature = "AppKit_NSTextSelection")]
    #[objc2::method(
        sel = "destinationSelectionForTextSelection:direction:destination:extending:confined:",
        managed = "Other"
    )]
    pub unsafe fn destinationSelectionForTextSelection_direction_destination_extending_confined(
        &self,
        text_selection: &NSTextSelection,
        direction: NSTextSelectionNavigationDirection,
        destination: NSTextSelectionNavigationDestination,
        extending: bool,
        confined: bool,
    ) -> Option<Id<NSTextSelection>>;

    #[cfg(all(feature = "AppKit_NSTextSelection", feature = "Foundation_NSArray"))]
    #[objc2::method(
        sel = "textSelectionsInteractingAtPoint:inContainerAtLocation:anchors:modifiers:selecting:bounds:",
        managed = "Other"
    )]
    pub unsafe fn textSelectionsInteractingAtPoint_inContainerAtLocation_anchors_modifiers_selecting_bounds(
        &self,
        point: CGPoint,
        container_location: &ProtocolObject<dyn NSTextLocation>,
        anchors: &NSArray<NSTextSelection>,
        modifiers: NSTextSelectionNavigationModifier,
        selecting: bool,
        bounds: CGRect,
    ) -> Id<NSArray<NSTextSelection>>;

    #[cfg(feature = "AppKit_NSTextSelection")]
    #[objc2::method(
        sel = "textSelectionForSelectionGranularity:enclosingTextSelection:",
        managed = "Other"
    )]
    pub unsafe fn textSelectionForSelectionGranularity_enclosingTextSelection(
        &self,
        selection_granularity: NSTextSelectionGranularity,
        text_selection: &NSTextSelection,
    ) -> Id<NSTextSelection>;

    #[cfg(feature = "AppKit_NSTextSelection")]
    #[objc2::method(
        sel = "textSelectionForSelectionGranularity:enclosingPoint:inContainerAtLocation:",
        managed = "Other"
    )]
    pub unsafe fn textSelectionForSelectionGranularity_enclosingPoint_inContainerAtLocation(
        &self,
        selection_granularity: NSTextSelectionGranularity,
        point: CGPoint,
        location: &ProtocolObject<dyn NSTextLocation>,
    ) -> Option<Id<NSTextSelection>>;

    #[cfg(feature = "AppKit_NSTextSelection")]
    #[objc2::method(
        sel = "resolvedInsertionLocationForTextSelection:writingDirection:",
        managed = "Other"
    )]
    pub unsafe fn resolvedInsertionLocationForTextSelection_writingDirection(
        &self,
        text_selection: &NSTextSelection,
        writing_direction: NSTextSelectionNavigationWritingDirection,
    ) -> Option<Id<ProtocolObject<dyn NSTextLocation>>>;

    #[cfg(all(
        feature = "AppKit_NSTextRange",
        feature = "AppKit_NSTextSelection",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(
        sel = "deletionRangesForTextSelection:direction:destination:allowsDecomposition:",
        managed = "Other"
    )]
    pub unsafe fn deletionRangesForTextSelection_direction_destination_allowsDecomposition(
        &self,
        text_selection: &NSTextSelection,
        direction: NSTextSelectionNavigationDirection,
        destination: NSTextSelectionNavigationDestination,
        allows_decomposition: bool,
    ) -> Id<NSArray<NSTextRange>>;
}

#[objc2::protocol]
pub unsafe trait NSTextSelectionDataSource: NSObjectProtocol {
    #[cfg(feature = "AppKit_NSTextRange")]
    #[objc2::method(sel = "documentRange", managed = "Other")]
    unsafe fn documentRange(&self) -> Id<NSTextRange>;

    #[cfg(all(feature = "AppKit_NSTextRange", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "enumerateSubstringsFromLocation:options:usingBlock:")]
    unsafe fn enumerateSubstringsFromLocation_options_usingBlock(
        &self,
        location: &ProtocolObject<dyn NSTextLocation>,
        options: NSStringEnumerationOptions,
        block: &Block<
            (
                *mut NSString,
                NonNull<NSTextRange>,
                *mut NSTextRange,
                NonNull<Bool>,
            ),
            (),
        >,
    );

    #[cfg(feature = "AppKit_NSTextRange")]
    #[objc2::method(
        sel = "textRangeForSelectionGranularity:enclosingLocation:",
        managed = "Other"
    )]
    unsafe fn textRangeForSelectionGranularity_enclosingLocation(
        &self,
        selection_granularity: NSTextSelectionGranularity,
        location: &ProtocolObject<dyn NSTextLocation>,
    ) -> Option<Id<NSTextRange>>;

    #[objc2::method(sel = "locationFromLocation:withOffset:", managed = "Other")]
    unsafe fn locationFromLocation_withOffset(
        &self,
        location: &ProtocolObject<dyn NSTextLocation>,
        offset: NSInteger,
    ) -> Option<Id<ProtocolObject<dyn NSTextLocation>>>;

    #[objc2::method(sel = "offsetFromLocation:toLocation:")]
    unsafe fn offsetFromLocation_toLocation(
        &self,
        from: &ProtocolObject<dyn NSTextLocation>,
        to: &ProtocolObject<dyn NSTextLocation>,
    ) -> NSInteger;

    #[objc2::method(sel = "baseWritingDirectionAtLocation:")]
    unsafe fn baseWritingDirectionAtLocation(
        &self,
        location: &ProtocolObject<dyn NSTextLocation>,
    ) -> NSTextSelectionNavigationWritingDirection;

    #[objc2::method(sel = "enumerateCaretOffsetsInLineFragmentAtLocation:usingBlock:")]
    unsafe fn enumerateCaretOffsetsInLineFragmentAtLocation_usingBlock(
        &self,
        location: &ProtocolObject<dyn NSTextLocation>,
        block: &Block<
            (
                CGFloat,
                NonNull<ProtocolObject<dyn NSTextLocation>>,
                Bool,
                NonNull<Bool>,
            ),
            (),
        >,
    );

    #[cfg(feature = "AppKit_NSTextRange")]
    #[objc2::method(
        sel = "lineFragmentRangeForPoint:inContainerAtLocation:",
        managed = "Other"
    )]
    unsafe fn lineFragmentRangeForPoint_inContainerAtLocation(
        &self,
        point: CGPoint,
        location: &ProtocolObject<dyn NSTextLocation>,
    ) -> Option<Id<NSTextRange>>;

    #[objc2::method(
        optional,
        sel = "enumerateContainerBoundariesFromLocation:reverse:usingBlock:"
    )]
    unsafe fn enumerateContainerBoundariesFromLocation_reverse_usingBlock(
        &self,
        location: &ProtocolObject<dyn NSTextLocation>,
        reverse: bool,
        block: &Block<(NonNull<ProtocolObject<dyn NSTextLocation>>, NonNull<Bool>), ()>,
    );

    #[objc2::method(optional, sel = "textLayoutOrientationAtLocation:")]
    unsafe fn textLayoutOrientationAtLocation(
        &self,
        location: &ProtocolObject<dyn NSTextLocation>,
    ) -> NSTextSelectionNavigationLayoutOrientation;
}
