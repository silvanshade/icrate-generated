//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_options]
#[underlying(NSUInteger)]
pub enum NSTextListOptions {
    NSTextListPrependEnclosingMarker = 1 << 0,
}

typed_extensible_enum!(
    pub type NSTextListMarkerFormat = NSString;
);

extern_static!(NSTextListMarkerBox: &'static NSTextListMarkerFormat);

extern_static!(NSTextListMarkerCheck: &'static NSTextListMarkerFormat);

extern_static!(NSTextListMarkerCircle: &'static NSTextListMarkerFormat);

extern_static!(NSTextListMarkerDiamond: &'static NSTextListMarkerFormat);

extern_static!(NSTextListMarkerDisc: &'static NSTextListMarkerFormat);

extern_static!(NSTextListMarkerHyphen: &'static NSTextListMarkerFormat);

extern_static!(NSTextListMarkerSquare: &'static NSTextListMarkerFormat);

extern_static!(NSTextListMarkerLowercaseHexadecimal: &'static NSTextListMarkerFormat);

extern_static!(NSTextListMarkerUppercaseHexadecimal: &'static NSTextListMarkerFormat);

extern_static!(NSTextListMarkerOctal: &'static NSTextListMarkerFormat);

extern_static!(NSTextListMarkerLowercaseAlpha: &'static NSTextListMarkerFormat);

extern_static!(NSTextListMarkerUppercaseAlpha: &'static NSTextListMarkerFormat);

extern_static!(NSTextListMarkerLowercaseLatin: &'static NSTextListMarkerFormat);

extern_static!(NSTextListMarkerUppercaseLatin: &'static NSTextListMarkerFormat);

extern_static!(NSTextListMarkerLowercaseRoman: &'static NSTextListMarkerFormat);

extern_static!(NSTextListMarkerUppercaseRoman: &'static NSTextListMarkerFormat);

extern_static!(NSTextListMarkerDecimal: &'static NSTextListMarkerFormat);

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextList")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSTextList;
}

#[cfg(feature = "AppKit_NSTextList")]
unsafe impl NSCoding for NSTextList {}

#[cfg(feature = "AppKit_NSTextList")]
unsafe impl NSObjectProtocol for NSTextList {}

#[cfg(feature = "AppKit_NSTextList")]
unsafe impl NSSecureCoding for NSTextList {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextList")]
    pub type NSTextList;

    #[objc2::method(
        sel = "initWithMarkerFormat:options:startingItemNumber:",
        managed = "Init"
    )]
    pub unsafe fn initWithMarkerFormat_options_startingItemNumber(
        this: Option<Allocated<Self>>,
        marker_format: &NSTextListMarkerFormat,
        options: NSTextListOptions,
        starting_item_number: NSInteger,
    ) -> Id<Self>;

    #[objc2::method(sel = "initWithMarkerFormat:options:", managed = "Init")]
    pub unsafe fn initWithMarkerFormat_options(
        this: Option<Allocated<Self>>,
        marker_format: &NSTextListMarkerFormat,
        options: NSUInteger,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, coder: &NSCoder)
        -> Option<Id<Self>>;

    #[objc2::method(sel = "markerFormat", managed = "Other")]
    pub unsafe fn markerFormat(&self) -> Id<NSTextListMarkerFormat>;

    #[objc2::method(sel = "listOptions")]
    pub unsafe fn listOptions(&self) -> NSTextListOptions;

    #[objc2::method(sel = "startingItemNumber")]
    pub unsafe fn startingItemNumber(&self) -> NSInteger;

    #[objc2::method(sel = "setStartingItemNumber:")]
    pub unsafe fn setStartingItemNumber(&self, starting_item_number: NSInteger);

    #[objc2::method(sel = "isOrdered")]
    pub unsafe fn isOrdered(&self) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "markerForItemNumber:", managed = "Other")]
    pub unsafe fn markerForItemNumber(&self, item_number: NSInteger) -> Id<NSString>;
}
