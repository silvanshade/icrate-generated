//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_options]
#[underlying(NSUInteger)]
pub enum NSGradientDrawingOptions {
    NSGradientDrawsBeforeStartingLocation = 1 << 0,
    NSGradientDrawsAfterEndingLocation = 1 << 1,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSGradient")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSGradient;
}

#[cfg(feature = "AppKit_NSGradient")]
unsafe impl NSCoding for NSGradient {}

#[cfg(feature = "AppKit_NSGradient")]
unsafe impl NSObjectProtocol for NSGradient {}

#[cfg(feature = "AppKit_NSGradient")]
unsafe impl NSSecureCoding for NSGradient {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSGradient")]
    pub type NSGradient;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "initWithStartingColor:endingColor:", managed = "Init")]
    pub unsafe fn initWithStartingColor_endingColor(
        this: Option<Allocated<Self>>,
        starting_color: &NSColor,
        ending_color: &NSColor,
    ) -> Option<Id<Self>>;

    #[cfg(all(feature = "AppKit_NSColor", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "initWithColors:", managed = "Init")]
    pub unsafe fn initWithColors(
        this: Option<Allocated<Self>>,
        color_array: &NSArray<NSColor>,
    ) -> Option<Id<Self>>;

    #[cfg(all(
        feature = "AppKit_NSColor",
        feature = "AppKit_NSColorSpace",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(sel = "initWithColors:atLocations:colorSpace:", managed = "Init")]
    pub unsafe fn initWithColors_atLocations_colorSpace(
        this: Option<Allocated<Self>>,
        color_array: &NSArray<NSColor>,
        locations: *mut CGFloat,
        color_space: &NSColorSpace,
    ) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, coder: &NSCoder) -> Id<Self>;

    #[objc2::method(sel = "drawFromPoint:toPoint:options:")]
    pub unsafe fn drawFromPoint_toPoint_options(
        &self,
        starting_point: NSPoint,
        ending_point: NSPoint,
        options: NSGradientDrawingOptions,
    );

    #[objc2::method(sel = "drawInRect:angle:")]
    pub unsafe fn drawInRect_angle(&self, rect: NSRect, angle: CGFloat);

    #[cfg(feature = "AppKit_NSBezierPath")]
    #[objc2::method(sel = "drawInBezierPath:angle:")]
    pub unsafe fn drawInBezierPath_angle(&self, path: &NSBezierPath, angle: CGFloat);

    #[objc2::method(sel = "drawFromCenter:radius:toCenter:radius:options:")]
    pub unsafe fn drawFromCenter_radius_toCenter_radius_options(
        &self,
        start_center: NSPoint,
        start_radius: CGFloat,
        end_center: NSPoint,
        end_radius: CGFloat,
        options: NSGradientDrawingOptions,
    );

    #[objc2::method(sel = "drawInRect:relativeCenterPosition:")]
    pub unsafe fn drawInRect_relativeCenterPosition(
        &self,
        rect: NSRect,
        relative_center_position: NSPoint,
    );

    #[cfg(feature = "AppKit_NSBezierPath")]
    #[objc2::method(sel = "drawInBezierPath:relativeCenterPosition:")]
    pub unsafe fn drawInBezierPath_relativeCenterPosition(
        &self,
        path: &NSBezierPath,
        relative_center_position: NSPoint,
    );

    #[cfg(feature = "AppKit_NSColorSpace")]
    #[objc2::method(sel = "colorSpace", managed = "Other")]
    pub unsafe fn colorSpace(&self) -> Id<NSColorSpace>;

    #[objc2::method(sel = "numberOfColorStops")]
    pub unsafe fn numberOfColorStops(&self) -> NSInteger;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "getColor:location:atIndex:")]
    pub unsafe fn getColor_location_atIndex(
        &self,
        color: Option<&mut Id<NSColor>>,
        location: *mut CGFloat,
        index: NSInteger,
    );

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "interpolatedColorAtLocation:", managed = "Other")]
    pub unsafe fn interpolatedColorAtLocation(&self, location: CGFloat) -> Id<NSColor>;
}
