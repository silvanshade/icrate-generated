//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSScrubberLayoutAttributes")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSScrubberLayoutAttributes;
}

#[cfg(feature = "AppKit_NSScrubberLayoutAttributes")]
unsafe impl NSObjectProtocol for NSScrubberLayoutAttributes {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSScrubberLayoutAttributes")]
    pub type NSScrubberLayoutAttributes;

    #[objc2::method(sel = "itemIndex")]
    pub unsafe fn itemIndex(&self) -> NSInteger;

    #[objc2::method(sel = "setItemIndex:")]
    pub unsafe fn setItemIndex(&self, item_index: NSInteger);

    #[objc2::method(sel = "frame")]
    pub unsafe fn frame(&self) -> NSRect;

    #[objc2::method(sel = "setFrame:")]
    pub unsafe fn setFrame(&self, frame: NSRect);

    #[objc2::method(sel = "alpha")]
    pub unsafe fn alpha(&self) -> CGFloat;

    #[objc2::method(sel = "setAlpha:")]
    pub unsafe fn setAlpha(&self, alpha: CGFloat);

    #[objc2::method(sel = "layoutAttributesForItemAtIndex:", managed = "Other")]
    pub unsafe fn layoutAttributesForItemAtIndex(index: NSInteger) -> Id<Self>;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSScrubberLayout")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSScrubberLayout;
}

#[cfg(feature = "AppKit_NSScrubberLayout")]
unsafe impl NSCoding for NSScrubberLayout {}

#[cfg(feature = "AppKit_NSScrubberLayout")]
unsafe impl NSObjectProtocol for NSScrubberLayout {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSScrubberLayout")]
    pub type NSScrubberLayout;

    #[objc2::method(sel = "layoutAttributesClass")]
    pub unsafe fn layoutAttributesClass() -> &'static Class;

    #[cfg(feature = "AppKit_NSScrubber")]
    #[objc2::method(sel = "scrubber", managed = "Other")]
    pub unsafe fn scrubber(&self) -> Option<Id<NSScrubber>>;

    #[objc2::method(sel = "visibleRect")]
    pub unsafe fn visibleRect(&self) -> NSRect;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, coder: &NSCoder) -> Id<Self>;

    #[objc2::method(sel = "invalidateLayout")]
    pub unsafe fn invalidateLayout(&self);

    #[objc2::method(sel = "prepareLayout")]
    pub unsafe fn prepareLayout(&self);

    #[objc2::method(sel = "scrubberContentSize")]
    pub unsafe fn scrubberContentSize(&self) -> NSSize;

    #[cfg(feature = "AppKit_NSScrubberLayoutAttributes")]
    #[objc2::method(sel = "layoutAttributesForItemAtIndex:", managed = "Other")]
    pub unsafe fn layoutAttributesForItemAtIndex(
        &self,
        index: NSInteger,
    ) -> Option<Id<NSScrubberLayoutAttributes>>;

    #[cfg(all(
        feature = "AppKit_NSScrubberLayoutAttributes",
        feature = "Foundation_NSSet"
    ))]
    #[objc2::method(sel = "layoutAttributesForItemsInRect:", managed = "Other")]
    pub unsafe fn layoutAttributesForItemsInRect(
        &self,
        rect: NSRect,
    ) -> Id<NSSet<NSScrubberLayoutAttributes>>;

    #[objc2::method(sel = "shouldInvalidateLayoutForSelectionChange")]
    pub unsafe fn shouldInvalidateLayoutForSelectionChange(&self) -> bool;

    #[objc2::method(sel = "shouldInvalidateLayoutForHighlightChange")]
    pub unsafe fn shouldInvalidateLayoutForHighlightChange(&self) -> bool;

    #[objc2::method(sel = "shouldInvalidateLayoutForChangeFromVisibleRect:toVisibleRect:")]
    pub unsafe fn shouldInvalidateLayoutForChangeFromVisibleRect_toVisibleRect(
        &self,
        from_visible_rect: NSRect,
        to_visible_rect: NSRect,
    ) -> bool;

    #[objc2::method(sel = "automaticallyMirrorsInRightToLeftLayout")]
    pub unsafe fn automaticallyMirrorsInRightToLeftLayout(&self) -> bool;
}

#[objc2::protocol]
pub unsafe trait NSScrubberFlowLayoutDelegate: NSScrubberDelegate {
    #[cfg(all(feature = "AppKit_NSScrubber", feature = "AppKit_NSScrubberFlowLayout"))]
    #[objc2::method(optional, sel = "scrubber:layout:sizeForItemAtIndex:")]
    unsafe fn scrubber_layout_sizeForItemAtIndex(
        &self,
        scrubber: &NSScrubber,
        layout: &NSScrubberFlowLayout,
        item_index: NSInteger,
    ) -> NSSize;
}

#[objc2::interface(
    unsafe super = NSScrubberLayout,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSScrubberFlowLayout")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSScrubberFlowLayout;
}

#[cfg(feature = "AppKit_NSScrubberFlowLayout")]
unsafe impl NSCoding for NSScrubberFlowLayout {}

#[cfg(feature = "AppKit_NSScrubberFlowLayout")]
unsafe impl NSObjectProtocol for NSScrubberFlowLayout {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSScrubberFlowLayout")]
    pub type NSScrubberFlowLayout;

    #[objc2::method(sel = "itemSpacing")]
    pub unsafe fn itemSpacing(&self) -> CGFloat;

    #[objc2::method(sel = "setItemSpacing:")]
    pub unsafe fn setItemSpacing(&self, item_spacing: CGFloat);

    #[objc2::method(sel = "itemSize")]
    pub unsafe fn itemSize(&self) -> NSSize;

    #[objc2::method(sel = "setItemSize:")]
    pub unsafe fn setItemSize(&self, item_size: NSSize);

    #[cfg(feature = "Foundation_NSIndexSet")]
    #[objc2::method(sel = "invalidateLayoutForItemsAtIndexes:")]
    pub unsafe fn invalidateLayoutForItemsAtIndexes(&self, invalid_item_indexes: &NSIndexSet);
}

#[objc2::interface(
    unsafe super = NSScrubberLayout,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSScrubberProportionalLayout")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSScrubberProportionalLayout;
}

#[cfg(feature = "AppKit_NSScrubberProportionalLayout")]
unsafe impl NSCoding for NSScrubberProportionalLayout {}

#[cfg(feature = "AppKit_NSScrubberProportionalLayout")]
unsafe impl NSObjectProtocol for NSScrubberProportionalLayout {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSScrubberProportionalLayout")]
    pub type NSScrubberProportionalLayout;

    #[objc2::method(sel = "numberOfVisibleItems")]
    pub unsafe fn numberOfVisibleItems(&self) -> NSInteger;

    #[objc2::method(sel = "setNumberOfVisibleItems:")]
    pub unsafe fn setNumberOfVisibleItems(&self, number_of_visible_items: NSInteger);

    #[objc2::method(sel = "initWithNumberOfVisibleItems:", managed = "Init")]
    pub unsafe fn initWithNumberOfVisibleItems(
        this: Option<Allocated<Self>>,
        number_of_visible_items: NSInteger,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, coder: &NSCoder) -> Id<Self>;
}
