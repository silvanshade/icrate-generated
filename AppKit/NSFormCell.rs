//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSActionCell,
    unsafe inherits = [
        NSCell,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSFormCell")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSFormCell;
}

#[cfg(feature = "AppKit_NSFormCell")]
unsafe impl NSAccessibility for NSFormCell {}

#[cfg(feature = "AppKit_NSFormCell")]
unsafe impl NSAccessibilityElementProtocol for NSFormCell {}

#[cfg(feature = "AppKit_NSFormCell")]
unsafe impl NSCoding for NSFormCell {}

#[cfg(feature = "AppKit_NSFormCell")]
unsafe impl NSObjectProtocol for NSFormCell {}

#[cfg(feature = "AppKit_NSFormCell")]
unsafe impl NSUserInterfaceItemIdentification for NSFormCell {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSFormCell")]
    pub type NSFormCell;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initTextCell:", managed = "Init")]
    pub unsafe fn initTextCell(
        this: Option<Allocated<Self>>,
        string: Option<&NSString>,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, coder: &NSCoder) -> Id<Self>;

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "initImageCell:", managed = "Init")]
    pub unsafe fn initImageCell(this: Option<Allocated<Self>>, image: Option<&NSImage>)
        -> Id<Self>;

    #[objc2::method(sel = "titleWidth:")]
    pub unsafe fn titleWidth_(&self, size: NSSize) -> CGFloat;

    #[objc2::method(sel = "titleWidth")]
    pub unsafe fn titleWidth(&self) -> CGFloat;

    #[objc2::method(sel = "setTitleWidth:")]
    pub unsafe fn setTitleWidth(&self, title_width: CGFloat);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "title", managed = "Other")]
    pub unsafe fn title(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setTitle:")]
    pub unsafe fn setTitle(&self, title: &NSString);

    #[cfg(feature = "AppKit_NSFont")]
    #[objc2::method(sel = "titleFont", managed = "Other")]
    pub unsafe fn titleFont(&self) -> Id<NSFont>;

    #[cfg(feature = "AppKit_NSFont")]
    #[objc2::method(sel = "setTitleFont:")]
    pub unsafe fn setTitleFont(&self, title_font: &NSFont);

    #[objc2::method(sel = "isOpaque")]
    pub unsafe fn isOpaque(&self) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "placeholderString", managed = "Other")]
    pub unsafe fn placeholderString(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setPlaceholderString:")]
    pub unsafe fn setPlaceholderString(&self, placeholder_string: Option<&NSString>);

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "placeholderAttributedString", managed = "Other")]
    pub unsafe fn placeholderAttributedString(&self) -> Option<Id<NSAttributedString>>;

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "setPlaceholderAttributedString:")]
    pub unsafe fn setPlaceholderAttributedString(
        &self,
        placeholder_attributed_string: Option<&NSAttributedString>,
    );

    #[objc2::method(sel = "titleAlignment")]
    pub unsafe fn titleAlignment(&self) -> NSTextAlignment;

    #[objc2::method(sel = "setTitleAlignment:")]
    pub unsafe fn setTitleAlignment(&self, title_alignment: NSTextAlignment);

    #[objc2::method(sel = "titleBaseWritingDirection")]
    pub unsafe fn titleBaseWritingDirection(&self) -> NSWritingDirection;

    #[objc2::method(sel = "setTitleBaseWritingDirection:")]
    pub unsafe fn setTitleBaseWritingDirection(
        &self,
        title_base_writing_direction: NSWritingDirection,
    );

    #[objc2::method(sel = "preferredTextFieldWidth")]
    pub unsafe fn preferredTextFieldWidth(&self) -> CGFloat;

    #[objc2::method(sel = "setPreferredTextFieldWidth:")]
    pub unsafe fn setPreferredTextFieldWidth(&self, preferred_text_field_width: CGFloat);
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSFormCell")]
    pub type NSFormCell;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "setTitleWithMnemonic:")]
    pub unsafe fn setTitleWithMnemonic(&self, string_with_ampersand: Option<&NSString>);
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSFormCell")]
    pub type NSFormCell;

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "attributedTitle", managed = "Other")]
    pub unsafe fn attributedTitle(&self) -> Id<NSAttributedString>;

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "setAttributedTitle:")]
    pub unsafe fn setAttributedTitle(&self, attributed_title: &NSAttributedString);
}
