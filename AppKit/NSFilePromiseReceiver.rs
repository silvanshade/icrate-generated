//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSFilePromiseReceiver")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSFilePromiseReceiver;
}

#[cfg(feature = "AppKit_NSFilePromiseReceiver")]
unsafe impl NSObjectProtocol for NSFilePromiseReceiver {}

#[cfg(feature = "AppKit_NSFilePromiseReceiver")]
unsafe impl NSPasteboardReading for NSFilePromiseReceiver {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSFilePromiseReceiver")]
    pub type NSFilePromiseReceiver;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "readableDraggedTypes", managed = "Other")]
    pub unsafe fn readableDraggedTypes() -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "fileTypes", managed = "Other")]
    pub unsafe fn fileTypes(&self) -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "fileNames", managed = "Other")]
    pub unsafe fn fileNames(&self) -> Id<NSArray<NSString>>;

    #[cfg(all(
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSError",
        feature = "Foundation_NSOperationQueue",
        feature = "Foundation_NSURL"
    ))]
    #[objc2::method(sel = "receivePromisedFilesAtDestination:options:operationQueue:reader:")]
    pub unsafe fn receivePromisedFilesAtDestination_options_operationQueue_reader(
        &self,
        destination_dir: &NSURL,
        options: &NSDictionary,
        operation_queue: &NSOperationQueue,
        reader: &Block<(NonNull<NSURL>, *mut NSError), ()>,
    );
}
