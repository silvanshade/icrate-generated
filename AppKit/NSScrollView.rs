//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSScrollElasticity {
    NSScrollElasticityAutomatic = 0,
    NSScrollElasticityNone = 1,
    NSScrollElasticityAllowed = 2,
}

#[objc2::interface(
    unsafe super = NSView,
    unsafe inherits = [
        NSResponder,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSScrollView")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSScrollView;
}

#[cfg(feature = "AppKit_NSScrollView")]
unsafe impl NSAccessibility for NSScrollView {}

#[cfg(feature = "AppKit_NSScrollView")]
unsafe impl NSAccessibilityElementProtocol for NSScrollView {}

#[cfg(feature = "AppKit_NSScrollView")]
unsafe impl NSAnimatablePropertyContainer for NSScrollView {}

#[cfg(feature = "AppKit_NSScrollView")]
unsafe impl NSAppearanceCustomization for NSScrollView {}

#[cfg(feature = "AppKit_NSScrollView")]
unsafe impl NSCoding for NSScrollView {}

#[cfg(feature = "AppKit_NSScrollView")]
unsafe impl NSDraggingDestination for NSScrollView {}

#[cfg(feature = "AppKit_NSScrollView")]
unsafe impl NSObjectProtocol for NSScrollView {}

#[cfg(feature = "AppKit_NSScrollView")]
unsafe impl NSTextFinderBarContainer for NSScrollView {}

#[cfg(feature = "AppKit_NSScrollView")]
unsafe impl NSUserInterfaceItemIdentification for NSScrollView {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSScrollView")]
    pub type NSScrollView;

    #[objc2::method(sel = "initWithFrame:", managed = "Init")]
    pub unsafe fn initWithFrame(this: Option<Allocated<Self>>, frame_rect: NSRect) -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, coder: &NSCoder)
        -> Option<Id<Self>>;

    #[objc2::method(
        sel = "frameSizeForContentSize:horizontalScrollerClass:verticalScrollerClass:borderType:controlSize:scrollerStyle:"
    )]
    pub unsafe fn frameSizeForContentSize_horizontalScrollerClass_verticalScrollerClass_borderType_controlSize_scrollerStyle(
        c_size: NSSize,
        horizontal_scroller_class: Option<&Class>,
        vertical_scroller_class: Option<&Class>,
        r#type: NSBorderType,
        control_size: NSControlSize,
        scroller_style: NSScrollerStyle,
    ) -> NSSize;

    #[objc2::method(
        sel = "contentSizeForFrameSize:horizontalScrollerClass:verticalScrollerClass:borderType:controlSize:scrollerStyle:"
    )]
    pub unsafe fn contentSizeForFrameSize_horizontalScrollerClass_verticalScrollerClass_borderType_controlSize_scrollerStyle(
        f_size: NSSize,
        horizontal_scroller_class: Option<&Class>,
        vertical_scroller_class: Option<&Class>,
        r#type: NSBorderType,
        control_size: NSControlSize,
        scroller_style: NSScrollerStyle,
    ) -> NSSize;

    #[deprecated = "Use +frameSizeForContentSize:horizontalScrollerClass:verticalScrollerClass:borderType:controlSize:scrollerStyle: instead"]
    #[objc2::method(
        sel = "frameSizeForContentSize:hasHorizontalScroller:hasVerticalScroller:borderType:"
    )]
    pub unsafe fn frameSizeForContentSize_hasHorizontalScroller_hasVerticalScroller_borderType(
        c_size: NSSize,
        h_flag: bool,
        v_flag: bool,
        r#type: NSBorderType,
    ) -> NSSize;

    #[deprecated = "+contentSizeForFrameSize:horizontalScrollerClass:verticalScrollerClass:borderType:controlSize:scrollerStyle: instead"]
    #[objc2::method(
        sel = "contentSizeForFrameSize:hasHorizontalScroller:hasVerticalScroller:borderType:"
    )]
    pub unsafe fn contentSizeForFrameSize_hasHorizontalScroller_hasVerticalScroller_borderType(
        f_size: NSSize,
        h_flag: bool,
        v_flag: bool,
        r#type: NSBorderType,
    ) -> NSSize;

    #[objc2::method(sel = "documentVisibleRect")]
    pub unsafe fn documentVisibleRect(&self) -> NSRect;

    #[objc2::method(sel = "contentSize")]
    pub unsafe fn contentSize(&self) -> NSSize;

    #[objc2::method(sel = "documentView", managed = "Other")]
    pub unsafe fn documentView(&self) -> Option<Id<NSView>>;

    #[objc2::method(sel = "setDocumentView:")]
    pub unsafe fn setDocumentView(&self, document_view: Option<&NSView>);

    #[cfg(feature = "AppKit_NSClipView")]
    #[objc2::method(sel = "contentView", managed = "Other")]
    pub unsafe fn contentView(&self) -> Id<NSClipView>;

    #[cfg(feature = "AppKit_NSClipView")]
    #[objc2::method(sel = "setContentView:")]
    pub unsafe fn setContentView(&self, content_view: &NSClipView);

    #[cfg(feature = "AppKit_NSCursor")]
    #[objc2::method(sel = "documentCursor", managed = "Other")]
    pub unsafe fn documentCursor(&self) -> Option<Id<NSCursor>>;

    #[cfg(feature = "AppKit_NSCursor")]
    #[objc2::method(sel = "setDocumentCursor:")]
    pub unsafe fn setDocumentCursor(&self, document_cursor: Option<&NSCursor>);

    #[objc2::method(sel = "borderType")]
    pub unsafe fn borderType(&self) -> NSBorderType;

    #[objc2::method(sel = "setBorderType:")]
    pub unsafe fn setBorderType(&self, border_type: NSBorderType);

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "backgroundColor", managed = "Other")]
    pub unsafe fn backgroundColor(&self) -> Id<NSColor>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "setBackgroundColor:")]
    pub unsafe fn setBackgroundColor(&self, background_color: &NSColor);

    #[objc2::method(sel = "drawsBackground")]
    pub unsafe fn drawsBackground(&self) -> bool;

    #[objc2::method(sel = "setDrawsBackground:")]
    pub unsafe fn setDrawsBackground(&self, draws_background: bool);

    #[objc2::method(sel = "hasVerticalScroller")]
    pub unsafe fn hasVerticalScroller(&self) -> bool;

    #[objc2::method(sel = "setHasVerticalScroller:")]
    pub unsafe fn setHasVerticalScroller(&self, has_vertical_scroller: bool);

    #[objc2::method(sel = "hasHorizontalScroller")]
    pub unsafe fn hasHorizontalScroller(&self) -> bool;

    #[objc2::method(sel = "setHasHorizontalScroller:")]
    pub unsafe fn setHasHorizontalScroller(&self, has_horizontal_scroller: bool);

    #[cfg(feature = "AppKit_NSScroller")]
    #[objc2::method(sel = "verticalScroller", managed = "Other")]
    pub unsafe fn verticalScroller(&self) -> Option<Id<NSScroller>>;

    #[cfg(feature = "AppKit_NSScroller")]
    #[objc2::method(sel = "setVerticalScroller:")]
    pub unsafe fn setVerticalScroller(&self, vertical_scroller: Option<&NSScroller>);

    #[cfg(feature = "AppKit_NSScroller")]
    #[objc2::method(sel = "horizontalScroller", managed = "Other")]
    pub unsafe fn horizontalScroller(&self) -> Option<Id<NSScroller>>;

    #[cfg(feature = "AppKit_NSScroller")]
    #[objc2::method(sel = "setHorizontalScroller:")]
    pub unsafe fn setHorizontalScroller(&self, horizontal_scroller: Option<&NSScroller>);

    #[objc2::method(sel = "autohidesScrollers")]
    pub unsafe fn autohidesScrollers(&self) -> bool;

    #[objc2::method(sel = "setAutohidesScrollers:")]
    pub unsafe fn setAutohidesScrollers(&self, autohides_scrollers: bool);

    #[objc2::method(sel = "horizontalLineScroll")]
    pub unsafe fn horizontalLineScroll(&self) -> CGFloat;

    #[objc2::method(sel = "setHorizontalLineScroll:")]
    pub unsafe fn setHorizontalLineScroll(&self, horizontal_line_scroll: CGFloat);

    #[objc2::method(sel = "verticalLineScroll")]
    pub unsafe fn verticalLineScroll(&self) -> CGFloat;

    #[objc2::method(sel = "setVerticalLineScroll:")]
    pub unsafe fn setVerticalLineScroll(&self, vertical_line_scroll: CGFloat);

    #[objc2::method(sel = "lineScroll")]
    pub unsafe fn lineScroll(&self) -> CGFloat;

    #[objc2::method(sel = "setLineScroll:")]
    pub unsafe fn setLineScroll(&self, line_scroll: CGFloat);

    #[objc2::method(sel = "horizontalPageScroll")]
    pub unsafe fn horizontalPageScroll(&self) -> CGFloat;

    #[objc2::method(sel = "setHorizontalPageScroll:")]
    pub unsafe fn setHorizontalPageScroll(&self, horizontal_page_scroll: CGFloat);

    #[objc2::method(sel = "verticalPageScroll")]
    pub unsafe fn verticalPageScroll(&self) -> CGFloat;

    #[objc2::method(sel = "setVerticalPageScroll:")]
    pub unsafe fn setVerticalPageScroll(&self, vertical_page_scroll: CGFloat);

    #[objc2::method(sel = "pageScroll")]
    pub unsafe fn pageScroll(&self) -> CGFloat;

    #[objc2::method(sel = "setPageScroll:")]
    pub unsafe fn setPageScroll(&self, page_scroll: CGFloat);

    #[objc2::method(sel = "scrollsDynamically")]
    pub unsafe fn scrollsDynamically(&self) -> bool;

    #[objc2::method(sel = "setScrollsDynamically:")]
    pub unsafe fn setScrollsDynamically(&self, scrolls_dynamically: bool);

    #[objc2::method(sel = "tile")]
    pub unsafe fn tile(&self);

    #[cfg(feature = "AppKit_NSClipView")]
    #[objc2::method(sel = "reflectScrolledClipView:")]
    pub unsafe fn reflectScrolledClipView(&self, c_view: &NSClipView);

    #[cfg(feature = "AppKit_NSEvent")]
    #[objc2::method(sel = "scrollWheel:")]
    pub unsafe fn scrollWheel(&self, event: &NSEvent);

    #[objc2::method(sel = "scrollerStyle")]
    pub unsafe fn scrollerStyle(&self) -> NSScrollerStyle;

    #[objc2::method(sel = "setScrollerStyle:")]
    pub unsafe fn setScrollerStyle(&self, scroller_style: NSScrollerStyle);

    #[objc2::method(sel = "scrollerKnobStyle")]
    pub unsafe fn scrollerKnobStyle(&self) -> NSScrollerKnobStyle;

    #[objc2::method(sel = "setScrollerKnobStyle:")]
    pub unsafe fn setScrollerKnobStyle(&self, scroller_knob_style: NSScrollerKnobStyle);

    #[objc2::method(sel = "flashScrollers")]
    pub unsafe fn flashScrollers(&self);

    #[objc2::method(sel = "horizontalScrollElasticity")]
    pub unsafe fn horizontalScrollElasticity(&self) -> NSScrollElasticity;

    #[objc2::method(sel = "setHorizontalScrollElasticity:")]
    pub unsafe fn setHorizontalScrollElasticity(
        &self,
        horizontal_scroll_elasticity: NSScrollElasticity,
    );

    #[objc2::method(sel = "verticalScrollElasticity")]
    pub unsafe fn verticalScrollElasticity(&self) -> NSScrollElasticity;

    #[objc2::method(sel = "setVerticalScrollElasticity:")]
    pub unsafe fn setVerticalScrollElasticity(
        &self,
        vertical_scroll_elasticity: NSScrollElasticity,
    );

    #[objc2::method(sel = "usesPredominantAxisScrolling")]
    pub unsafe fn usesPredominantAxisScrolling(&self) -> bool;

    #[objc2::method(sel = "setUsesPredominantAxisScrolling:")]
    pub unsafe fn setUsesPredominantAxisScrolling(&self, uses_predominant_axis_scrolling: bool);

    #[objc2::method(sel = "allowsMagnification")]
    pub unsafe fn allowsMagnification(&self) -> bool;

    #[objc2::method(sel = "setAllowsMagnification:")]
    pub unsafe fn setAllowsMagnification(&self, allows_magnification: bool);

    #[objc2::method(sel = "magnification")]
    pub unsafe fn magnification(&self) -> CGFloat;

    #[objc2::method(sel = "setMagnification:")]
    pub unsafe fn setMagnification(&self, magnification: CGFloat);

    #[objc2::method(sel = "maxMagnification")]
    pub unsafe fn maxMagnification(&self) -> CGFloat;

    #[objc2::method(sel = "setMaxMagnification:")]
    pub unsafe fn setMaxMagnification(&self, max_magnification: CGFloat);

    #[objc2::method(sel = "minMagnification")]
    pub unsafe fn minMagnification(&self) -> CGFloat;

    #[objc2::method(sel = "setMinMagnification:")]
    pub unsafe fn setMinMagnification(&self, min_magnification: CGFloat);

    #[objc2::method(sel = "magnifyToFitRect:")]
    pub unsafe fn magnifyToFitRect(&self, rect: NSRect);

    #[objc2::method(sel = "setMagnification:centeredAtPoint:")]
    pub unsafe fn setMagnification_centeredAtPoint(&self, magnification: CGFloat, point: NSPoint);

    #[objc2::method(sel = "addFloatingSubview:forAxis:")]
    pub unsafe fn addFloatingSubview_forAxis(&self, view: &NSView, axis: NSEventGestureAxis);

    #[objc2::method(sel = "automaticallyAdjustsContentInsets")]
    pub unsafe fn automaticallyAdjustsContentInsets(&self) -> bool;

    #[objc2::method(sel = "setAutomaticallyAdjustsContentInsets:")]
    pub unsafe fn setAutomaticallyAdjustsContentInsets(
        &self,
        automatically_adjusts_content_insets: bool,
    );

    #[objc2::method(sel = "contentInsets")]
    pub unsafe fn contentInsets(&self) -> NSEdgeInsets;

    #[objc2::method(sel = "setContentInsets:")]
    pub unsafe fn setContentInsets(&self, content_insets: NSEdgeInsets);

    #[objc2::method(sel = "scrollerInsets")]
    pub unsafe fn scrollerInsets(&self) -> NSEdgeInsets;

    #[objc2::method(sel = "setScrollerInsets:")]
    pub unsafe fn setScrollerInsets(&self, scroller_insets: NSEdgeInsets);
}

extern_static!(NSScrollViewWillStartLiveMagnifyNotification: &'static NSNotificationName);

extern_static!(NSScrollViewDidEndLiveMagnifyNotification: &'static NSNotificationName);

extern_static!(NSScrollViewWillStartLiveScrollNotification: &'static NSNotificationName);

extern_static!(NSScrollViewDidLiveScrollNotification: &'static NSNotificationName);

extern_static!(NSScrollViewDidEndLiveScrollNotification: &'static NSNotificationName);

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSScrollView")]
    pub type NSScrollView;

    #[objc2::method(sel = "rulerViewClass")]
    pub unsafe fn rulerViewClass() -> Option<&'static Class>;

    #[objc2::method(sel = "setRulerViewClass:")]
    pub unsafe fn setRulerViewClass(ruler_view_class: Option<&Class>);

    #[objc2::method(sel = "rulersVisible")]
    pub unsafe fn rulersVisible(&self) -> bool;

    #[objc2::method(sel = "setRulersVisible:")]
    pub unsafe fn setRulersVisible(&self, rulers_visible: bool);

    #[objc2::method(sel = "hasHorizontalRuler")]
    pub unsafe fn hasHorizontalRuler(&self) -> bool;

    #[objc2::method(sel = "setHasHorizontalRuler:")]
    pub unsafe fn setHasHorizontalRuler(&self, has_horizontal_ruler: bool);

    #[objc2::method(sel = "hasVerticalRuler")]
    pub unsafe fn hasVerticalRuler(&self) -> bool;

    #[objc2::method(sel = "setHasVerticalRuler:")]
    pub unsafe fn setHasVerticalRuler(&self, has_vertical_ruler: bool);

    #[cfg(feature = "AppKit_NSRulerView")]
    #[objc2::method(sel = "horizontalRulerView", managed = "Other")]
    pub unsafe fn horizontalRulerView(&self) -> Option<Id<NSRulerView>>;

    #[cfg(feature = "AppKit_NSRulerView")]
    #[objc2::method(sel = "setHorizontalRulerView:")]
    pub unsafe fn setHorizontalRulerView(&self, horizontal_ruler_view: Option<&NSRulerView>);

    #[cfg(feature = "AppKit_NSRulerView")]
    #[objc2::method(sel = "verticalRulerView", managed = "Other")]
    pub unsafe fn verticalRulerView(&self) -> Option<Id<NSRulerView>>;

    #[cfg(feature = "AppKit_NSRulerView")]
    #[objc2::method(sel = "setVerticalRulerView:")]
    pub unsafe fn setVerticalRulerView(&self, vertical_ruler_view: Option<&NSRulerView>);
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSScrollViewFindBarPosition {
    NSScrollViewFindBarPositionAboveHorizontalRuler = 0,
    NSScrollViewFindBarPositionAboveContent = 1,
    NSScrollViewFindBarPositionBelowContent = 2,
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSScrollView")]
    pub type NSScrollView;

    #[objc2::method(sel = "findBarPosition")]
    pub unsafe fn findBarPosition(&self) -> NSScrollViewFindBarPosition;

    #[objc2::method(sel = "setFindBarPosition:")]
    pub unsafe fn setFindBarPosition(&self, find_bar_position: NSScrollViewFindBarPosition);
}
