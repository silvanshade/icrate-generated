//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSVisualEffectMaterial {
    NSVisualEffectMaterialTitlebar = 3,
    NSVisualEffectMaterialSelection = 4,
    NSVisualEffectMaterialMenu = 5,
    NSVisualEffectMaterialPopover = 6,
    NSVisualEffectMaterialSidebar = 7,
    NSVisualEffectMaterialHeaderView = 10,
    NSVisualEffectMaterialSheet = 11,
    NSVisualEffectMaterialWindowBackground = 12,
    NSVisualEffectMaterialHUDWindow = 13,
    NSVisualEffectMaterialFullScreenUI = 15,
    NSVisualEffectMaterialToolTip = 17,
    NSVisualEffectMaterialContentBackground = 18,
    NSVisualEffectMaterialUnderWindowBackground = 21,
    NSVisualEffectMaterialUnderPageBackground = 22,
    #[deprecated = "Use a specific semantic material instead."]
    NSVisualEffectMaterialAppearanceBased = 0,
    #[deprecated = "Use a semantic material instead.  To force the appearance of a view hierarchy, set the `appearance` property to an appropriate NSAppearance value."]
    NSVisualEffectMaterialLight = 1,
    #[deprecated = "Use a semantic material instead.  To force the appearance of a view hierarchy, set the `appearance` property to an appropriate NSAppearance value."]
    NSVisualEffectMaterialDark = 2,
    #[deprecated = "Use a semantic material instead.  To force the appearance of a view hierarchy, set the `appearance` property to an appropriate NSAppearance value."]
    NSVisualEffectMaterialMediumLight = 8,
    #[deprecated = "Use a semantic material instead.  To force the appearance of a view hierarchy, set the `appearance` property to an appropriate NSAppearance value."]
    NSVisualEffectMaterialUltraDark = 9,
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSVisualEffectBlendingMode {
    NSVisualEffectBlendingModeBehindWindow = 0,
    NSVisualEffectBlendingModeWithinWindow = 1,
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSVisualEffectState {
    NSVisualEffectStateFollowsWindowActiveState = 0,
    NSVisualEffectStateActive = 1,
    NSVisualEffectStateInactive = 2,
}

#[objc2::interface(
    unsafe super = NSView,
    unsafe inherits = [
        NSResponder,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSVisualEffectView")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSVisualEffectView;
}

#[cfg(feature = "AppKit_NSVisualEffectView")]
unsafe impl NSAccessibility for NSVisualEffectView {}

#[cfg(feature = "AppKit_NSVisualEffectView")]
unsafe impl NSAccessibilityElementProtocol for NSVisualEffectView {}

#[cfg(feature = "AppKit_NSVisualEffectView")]
unsafe impl NSAnimatablePropertyContainer for NSVisualEffectView {}

#[cfg(feature = "AppKit_NSVisualEffectView")]
unsafe impl NSAppearanceCustomization for NSVisualEffectView {}

#[cfg(feature = "AppKit_NSVisualEffectView")]
unsafe impl NSCoding for NSVisualEffectView {}

#[cfg(feature = "AppKit_NSVisualEffectView")]
unsafe impl NSDraggingDestination for NSVisualEffectView {}

#[cfg(feature = "AppKit_NSVisualEffectView")]
unsafe impl NSObjectProtocol for NSVisualEffectView {}

#[cfg(feature = "AppKit_NSVisualEffectView")]
unsafe impl NSUserInterfaceItemIdentification for NSVisualEffectView {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSVisualEffectView")]
    pub type NSVisualEffectView;

    #[objc2::method(sel = "material")]
    pub unsafe fn material(&self) -> NSVisualEffectMaterial;

    #[objc2::method(sel = "setMaterial:")]
    pub unsafe fn setMaterial(&self, material: NSVisualEffectMaterial);

    #[objc2::method(sel = "interiorBackgroundStyle")]
    pub unsafe fn interiorBackgroundStyle(&self) -> NSBackgroundStyle;

    #[objc2::method(sel = "blendingMode")]
    pub unsafe fn blendingMode(&self) -> NSVisualEffectBlendingMode;

    #[objc2::method(sel = "setBlendingMode:")]
    pub unsafe fn setBlendingMode(&self, blending_mode: NSVisualEffectBlendingMode);

    #[objc2::method(sel = "state")]
    pub unsafe fn state(&self) -> NSVisualEffectState;

    #[objc2::method(sel = "setState:")]
    pub unsafe fn setState(&self, state: NSVisualEffectState);

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "maskImage", managed = "Other")]
    pub unsafe fn maskImage(&self) -> Option<Id<NSImage>>;

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "setMaskImage:")]
    pub unsafe fn setMaskImage(&self, mask_image: Option<&NSImage>);

    #[objc2::method(sel = "isEmphasized")]
    pub unsafe fn isEmphasized(&self) -> bool;

    #[objc2::method(sel = "setEmphasized:")]
    pub unsafe fn setEmphasized(&self, emphasized: bool);

    #[objc2::method(sel = "viewDidMoveToWindow")]
    pub unsafe fn viewDidMoveToWindow(&self);

    #[cfg(feature = "AppKit_NSWindow")]
    #[objc2::method(sel = "viewWillMoveToWindow:")]
    pub unsafe fn viewWillMoveToWindow(&self, new_window: Option<&NSWindow>);
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSView`
    #[cfg(feature = "AppKit_NSVisualEffectView")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSVisualEffectView")]
    pub type NSVisualEffectView;

    #[objc2::method(sel = "initWithFrame:", managed = "Init")]
    pub unsafe fn initWithFrame(this: Option<Allocated<Self>>, frame_rect: NSRect) -> Id<Self>;
}
