//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextLineFragment")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSTextLineFragment;
}

#[cfg(feature = "AppKit_NSTextLineFragment")]
unsafe impl NSCoding for NSTextLineFragment {}

#[cfg(feature = "AppKit_NSTextLineFragment")]
unsafe impl NSObjectProtocol for NSTextLineFragment {}

#[cfg(feature = "AppKit_NSTextLineFragment")]
unsafe impl NSSecureCoding for NSTextLineFragment {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextLineFragment")]
    pub type NSTextLineFragment;

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "initWithAttributedString:range:", managed = "Init")]
    pub unsafe fn initWithAttributedString_range(
        this: Option<Allocated<Self>>,
        attributed_string: &NSAttributedString,
        range: NSRange,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(
        this: Option<Allocated<Self>>,
        a_decoder: &NSCoder,
    ) -> Option<Id<Self>>;

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "initWithString:attributes:range:", managed = "Init")]
    pub unsafe fn initWithString_attributes_range(
        this: Option<Allocated<Self>>,
        string: &NSString,
        attributes: &NSDictionary<NSAttributedStringKey, Object>,
        range: NSRange,
    ) -> Id<Self>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "attributedString", managed = "Other")]
    pub unsafe fn attributedString(&self) -> Id<NSAttributedString>;

    #[objc2::method(sel = "characterRange")]
    pub unsafe fn characterRange(&self) -> NSRange;

    #[objc2::method(sel = "typographicBounds")]
    pub unsafe fn typographicBounds(&self) -> CGRect;

    #[objc2::method(sel = "glyphOrigin")]
    pub unsafe fn glyphOrigin(&self) -> CGPoint;

    #[objc2::method(sel = "locationForCharacterAtIndex:")]
    pub unsafe fn locationForCharacterAtIndex(&self, index: NSInteger) -> CGPoint;

    #[objc2::method(sel = "characterIndexForPoint:")]
    pub unsafe fn characterIndexForPoint(&self, point: CGPoint) -> NSInteger;

    #[objc2::method(sel = "fractionOfDistanceThroughGlyphForPoint:")]
    pub unsafe fn fractionOfDistanceThroughGlyphForPoint(&self, point: CGPoint) -> CGFloat;
}
