//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::protocol]
pub unsafe trait NSTextAttachmentCellProtocol: NSObjectProtocol {
    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "drawWithFrame:inView:")]
    unsafe fn drawWithFrame_inView(&self, cell_frame: NSRect, control_view: Option<&NSView>);

    #[objc2::method(sel = "wantsToTrackMouse")]
    unsafe fn wantsToTrackMouse(&self) -> bool;

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "highlight:withFrame:inView:")]
    unsafe fn highlight_withFrame_inView(
        &self,
        flag: bool,
        cell_frame: NSRect,
        control_view: Option<&NSView>,
    );

    #[cfg(all(feature = "AppKit_NSEvent", feature = "AppKit_NSView"))]
    #[objc2::method(sel = "trackMouse:inRect:ofView:untilMouseUp:")]
    unsafe fn trackMouse_inRect_ofView_untilMouseUp(
        &self,
        the_event: &NSEvent,
        cell_frame: NSRect,
        control_view: Option<&NSView>,
        flag: bool,
    ) -> bool;

    #[objc2::method(sel = "cellSize")]
    unsafe fn cellSize(&self) -> NSSize;

    #[objc2::method(sel = "cellBaselineOffset")]
    unsafe fn cellBaselineOffset(&self) -> NSPoint;

    #[cfg(feature = "AppKit_NSTextAttachment")]
    #[objc2::method(sel = "attachment", managed = "Other")]
    unsafe fn attachment(&self) -> Option<Id<NSTextAttachment>>;

    #[cfg(feature = "AppKit_NSTextAttachment")]
    #[objc2::method(sel = "setAttachment:")]
    unsafe fn setAttachment(&self, attachment: Option<&NSTextAttachment>);

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "drawWithFrame:inView:characterIndex:")]
    unsafe fn drawWithFrame_inView_characterIndex(
        &self,
        cell_frame: NSRect,
        control_view: Option<&NSView>,
        char_index: NSUInteger,
    );

    #[cfg(all(feature = "AppKit_NSLayoutManager", feature = "AppKit_NSView"))]
    #[objc2::method(sel = "drawWithFrame:inView:characterIndex:layoutManager:")]
    unsafe fn drawWithFrame_inView_characterIndex_layoutManager(
        &self,
        cell_frame: NSRect,
        control_view: Option<&NSView>,
        char_index: NSUInteger,
        layout_manager: &NSLayoutManager,
    );

    #[cfg(all(feature = "AppKit_NSEvent", feature = "AppKit_NSView"))]
    #[objc2::method(sel = "wantsToTrackMouseForEvent:inRect:ofView:atCharacterIndex:")]
    unsafe fn wantsToTrackMouseForEvent_inRect_ofView_atCharacterIndex(
        &self,
        the_event: &NSEvent,
        cell_frame: NSRect,
        control_view: Option<&NSView>,
        char_index: NSUInteger,
    ) -> bool;

    #[cfg(all(feature = "AppKit_NSEvent", feature = "AppKit_NSView"))]
    #[objc2::method(sel = "trackMouse:inRect:ofView:atCharacterIndex:untilMouseUp:")]
    unsafe fn trackMouse_inRect_ofView_atCharacterIndex_untilMouseUp(
        &self,
        the_event: &NSEvent,
        cell_frame: NSRect,
        control_view: Option<&NSView>,
        char_index: NSUInteger,
        flag: bool,
    ) -> bool;

    #[cfg(feature = "AppKit_NSTextContainer")]
    #[objc2::method(
        sel = "cellFrameForTextContainer:proposedLineFragment:glyphPosition:characterIndex:"
    )]
    unsafe fn cellFrameForTextContainer_proposedLineFragment_glyphPosition_characterIndex(
        &self,
        text_container: &NSTextContainer,
        line_frag: NSRect,
        position: NSPoint,
        char_index: NSUInteger,
    ) -> NSRect;
}

#[objc2::interface(
    unsafe super = NSCell,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextAttachmentCell")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSTextAttachmentCell;
}

#[cfg(feature = "AppKit_NSTextAttachmentCell")]
unsafe impl NSAccessibility for NSTextAttachmentCell {}

#[cfg(feature = "AppKit_NSTextAttachmentCell")]
unsafe impl NSAccessibilityElementProtocol for NSTextAttachmentCell {}

#[cfg(feature = "AppKit_NSTextAttachmentCell")]
unsafe impl NSCoding for NSTextAttachmentCell {}

#[cfg(feature = "AppKit_NSTextAttachmentCell")]
unsafe impl NSObjectProtocol for NSTextAttachmentCell {}

#[cfg(feature = "AppKit_NSTextAttachmentCell")]
unsafe impl NSTextAttachmentCellProtocol for NSTextAttachmentCell {}

#[cfg(feature = "AppKit_NSTextAttachmentCell")]
unsafe impl NSUserInterfaceItemIdentification for NSTextAttachmentCell {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextAttachmentCell")]
    pub type NSTextAttachmentCell;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSCell`
    #[cfg(feature = "AppKit_NSTextAttachmentCell")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextAttachmentCell")]
    pub type NSTextAttachmentCell;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initTextCell:", managed = "Init")]
    pub unsafe fn initTextCell(this: Option<Allocated<Self>>, string: &NSString) -> Id<Self>;

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "initImageCell:", managed = "Init")]
    pub unsafe fn initImageCell(this: Option<Allocated<Self>>, image: Option<&NSImage>)
        -> Id<Self>;
}
