//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSResponder,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSWindowController")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSWindowController;
}

#[cfg(feature = "AppKit_NSWindowController")]
unsafe impl NSCoding for NSWindowController {}

#[cfg(feature = "AppKit_NSWindowController")]
unsafe impl NSObjectProtocol for NSWindowController {}

#[cfg(feature = "AppKit_NSWindowController")]
unsafe impl NSSeguePerforming for NSWindowController {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSWindowController")]
    pub type NSWindowController;

    #[cfg(feature = "AppKit_NSWindow")]
    #[objc2::method(sel = "initWithWindow:", managed = "Init")]
    pub unsafe fn initWithWindow(
        this: Option<Allocated<Self>>,
        window: Option<&NSWindow>,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, coder: &NSCoder)
        -> Option<Id<Self>>;

    #[objc2::method(sel = "initWithWindowNibName:", managed = "Init")]
    pub unsafe fn initWithWindowNibName(
        this: Option<Allocated<Self>>,
        window_nib_name: &NSNibName,
    ) -> Id<Self>;

    #[objc2::method(sel = "initWithWindowNibName:owner:", managed = "Init")]
    pub unsafe fn initWithWindowNibName_owner(
        this: Option<Allocated<Self>>,
        window_nib_name: &NSNibName,
        owner: &Object,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithWindowNibPath:owner:", managed = "Init")]
    pub unsafe fn initWithWindowNibPath_owner(
        this: Option<Allocated<Self>>,
        window_nib_path: &NSString,
        owner: &Object,
    ) -> Id<Self>;

    #[objc2::method(sel = "windowNibName", managed = "Other")]
    pub unsafe fn windowNibName(&self) -> Option<Id<NSNibName>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "windowNibPath", managed = "Other")]
    pub unsafe fn windowNibPath(&self) -> Option<Id<NSString>>;

    #[objc2::method(sel = "owner", managed = "Other")]
    pub unsafe fn owner(&self) -> Option<Id<Object>>;

    #[objc2::method(sel = "windowFrameAutosaveName", managed = "Other")]
    pub unsafe fn windowFrameAutosaveName(&self) -> Id<NSWindowFrameAutosaveName>;

    #[objc2::method(sel = "setWindowFrameAutosaveName:")]
    pub unsafe fn setWindowFrameAutosaveName(
        &self,
        window_frame_autosave_name: &NSWindowFrameAutosaveName,
    );

    #[objc2::method(sel = "shouldCascadeWindows")]
    pub unsafe fn shouldCascadeWindows(&self) -> bool;

    #[objc2::method(sel = "setShouldCascadeWindows:")]
    pub unsafe fn setShouldCascadeWindows(&self, should_cascade_windows: bool);

    #[objc2::method(sel = "document", managed = "Other")]
    pub unsafe fn document(&self) -> Option<Id<Object>>;

    #[objc2::method(sel = "setDocument:")]
    pub unsafe fn setDocument(&self, document: Option<&Object>);

    #[objc2::method(sel = "setDocumentEdited:")]
    pub unsafe fn setDocumentEdited(&self, dirty_flag: bool);

    #[objc2::method(sel = "shouldCloseDocument")]
    pub unsafe fn shouldCloseDocument(&self) -> bool;

    #[objc2::method(sel = "setShouldCloseDocument:")]
    pub unsafe fn setShouldCloseDocument(&self, should_close_document: bool);

    #[objc2::method(sel = "synchronizeWindowTitleWithDocumentName")]
    pub unsafe fn synchronizeWindowTitleWithDocumentName(&self);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "windowTitleForDocumentDisplayName:", managed = "Other")]
    pub unsafe fn windowTitleForDocumentDisplayName(&self, display_name: &NSString)
        -> Id<NSString>;

    #[cfg(feature = "AppKit_NSViewController")]
    #[objc2::method(sel = "contentViewController", managed = "Other")]
    pub unsafe fn contentViewController(&self) -> Option<Id<NSViewController>>;

    #[cfg(feature = "AppKit_NSViewController")]
    #[objc2::method(sel = "setContentViewController:")]
    pub unsafe fn setContentViewController(
        &self,
        content_view_controller: Option<&NSViewController>,
    );

    #[cfg(feature = "AppKit_NSWindow")]
    #[objc2::method(sel = "window", managed = "Other")]
    pub unsafe fn window(&self) -> Option<Id<NSWindow>>;

    #[cfg(feature = "AppKit_NSWindow")]
    #[objc2::method(sel = "setWindow:")]
    pub unsafe fn setWindow(&self, window: Option<&NSWindow>);

    #[objc2::method(sel = "isWindowLoaded")]
    pub unsafe fn isWindowLoaded(&self) -> bool;

    #[objc2::method(sel = "windowWillLoad")]
    pub unsafe fn windowWillLoad(&self);

    #[objc2::method(sel = "windowDidLoad")]
    pub unsafe fn windowDidLoad(&self);

    #[objc2::method(sel = "loadWindow")]
    pub unsafe fn loadWindow(&self);

    #[objc2::method(sel = "close")]
    pub unsafe fn close(&self);

    #[objc2::method(sel = "showWindow:")]
    pub unsafe fn showWindow(&self, sender: Option<&Object>);
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSWindowController")]
    pub type NSWindowController;

    #[cfg(feature = "AppKit_NSStoryboard")]
    #[objc2::method(sel = "storyboard", managed = "Other")]
    pub unsafe fn storyboard(&self) -> Option<Id<NSStoryboard>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSWindowController")]
    pub type NSWindowController;

    #[objc2::method(sel = "dismissController:")]
    pub unsafe fn dismissController(&self, sender: Option<&Object>);
}
