//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSWindow,
    unsafe inherits = [
        NSResponder,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSPanel")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSPanel;
}

#[cfg(feature = "AppKit_NSPanel")]
unsafe impl NSAccessibility for NSPanel {}

#[cfg(feature = "AppKit_NSPanel")]
unsafe impl NSAccessibilityElementProtocol for NSPanel {}

#[cfg(feature = "AppKit_NSPanel")]
unsafe impl NSAnimatablePropertyContainer for NSPanel {}

#[cfg(feature = "AppKit_NSPanel")]
unsafe impl NSAppearanceCustomization for NSPanel {}

#[cfg(feature = "AppKit_NSPanel")]
unsafe impl NSCoding for NSPanel {}

#[cfg(feature = "AppKit_NSPanel")]
unsafe impl NSMenuItemValidation for NSPanel {}

#[cfg(feature = "AppKit_NSPanel")]
unsafe impl NSObjectProtocol for NSPanel {}

#[cfg(feature = "AppKit_NSPanel")]
unsafe impl NSUserInterfaceItemIdentification for NSPanel {}

#[cfg(feature = "AppKit_NSPanel")]
unsafe impl NSUserInterfaceValidations for NSPanel {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSPanel")]
    pub type NSPanel;

    #[objc2::method(sel = "isFloatingPanel")]
    pub unsafe fn isFloatingPanel(&self) -> bool;

    #[objc2::method(sel = "setFloatingPanel:")]
    pub unsafe fn setFloatingPanel(&self, floating_panel: bool);

    #[objc2::method(sel = "becomesKeyOnlyIfNeeded")]
    pub unsafe fn becomesKeyOnlyIfNeeded(&self) -> bool;

    #[objc2::method(sel = "setBecomesKeyOnlyIfNeeded:")]
    pub unsafe fn setBecomesKeyOnlyIfNeeded(&self, becomes_key_only_if_needed: bool);

    #[objc2::method(sel = "worksWhenModal")]
    pub unsafe fn worksWhenModal(&self) -> bool;

    #[objc2::method(sel = "setWorksWhenModal:")]
    pub unsafe fn setWorksWhenModal(&self, works_when_modal: bool);
}

extern_fn!(
    #[deprecated = "Use NSAlert instead"]
    pub unsafe fn NSReleaseAlertPanel(panel: Option<&Object>);
);

#[extern_enum]
#[underlying(c_int)]
pub enum __anonymous__ {
    #[deprecated = "Use NSAlertFirstButtonReturn with an NSAlert presentation instead"]
    NSAlertDefaultReturn = 1,
    #[deprecated = "Use NSAlertFirstButtonReturn and other NSModalResponses with an NSAlert presentation instead"]
    NSAlertAlternateReturn = 0,
    #[deprecated = "Use NSAlertFirstButtonReturn and other NSModalResponses with an NSAlert presentation instead"]
    NSAlertOtherReturn = -1,
    #[deprecated = "Use NSAlertFirstButtonReturn and other NSModalResponses with an NSAlert presentation instead"]
    NSAlertErrorReturn = -2,
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSWindow`
    #[cfg(feature = "AppKit_NSPanel")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSPanel")]
    pub type NSPanel;

    #[objc2::method(sel = "initWithContentRect:styleMask:backing:defer:", managed = "Init")]
    pub unsafe fn initWithContentRect_styleMask_backing_defer(
        this: Option<Allocated<Self>>,
        content_rect: NSRect,
        style: NSWindowStyleMask,
        backing_store_type: NSBackingStoreType,
        flag: bool,
    ) -> Id<Self>;

    #[cfg(feature = "AppKit_NSScreen")]
    #[objc2::method(
        sel = "initWithContentRect:styleMask:backing:defer:screen:",
        managed = "Init"
    )]
    pub unsafe fn initWithContentRect_styleMask_backing_defer_screen(
        this: Option<Allocated<Self>>,
        content_rect: NSRect,
        style: NSWindowStyleMask,
        backing_store_type: NSBackingStoreType,
        flag: bool,
        screen: Option<&NSScreen>,
    ) -> Id<Self>;

    #[cfg(feature = "AppKit_NSViewController")]
    #[objc2::method(sel = "windowWithContentViewController:", managed = "Other")]
    pub unsafe fn windowWithContentViewController(
        content_view_controller: &NSViewController,
    ) -> Id<Self>;
}
