//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSHapticFeedbackPattern {
    NSHapticFeedbackPatternGeneric = 0,
    NSHapticFeedbackPatternAlignment = 1,
    NSHapticFeedbackPatternLevelChange = 2,
}

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSHapticFeedbackPerformanceTime {
    NSHapticFeedbackPerformanceTimeDefault = 0,
    NSHapticFeedbackPerformanceTimeNow = 1,
    NSHapticFeedbackPerformanceTimeDrawCompleted = 2,
}

#[objc2::protocol]
pub unsafe trait NSHapticFeedbackPerformer: NSObjectProtocol {
    #[objc2::method(sel = "performFeedbackPattern:performanceTime:")]
    unsafe fn performFeedbackPattern_performanceTime(
        &self,
        pattern: NSHapticFeedbackPattern,
        performance_time: NSHapticFeedbackPerformanceTime,
    );
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSHapticFeedbackManager")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSHapticFeedbackManager;
}

#[cfg(feature = "AppKit_NSHapticFeedbackManager")]
unsafe impl NSObjectProtocol for NSHapticFeedbackManager {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSHapticFeedbackManager")]
    pub type NSHapticFeedbackManager;

    #[objc2::method(sel = "defaultPerformer", managed = "Other")]
    pub unsafe fn defaultPerformer() -> Id<ProtocolObject<dyn NSHapticFeedbackPerformer>>;
}
