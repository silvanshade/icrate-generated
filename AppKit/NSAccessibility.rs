//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSWorkspace")]
    pub type NSWorkspace;

    #[objc2::method(sel = "accessibilityDisplayShouldIncreaseContrast")]
    pub unsafe fn accessibilityDisplayShouldIncreaseContrast(&self) -> bool;

    #[objc2::method(sel = "accessibilityDisplayShouldDifferentiateWithoutColor")]
    pub unsafe fn accessibilityDisplayShouldDifferentiateWithoutColor(&self) -> bool;

    #[objc2::method(sel = "accessibilityDisplayShouldReduceTransparency")]
    pub unsafe fn accessibilityDisplayShouldReduceTransparency(&self) -> bool;

    #[objc2::method(sel = "accessibilityDisplayShouldReduceMotion")]
    pub unsafe fn accessibilityDisplayShouldReduceMotion(&self) -> bool;

    #[objc2::method(sel = "accessibilityDisplayShouldInvertColors")]
    pub unsafe fn accessibilityDisplayShouldInvertColors(&self) -> bool;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSWorkspace")]
    pub type NSWorkspace;

    #[objc2::method(sel = "isVoiceOverEnabled")]
    pub unsafe fn isVoiceOverEnabled(&self) -> bool;

    #[objc2::method(sel = "isSwitchControlEnabled")]
    pub unsafe fn isSwitchControlEnabled(&self) -> bool;
}

extern_static!(
    NSWorkspaceAccessibilityDisplayOptionsDidChangeNotification: &'static NSNotificationName
);

extern_fn!(
    #[cfg(feature = "AppKit_NSView")]
    pub unsafe fn NSAccessibilityFrameInView(parent_view: &NSView, frame: NSRect) -> NSRect;
);

extern_fn!(
    #[cfg(feature = "AppKit_NSView")]
    pub unsafe fn NSAccessibilityPointInView(parent_view: &NSView, point: NSPoint) -> NSPoint;
);

extern_fn!(
    pub unsafe fn NSAccessibilitySetMayContainProtectedContent(flag: Bool) -> Bool;
);

extern_fn!(
    #[cfg(feature = "Foundation_NSString")]
    pub unsafe fn NSAccessibilityRoleDescription(
        role: &NSAccessibilityRole,
        subrole: Option<&NSAccessibilitySubrole>,
    ) -> *mut NSString;
);

extern_fn!(
    #[cfg(feature = "Foundation_NSString")]
    pub unsafe fn NSAccessibilityRoleDescriptionForUIElement(element: &Object) -> *mut NSString;
);

extern_fn!(
    #[cfg(feature = "Foundation_NSString")]
    pub unsafe fn NSAccessibilityActionDescription(
        action: &NSAccessibilityActionName,
    ) -> *mut NSString;
);

extern_fn!(
    #[deprecated = "Exceptions are no longer appropriate for indicating errors in accessibility API. Unexpected values should be handled through appropriate type checking."]
    pub unsafe fn NSAccessibilityRaiseBadArgumentException(
        element: Option<&Object>,
        attribute: Option<&NSAccessibilityAttributeName>,
        value: Option<&Object>,
    );
);

extern_fn!(
    pub unsafe fn NSAccessibilityUnignoredAncestor(element: &Object) -> *mut Object;
);

extern_fn!(
    pub unsafe fn NSAccessibilityUnignoredDescendant(element: &Object) -> *mut Object;
);

extern_fn!(
    #[cfg(feature = "Foundation_NSArray")]
    pub unsafe fn NSAccessibilityUnignoredChildren(original_children: &NSArray)
        -> NonNull<NSArray>;
);

extern_fn!(
    #[cfg(feature = "Foundation_NSArray")]
    pub unsafe fn NSAccessibilityUnignoredChildrenForOnlyChild(
        original_child: &Object,
    ) -> NonNull<NSArray>;
);

extern_fn!(
    pub unsafe fn NSAccessibilityPostNotification(
        element: &Object,
        notification: &NSAccessibilityNotificationName,
    );
);
