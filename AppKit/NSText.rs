//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSWritingDirection {
    NSWritingDirectionNatural = -1,
    NSWritingDirectionLeftToRight = 0,
    NSWritingDirectionRightToLeft = 1,
}

#[objc2::interface(
    unsafe super = NSView,
    unsafe inherits = [
        NSResponder,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSText")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSText;
}

#[cfg(feature = "AppKit_NSText")]
unsafe impl NSAccessibility for NSText {}

#[cfg(feature = "AppKit_NSText")]
unsafe impl NSAccessibilityElementProtocol for NSText {}

#[cfg(feature = "AppKit_NSText")]
unsafe impl NSAnimatablePropertyContainer for NSText {}

#[cfg(feature = "AppKit_NSText")]
unsafe impl NSAppearanceCustomization for NSText {}

#[cfg(feature = "AppKit_NSText")]
unsafe impl NSChangeSpelling for NSText {}

#[cfg(feature = "AppKit_NSText")]
unsafe impl NSCoding for NSText {}

#[cfg(feature = "AppKit_NSText")]
unsafe impl NSDraggingDestination for NSText {}

#[cfg(feature = "AppKit_NSText")]
unsafe impl NSIgnoreMisspelledWords for NSText {}

#[cfg(feature = "AppKit_NSText")]
unsafe impl NSObjectProtocol for NSText {}

#[cfg(feature = "AppKit_NSText")]
unsafe impl NSUserInterfaceItemIdentification for NSText {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSText")]
    pub type NSText;

    #[objc2::method(sel = "initWithFrame:", managed = "Init")]
    pub unsafe fn initWithFrame(this: Option<Allocated<Self>>, frame_rect: NSRect) -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, coder: &NSCoder)
        -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "string", managed = "Other")]
    pub unsafe fn string(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setString:")]
    pub unsafe fn setString(&self, string: &NSString);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "replaceCharactersInRange:withString:")]
    pub unsafe fn replaceCharactersInRange_withString(&self, range: NSRange, string: &NSString);

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "replaceCharactersInRange:withRTF:")]
    pub unsafe fn replaceCharactersInRange_withRTF(&self, range: NSRange, rtf_data: &NSData);

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "replaceCharactersInRange:withRTFD:")]
    pub unsafe fn replaceCharactersInRange_withRTFD(&self, range: NSRange, rtfd_data: &NSData);

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "RTFFromRange:", managed = "Other")]
    pub unsafe fn RTFFromRange(&self, range: NSRange) -> Option<Id<NSData>>;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "RTFDFromRange:", managed = "Other")]
    pub unsafe fn RTFDFromRange(&self, range: NSRange) -> Option<Id<NSData>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "writeRTFDToFile:atomically:")]
    pub unsafe fn writeRTFDToFile_atomically(&self, path: &NSString, flag: bool) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "readRTFDFromFile:")]
    pub unsafe fn readRTFDFromFile(&self, path: &NSString) -> bool;

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn NSTextDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(&self, delegate: Option<&ProtocolObject<dyn NSTextDelegate>>);

    #[objc2::method(sel = "isEditable")]
    pub unsafe fn isEditable(&self) -> bool;

    #[objc2::method(sel = "setEditable:")]
    pub unsafe fn setEditable(&self, editable: bool);

    #[objc2::method(sel = "isSelectable")]
    pub unsafe fn isSelectable(&self) -> bool;

    #[objc2::method(sel = "setSelectable:")]
    pub unsafe fn setSelectable(&self, selectable: bool);

    #[objc2::method(sel = "isRichText")]
    pub unsafe fn isRichText(&self) -> bool;

    #[objc2::method(sel = "setRichText:")]
    pub unsafe fn setRichText(&self, rich_text: bool);

    #[objc2::method(sel = "importsGraphics")]
    pub unsafe fn importsGraphics(&self) -> bool;

    #[objc2::method(sel = "setImportsGraphics:")]
    pub unsafe fn setImportsGraphics(&self, imports_graphics: bool);

    #[objc2::method(sel = "isFieldEditor")]
    pub unsafe fn isFieldEditor(&self) -> bool;

    #[objc2::method(sel = "setFieldEditor:")]
    pub unsafe fn setFieldEditor(&self, field_editor: bool);

    #[objc2::method(sel = "usesFontPanel")]
    pub unsafe fn usesFontPanel(&self) -> bool;

    #[objc2::method(sel = "setUsesFontPanel:")]
    pub unsafe fn setUsesFontPanel(&self, uses_font_panel: bool);

    #[objc2::method(sel = "drawsBackground")]
    pub unsafe fn drawsBackground(&self) -> bool;

    #[objc2::method(sel = "setDrawsBackground:")]
    pub unsafe fn setDrawsBackground(&self, draws_background: bool);

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "backgroundColor", managed = "Other")]
    pub unsafe fn backgroundColor(&self) -> Option<Id<NSColor>>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "setBackgroundColor:")]
    pub unsafe fn setBackgroundColor(&self, background_color: Option<&NSColor>);

    #[objc2::method(sel = "isRulerVisible")]
    pub unsafe fn isRulerVisible(&self) -> bool;

    #[objc2::method(sel = "selectedRange")]
    pub unsafe fn selectedRange(&self) -> NSRange;

    #[objc2::method(sel = "setSelectedRange:")]
    pub unsafe fn setSelectedRange(&self, selected_range: NSRange);

    #[objc2::method(sel = "scrollRangeToVisible:")]
    pub unsafe fn scrollRangeToVisible(&self, range: NSRange);

    #[cfg(feature = "AppKit_NSFont")]
    #[objc2::method(sel = "font", managed = "Other")]
    pub unsafe fn font(&self) -> Option<Id<NSFont>>;

    #[cfg(feature = "AppKit_NSFont")]
    #[objc2::method(sel = "setFont:")]
    pub unsafe fn setFont(&self, font: Option<&NSFont>);

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "textColor", managed = "Other")]
    pub unsafe fn textColor(&self) -> Option<Id<NSColor>>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "setTextColor:")]
    pub unsafe fn setTextColor(&self, text_color: Option<&NSColor>);

    #[objc2::method(sel = "alignment")]
    pub unsafe fn alignment(&self) -> NSTextAlignment;

    #[objc2::method(sel = "setAlignment:")]
    pub unsafe fn setAlignment(&self, alignment: NSTextAlignment);

    #[objc2::method(sel = "baseWritingDirection")]
    pub unsafe fn baseWritingDirection(&self) -> NSWritingDirection;

    #[objc2::method(sel = "setBaseWritingDirection:")]
    pub unsafe fn setBaseWritingDirection(&self, base_writing_direction: NSWritingDirection);

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "setTextColor:range:")]
    pub unsafe fn setTextColor_range(&self, color: Option<&NSColor>, range: NSRange);

    #[cfg(feature = "AppKit_NSFont")]
    #[objc2::method(sel = "setFont:range:")]
    pub unsafe fn setFont_range(&self, font: &NSFont, range: NSRange);

    #[objc2::method(sel = "maxSize")]
    pub unsafe fn maxSize(&self) -> NSSize;

    #[objc2::method(sel = "setMaxSize:")]
    pub unsafe fn setMaxSize(&self, max_size: NSSize);

    #[objc2::method(sel = "minSize")]
    pub unsafe fn minSize(&self) -> NSSize;

    #[objc2::method(sel = "setMinSize:")]
    pub unsafe fn setMinSize(&self, min_size: NSSize);

    #[objc2::method(sel = "isHorizontallyResizable")]
    pub unsafe fn isHorizontallyResizable(&self) -> bool;

    #[objc2::method(sel = "setHorizontallyResizable:")]
    pub unsafe fn setHorizontallyResizable(&self, horizontally_resizable: bool);

    #[objc2::method(sel = "isVerticallyResizable")]
    pub unsafe fn isVerticallyResizable(&self) -> bool;

    #[objc2::method(sel = "setVerticallyResizable:")]
    pub unsafe fn setVerticallyResizable(&self, vertically_resizable: bool);

    #[objc2::method(sel = "sizeToFit")]
    pub unsafe fn sizeToFit(&self);

    #[objc2::method(sel = "copy:")]
    pub unsafe fn copy(&self, sender: Option<&Object>);

    #[objc2::method(sel = "copyFont:")]
    pub unsafe fn copyFont(&self, sender: Option<&Object>);

    #[objc2::method(sel = "copyRuler:")]
    pub unsafe fn copyRuler(&self, sender: Option<&Object>);

    #[objc2::method(sel = "cut:")]
    pub unsafe fn cut(&self, sender: Option<&Object>);

    #[objc2::method(sel = "delete:")]
    pub unsafe fn delete(&self, sender: Option<&Object>);

    #[objc2::method(sel = "paste:")]
    pub unsafe fn paste(&self, sender: Option<&Object>);

    #[objc2::method(sel = "pasteFont:")]
    pub unsafe fn pasteFont(&self, sender: Option<&Object>);

    #[objc2::method(sel = "pasteRuler:")]
    pub unsafe fn pasteRuler(&self, sender: Option<&Object>);

    #[objc2::method(sel = "selectAll:")]
    pub unsafe fn selectAll(&self, sender: Option<&Object>);

    #[objc2::method(sel = "changeFont:")]
    pub unsafe fn changeFont(&self, sender: Option<&Object>);

    #[objc2::method(sel = "alignLeft:")]
    pub unsafe fn alignLeft(&self, sender: Option<&Object>);

    #[objc2::method(sel = "alignRight:")]
    pub unsafe fn alignRight(&self, sender: Option<&Object>);

    #[objc2::method(sel = "alignCenter:")]
    pub unsafe fn alignCenter(&self, sender: Option<&Object>);

    #[objc2::method(sel = "subscript:")]
    pub unsafe fn subscript(&self, sender: Option<&Object>);

    #[objc2::method(sel = "superscript:")]
    pub unsafe fn superscript(&self, sender: Option<&Object>);

    #[objc2::method(sel = "underline:")]
    pub unsafe fn underline(&self, sender: Option<&Object>);

    #[objc2::method(sel = "unscript:")]
    pub unsafe fn unscript(&self, sender: Option<&Object>);

    #[objc2::method(sel = "showGuessPanel:")]
    pub unsafe fn showGuessPanel(&self, sender: Option<&Object>);

    #[objc2::method(sel = "checkSpelling:")]
    pub unsafe fn checkSpelling(&self, sender: Option<&Object>);

    #[objc2::method(sel = "toggleRuler:")]
    pub unsafe fn toggleRuler(&self, sender: Option<&Object>);
}

#[extern_enum]
#[underlying(c_uint)]
pub enum __anonymous__ {
    NSEnterCharacter = 0x0003,
    NSBackspaceCharacter = 0x0008,
    NSTabCharacter = 0x0009,
    NSNewlineCharacter = 0x000a,
    NSFormFeedCharacter = 0x000c,
    NSCarriageReturnCharacter = 0x000d,
    NSBackTabCharacter = 0x0019,
    NSDeleteCharacter = 0x007f,
    NSLineSeparatorCharacter = 0x2028,
    NSParagraphSeparatorCharacter = 0x2029,
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSTextMovement {
    NSTextMovementReturn = 0x10,
    NSTextMovementTab = 0x11,
    NSTextMovementBacktab = 0x12,
    NSTextMovementLeft = 0x13,
    NSTextMovementRight = 0x14,
    NSTextMovementUp = 0x15,
    NSTextMovementDown = 0x16,
    NSTextMovementCancel = 0x17,
    NSTextMovementOther = 0,
}

extern_static!(NSTextDidBeginEditingNotification: &'static NSNotificationName);

extern_static!(NSTextDidEndEditingNotification: &'static NSNotificationName);

extern_static!(NSTextDidChangeNotification: &'static NSNotificationName);

extern_static!(NSTextMovementUserInfoKey: &'static NSString);

#[extern_enum]
#[underlying(c_uint)]
pub enum __anonymous__ {
    NSIllegalTextMovement = 0,
    NSReturnTextMovement = 0x10,
    NSTabTextMovement = 0x11,
    NSBacktabTextMovement = 0x12,
    NSLeftTextMovement = 0x13,
    NSRightTextMovement = 0x14,
    NSUpTextMovement = 0x15,
    NSDownTextMovement = 0x16,
    NSCancelTextMovement = 0x17,
    NSOtherTextMovement = 0,
}

#[objc2::protocol]
pub unsafe trait NSTextDelegate: NSObjectProtocol {
    #[cfg(feature = "AppKit_NSText")]
    #[objc2::method(optional, sel = "textShouldBeginEditing:")]
    unsafe fn textShouldBeginEditing(&self, text_object: &NSText) -> bool;

    #[cfg(feature = "AppKit_NSText")]
    #[objc2::method(optional, sel = "textShouldEndEditing:")]
    unsafe fn textShouldEndEditing(&self, text_object: &NSText) -> bool;

    #[cfg(feature = "Foundation_NSNotification")]
    #[objc2::method(optional, sel = "textDidBeginEditing:")]
    unsafe fn textDidBeginEditing(&self, notification: &NSNotification);

    #[cfg(feature = "Foundation_NSNotification")]
    #[objc2::method(optional, sel = "textDidEndEditing:")]
    unsafe fn textDidEndEditing(&self, notification: &NSNotification);

    #[cfg(feature = "Foundation_NSNotification")]
    #[objc2::method(optional, sel = "textDidChange:")]
    unsafe fn textDidChange(&self, notification: &NSNotification);
}

#[extern_enum]
#[underlying(c_uint)]
pub enum __anonymous__ {
    #[deprecated = "Use NSWritingDirectionEmbedding instead"]
    NSTextWritingDirectionEmbedding = 0 << 1,
    #[deprecated = "Use NSWritingDirectionOverride instead"]
    NSTextWritingDirectionOverride = 1 << 1,
}

extern_static!(NSLeftTextAlignment: NSTextAlignment = NSTextAlignmentLeft);

extern_static!(NSRightTextAlignment: NSTextAlignment = NSTextAlignmentRight);

extern_static!(NSCenterTextAlignment: NSTextAlignment = NSTextAlignmentCenter);

extern_static!(NSJustifiedTextAlignment: NSTextAlignment = NSTextAlignmentJustified);

extern_static!(NSNaturalTextAlignment: NSTextAlignment = NSTextAlignmentNatural);
