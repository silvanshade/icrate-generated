//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

pub type NSTextInputSourceIdentifier = NSString;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextInputContext")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSTextInputContext;
}

#[cfg(feature = "AppKit_NSTextInputContext")]
unsafe impl NSObjectProtocol for NSTextInputContext {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextInputContext")]
    pub type NSTextInputContext;

    #[objc2::method(sel = "currentInputContext", managed = "Other")]
    pub unsafe fn currentInputContext() -> Option<Id<NSTextInputContext>>;

    #[objc2::method(sel = "initWithClient:", managed = "Init")]
    pub unsafe fn initWithClient(
        this: Option<Allocated<Self>>,
        client: &ProtocolObject<dyn NSTextInputClient>,
    ) -> Id<Self>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "client", managed = "Other")]
    pub unsafe fn client(&self) -> Id<ProtocolObject<dyn NSTextInputClient>>;

    #[objc2::method(sel = "acceptsGlyphInfo")]
    pub unsafe fn acceptsGlyphInfo(&self) -> bool;

    #[objc2::method(sel = "setAcceptsGlyphInfo:")]
    pub unsafe fn setAcceptsGlyphInfo(&self, accepts_glyph_info: bool);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "allowedInputSourceLocales", managed = "Other")]
    pub unsafe fn allowedInputSourceLocales(&self) -> Option<Id<NSArray<NSString>>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setAllowedInputSourceLocales:")]
    pub unsafe fn setAllowedInputSourceLocales(
        &self,
        allowed_input_source_locales: Option<&NSArray<NSString>>,
    );

    #[objc2::method(sel = "activate")]
    pub unsafe fn activate(&self);

    #[objc2::method(sel = "deactivate")]
    pub unsafe fn deactivate(&self);

    #[cfg(feature = "AppKit_NSEvent")]
    #[objc2::method(sel = "handleEvent:")]
    pub unsafe fn handleEvent(&self, event: &NSEvent) -> bool;

    #[objc2::method(sel = "discardMarkedText")]
    pub unsafe fn discardMarkedText(&self);

    #[objc2::method(sel = "invalidateCharacterCoordinates")]
    pub unsafe fn invalidateCharacterCoordinates(&self);

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "keyboardInputSources", managed = "Other")]
    pub unsafe fn keyboardInputSources(&self) -> Option<Id<NSArray<NSTextInputSourceIdentifier>>>;

    #[objc2::method(sel = "selectedKeyboardInputSource", managed = "Other")]
    pub unsafe fn selectedKeyboardInputSource(&self) -> Option<Id<NSTextInputSourceIdentifier>>;

    #[objc2::method(sel = "setSelectedKeyboardInputSource:")]
    pub unsafe fn setSelectedKeyboardInputSource(
        &self,
        selected_keyboard_input_source: Option<&NSTextInputSourceIdentifier>,
    );

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "localizedNameForInputSource:", managed = "Other")]
    pub unsafe fn localizedNameForInputSource(
        input_source_identifier: &NSTextInputSourceIdentifier,
    ) -> Option<Id<NSString>>;
}

extern_static!(
    NSTextInputContextKeyboardSelectionDidChangeNotification: &'static NSNotificationName
);
