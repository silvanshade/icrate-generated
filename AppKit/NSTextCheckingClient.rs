//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSTextInputTraitType {
    NSTextInputTraitTypeDefault = 0,
    NSTextInputTraitTypeNo = 1,
    NSTextInputTraitTypeYes = 2,
}

#[objc2::protocol]
pub unsafe trait NSTextInputTraits {
    #[objc2::method(optional, sel = "autocorrectionType")]
    unsafe fn autocorrectionType(&self) -> NSTextInputTraitType;

    #[objc2::method(optional, sel = "setAutocorrectionType:")]
    unsafe fn setAutocorrectionType(&self, autocorrection_type: NSTextInputTraitType);

    #[objc2::method(optional, sel = "spellCheckingType")]
    unsafe fn spellCheckingType(&self) -> NSTextInputTraitType;

    #[objc2::method(optional, sel = "setSpellCheckingType:")]
    unsafe fn setSpellCheckingType(&self, spell_checking_type: NSTextInputTraitType);

    #[objc2::method(optional, sel = "grammarCheckingType")]
    unsafe fn grammarCheckingType(&self) -> NSTextInputTraitType;

    #[objc2::method(optional, sel = "setGrammarCheckingType:")]
    unsafe fn setGrammarCheckingType(&self, grammar_checking_type: NSTextInputTraitType);

    #[objc2::method(optional, sel = "smartQuotesType")]
    unsafe fn smartQuotesType(&self) -> NSTextInputTraitType;

    #[objc2::method(optional, sel = "setSmartQuotesType:")]
    unsafe fn setSmartQuotesType(&self, smart_quotes_type: NSTextInputTraitType);

    #[objc2::method(optional, sel = "smartDashesType")]
    unsafe fn smartDashesType(&self) -> NSTextInputTraitType;

    #[objc2::method(optional, sel = "setSmartDashesType:")]
    unsafe fn setSmartDashesType(&self, smart_dashes_type: NSTextInputTraitType);

    #[objc2::method(optional, sel = "smartInsertDeleteType")]
    unsafe fn smartInsertDeleteType(&self) -> NSTextInputTraitType;

    #[objc2::method(optional, sel = "setSmartInsertDeleteType:")]
    unsafe fn setSmartInsertDeleteType(&self, smart_insert_delete_type: NSTextInputTraitType);

    #[objc2::method(optional, sel = "textReplacementType")]
    unsafe fn textReplacementType(&self) -> NSTextInputTraitType;

    #[objc2::method(optional, sel = "setTextReplacementType:")]
    unsafe fn setTextReplacementType(&self, text_replacement_type: NSTextInputTraitType);

    #[objc2::method(optional, sel = "dataDetectionType")]
    unsafe fn dataDetectionType(&self) -> NSTextInputTraitType;

    #[objc2::method(optional, sel = "setDataDetectionType:")]
    unsafe fn setDataDetectionType(&self, data_detection_type: NSTextInputTraitType);

    #[objc2::method(optional, sel = "linkDetectionType")]
    unsafe fn linkDetectionType(&self) -> NSTextInputTraitType;

    #[objc2::method(optional, sel = "setLinkDetectionType:")]
    unsafe fn setLinkDetectionType(&self, link_detection_type: NSTextInputTraitType);

    #[objc2::method(optional, sel = "textCompletionType")]
    unsafe fn textCompletionType(&self) -> NSTextInputTraitType;

    #[objc2::method(optional, sel = "setTextCompletionType:")]
    unsafe fn setTextCompletionType(&self, text_completion_type: NSTextInputTraitType);
}

#[objc2::protocol]
pub unsafe trait NSTextCheckingClient: NSTextInputClient + NSTextInputTraits {
    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(
        sel = "annotatedSubstringForProposedRange:actualRange:",
        managed = "Other"
    )]
    unsafe fn annotatedSubstringForProposedRange_actualRange(
        &self,
        range: NSRange,
        actual_range: NSRangePointer,
    ) -> Option<Id<NSAttributedString>>;

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setAnnotations:range:")]
    unsafe fn setAnnotations_range(
        &self,
        annotations: &NSDictionary<NSAttributedStringKey, NSString>,
        range: NSRange,
    );

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "addAnnotations:range:")]
    unsafe fn addAnnotations_range(
        &self,
        annotations: &NSDictionary<NSAttributedStringKey, NSString>,
        range: NSRange,
    );

    #[objc2::method(sel = "removeAnnotation:range:")]
    unsafe fn removeAnnotation_range(
        &self,
        annotation_name: &NSAttributedStringKey,
        range: NSRange,
    );

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "replaceCharactersInRange:withAnnotatedString:")]
    unsafe fn replaceCharactersInRange_withAnnotatedString(
        &self,
        range: NSRange,
        annotated_string: &NSAttributedString,
    );

    #[objc2::method(sel = "selectAndShowRange:")]
    unsafe fn selectAndShowRange(&self, range: NSRange);

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "viewForRange:firstRect:actualRange:", managed = "Other")]
    unsafe fn viewForRange_firstRect_actualRange(
        &self,
        range: NSRange,
        first_rect: NSRectPointer,
        actual_range: NSRangePointer,
    ) -> Option<Id<NSView>>;

    #[cfg(feature = "AppKit_NSCandidateListTouchBarItem")]
    #[objc2::method(sel = "candidateListTouchBarItem", managed = "Other")]
    unsafe fn candidateListTouchBarItem(&self) -> Option<Id<NSCandidateListTouchBarItem>>;
}
