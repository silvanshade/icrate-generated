//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSAlertStyle {
    NSAlertStyleWarning = 0,
    NSAlertStyleInformational = 1,
    NSAlertStyleCritical = 2,
}

extern_static!(NSAlertFirstButtonReturn: NSModalResponse = 1000);

extern_static!(NSAlertSecondButtonReturn: NSModalResponse = 1001);

extern_static!(NSAlertThirdButtonReturn: NSModalResponse = 1002);

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSAlert")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSAlert;
}

#[cfg(feature = "AppKit_NSAlert")]
unsafe impl NSObjectProtocol for NSAlert {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSAlert")]
    pub type NSAlert;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "alertWithError:", managed = "Other")]
    pub unsafe fn alertWithError(error: &NSError) -> Id<NSAlert>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "messageText", managed = "Other")]
    pub unsafe fn messageText(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setMessageText:")]
    pub unsafe fn setMessageText(&self, message_text: &NSString);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "informativeText", managed = "Other")]
    pub unsafe fn informativeText(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setInformativeText:")]
    pub unsafe fn setInformativeText(&self, informative_text: &NSString);

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "icon", managed = "Other")]
    pub unsafe fn icon(&self) -> Option<Id<NSImage>>;

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "setIcon:")]
    pub unsafe fn setIcon(&self, icon: Option<&NSImage>);

    #[cfg(all(feature = "AppKit_NSButton", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "addButtonWithTitle:", managed = "Other")]
    pub unsafe fn addButtonWithTitle(&self, title: &NSString) -> Id<NSButton>;

    #[cfg(all(feature = "AppKit_NSButton", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "buttons", managed = "Other")]
    pub unsafe fn buttons(&self) -> Id<NSArray<NSButton>>;

    #[objc2::method(sel = "showsHelp")]
    pub unsafe fn showsHelp(&self) -> bool;

    #[objc2::method(sel = "setShowsHelp:")]
    pub unsafe fn setShowsHelp(&self, shows_help: bool);

    #[objc2::method(sel = "helpAnchor", managed = "Other")]
    pub unsafe fn helpAnchor(&self) -> Option<Id<NSHelpAnchorName>>;

    #[objc2::method(sel = "setHelpAnchor:")]
    pub unsafe fn setHelpAnchor(&self, help_anchor: Option<&NSHelpAnchorName>);

    #[objc2::method(sel = "alertStyle")]
    pub unsafe fn alertStyle(&self) -> NSAlertStyle;

    #[objc2::method(sel = "setAlertStyle:")]
    pub unsafe fn setAlertStyle(&self, alert_style: NSAlertStyle);

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn NSAlertDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(&self, delegate: Option<&ProtocolObject<dyn NSAlertDelegate>>);

    #[objc2::method(sel = "showsSuppressionButton")]
    pub unsafe fn showsSuppressionButton(&self) -> bool;

    #[objc2::method(sel = "setShowsSuppressionButton:")]
    pub unsafe fn setShowsSuppressionButton(&self, shows_suppression_button: bool);

    #[cfg(feature = "AppKit_NSButton")]
    #[objc2::method(sel = "suppressionButton", managed = "Other")]
    pub unsafe fn suppressionButton(&self) -> Option<Id<NSButton>>;

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "accessoryView", managed = "Other")]
    pub unsafe fn accessoryView(&self) -> Option<Id<NSView>>;

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "setAccessoryView:")]
    pub unsafe fn setAccessoryView(&self, accessory_view: Option<&NSView>);

    #[objc2::method(sel = "layout")]
    pub unsafe fn layout(&self);

    #[objc2::method(sel = "runModal")]
    pub unsafe fn runModal(&self) -> NSModalResponse;

    #[cfg(feature = "AppKit_NSWindow")]
    #[objc2::method(sel = "beginSheetModalForWindow:completionHandler:")]
    pub unsafe fn beginSheetModalForWindow_completionHandler(
        &self,
        sheet_window: &NSWindow,
        handler: Option<&Block<(NSModalResponse,), ()>>,
    );

    #[cfg(feature = "AppKit_NSWindow")]
    #[objc2::method(sel = "window", managed = "Other")]
    pub unsafe fn window(&self) -> Id<NSWindow>;
}

#[objc2::protocol]
pub unsafe trait NSAlertDelegate: NSObjectProtocol {
    #[cfg(feature = "AppKit_NSAlert")]
    #[objc2::method(optional, sel = "alertShowHelp:")]
    unsafe fn alertShowHelp(&self, alert: &NSAlert) -> bool;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSAlert")]
    pub type NSAlert;

    #[cfg(feature = "AppKit_NSWindow")]
    #[deprecated = "Use -beginSheetModalForWindow:completionHandler: instead"]
    #[objc2::method(sel = "beginSheetModalForWindow:modalDelegate:didEndSelector:contextInfo:")]
    pub unsafe fn beginSheetModalForWindow_modalDelegate_didEndSelector_contextInfo(
        &self,
        window: &NSWindow,
        delegate: Option<&Object>,
        did_end_selector: Option<Sel>,
        context_info: *mut c_void,
    );
}

extern_static!(NSWarningAlertStyle: NSAlertStyle = NSAlertStyleWarning);

extern_static!(NSInformationalAlertStyle: NSAlertStyle = NSAlertStyleInformational);

extern_static!(NSCriticalAlertStyle: NSAlertStyle = NSAlertStyleCritical);
