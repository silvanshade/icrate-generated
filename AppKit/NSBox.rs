//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSTitlePosition {
    NSNoTitle = 0,
    NSAboveTop = 1,
    NSAtTop = 2,
    NSBelowTop = 3,
    NSAboveBottom = 4,
    NSAtBottom = 5,
    NSBelowBottom = 6,
}

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSBoxType {
    NSBoxPrimary = 0,
    NSBoxSeparator = 2,
    NSBoxCustom = 4,
}

#[objc2::interface(
    unsafe super = NSView,
    unsafe inherits = [
        NSResponder,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSBox")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSBox;
}

#[cfg(feature = "AppKit_NSBox")]
unsafe impl NSAccessibility for NSBox {}

#[cfg(feature = "AppKit_NSBox")]
unsafe impl NSAccessibilityElementProtocol for NSBox {}

#[cfg(feature = "AppKit_NSBox")]
unsafe impl NSAnimatablePropertyContainer for NSBox {}

#[cfg(feature = "AppKit_NSBox")]
unsafe impl NSAppearanceCustomization for NSBox {}

#[cfg(feature = "AppKit_NSBox")]
unsafe impl NSCoding for NSBox {}

#[cfg(feature = "AppKit_NSBox")]
unsafe impl NSDraggingDestination for NSBox {}

#[cfg(feature = "AppKit_NSBox")]
unsafe impl NSObjectProtocol for NSBox {}

#[cfg(feature = "AppKit_NSBox")]
unsafe impl NSUserInterfaceItemIdentification for NSBox {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSBox")]
    pub type NSBox;

    #[objc2::method(sel = "boxType")]
    pub unsafe fn boxType(&self) -> NSBoxType;

    #[objc2::method(sel = "setBoxType:")]
    pub unsafe fn setBoxType(&self, box_type: NSBoxType);

    #[objc2::method(sel = "titlePosition")]
    pub unsafe fn titlePosition(&self) -> NSTitlePosition;

    #[objc2::method(sel = "setTitlePosition:")]
    pub unsafe fn setTitlePosition(&self, title_position: NSTitlePosition);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "title", managed = "Other")]
    pub unsafe fn title(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setTitle:")]
    pub unsafe fn setTitle(&self, title: &NSString);

    #[cfg(feature = "AppKit_NSFont")]
    #[objc2::method(sel = "titleFont", managed = "Other")]
    pub unsafe fn titleFont(&self) -> Id<NSFont>;

    #[cfg(feature = "AppKit_NSFont")]
    #[objc2::method(sel = "setTitleFont:")]
    pub unsafe fn setTitleFont(&self, title_font: &NSFont);

    #[objc2::method(sel = "borderRect")]
    pub unsafe fn borderRect(&self) -> NSRect;

    #[objc2::method(sel = "titleRect")]
    pub unsafe fn titleRect(&self) -> NSRect;

    #[objc2::method(sel = "titleCell", managed = "Other")]
    pub unsafe fn titleCell(&self) -> Id<Object>;

    #[objc2::method(sel = "contentViewMargins")]
    pub unsafe fn contentViewMargins(&self) -> NSSize;

    #[objc2::method(sel = "setContentViewMargins:")]
    pub unsafe fn setContentViewMargins(&self, content_view_margins: NSSize);

    #[objc2::method(sel = "sizeToFit")]
    pub unsafe fn sizeToFit(&self);

    #[objc2::method(sel = "setFrameFromContentFrame:")]
    pub unsafe fn setFrameFromContentFrame(&self, content_frame: NSRect);

    #[objc2::method(sel = "contentView", managed = "Other")]
    pub unsafe fn contentView(&self) -> Option<Id<NSView>>;

    #[objc2::method(sel = "setContentView:")]
    pub unsafe fn setContentView(&self, content_view: Option<&NSView>);

    #[objc2::method(sel = "isTransparent")]
    pub unsafe fn isTransparent(&self) -> bool;

    #[objc2::method(sel = "setTransparent:")]
    pub unsafe fn setTransparent(&self, transparent: bool);

    #[objc2::method(sel = "borderWidth")]
    pub unsafe fn borderWidth(&self) -> CGFloat;

    #[objc2::method(sel = "setBorderWidth:")]
    pub unsafe fn setBorderWidth(&self, border_width: CGFloat);

    #[objc2::method(sel = "cornerRadius")]
    pub unsafe fn cornerRadius(&self) -> CGFloat;

    #[objc2::method(sel = "setCornerRadius:")]
    pub unsafe fn setCornerRadius(&self, corner_radius: CGFloat);

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "borderColor", managed = "Other")]
    pub unsafe fn borderColor(&self) -> Id<NSColor>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "setBorderColor:")]
    pub unsafe fn setBorderColor(&self, border_color: &NSColor);

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "fillColor", managed = "Other")]
    pub unsafe fn fillColor(&self) -> Id<NSColor>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "setFillColor:")]
    pub unsafe fn setFillColor(&self, fill_color: &NSColor);
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSBox")]
    pub type NSBox;

    #[deprecated = "borderType is only applicable to NSBoxOldStyle, which is deprecated. To replace a borderType of NSNoBorder, use the `transparent` property."]
    #[objc2::method(sel = "borderType")]
    pub unsafe fn borderType(&self) -> NSBorderType;

    #[deprecated = "borderType is only applicable to NSBoxOldStyle, which is deprecated. To replace a borderType of NSNoBorder, use the `transparent` property."]
    #[objc2::method(sel = "setBorderType:")]
    pub unsafe fn setBorderType(&self, border_type: NSBorderType);

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "setTitleWithMnemonic:")]
    pub unsafe fn setTitleWithMnemonic(&self, string_with_ampersand: Option<&NSString>);
}

extern_static!(NSBoxSecondary: NSBoxType = 1);

extern_static!(NSBoxOldStyle: NSBoxType = 3);

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSView`
    #[cfg(feature = "AppKit_NSBox")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSBox")]
    pub type NSBox;

    #[objc2::method(sel = "initWithFrame:", managed = "Init")]
    pub unsafe fn initWithFrame(this: Option<Allocated<Self>>, frame_rect: NSRect) -> Id<Self>;
}
