//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSLevelIndicatorStyle {
    NSLevelIndicatorStyleRelevancy = 0,
    NSLevelIndicatorStyleContinuousCapacity = 1,
    NSLevelIndicatorStyleDiscreteCapacity = 2,
    NSLevelIndicatorStyleRating = 3,
}

#[objc2::interface(
    unsafe super = NSActionCell,
    unsafe inherits = [
        NSCell,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSLevelIndicatorCell")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSLevelIndicatorCell;
}

#[cfg(feature = "AppKit_NSLevelIndicatorCell")]
unsafe impl NSAccessibility for NSLevelIndicatorCell {}

#[cfg(feature = "AppKit_NSLevelIndicatorCell")]
unsafe impl NSAccessibilityElementProtocol for NSLevelIndicatorCell {}

#[cfg(feature = "AppKit_NSLevelIndicatorCell")]
unsafe impl NSCoding for NSLevelIndicatorCell {}

#[cfg(feature = "AppKit_NSLevelIndicatorCell")]
unsafe impl NSObjectProtocol for NSLevelIndicatorCell {}

#[cfg(feature = "AppKit_NSLevelIndicatorCell")]
unsafe impl NSUserInterfaceItemIdentification for NSLevelIndicatorCell {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSLevelIndicatorCell")]
    pub type NSLevelIndicatorCell;

    #[objc2::method(sel = "initWithLevelIndicatorStyle:", managed = "Init")]
    pub unsafe fn initWithLevelIndicatorStyle(
        this: Option<Allocated<Self>>,
        level_indicator_style: NSLevelIndicatorStyle,
    ) -> Id<Self>;

    #[objc2::method(sel = "levelIndicatorStyle")]
    pub unsafe fn levelIndicatorStyle(&self) -> NSLevelIndicatorStyle;

    #[objc2::method(sel = "setLevelIndicatorStyle:")]
    pub unsafe fn setLevelIndicatorStyle(&self, level_indicator_style: NSLevelIndicatorStyle);

    #[objc2::method(sel = "minValue")]
    pub unsafe fn minValue(&self) -> c_double;

    #[objc2::method(sel = "setMinValue:")]
    pub unsafe fn setMinValue(&self, min_value: c_double);

    #[objc2::method(sel = "maxValue")]
    pub unsafe fn maxValue(&self) -> c_double;

    #[objc2::method(sel = "setMaxValue:")]
    pub unsafe fn setMaxValue(&self, max_value: c_double);

    #[objc2::method(sel = "warningValue")]
    pub unsafe fn warningValue(&self) -> c_double;

    #[objc2::method(sel = "setWarningValue:")]
    pub unsafe fn setWarningValue(&self, warning_value: c_double);

    #[objc2::method(sel = "criticalValue")]
    pub unsafe fn criticalValue(&self) -> c_double;

    #[objc2::method(sel = "setCriticalValue:")]
    pub unsafe fn setCriticalValue(&self, critical_value: c_double);

    #[objc2::method(sel = "tickMarkPosition")]
    pub unsafe fn tickMarkPosition(&self) -> NSTickMarkPosition;

    #[objc2::method(sel = "setTickMarkPosition:")]
    pub unsafe fn setTickMarkPosition(&self, tick_mark_position: NSTickMarkPosition);

    #[objc2::method(sel = "numberOfTickMarks")]
    pub unsafe fn numberOfTickMarks(&self) -> NSInteger;

    #[objc2::method(sel = "setNumberOfTickMarks:")]
    pub unsafe fn setNumberOfTickMarks(&self, number_of_tick_marks: NSInteger);

    #[objc2::method(sel = "numberOfMajorTickMarks")]
    pub unsafe fn numberOfMajorTickMarks(&self) -> NSInteger;

    #[objc2::method(sel = "setNumberOfMajorTickMarks:")]
    pub unsafe fn setNumberOfMajorTickMarks(&self, number_of_major_tick_marks: NSInteger);

    #[objc2::method(sel = "rectOfTickMarkAtIndex:")]
    pub unsafe fn rectOfTickMarkAtIndex(&self, index: NSInteger) -> NSRect;

    #[objc2::method(sel = "tickMarkValueAtIndex:")]
    pub unsafe fn tickMarkValueAtIndex(&self, index: NSInteger) -> c_double;
}

extern_static!(
    NSRelevancyLevelIndicatorStyle: NSLevelIndicatorStyle = NSLevelIndicatorStyleRelevancy
);

extern_static!(
    NSContinuousCapacityLevelIndicatorStyle: NSLevelIndicatorStyle =
        NSLevelIndicatorStyleContinuousCapacity
);

extern_static!(
    NSDiscreteCapacityLevelIndicatorStyle: NSLevelIndicatorStyle =
        NSLevelIndicatorStyleDiscreteCapacity
);

extern_static!(NSRatingLevelIndicatorStyle: NSLevelIndicatorStyle = NSLevelIndicatorStyleRating);

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSCell`
    #[cfg(feature = "AppKit_NSLevelIndicatorCell")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSLevelIndicatorCell")]
    pub type NSLevelIndicatorCell;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initTextCell:", managed = "Init")]
    pub unsafe fn initTextCell(this: Option<Allocated<Self>>, string: &NSString) -> Id<Self>;

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "initImageCell:", managed = "Init")]
    pub unsafe fn initImageCell(this: Option<Allocated<Self>>, image: Option<&NSImage>)
        -> Id<Self>;
}
