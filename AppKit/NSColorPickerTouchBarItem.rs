//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSTouchBarItem,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSColorPickerTouchBarItem")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSColorPickerTouchBarItem;
}

#[cfg(feature = "AppKit_NSColorPickerTouchBarItem")]
unsafe impl NSCoding for NSColorPickerTouchBarItem {}

#[cfg(feature = "AppKit_NSColorPickerTouchBarItem")]
unsafe impl NSObjectProtocol for NSColorPickerTouchBarItem {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSColorPickerTouchBarItem")]
    pub type NSColorPickerTouchBarItem;

    #[objc2::method(sel = "colorPickerWithIdentifier:", managed = "Other")]
    pub unsafe fn colorPickerWithIdentifier(identifier: &NSTouchBarItemIdentifier) -> Id<Self>;

    #[objc2::method(sel = "textColorPickerWithIdentifier:", managed = "Other")]
    pub unsafe fn textColorPickerWithIdentifier(identifier: &NSTouchBarItemIdentifier) -> Id<Self>;

    #[objc2::method(sel = "strokeColorPickerWithIdentifier:", managed = "Other")]
    pub unsafe fn strokeColorPickerWithIdentifier(
        identifier: &NSTouchBarItemIdentifier,
    ) -> Id<Self>;

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "colorPickerWithIdentifier:buttonImage:", managed = "Other")]
    pub unsafe fn colorPickerWithIdentifier_buttonImage(
        identifier: &NSTouchBarItemIdentifier,
        image: &NSImage,
    ) -> Id<Self>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "color", managed = "Other")]
    pub unsafe fn color(&self) -> Id<NSColor>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "setColor:")]
    pub unsafe fn setColor(&self, color: &NSColor);

    #[objc2::method(sel = "showsAlpha")]
    pub unsafe fn showsAlpha(&self) -> bool;

    #[objc2::method(sel = "setShowsAlpha:")]
    pub unsafe fn setShowsAlpha(&self, shows_alpha: bool);

    #[cfg(all(feature = "AppKit_NSColorSpace", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "allowedColorSpaces", managed = "Other")]
    pub unsafe fn allowedColorSpaces(&self) -> Option<Id<NSArray<NSColorSpace>>>;

    #[cfg(all(feature = "AppKit_NSColorSpace", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "setAllowedColorSpaces:")]
    pub unsafe fn setAllowedColorSpaces(
        &self,
        allowed_color_spaces: Option<&NSArray<NSColorSpace>>,
    );

    #[cfg(feature = "AppKit_NSColorList")]
    #[objc2::method(sel = "colorList", managed = "Other")]
    pub unsafe fn colorList(&self) -> Option<Id<NSColorList>>;

    #[cfg(feature = "AppKit_NSColorList")]
    #[objc2::method(sel = "setColorList:")]
    pub unsafe fn setColorList(&self, color_list: Option<&NSColorList>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "customizationLabel", managed = "Other")]
    pub unsafe fn customizationLabel(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setCustomizationLabel:")]
    pub unsafe fn setCustomizationLabel(&self, customization_label: Option<&NSString>);

    #[objc2::method(sel = "target", managed = "Other")]
    pub unsafe fn target(&self) -> Option<Id<Object>>;

    #[objc2::method(sel = "setTarget:")]
    pub unsafe fn setTarget(&self, target: Option<&Object>);

    #[objc2::method(sel = "action")]
    pub unsafe fn action(&self) -> Option<Sel>;

    #[objc2::method(sel = "setAction:")]
    pub unsafe fn setAction(&self, action: Option<Sel>);

    #[objc2::method(sel = "isEnabled")]
    pub unsafe fn isEnabled(&self) -> bool;

    #[objc2::method(sel = "setEnabled:")]
    pub unsafe fn setEnabled(&self, enabled: bool);
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSTouchBarItem`
    #[cfg(feature = "AppKit_NSColorPickerTouchBarItem")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSColorPickerTouchBarItem")]
    pub type NSColorPickerTouchBarItem;

    #[objc2::method(sel = "initWithIdentifier:", managed = "Init")]
    pub unsafe fn initWithIdentifier(
        this: Option<Allocated<Self>>,
        identifier: &NSTouchBarItemIdentifier,
    ) -> Id<Self>;
}
