//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSTouchBarItem,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSCandidateListTouchBarItem")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSCandidateListTouchBarItem<
        CandidateType: Message = Object,
        CandidateTypeOwnership: Ownership = Shared,
    >;
}

#[cfg(feature = "AppKit_NSCandidateListTouchBarItem")]
unsafe impl<CandidateType: Message, CandidateTypeOwnership: Ownership> NSCoding
    for NSCandidateListTouchBarItem<CandidateType, CandidateTypeOwnership>
{
}

#[cfg(feature = "AppKit_NSCandidateListTouchBarItem")]
unsafe impl<CandidateType: Message, CandidateTypeOwnership: Ownership> NSObjectProtocol
    for NSCandidateListTouchBarItem<CandidateType, CandidateTypeOwnership>
{
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSCandidateListTouchBarItem")]
    pub type NSCandidateListTouchBarItem<
        CandidateType: Message = Object,
        CandidateTypeOwnership: Ownership = Shared,
    >;

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "client", managed = "Other")]
    pub unsafe fn client(&self) -> Option<Id<NSView>>;

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "setClient:")]
    pub unsafe fn setClient(&self, client: Option<&NSView>);

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(
        &self,
    ) -> Option<Id<ProtocolObject<dyn NSCandidateListTouchBarItemDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(
        &self,
        delegate: Option<&ProtocolObject<dyn NSCandidateListTouchBarItemDelegate>>,
    );

    #[objc2::method(sel = "isCollapsed")]
    pub unsafe fn isCollapsed(&self) -> bool;

    #[objc2::method(sel = "setCollapsed:")]
    pub unsafe fn setCollapsed(&self, collapsed: bool);

    #[objc2::method(sel = "allowsCollapsing")]
    pub unsafe fn allowsCollapsing(&self) -> bool;

    #[objc2::method(sel = "setAllowsCollapsing:")]
    pub unsafe fn setAllowsCollapsing(&self, allows_collapsing: bool);

    #[objc2::method(sel = "isCandidateListVisible")]
    pub unsafe fn isCandidateListVisible(&self) -> bool;

    #[objc2::method(sel = "updateWithInsertionPointVisibility:")]
    pub unsafe fn updateWithInsertionPointVisibility(&self, is_visible: bool);

    #[objc2::method(sel = "allowsTextInputContextCandidates")]
    pub unsafe fn allowsTextInputContextCandidates(&self) -> bool;

    #[objc2::method(sel = "setAllowsTextInputContextCandidates:")]
    pub unsafe fn setAllowsTextInputContextCandidates(
        &self,
        allows_text_input_context_candidates: bool,
    );

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "attributedStringForCandidate")]
    pub unsafe fn attributedStringForCandidate(
        &self,
    ) -> *mut Block<(NonNull<CandidateType>, NSInteger), NonNull<NSAttributedString>>;

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "setAttributedStringForCandidate:")]
    pub unsafe fn setAttributedStringForCandidate(
        &self,
        attributed_string_for_candidate: Option<
            &Block<(NonNull<CandidateType>, NSInteger), NonNull<NSAttributedString>>,
        >,
    );

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "candidates", managed = "Other")]
    pub unsafe fn candidates(&self) -> Id<NSArray<CandidateType>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setCandidates:forSelectedRange:inString:")]
    pub unsafe fn setCandidates_forSelectedRange_inString(
        &self,
        candidates: &NSArray<CandidateType>,
        selected_range: NSRange,
        original_string: Option<&NSString>,
    );

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "customizationLabel", managed = "Other")]
    pub unsafe fn customizationLabel(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setCustomizationLabel:")]
    pub unsafe fn setCustomizationLabel(&self, customization_label: Option<&NSString>);
}

#[objc2::protocol]
pub unsafe trait NSCandidateListTouchBarItemDelegate: NSObjectProtocol {
    #[cfg(feature = "AppKit_NSCandidateListTouchBarItem")]
    #[objc2::method(
        optional,
        sel = "candidateListTouchBarItem:beginSelectingCandidateAtIndex:"
    )]
    unsafe fn candidateListTouchBarItem_beginSelectingCandidateAtIndex(
        &self,
        an_item: &NSCandidateListTouchBarItem,
        index: NSInteger,
    );

    #[cfg(feature = "AppKit_NSCandidateListTouchBarItem")]
    #[objc2::method(
        optional,
        sel = "candidateListTouchBarItem:changeSelectionFromCandidateAtIndex:toIndex:"
    )]
    unsafe fn candidateListTouchBarItem_changeSelectionFromCandidateAtIndex_toIndex(
        &self,
        an_item: &NSCandidateListTouchBarItem,
        previous_index: NSInteger,
        index: NSInteger,
    );

    #[cfg(feature = "AppKit_NSCandidateListTouchBarItem")]
    #[objc2::method(
        optional,
        sel = "candidateListTouchBarItem:endSelectingCandidateAtIndex:"
    )]
    unsafe fn candidateListTouchBarItem_endSelectingCandidateAtIndex(
        &self,
        an_item: &NSCandidateListTouchBarItem,
        index: NSInteger,
    );

    #[cfg(feature = "AppKit_NSCandidateListTouchBarItem")]
    #[objc2::method(
        optional,
        sel = "candidateListTouchBarItem:changedCandidateListVisibility:"
    )]
    unsafe fn candidateListTouchBarItem_changedCandidateListVisibility(
        &self,
        an_item: &NSCandidateListTouchBarItem,
        is_visible: bool,
    );
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSView")]
    pub type NSView;

    #[cfg(feature = "AppKit_NSCandidateListTouchBarItem")]
    #[objc2::method(sel = "candidateListTouchBarItem", managed = "Other")]
    pub unsafe fn candidateListTouchBarItem(&self) -> Option<Id<NSCandidateListTouchBarItem>>;
}

extern_static!(NSTouchBarItemIdentifierCandidateList: &'static NSTouchBarItemIdentifier);

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSTouchBarItem`
    #[cfg(feature = "AppKit_NSCandidateListTouchBarItem")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSCandidateListTouchBarItem")]
    pub type NSCandidateListTouchBarItem<
        CandidateType: Message = Object,
        CandidateTypeOwnership: Ownership = Shared,
    >;

    #[objc2::method(sel = "initWithIdentifier:", managed = "Init")]
    pub unsafe fn initWithIdentifier(
        this: Option<Allocated<Self>>,
        identifier: &NSTouchBarItemIdentifier,
    ) -> Id<Self>;
}
