//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

typed_enum!(
    pub type NSImageHintKey = NSString;
);

#[extern_enum]
#[underlying(c_uint)]
pub enum __anonymous__ {
    NSImageRepMatchesDevice = 0,
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSImageLayoutDirection {
    NSImageLayoutDirectionUnspecified = -1,
    NSImageLayoutDirectionLeftToRight = 2,
    NSImageLayoutDirectionRightToLeft = 3,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSImageRep")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSImageRep;
}

#[cfg(feature = "AppKit_NSImageRep")]
unsafe impl NSCoding for NSImageRep {}

#[cfg(feature = "AppKit_NSImageRep")]
unsafe impl NSObjectProtocol for NSImageRep {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSImageRep")]
    pub type NSImageRep;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, coder: &NSCoder)
        -> Option<Id<Self>>;

    #[objc2::method(sel = "draw")]
    pub unsafe fn draw(&self) -> bool;

    #[objc2::method(sel = "drawAtPoint:")]
    pub unsafe fn drawAtPoint(&self, point: NSPoint) -> bool;

    #[objc2::method(sel = "drawInRect:")]
    pub unsafe fn drawInRect(&self, rect: NSRect) -> bool;

    #[cfg(feature = "Foundation_NSDictionary")]
    #[objc2::method(sel = "drawInRect:fromRect:operation:fraction:respectFlipped:hints:")]
    pub unsafe fn drawInRect_fromRect_operation_fraction_respectFlipped_hints(
        &self,
        dst_space_portion_rect: NSRect,
        src_space_portion_rect: NSRect,
        op: NSCompositingOperation,
        requested_alpha: CGFloat,
        respect_context_is_flipped: bool,
        hints: Option<&NSDictionary<NSImageHintKey, Object>>,
    ) -> bool;

    #[objc2::method(sel = "size")]
    pub unsafe fn size(&self) -> NSSize;

    #[objc2::method(sel = "setSize:")]
    pub unsafe fn setSize(&self, size: NSSize);

    #[objc2::method(sel = "hasAlpha")]
    pub unsafe fn hasAlpha(&self) -> bool;

    #[objc2::method(sel = "setAlpha:")]
    pub unsafe fn setAlpha(&self, alpha: bool);

    #[objc2::method(sel = "isOpaque")]
    pub unsafe fn isOpaque(&self) -> bool;

    #[objc2::method(sel = "setOpaque:")]
    pub unsafe fn setOpaque(&self, opaque: bool);

    #[objc2::method(sel = "colorSpaceName", managed = "Other")]
    pub unsafe fn colorSpaceName(&self) -> Id<NSColorSpaceName>;

    #[objc2::method(sel = "setColorSpaceName:")]
    pub unsafe fn setColorSpaceName(&self, color_space_name: &NSColorSpaceName);

    #[objc2::method(sel = "bitsPerSample")]
    pub unsafe fn bitsPerSample(&self) -> NSInteger;

    #[objc2::method(sel = "setBitsPerSample:")]
    pub unsafe fn setBitsPerSample(&self, bits_per_sample: NSInteger);

    #[objc2::method(sel = "pixelsWide")]
    pub unsafe fn pixelsWide(&self) -> NSInteger;

    #[objc2::method(sel = "setPixelsWide:")]
    pub unsafe fn setPixelsWide(&self, pixels_wide: NSInteger);

    #[objc2::method(sel = "pixelsHigh")]
    pub unsafe fn pixelsHigh(&self) -> NSInteger;

    #[objc2::method(sel = "setPixelsHigh:")]
    pub unsafe fn setPixelsHigh(&self, pixels_high: NSInteger);

    #[objc2::method(sel = "layoutDirection")]
    pub unsafe fn layoutDirection(&self) -> NSImageLayoutDirection;

    #[objc2::method(sel = "setLayoutDirection:")]
    pub unsafe fn setLayoutDirection(&self, layout_direction: NSImageLayoutDirection);

    #[objc2::method(sel = "registerImageRepClass:")]
    pub unsafe fn registerImageRepClass(image_rep_class: &Class);

    #[objc2::method(sel = "unregisterImageRepClass:")]
    pub unsafe fn unregisterImageRepClass(image_rep_class: &Class);

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "registeredImageRepClasses", managed = "Other")]
    pub unsafe fn registeredImageRepClasses() -> Id<NSArray<TodoClass>>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "Use +imageRepClassForType: instead"]
    #[objc2::method(sel = "imageRepClassForFileType:")]
    pub unsafe fn imageRepClassForFileType(r#type: &NSString) -> Option<&'static Class>;

    #[deprecated = "Use +imageRepClassForType: instead"]
    #[objc2::method(sel = "imageRepClassForPasteboardType:")]
    pub unsafe fn imageRepClassForPasteboardType(
        r#type: &NSPasteboardType,
    ) -> Option<&'static Class>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "imageRepClassForType:")]
    pub unsafe fn imageRepClassForType(r#type: &NSString) -> Option<&'static Class>;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "imageRepClassForData:")]
    pub unsafe fn imageRepClassForData(data: &NSData) -> Option<&'static Class>;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "canInitWithData:")]
    pub unsafe fn canInitWithData(data: &NSData) -> bool;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[deprecated = "Use +imageUnfilteredTypes instead"]
    #[objc2::method(sel = "imageUnfilteredFileTypes", managed = "Other")]
    pub unsafe fn imageUnfilteredFileTypes() -> Id<NSArray<NSString>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[deprecated = "Use +imageUnfilteredTypes instead"]
    #[objc2::method(sel = "imageUnfilteredPasteboardTypes", managed = "Other")]
    pub unsafe fn imageUnfilteredPasteboardTypes() -> Id<NSArray<NSPasteboardType>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[deprecated = "Use +imageTypes instead"]
    #[objc2::method(sel = "imageFileTypes", managed = "Other")]
    pub unsafe fn imageFileTypes() -> Id<NSArray<NSString>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[deprecated = "Use +imageTypes instead"]
    #[objc2::method(sel = "imagePasteboardTypes", managed = "Other")]
    pub unsafe fn imagePasteboardTypes() -> Id<NSArray<NSPasteboardType>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "imageUnfilteredTypes", managed = "Other")]
    pub unsafe fn imageUnfilteredTypes() -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "imageTypes", managed = "Other")]
    pub unsafe fn imageTypes() -> Id<NSArray<NSString>>;

    #[cfg(feature = "AppKit_NSPasteboard")]
    #[objc2::method(sel = "canInitWithPasteboard:")]
    pub unsafe fn canInitWithPasteboard(pasteboard: &NSPasteboard) -> bool;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "imageRepsWithContentsOfFile:", managed = "Other")]
    pub unsafe fn imageRepsWithContentsOfFile(
        filename: &NSString,
    ) -> Option<Id<NSArray<NSImageRep>>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "imageRepWithContentsOfFile:", managed = "Other")]
    pub unsafe fn imageRepWithContentsOfFile(filename: &NSString) -> Option<Id<NSImageRep>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSURL"))]
    #[objc2::method(sel = "imageRepsWithContentsOfURL:", managed = "Other")]
    pub unsafe fn imageRepsWithContentsOfURL(url: &NSURL) -> Option<Id<NSArray<NSImageRep>>>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "imageRepWithContentsOfURL:", managed = "Other")]
    pub unsafe fn imageRepWithContentsOfURL(url: &NSURL) -> Option<Id<NSImageRep>>;

    #[cfg(all(feature = "AppKit_NSPasteboard", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "imageRepsWithPasteboard:", managed = "Other")]
    pub unsafe fn imageRepsWithPasteboard(
        pasteboard: &NSPasteboard,
    ) -> Option<Id<NSArray<NSImageRep>>>;

    #[cfg(feature = "AppKit_NSPasteboard")]
    #[objc2::method(sel = "imageRepWithPasteboard:", managed = "Other")]
    pub unsafe fn imageRepWithPasteboard(pasteboard: &NSPasteboard) -> Option<Id<NSImageRep>>;
}

extern_static!(NSImageRepRegistryDidChangeNotification: &'static NSNotificationName);
