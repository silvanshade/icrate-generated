//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

extern_static!(NSComboBoxWillPopUpNotification: &'static NSNotificationName);

extern_static!(NSComboBoxWillDismissNotification: &'static NSNotificationName);

extern_static!(NSComboBoxSelectionDidChangeNotification: &'static NSNotificationName);

extern_static!(NSComboBoxSelectionIsChangingNotification: &'static NSNotificationName);

#[objc2::protocol]
pub unsafe trait NSComboBoxDataSource: NSObjectProtocol {
    #[cfg(feature = "AppKit_NSComboBox")]
    #[objc2::method(optional, sel = "numberOfItemsInComboBox:")]
    unsafe fn numberOfItemsInComboBox(&self, combo_box: &NSComboBox) -> NSInteger;

    #[cfg(feature = "AppKit_NSComboBox")]
    #[objc2::method(
        optional,
        sel = "comboBox:objectValueForItemAtIndex:",
        managed = "Other"
    )]
    unsafe fn comboBox_objectValueForItemAtIndex(
        &self,
        combo_box: &NSComboBox,
        index: NSInteger,
    ) -> Option<Id<Object>>;

    #[cfg(all(feature = "AppKit_NSComboBox", feature = "Foundation_NSString"))]
    #[objc2::method(optional, sel = "comboBox:indexOfItemWithStringValue:")]
    unsafe fn comboBox_indexOfItemWithStringValue(
        &self,
        combo_box: &NSComboBox,
        string: &NSString,
    ) -> NSUInteger;

    #[cfg(all(feature = "AppKit_NSComboBox", feature = "Foundation_NSString"))]
    #[objc2::method(optional, sel = "comboBox:completedString:", managed = "Other")]
    unsafe fn comboBox_completedString(
        &self,
        combo_box: &NSComboBox,
        string: &NSString,
    ) -> Option<Id<NSString>>;
}

#[objc2::protocol]
pub unsafe trait NSComboBoxDelegate: NSTextFieldDelegate {
    #[cfg(feature = "Foundation_NSNotification")]
    #[objc2::method(optional, sel = "comboBoxWillPopUp:")]
    unsafe fn comboBoxWillPopUp(&self, notification: &NSNotification);

    #[cfg(feature = "Foundation_NSNotification")]
    #[objc2::method(optional, sel = "comboBoxWillDismiss:")]
    unsafe fn comboBoxWillDismiss(&self, notification: &NSNotification);

    #[cfg(feature = "Foundation_NSNotification")]
    #[objc2::method(optional, sel = "comboBoxSelectionDidChange:")]
    unsafe fn comboBoxSelectionDidChange(&self, notification: &NSNotification);

    #[cfg(feature = "Foundation_NSNotification")]
    #[objc2::method(optional, sel = "comboBoxSelectionIsChanging:")]
    unsafe fn comboBoxSelectionIsChanging(&self, notification: &NSNotification);
}

#[objc2::interface(
    unsafe super = NSTextField,
    unsafe inherits = [
        NSControl,
        NSView,
        NSResponder,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSComboBox")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSComboBox;
}

#[cfg(feature = "AppKit_NSComboBox")]
unsafe impl NSAccessibility for NSComboBox {}

#[cfg(feature = "AppKit_NSComboBox")]
unsafe impl NSAccessibilityElementProtocol for NSComboBox {}

#[cfg(feature = "AppKit_NSComboBox")]
unsafe impl NSAccessibilityNavigableStaticText for NSComboBox {}

#[cfg(feature = "AppKit_NSComboBox")]
unsafe impl NSAccessibilityStaticText for NSComboBox {}

#[cfg(feature = "AppKit_NSComboBox")]
unsafe impl NSAnimatablePropertyContainer for NSComboBox {}

#[cfg(feature = "AppKit_NSComboBox")]
unsafe impl NSAppearanceCustomization for NSComboBox {}

#[cfg(feature = "AppKit_NSComboBox")]
unsafe impl NSCoding for NSComboBox {}

#[cfg(feature = "AppKit_NSComboBox")]
unsafe impl NSDraggingDestination for NSComboBox {}

#[cfg(feature = "AppKit_NSComboBox")]
unsafe impl NSObjectProtocol for NSComboBox {}

#[cfg(feature = "AppKit_NSComboBox")]
unsafe impl NSTextContent for NSComboBox {}

#[cfg(feature = "AppKit_NSComboBox")]
unsafe impl NSUserInterfaceItemIdentification for NSComboBox {}

#[cfg(feature = "AppKit_NSComboBox")]
unsafe impl NSUserInterfaceValidations for NSComboBox {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSComboBox")]
    pub type NSComboBox;

    #[objc2::method(sel = "hasVerticalScroller")]
    pub unsafe fn hasVerticalScroller(&self) -> bool;

    #[objc2::method(sel = "setHasVerticalScroller:")]
    pub unsafe fn setHasVerticalScroller(&self, has_vertical_scroller: bool);

    #[objc2::method(sel = "intercellSpacing")]
    pub unsafe fn intercellSpacing(&self) -> NSSize;

    #[objc2::method(sel = "setIntercellSpacing:")]
    pub unsafe fn setIntercellSpacing(&self, intercell_spacing: NSSize);

    #[objc2::method(sel = "itemHeight")]
    pub unsafe fn itemHeight(&self) -> CGFloat;

    #[objc2::method(sel = "setItemHeight:")]
    pub unsafe fn setItemHeight(&self, item_height: CGFloat);

    #[objc2::method(sel = "numberOfVisibleItems")]
    pub unsafe fn numberOfVisibleItems(&self) -> NSInteger;

    #[objc2::method(sel = "setNumberOfVisibleItems:")]
    pub unsafe fn setNumberOfVisibleItems(&self, number_of_visible_items: NSInteger);

    #[objc2::method(sel = "isButtonBordered")]
    pub unsafe fn isButtonBordered(&self) -> bool;

    #[objc2::method(sel = "setButtonBordered:")]
    pub unsafe fn setButtonBordered(&self, button_bordered: bool);

    #[objc2::method(sel = "reloadData")]
    pub unsafe fn reloadData(&self);

    #[objc2::method(sel = "noteNumberOfItemsChanged")]
    pub unsafe fn noteNumberOfItemsChanged(&self);

    #[objc2::method(sel = "usesDataSource")]
    pub unsafe fn usesDataSource(&self) -> bool;

    #[objc2::method(sel = "setUsesDataSource:")]
    pub unsafe fn setUsesDataSource(&self, uses_data_source: bool);

    #[objc2::method(sel = "scrollItemAtIndexToTop:")]
    pub unsafe fn scrollItemAtIndexToTop(&self, index: NSInteger);

    #[objc2::method(sel = "scrollItemAtIndexToVisible:")]
    pub unsafe fn scrollItemAtIndexToVisible(&self, index: NSInteger);

    #[objc2::method(sel = "selectItemAtIndex:")]
    pub unsafe fn selectItemAtIndex(&self, index: NSInteger);

    #[objc2::method(sel = "deselectItemAtIndex:")]
    pub unsafe fn deselectItemAtIndex(&self, index: NSInteger);

    #[objc2::method(sel = "indexOfSelectedItem")]
    pub unsafe fn indexOfSelectedItem(&self) -> NSInteger;

    #[objc2::method(sel = "numberOfItems")]
    pub unsafe fn numberOfItems(&self) -> NSInteger;

    #[objc2::method(sel = "completes")]
    pub unsafe fn completes(&self) -> bool;

    #[objc2::method(sel = "setCompletes:")]
    pub unsafe fn setCompletes(&self, completes: bool);

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn NSComboBoxDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(&self, delegate: Option<&ProtocolObject<dyn NSComboBoxDelegate>>);

    #[objc2::method(sel = "dataSource", managed = "Other")]
    pub unsafe fn dataSource(&self) -> Option<Id<ProtocolObject<dyn NSComboBoxDataSource>>>;

    #[objc2::method(sel = "setDataSource:")]
    pub unsafe fn setDataSource(
        &self,
        data_source: Option<&ProtocolObject<dyn NSComboBoxDataSource>>,
    );

    #[objc2::method(sel = "addItemWithObjectValue:")]
    pub unsafe fn addItemWithObjectValue(&self, object: &Object);

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "addItemsWithObjectValues:")]
    pub unsafe fn addItemsWithObjectValues(&self, objects: &NSArray);

    #[objc2::method(sel = "insertItemWithObjectValue:atIndex:")]
    pub unsafe fn insertItemWithObjectValue_atIndex(&self, object: &Object, index: NSInteger);

    #[objc2::method(sel = "removeItemWithObjectValue:")]
    pub unsafe fn removeItemWithObjectValue(&self, object: &Object);

    #[objc2::method(sel = "removeItemAtIndex:")]
    pub unsafe fn removeItemAtIndex(&self, index: NSInteger);

    #[objc2::method(sel = "removeAllItems")]
    pub unsafe fn removeAllItems(&self);

    #[objc2::method(sel = "selectItemWithObjectValue:")]
    pub unsafe fn selectItemWithObjectValue(&self, object: Option<&Object>);

    #[objc2::method(sel = "itemObjectValueAtIndex:", managed = "Other")]
    pub unsafe fn itemObjectValueAtIndex(&self, index: NSInteger) -> Id<Object>;

    #[objc2::method(sel = "objectValueOfSelectedItem", managed = "Other")]
    pub unsafe fn objectValueOfSelectedItem(&self) -> Option<Id<Object>>;

    #[objc2::method(sel = "indexOfItemWithObjectValue:")]
    pub unsafe fn indexOfItemWithObjectValue(&self, object: &Object) -> NSInteger;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "objectValues", managed = "Other")]
    pub unsafe fn objectValues(&self) -> Id<NSArray>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSTextField`
        ///
        /// NSTextFieldConvenience
    #[cfg(feature = "AppKit_NSComboBox")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSComboBox")]
    pub type NSComboBox;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "labelWithString:", managed = "Other")]
    pub unsafe fn labelWithString(string_value: &NSString) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "wrappingLabelWithString:", managed = "Other")]
    pub unsafe fn wrappingLabelWithString(string_value: &NSString) -> Id<Self>;

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "labelWithAttributedString:", managed = "Other")]
    pub unsafe fn labelWithAttributedString(
        attributed_string_value: &NSAttributedString,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "textFieldWithString:", managed = "Other")]
    pub unsafe fn textFieldWithString(string_value: &NSString) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSControl`
    #[cfg(feature = "AppKit_NSComboBox")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSComboBox")]
    pub type NSComboBox;

    #[objc2::method(sel = "initWithFrame:", managed = "Init")]
    pub unsafe fn initWithFrame(this: Option<Allocated<Self>>, frame_rect: NSRect) -> Id<Self>;
}
