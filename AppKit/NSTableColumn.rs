//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_options]
#[underlying(NSUInteger)]
pub enum NSTableColumnResizingOptions {
    NSTableColumnNoResizing = 0,
    NSTableColumnAutoresizingMask = 1 << 0,
    NSTableColumnUserResizingMask = 1 << 1,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTableColumn")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSTableColumn;
}

#[cfg(feature = "AppKit_NSTableColumn")]
unsafe impl NSCoding for NSTableColumn {}

#[cfg(feature = "AppKit_NSTableColumn")]
unsafe impl NSObjectProtocol for NSTableColumn {}

#[cfg(feature = "AppKit_NSTableColumn")]
unsafe impl NSUserInterfaceItemIdentification for NSTableColumn {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTableColumn")]
    pub type NSTableColumn;

    #[objc2::method(sel = "initWithIdentifier:", managed = "Init")]
    pub unsafe fn initWithIdentifier(
        this: Option<Allocated<Self>>,
        identifier: &NSUserInterfaceItemIdentifier,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, coder: &NSCoder) -> Id<Self>;

    #[objc2::method(sel = "identifier", managed = "Other")]
    pub unsafe fn identifier(&self) -> Id<NSUserInterfaceItemIdentifier>;

    #[objc2::method(sel = "setIdentifier:")]
    pub unsafe fn setIdentifier(&self, identifier: &NSUserInterfaceItemIdentifier);

    #[cfg(feature = "AppKit_NSTableView")]
    #[objc2::method(sel = "tableView", managed = "Other")]
    pub unsafe fn tableView(&self) -> Option<Id<NSTableView>>;

    #[cfg(feature = "AppKit_NSTableView")]
    #[objc2::method(sel = "setTableView:")]
    pub unsafe fn setTableView(&self, table_view: Option<&NSTableView>);

    #[objc2::method(sel = "width")]
    pub unsafe fn width(&self) -> CGFloat;

    #[objc2::method(sel = "setWidth:")]
    pub unsafe fn setWidth(&self, width: CGFloat);

    #[objc2::method(sel = "minWidth")]
    pub unsafe fn minWidth(&self) -> CGFloat;

    #[objc2::method(sel = "setMinWidth:")]
    pub unsafe fn setMinWidth(&self, min_width: CGFloat);

    #[objc2::method(sel = "maxWidth")]
    pub unsafe fn maxWidth(&self) -> CGFloat;

    #[objc2::method(sel = "setMaxWidth:")]
    pub unsafe fn setMaxWidth(&self, max_width: CGFloat);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "title", managed = "Other")]
    pub unsafe fn title(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setTitle:")]
    pub unsafe fn setTitle(&self, title: &NSString);

    #[cfg(feature = "AppKit_NSTableHeaderCell")]
    #[objc2::method(sel = "headerCell", managed = "Other")]
    pub unsafe fn headerCell(&self) -> Id<NSTableHeaderCell>;

    #[cfg(feature = "AppKit_NSTableHeaderCell")]
    #[objc2::method(sel = "setHeaderCell:")]
    pub unsafe fn setHeaderCell(&self, header_cell: &NSTableHeaderCell);

    #[objc2::method(sel = "isEditable")]
    pub unsafe fn isEditable(&self) -> bool;

    #[objc2::method(sel = "setEditable:")]
    pub unsafe fn setEditable(&self, editable: bool);

    #[objc2::method(sel = "sizeToFit")]
    pub unsafe fn sizeToFit(&self);

    #[cfg(feature = "Foundation_NSSortDescriptor")]
    #[objc2::method(sel = "sortDescriptorPrototype", managed = "Other")]
    pub unsafe fn sortDescriptorPrototype(&self) -> Option<Id<NSSortDescriptor>>;

    #[cfg(feature = "Foundation_NSSortDescriptor")]
    #[objc2::method(sel = "setSortDescriptorPrototype:")]
    pub unsafe fn setSortDescriptorPrototype(
        &self,
        sort_descriptor_prototype: Option<&NSSortDescriptor>,
    );

    #[objc2::method(sel = "resizingMask")]
    pub unsafe fn resizingMask(&self) -> NSTableColumnResizingOptions;

    #[objc2::method(sel = "setResizingMask:")]
    pub unsafe fn setResizingMask(&self, resizing_mask: NSTableColumnResizingOptions);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "headerToolTip", managed = "Other")]
    pub unsafe fn headerToolTip(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setHeaderToolTip:")]
    pub unsafe fn setHeaderToolTip(&self, header_tool_tip: Option<&NSString>);

    #[objc2::method(sel = "isHidden")]
    pub unsafe fn isHidden(&self) -> bool;

    #[objc2::method(sel = "setHidden:")]
    pub unsafe fn setHidden(&self, hidden: bool);
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTableColumn")]
    pub type NSTableColumn;

    #[deprecated]
    #[objc2::method(sel = "setResizable:")]
    pub unsafe fn setResizable(&self, flag: bool);

    #[deprecated]
    #[objc2::method(sel = "isResizable")]
    pub unsafe fn isResizable(&self) -> bool;

    #[objc2::method(sel = "dataCell", managed = "Other")]
    pub unsafe fn dataCell(&self) -> Id<Object>;

    #[objc2::method(sel = "setDataCell:")]
    pub unsafe fn setDataCell(&self, data_cell: &Object);

    #[objc2::method(sel = "dataCellForRow:", managed = "Other")]
    pub unsafe fn dataCellForRow(&self, row: NSInteger) -> Id<Object>;
}
