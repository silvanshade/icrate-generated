//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSLineCapStyle {
    NSLineCapStyleButt = 0,
    NSLineCapStyleRound = 1,
    NSLineCapStyleSquare = 2,
}

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSLineJoinStyle {
    NSLineJoinStyleMiter = 0,
    NSLineJoinStyleRound = 1,
    NSLineJoinStyleBevel = 2,
}

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSWindingRule {
    NSWindingRuleNonZero = 0,
    NSWindingRuleEvenOdd = 1,
}

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSBezierPathElement {
    NSBezierPathElementMoveTo = 0,
    NSBezierPathElementLineTo = 1,
    NSBezierPathElementCurveTo = 2,
    NSBezierPathElementClosePath = 3,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSBezierPath")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSBezierPath;
}

#[cfg(feature = "AppKit_NSBezierPath")]
unsafe impl NSCoding for NSBezierPath {}

#[cfg(feature = "AppKit_NSBezierPath")]
unsafe impl NSObjectProtocol for NSBezierPath {}

#[cfg(feature = "AppKit_NSBezierPath")]
unsafe impl NSSecureCoding for NSBezierPath {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSBezierPath")]
    pub type NSBezierPath;

    #[objc2::method(sel = "bezierPath", managed = "Other")]
    pub unsafe fn bezierPath() -> Id<NSBezierPath>;

    #[objc2::method(sel = "bezierPathWithRect:", managed = "Other")]
    pub unsafe fn bezierPathWithRect(rect: NSRect) -> Id<NSBezierPath>;

    #[objc2::method(sel = "bezierPathWithOvalInRect:", managed = "Other")]
    pub unsafe fn bezierPathWithOvalInRect(rect: NSRect) -> Id<NSBezierPath>;

    #[objc2::method(sel = "bezierPathWithRoundedRect:xRadius:yRadius:", managed = "Other")]
    pub unsafe fn bezierPathWithRoundedRect_xRadius_yRadius(
        rect: NSRect,
        x_radius: CGFloat,
        y_radius: CGFloat,
    ) -> Id<NSBezierPath>;

    #[objc2::method(sel = "fillRect:")]
    pub unsafe fn fillRect(rect: NSRect);

    #[objc2::method(sel = "strokeRect:")]
    pub unsafe fn strokeRect(rect: NSRect);

    #[objc2::method(sel = "clipRect:")]
    pub unsafe fn clipRect(rect: NSRect);

    #[objc2::method(sel = "strokeLineFromPoint:toPoint:")]
    pub unsafe fn strokeLineFromPoint_toPoint(point1: NSPoint, point2: NSPoint);

    #[objc2::method(sel = "drawPackedGlyphs:atPoint:")]
    pub unsafe fn drawPackedGlyphs_atPoint(packed_glyphs: NonNull<c_char>, point: NSPoint);

    #[objc2::method(sel = "defaultMiterLimit")]
    pub unsafe fn defaultMiterLimit() -> CGFloat;

    #[objc2::method(sel = "setDefaultMiterLimit:")]
    pub unsafe fn setDefaultMiterLimit(default_miter_limit: CGFloat);

    #[objc2::method(sel = "defaultFlatness")]
    pub unsafe fn defaultFlatness() -> CGFloat;

    #[objc2::method(sel = "setDefaultFlatness:")]
    pub unsafe fn setDefaultFlatness(default_flatness: CGFloat);

    #[objc2::method(sel = "defaultWindingRule")]
    pub unsafe fn defaultWindingRule() -> NSWindingRule;

    #[objc2::method(sel = "setDefaultWindingRule:")]
    pub unsafe fn setDefaultWindingRule(default_winding_rule: NSWindingRule);

    #[objc2::method(sel = "defaultLineCapStyle")]
    pub unsafe fn defaultLineCapStyle() -> NSLineCapStyle;

    #[objc2::method(sel = "setDefaultLineCapStyle:")]
    pub unsafe fn setDefaultLineCapStyle(default_line_cap_style: NSLineCapStyle);

    #[objc2::method(sel = "defaultLineJoinStyle")]
    pub unsafe fn defaultLineJoinStyle() -> NSLineJoinStyle;

    #[objc2::method(sel = "setDefaultLineJoinStyle:")]
    pub unsafe fn setDefaultLineJoinStyle(default_line_join_style: NSLineJoinStyle);

    #[objc2::method(sel = "defaultLineWidth")]
    pub unsafe fn defaultLineWidth() -> CGFloat;

    #[objc2::method(sel = "setDefaultLineWidth:")]
    pub unsafe fn setDefaultLineWidth(default_line_width: CGFloat);

    #[objc2::method(sel = "moveToPoint:")]
    pub unsafe fn moveToPoint(&self, point: NSPoint);

    #[objc2::method(sel = "lineToPoint:")]
    pub unsafe fn lineToPoint(&self, point: NSPoint);

    #[objc2::method(sel = "curveToPoint:controlPoint1:controlPoint2:")]
    pub unsafe fn curveToPoint_controlPoint1_controlPoint2(
        &self,
        end_point: NSPoint,
        control_point1: NSPoint,
        control_point2: NSPoint,
    );

    #[objc2::method(sel = "closePath")]
    pub unsafe fn closePath(&self);

    #[objc2::method(sel = "removeAllPoints")]
    pub unsafe fn removeAllPoints(&self);

    #[objc2::method(sel = "relativeMoveToPoint:")]
    pub unsafe fn relativeMoveToPoint(&self, point: NSPoint);

    #[objc2::method(sel = "relativeLineToPoint:")]
    pub unsafe fn relativeLineToPoint(&self, point: NSPoint);

    #[objc2::method(sel = "relativeCurveToPoint:controlPoint1:controlPoint2:")]
    pub unsafe fn relativeCurveToPoint_controlPoint1_controlPoint2(
        &self,
        end_point: NSPoint,
        control_point1: NSPoint,
        control_point2: NSPoint,
    );

    #[objc2::method(sel = "lineWidth")]
    pub unsafe fn lineWidth(&self) -> CGFloat;

    #[objc2::method(sel = "setLineWidth:")]
    pub unsafe fn setLineWidth(&self, line_width: CGFloat);

    #[objc2::method(sel = "lineCapStyle")]
    pub unsafe fn lineCapStyle(&self) -> NSLineCapStyle;

    #[objc2::method(sel = "setLineCapStyle:")]
    pub unsafe fn setLineCapStyle(&self, line_cap_style: NSLineCapStyle);

    #[objc2::method(sel = "lineJoinStyle")]
    pub unsafe fn lineJoinStyle(&self) -> NSLineJoinStyle;

    #[objc2::method(sel = "setLineJoinStyle:")]
    pub unsafe fn setLineJoinStyle(&self, line_join_style: NSLineJoinStyle);

    #[objc2::method(sel = "windingRule")]
    pub unsafe fn windingRule(&self) -> NSWindingRule;

    #[objc2::method(sel = "setWindingRule:")]
    pub unsafe fn setWindingRule(&self, winding_rule: NSWindingRule);

    #[objc2::method(sel = "miterLimit")]
    pub unsafe fn miterLimit(&self) -> CGFloat;

    #[objc2::method(sel = "setMiterLimit:")]
    pub unsafe fn setMiterLimit(&self, miter_limit: CGFloat);

    #[objc2::method(sel = "flatness")]
    pub unsafe fn flatness(&self) -> CGFloat;

    #[objc2::method(sel = "setFlatness:")]
    pub unsafe fn setFlatness(&self, flatness: CGFloat);

    #[objc2::method(sel = "getLineDash:count:phase:")]
    pub unsafe fn getLineDash_count_phase(
        &self,
        pattern: *mut CGFloat,
        count: *mut NSInteger,
        phase: *mut CGFloat,
    );

    #[objc2::method(sel = "setLineDash:count:phase:")]
    pub unsafe fn setLineDash_count_phase(
        &self,
        pattern: *mut CGFloat,
        count: NSInteger,
        phase: CGFloat,
    );

    #[objc2::method(sel = "stroke")]
    pub unsafe fn stroke(&self);

    #[objc2::method(sel = "fill")]
    pub unsafe fn fill(&self);

    #[objc2::method(sel = "addClip")]
    pub unsafe fn addClip(&self);

    #[objc2::method(sel = "setClip")]
    pub unsafe fn setClip(&self);

    #[objc2::method(sel = "bezierPathByFlatteningPath", managed = "Other")]
    pub unsafe fn bezierPathByFlatteningPath(&self) -> Id<NSBezierPath>;

    #[objc2::method(sel = "bezierPathByReversingPath", managed = "Other")]
    pub unsafe fn bezierPathByReversingPath(&self) -> Id<NSBezierPath>;

    #[cfg(feature = "Foundation_NSAffineTransform")]
    #[objc2::method(sel = "transformUsingAffineTransform:")]
    pub unsafe fn transformUsingAffineTransform(&self, transform: &NSAffineTransform);

    #[objc2::method(sel = "isEmpty")]
    pub unsafe fn isEmpty(&self) -> bool;

    #[objc2::method(sel = "currentPoint")]
    pub unsafe fn currentPoint(&self) -> NSPoint;

    #[objc2::method(sel = "controlPointBounds")]
    pub unsafe fn controlPointBounds(&self) -> NSRect;

    #[objc2::method(sel = "bounds")]
    pub unsafe fn bounds(&self) -> NSRect;

    #[objc2::method(sel = "elementCount")]
    pub unsafe fn elementCount(&self) -> NSInteger;

    #[objc2::method(sel = "elementAtIndex:associatedPoints:")]
    pub unsafe fn elementAtIndex_associatedPoints(
        &self,
        index: NSInteger,
        points: NSPointArray,
    ) -> NSBezierPathElement;

    #[objc2::method(sel = "elementAtIndex:")]
    pub unsafe fn elementAtIndex(&self, index: NSInteger) -> NSBezierPathElement;

    #[objc2::method(sel = "setAssociatedPoints:atIndex:")]
    pub unsafe fn setAssociatedPoints_atIndex(&self, points: NSPointArray, index: NSInteger);

    #[objc2::method(sel = "appendBezierPath:")]
    pub unsafe fn appendBezierPath(&self, path: &NSBezierPath);

    #[objc2::method(sel = "appendBezierPathWithRect:")]
    pub unsafe fn appendBezierPathWithRect(&self, rect: NSRect);

    #[objc2::method(sel = "appendBezierPathWithPoints:count:")]
    pub unsafe fn appendBezierPathWithPoints_count(&self, points: NSPointArray, count: NSInteger);

    #[objc2::method(sel = "appendBezierPathWithOvalInRect:")]
    pub unsafe fn appendBezierPathWithOvalInRect(&self, rect: NSRect);

    #[objc2::method(
        sel = "appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:clockwise:"
    )]
    pub unsafe fn appendBezierPathWithArcWithCenter_radius_startAngle_endAngle_clockwise(
        &self,
        center: NSPoint,
        radius: CGFloat,
        start_angle: CGFloat,
        end_angle: CGFloat,
        clockwise: bool,
    );

    #[objc2::method(sel = "appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:")]
    pub unsafe fn appendBezierPathWithArcWithCenter_radius_startAngle_endAngle(
        &self,
        center: NSPoint,
        radius: CGFloat,
        start_angle: CGFloat,
        end_angle: CGFloat,
    );

    #[objc2::method(sel = "appendBezierPathWithArcFromPoint:toPoint:radius:")]
    pub unsafe fn appendBezierPathWithArcFromPoint_toPoint_radius(
        &self,
        point1: NSPoint,
        point2: NSPoint,
        radius: CGFloat,
    );

    #[objc2::method(sel = "appendBezierPathWithRoundedRect:xRadius:yRadius:")]
    pub unsafe fn appendBezierPathWithRoundedRect_xRadius_yRadius(
        &self,
        rect: NSRect,
        x_radius: CGFloat,
        y_radius: CGFloat,
    );

    #[objc2::method(sel = "containsPoint:")]
    pub unsafe fn containsPoint(&self, point: NSPoint) -> bool;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSBezierPath")]
    pub type NSBezierPath;

    #[deprecated]
    #[objc2::method(sel = "cachesBezierPath")]
    pub unsafe fn cachesBezierPath(&self) -> bool;

    #[deprecated]
    #[objc2::method(sel = "setCachesBezierPath:")]
    pub unsafe fn setCachesBezierPath(&self, flag: bool);

    #[cfg(feature = "AppKit_NSFont")]
    #[deprecated = "Use -appendBezierPathWithCGGlyph:inFont: instead"]
    #[objc2::method(sel = "appendBezierPathWithGlyph:inFont:")]
    pub unsafe fn appendBezierPathWithGlyph_inFont(&self, glyph: NSGlyph, font: &NSFont);

    #[cfg(feature = "AppKit_NSFont")]
    #[deprecated = "Use -appendBezierPathWithCGGlyphs:count:inFont: instead"]
    #[objc2::method(sel = "appendBezierPathWithGlyphs:count:inFont:")]
    pub unsafe fn appendBezierPathWithGlyphs_count_inFont(
        &self,
        glyphs: NonNull<NSGlyph>,
        count: NSInteger,
        font: &NSFont,
    );

    #[deprecated = "Use -appendBezierPathWithCGGlyphs:count:inFont: instead"]
    #[objc2::method(sel = "appendBezierPathWithPackedGlyphs:")]
    pub unsafe fn appendBezierPathWithPackedGlyphs(&self, packed_glyphs: NonNull<c_char>);
}

extern_static!(NSButtLineCapStyle: NSLineCapStyle = NSLineCapStyleButt);

extern_static!(NSRoundLineCapStyle: NSLineCapStyle = NSLineCapStyleRound);

extern_static!(NSSquareLineCapStyle: NSLineCapStyle = NSLineCapStyleSquare);

extern_static!(NSMiterLineJoinStyle: NSLineJoinStyle = NSLineJoinStyleMiter);

extern_static!(NSRoundLineJoinStyle: NSLineJoinStyle = NSLineJoinStyleRound);

extern_static!(NSBevelLineJoinStyle: NSLineJoinStyle = NSLineJoinStyleBevel);

extern_static!(NSNonZeroWindingRule: NSWindingRule = NSWindingRuleNonZero);

extern_static!(NSEvenOddWindingRule: NSWindingRule = NSWindingRuleEvenOdd);

extern_static!(NSMoveToBezierPathElement: NSBezierPathElement = NSBezierPathElementMoveTo);

extern_static!(NSLineToBezierPathElement: NSBezierPathElement = NSBezierPathElementLineTo);

extern_static!(NSCurveToBezierPathElement: NSBezierPathElement = NSBezierPathElementCurveTo);

extern_static!(NSClosePathBezierPathElement: NSBezierPathElement = NSBezierPathElementClosePath);
