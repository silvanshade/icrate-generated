//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_options]
#[underlying(NSUInteger)]
pub enum NSFontCollectionVisibility {
    NSFontCollectionVisibilityProcess = 1 << 0,
    NSFontCollectionVisibilityUser = 1 << 1,
    NSFontCollectionVisibilityComputer = 1 << 2,
}

typed_enum!(
    pub type NSFontCollectionMatchingOptionKey = NSString;
);

extern_static!(
    NSFontCollectionIncludeDisabledFontsOption: &'static NSFontCollectionMatchingOptionKey
);

extern_static!(NSFontCollectionRemoveDuplicatesOption: &'static NSFontCollectionMatchingOptionKey);

extern_static!(
    NSFontCollectionDisallowAutoActivationOption: &'static NSFontCollectionMatchingOptionKey
);

typed_extensible_enum!(
    pub type NSFontCollectionName = NSString;
);

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSFontCollection")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSFontCollection;
}

#[cfg(feature = "AppKit_NSFontCollection")]
unsafe impl NSCoding for NSFontCollection {}

#[cfg(feature = "AppKit_NSFontCollection")]
unsafe impl NSObjectProtocol for NSFontCollection {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSFontCollection")]
    pub type NSFontCollection;

    #[cfg(all(feature = "AppKit_NSFontDescriptor", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "fontCollectionWithDescriptors:", managed = "Other")]
    pub unsafe fn fontCollectionWithDescriptors(
        query_descriptors: &NSArray<NSFontDescriptor>,
    ) -> Id<NSFontCollection>;

    #[objc2::method(sel = "fontCollectionWithAllAvailableDescriptors", managed = "Other")]
    pub unsafe fn fontCollectionWithAllAvailableDescriptors() -> Id<NSFontCollection>;

    #[cfg(feature = "Foundation_NSLocale")]
    #[objc2::method(sel = "fontCollectionWithLocale:", managed = "Other")]
    pub unsafe fn fontCollectionWithLocale(locale: &NSLocale) -> Option<Id<NSFontCollection>>;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "showFontCollection:withName:visibility:error:", throws)]
    pub unsafe fn showFontCollection_withName_visibility_error(
        collection: &NSFontCollection,
        name: &NSFontCollectionName,
        visibility: NSFontCollectionVisibility,
    ) -> Result<(), Id<NSError>>;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "hideFontCollectionWithName:visibility:error:", throws)]
    pub unsafe fn hideFontCollectionWithName_visibility_error(
        name: &NSFontCollectionName,
        visibility: NSFontCollectionVisibility,
    ) -> Result<(), Id<NSError>>;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "renameFontCollectionWithName:visibility:toName:error:", throws)]
    pub unsafe fn renameFontCollectionWithName_visibility_toName_error(
        old_name: &NSFontCollectionName,
        visibility: NSFontCollectionVisibility,
        new_name: &NSFontCollectionName,
    ) -> Result<(), Id<NSError>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "allFontCollectionNames", managed = "Other")]
    pub unsafe fn allFontCollectionNames() -> Id<NSArray<NSFontCollectionName>>;

    #[objc2::method(sel = "fontCollectionWithName:", managed = "Other")]
    pub unsafe fn fontCollectionWithName(
        name: &NSFontCollectionName,
    ) -> Option<Id<NSFontCollection>>;

    #[objc2::method(sel = "fontCollectionWithName:visibility:", managed = "Other")]
    pub unsafe fn fontCollectionWithName_visibility(
        name: &NSFontCollectionName,
        visibility: NSFontCollectionVisibility,
    ) -> Option<Id<NSFontCollection>>;

    #[cfg(all(feature = "AppKit_NSFontDescriptor", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "queryDescriptors", managed = "Other")]
    pub unsafe fn queryDescriptors(&self) -> Option<Id<NSArray<NSFontDescriptor>>>;

    #[cfg(all(feature = "AppKit_NSFontDescriptor", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "exclusionDescriptors", managed = "Other")]
    pub unsafe fn exclusionDescriptors(&self) -> Option<Id<NSArray<NSFontDescriptor>>>;

    #[cfg(all(feature = "AppKit_NSFontDescriptor", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "matchingDescriptors", managed = "Other")]
    pub unsafe fn matchingDescriptors(&self) -> Option<Id<NSArray<NSFontDescriptor>>>;

    #[cfg(all(
        feature = "AppKit_NSFontDescriptor",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSNumber"
    ))]
    #[objc2::method(sel = "matchingDescriptorsWithOptions:", managed = "Other")]
    pub unsafe fn matchingDescriptorsWithOptions(
        &self,
        options: Option<&NSDictionary<NSFontCollectionMatchingOptionKey, NSNumber>>,
    ) -> Option<Id<NSArray<NSFontDescriptor>>>;

    #[cfg(all(
        feature = "AppKit_NSFontDescriptor",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "matchingDescriptorsForFamily:", managed = "Other")]
    pub unsafe fn matchingDescriptorsForFamily(
        &self,
        family: &NSString,
    ) -> Option<Id<NSArray<NSFontDescriptor>>>;

    #[cfg(all(
        feature = "AppKit_NSFontDescriptor",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSNumber",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "matchingDescriptorsForFamily:options:", managed = "Other")]
    pub unsafe fn matchingDescriptorsForFamily_options(
        &self,
        family: &NSString,
        options: Option<&NSDictionary<NSFontCollectionMatchingOptionKey, NSNumber>>,
    ) -> Option<Id<NSArray<NSFontDescriptor>>>;
}

#[objc2::interface(
    unsafe super = NSFontCollection,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSMutableFontCollection")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSMutableFontCollection;
}

#[cfg(feature = "AppKit_NSMutableFontCollection")]
unsafe impl NSCoding for NSMutableFontCollection {}

#[cfg(feature = "AppKit_NSMutableFontCollection")]
unsafe impl NSObjectProtocol for NSMutableFontCollection {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSMutableFontCollection")]
    pub type NSMutableFontCollection;

    #[cfg(all(feature = "AppKit_NSFontDescriptor", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "fontCollectionWithDescriptors:", managed = "Other")]
    pub unsafe fn fontCollectionWithDescriptors(
        query_descriptors: &NSArray<NSFontDescriptor>,
    ) -> Id<NSMutableFontCollection>;

    #[objc2::method(sel = "fontCollectionWithAllAvailableDescriptors", managed = "Other")]
    pub unsafe fn fontCollectionWithAllAvailableDescriptors() -> Id<NSMutableFontCollection>;

    #[cfg(feature = "Foundation_NSLocale")]
    #[objc2::method(sel = "fontCollectionWithLocale:", managed = "Other")]
    pub unsafe fn fontCollectionWithLocale(locale: &NSLocale) -> Id<NSMutableFontCollection>;

    #[objc2::method(sel = "fontCollectionWithName:", managed = "Other")]
    pub unsafe fn fontCollectionWithName(
        name: &NSFontCollectionName,
    ) -> Option<Id<NSMutableFontCollection>>;

    #[objc2::method(sel = "fontCollectionWithName:visibility:", managed = "Other")]
    pub unsafe fn fontCollectionWithName_visibility(
        name: &NSFontCollectionName,
        visibility: NSFontCollectionVisibility,
    ) -> Option<Id<NSMutableFontCollection>>;

    #[cfg(all(feature = "AppKit_NSFontDescriptor", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "queryDescriptors", managed = "Other")]
    pub unsafe fn queryDescriptors(&self) -> Option<Id<NSArray<NSFontDescriptor>>>;

    #[cfg(all(feature = "AppKit_NSFontDescriptor", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "setQueryDescriptors:")]
    pub unsafe fn setQueryDescriptors(&self, query_descriptors: Option<&NSArray<NSFontDescriptor>>);

    #[cfg(all(feature = "AppKit_NSFontDescriptor", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "exclusionDescriptors", managed = "Other")]
    pub unsafe fn exclusionDescriptors(&self) -> Option<Id<NSArray<NSFontDescriptor>>>;

    #[cfg(all(feature = "AppKit_NSFontDescriptor", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "setExclusionDescriptors:")]
    pub unsafe fn setExclusionDescriptors(
        &self,
        exclusion_descriptors: Option<&NSArray<NSFontDescriptor>>,
    );

    #[cfg(all(feature = "AppKit_NSFontDescriptor", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "addQueryForDescriptors:")]
    pub unsafe fn addQueryForDescriptors(&self, descriptors: &NSArray<NSFontDescriptor>);

    #[cfg(all(feature = "AppKit_NSFontDescriptor", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "removeQueryForDescriptors:")]
    pub unsafe fn removeQueryForDescriptors(&self, descriptors: &NSArray<NSFontDescriptor>);
}

extern_static!(NSFontCollectionDidChangeNotification: &'static NSNotificationName);

typed_enum!(
    pub type NSFontCollectionUserInfoKey = NSString;
);

extern_static!(NSFontCollectionActionKey: &'static NSFontCollectionUserInfoKey);

extern_static!(NSFontCollectionNameKey: &'static NSFontCollectionUserInfoKey);

extern_static!(NSFontCollectionOldNameKey: &'static NSFontCollectionUserInfoKey);

extern_static!(NSFontCollectionVisibilityKey: &'static NSFontCollectionUserInfoKey);

typed_enum!(
    pub type NSFontCollectionActionTypeKey = NSString;
);

extern_static!(NSFontCollectionWasShown: &'static NSFontCollectionActionTypeKey);

extern_static!(NSFontCollectionWasHidden: &'static NSFontCollectionActionTypeKey);

extern_static!(NSFontCollectionWasRenamed: &'static NSFontCollectionActionTypeKey);

extern_static!(NSFontCollectionAllFonts: &'static NSFontCollectionName);

extern_static!(NSFontCollectionUser: &'static NSFontCollectionName);

extern_static!(NSFontCollectionFavorites: &'static NSFontCollectionName);

extern_static!(NSFontCollectionRecentlyUsed: &'static NSFontCollectionName);
