//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSButtonType {
    NSButtonTypeMomentaryLight = 0,
    NSButtonTypePushOnPushOff = 1,
    NSButtonTypeToggle = 2,
    NSButtonTypeSwitch = 3,
    NSButtonTypeRadio = 4,
    NSButtonTypeMomentaryChange = 5,
    NSButtonTypeOnOff = 6,
    NSButtonTypeMomentaryPushIn = 7,
    NSButtonTypeAccelerator = 8,
    NSButtonTypeMultiLevelAccelerator = 9,
}

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSBezelStyle {
    NSBezelStyleRounded = 1,
    NSBezelStyleRegularSquare = 2,
    NSBezelStyleDisclosure = 5,
    NSBezelStyleShadowlessSquare = 6,
    NSBezelStyleCircular = 7,
    NSBezelStyleTexturedSquare = 8,
    NSBezelStyleHelpButton = 9,
    NSBezelStyleSmallSquare = 10,
    NSBezelStyleTexturedRounded = 11,
    NSBezelStyleRoundRect = 12,
    NSBezelStyleRecessed = 13,
    NSBezelStyleRoundedDisclosure = 14,
    NSBezelStyleInline = 15,
}

#[objc2::interface(
    unsafe super = NSActionCell,
    unsafe inherits = [
        NSCell,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSButtonCell")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSButtonCell;
}

#[cfg(feature = "AppKit_NSButtonCell")]
unsafe impl NSAccessibility for NSButtonCell {}

#[cfg(feature = "AppKit_NSButtonCell")]
unsafe impl NSAccessibilityElementProtocol for NSButtonCell {}

#[cfg(feature = "AppKit_NSButtonCell")]
unsafe impl NSCoding for NSButtonCell {}

#[cfg(feature = "AppKit_NSButtonCell")]
unsafe impl NSObjectProtocol for NSButtonCell {}

#[cfg(feature = "AppKit_NSButtonCell")]
unsafe impl NSUserInterfaceItemIdentification for NSButtonCell {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSButtonCell")]
    pub type NSButtonCell;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initTextCell:", managed = "Init")]
    pub unsafe fn initTextCell(this: Option<Allocated<Self>>, string: &NSString) -> Id<Self>;

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "initImageCell:", managed = "Init")]
    pub unsafe fn initImageCell(this: Option<Allocated<Self>>, image: Option<&NSImage>)
        -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, coder: &NSCoder) -> Id<Self>;

    #[objc2::method(sel = "bezelStyle")]
    pub unsafe fn bezelStyle(&self) -> NSBezelStyle;

    #[objc2::method(sel = "setBezelStyle:")]
    pub unsafe fn setBezelStyle(&self, bezel_style: NSBezelStyle);

    #[objc2::method(sel = "setButtonType:")]
    pub unsafe fn setButtonType(&self, r#type: NSButtonType);

    #[objc2::method(sel = "highlightsBy")]
    pub unsafe fn highlightsBy(&self) -> NSCellStyleMask;

    #[objc2::method(sel = "setHighlightsBy:")]
    pub unsafe fn setHighlightsBy(&self, highlights_by: NSCellStyleMask);

    #[objc2::method(sel = "showsStateBy")]
    pub unsafe fn showsStateBy(&self) -> NSCellStyleMask;

    #[objc2::method(sel = "setShowsStateBy:")]
    pub unsafe fn setShowsStateBy(&self, shows_state_by: NSCellStyleMask);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "title", managed = "Other")]
    pub unsafe fn title(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setTitle:")]
    pub unsafe fn setTitle(&self, title: Option<&NSString>);

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "attributedTitle", managed = "Other")]
    pub unsafe fn attributedTitle(&self) -> Id<NSAttributedString>;

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "setAttributedTitle:")]
    pub unsafe fn setAttributedTitle(&self, attributed_title: &NSAttributedString);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "alternateTitle", managed = "Other")]
    pub unsafe fn alternateTitle(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setAlternateTitle:")]
    pub unsafe fn setAlternateTitle(&self, alternate_title: &NSString);

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "attributedAlternateTitle", managed = "Other")]
    pub unsafe fn attributedAlternateTitle(&self) -> Id<NSAttributedString>;

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "setAttributedAlternateTitle:")]
    pub unsafe fn setAttributedAlternateTitle(
        &self,
        attributed_alternate_title: &NSAttributedString,
    );

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "alternateImage", managed = "Other")]
    pub unsafe fn alternateImage(&self) -> Option<Id<NSImage>>;

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "setAlternateImage:")]
    pub unsafe fn setAlternateImage(&self, alternate_image: Option<&NSImage>);

    #[objc2::method(sel = "imagePosition")]
    pub unsafe fn imagePosition(&self) -> NSCellImagePosition;

    #[objc2::method(sel = "setImagePosition:")]
    pub unsafe fn setImagePosition(&self, image_position: NSCellImagePosition);

    #[objc2::method(sel = "imageScaling")]
    pub unsafe fn imageScaling(&self) -> NSImageScaling;

    #[objc2::method(sel = "setImageScaling:")]
    pub unsafe fn setImageScaling(&self, image_scaling: NSImageScaling);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "keyEquivalent", managed = "Other")]
    pub unsafe fn keyEquivalent(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setKeyEquivalent:")]
    pub unsafe fn setKeyEquivalent(&self, key_equivalent: &NSString);

    #[objc2::method(sel = "keyEquivalentModifierMask")]
    pub unsafe fn keyEquivalentModifierMask(&self) -> NSEventModifierFlags;

    #[objc2::method(sel = "setKeyEquivalentModifierMask:")]
    pub unsafe fn setKeyEquivalentModifierMask(
        &self,
        key_equivalent_modifier_mask: NSEventModifierFlags,
    );

    #[objc2::method(sel = "isTransparent")]
    pub unsafe fn isTransparent(&self) -> bool;

    #[objc2::method(sel = "setTransparent:")]
    pub unsafe fn setTransparent(&self, transparent: bool);

    #[objc2::method(sel = "isOpaque")]
    pub unsafe fn isOpaque(&self) -> bool;

    #[objc2::method(sel = "imageDimsWhenDisabled")]
    pub unsafe fn imageDimsWhenDisabled(&self) -> bool;

    #[objc2::method(sel = "setImageDimsWhenDisabled:")]
    pub unsafe fn setImageDimsWhenDisabled(&self, image_dims_when_disabled: bool);

    #[objc2::method(sel = "showsBorderOnlyWhileMouseInside")]
    pub unsafe fn showsBorderOnlyWhileMouseInside(&self) -> bool;

    #[objc2::method(sel = "setShowsBorderOnlyWhileMouseInside:")]
    pub unsafe fn setShowsBorderOnlyWhileMouseInside(
        &self,
        shows_border_only_while_mouse_inside: bool,
    );

    #[cfg(feature = "AppKit_NSSound")]
    #[objc2::method(sel = "sound", managed = "Other")]
    pub unsafe fn sound(&self) -> Option<Id<NSSound>>;

    #[cfg(feature = "AppKit_NSSound")]
    #[objc2::method(sel = "setSound:")]
    pub unsafe fn setSound(&self, sound: Option<&NSSound>);

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "backgroundColor", managed = "Other")]
    pub unsafe fn backgroundColor(&self) -> Option<Id<NSColor>>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "setBackgroundColor:")]
    pub unsafe fn setBackgroundColor(&self, background_color: Option<&NSColor>);

    #[objc2::method(sel = "setPeriodicDelay:interval:")]
    pub unsafe fn setPeriodicDelay_interval(&self, delay: c_float, interval: c_float);

    #[objc2::method(sel = "getPeriodicDelay:interval:")]
    pub unsafe fn getPeriodicDelay_interval(
        &self,
        delay: NonNull<c_float>,
        interval: NonNull<c_float>,
    );

    #[objc2::method(sel = "performClick:")]
    pub unsafe fn performClick(&self, sender: Option<&Object>);

    #[cfg(feature = "AppKit_NSEvent")]
    #[objc2::method(sel = "mouseEntered:")]
    pub unsafe fn mouseEntered(&self, event: &NSEvent);

    #[cfg(feature = "AppKit_NSEvent")]
    #[objc2::method(sel = "mouseExited:")]
    pub unsafe fn mouseExited(&self, event: &NSEvent);

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "drawBezelWithFrame:inView:")]
    pub unsafe fn drawBezelWithFrame_inView(&self, frame: NSRect, control_view: &NSView);

    #[cfg(all(feature = "AppKit_NSImage", feature = "AppKit_NSView"))]
    #[objc2::method(sel = "drawImage:withFrame:inView:")]
    pub unsafe fn drawImage_withFrame_inView(
        &self,
        image: &NSImage,
        frame: NSRect,
        control_view: &NSView,
    );

    #[cfg(all(feature = "AppKit_NSView", feature = "Foundation_NSAttributedString"))]
    #[objc2::method(sel = "drawTitle:withFrame:inView:")]
    pub unsafe fn drawTitle_withFrame_inView(
        &self,
        title: &NSAttributedString,
        frame: NSRect,
        control_view: &NSView,
    ) -> NSRect;
}

#[ns_enum]
#[underlying(NSUInteger)]
#[deprecated]
pub enum NSGradientType {
    NSGradientNone = 0,
    NSGradientConcaveWeak = 1,
    NSGradientConcaveStrong = 2,
    NSGradientConvexWeak = 3,
    NSGradientConvexStrong = 4,
}

extern_static!(NSMomentaryLightButton: NSButtonType = NSButtonTypeMomentaryLight);

extern_static!(NSPushOnPushOffButton: NSButtonType = NSButtonTypePushOnPushOff);

extern_static!(NSToggleButton: NSButtonType = NSButtonTypeToggle);

extern_static!(NSSwitchButton: NSButtonType = NSButtonTypeSwitch);

extern_static!(NSRadioButton: NSButtonType = NSButtonTypeRadio);

extern_static!(NSMomentaryChangeButton: NSButtonType = NSButtonTypeMomentaryChange);

extern_static!(NSOnOffButton: NSButtonType = NSButtonTypeOnOff);

extern_static!(NSMomentaryPushInButton: NSButtonType = NSButtonTypeMomentaryPushIn);

extern_static!(NSAcceleratorButton: NSButtonType = NSButtonTypeAccelerator);

extern_static!(NSMultiLevelAcceleratorButton: NSButtonType = NSButtonTypeMultiLevelAccelerator);

extern_static!(NSMomentaryPushButton: NSButtonType = NSButtonTypeMomentaryLight);

extern_static!(NSMomentaryLight: NSButtonType = NSButtonTypeMomentaryPushIn);

extern_static!(NSRoundedBezelStyle: NSBezelStyle = NSBezelStyleRounded);

extern_static!(NSRegularSquareBezelStyle: NSBezelStyle = NSBezelStyleRegularSquare);

extern_static!(NSDisclosureBezelStyle: NSBezelStyle = NSBezelStyleDisclosure);

extern_static!(NSShadowlessSquareBezelStyle: NSBezelStyle = NSBezelStyleShadowlessSquare);

extern_static!(NSCircularBezelStyle: NSBezelStyle = NSBezelStyleCircular);

extern_static!(NSTexturedSquareBezelStyle: NSBezelStyle = NSBezelStyleTexturedSquare);

extern_static!(NSHelpButtonBezelStyle: NSBezelStyle = NSBezelStyleHelpButton);

extern_static!(NSSmallSquareBezelStyle: NSBezelStyle = NSBezelStyleSmallSquare);

extern_static!(NSTexturedRoundedBezelStyle: NSBezelStyle = NSBezelStyleTexturedRounded);

extern_static!(NSRoundRectBezelStyle: NSBezelStyle = NSBezelStyleRoundRect);

extern_static!(NSRecessedBezelStyle: NSBezelStyle = NSBezelStyleRecessed);

extern_static!(NSRoundedDisclosureBezelStyle: NSBezelStyle = NSBezelStyleRoundedDisclosure);

extern_static!(NSInlineBezelStyle: NSBezelStyle = NSBezelStyleInline);

extern_static!(NSSmallIconButtonBezelStyle: NSBezelStyle = 2);

extern_static!(NSThickSquareBezelStyle: NSBezelStyle = 3);

extern_static!(NSThickerSquareBezelStyle: NSBezelStyle = 4);

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSButtonCell")]
    pub type NSButtonCell;

    #[deprecated = "The gradientType property is unused, and setting it has no effect."]
    #[objc2::method(sel = "gradientType")]
    pub unsafe fn gradientType(&self) -> NSGradientType;

    #[deprecated = "The gradientType property is unused, and setting it has no effect."]
    #[objc2::method(sel = "setGradientType:")]
    pub unsafe fn setGradientType(&self, gradient_type: NSGradientType);

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "Mnemonics are not used on macOS. Set the title property directly instead."]
    #[objc2::method(sel = "setTitleWithMnemonic:")]
    pub unsafe fn setTitleWithMnemonic(&self, string_with_ampersand: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "Mnemonics are not used on macOS. Set the alternateTitle property directly instead."]
    #[objc2::method(sel = "setAlternateTitleWithMnemonic:")]
    pub unsafe fn setAlternateTitleWithMnemonic(&self, string_with_ampersand: Option<&NSString>);

    #[deprecated = "Mnemonics are not used on macOS. Calling this method has no effect."]
    #[objc2::method(sel = "setAlternateMnemonicLocation:")]
    pub unsafe fn setAlternateMnemonicLocation(&self, location: NSUInteger);

    #[deprecated = "Mnemonics are not used on macOS. This property always returns NSNotFound."]
    #[objc2::method(sel = "alternateMnemonicLocation")]
    pub unsafe fn alternateMnemonicLocation(&self) -> NSUInteger;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "Mnemonics are not used on macOS. This property always returns an empty string."]
    #[objc2::method(sel = "alternateMnemonic", managed = "Other")]
    pub unsafe fn alternateMnemonic(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "AppKit_NSFont")]
    #[deprecated = "The keyEquivalentFont property is no longer used. It always returns the NSButtonCell's font, and setting it has no effect."]
    #[objc2::method(sel = "keyEquivalentFont", managed = "Other")]
    pub unsafe fn keyEquivalentFont(&self) -> Option<Id<NSFont>>;

    #[cfg(feature = "AppKit_NSFont")]
    #[deprecated = "The keyEquivalentFont property is no longer used. It always returns the NSButtonCell's font, and setting it has no effect."]
    #[objc2::method(sel = "setKeyEquivalentFont:")]
    pub unsafe fn setKeyEquivalentFont(&self, key_equivalent_font: Option<&NSFont>);

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "The keyEquivalentFont property is no longer used. Setting it has no effect."]
    #[objc2::method(sel = "setKeyEquivalentFont:size:")]
    pub unsafe fn setKeyEquivalentFont_size(&self, font_name: &NSString, font_size: CGFloat);
}
