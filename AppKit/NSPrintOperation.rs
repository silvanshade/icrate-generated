//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSPrintingPageOrder {
    NSDescendingPageOrder = -1,
    NSSpecialPageOrder = 0,
    NSAscendingPageOrder = 1,
    NSUnknownPageOrder = 2,
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSPrintRenderingQuality {
    NSPrintRenderingQualityBest = 0,
    NSPrintRenderingQualityResponsive = 1,
}

extern_static!(NSPrintOperationExistsException: &'static NSExceptionName);

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSPrintOperation")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSPrintOperation;
}

#[cfg(feature = "AppKit_NSPrintOperation")]
unsafe impl NSObjectProtocol for NSPrintOperation {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSPrintOperation")]
    pub type NSPrintOperation;

    #[cfg(all(feature = "AppKit_NSPrintInfo", feature = "AppKit_NSView"))]
    #[objc2::method(sel = "printOperationWithView:printInfo:", managed = "Other")]
    pub unsafe fn printOperationWithView_printInfo(
        view: &NSView,
        print_info: &NSPrintInfo,
    ) -> Id<NSPrintOperation>;

    #[cfg(all(
        feature = "AppKit_NSPrintInfo",
        feature = "AppKit_NSView",
        feature = "Foundation_NSMutableData"
    ))]
    #[objc2::method(
        sel = "PDFOperationWithView:insideRect:toData:printInfo:",
        managed = "Other"
    )]
    pub unsafe fn PDFOperationWithView_insideRect_toData_printInfo(
        view: &NSView,
        rect: NSRect,
        data: &NSMutableData,
        print_info: &NSPrintInfo,
    ) -> Id<NSPrintOperation>;

    #[cfg(all(
        feature = "AppKit_NSPrintInfo",
        feature = "AppKit_NSView",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        sel = "PDFOperationWithView:insideRect:toPath:printInfo:",
        managed = "Other"
    )]
    pub unsafe fn PDFOperationWithView_insideRect_toPath_printInfo(
        view: &NSView,
        rect: NSRect,
        path: &NSString,
        print_info: &NSPrintInfo,
    ) -> Id<NSPrintOperation>;

    #[cfg(all(
        feature = "AppKit_NSPrintInfo",
        feature = "AppKit_NSView",
        feature = "Foundation_NSMutableData"
    ))]
    #[objc2::method(
        sel = "EPSOperationWithView:insideRect:toData:printInfo:",
        managed = "Other"
    )]
    pub unsafe fn EPSOperationWithView_insideRect_toData_printInfo(
        view: &NSView,
        rect: NSRect,
        data: &NSMutableData,
        print_info: &NSPrintInfo,
    ) -> Id<NSPrintOperation>;

    #[cfg(all(
        feature = "AppKit_NSPrintInfo",
        feature = "AppKit_NSView",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        sel = "EPSOperationWithView:insideRect:toPath:printInfo:",
        managed = "Other"
    )]
    pub unsafe fn EPSOperationWithView_insideRect_toPath_printInfo(
        view: &NSView,
        rect: NSRect,
        path: &NSString,
        print_info: &NSPrintInfo,
    ) -> Id<NSPrintOperation>;

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "printOperationWithView:", managed = "Other")]
    pub unsafe fn printOperationWithView(view: &NSView) -> Id<NSPrintOperation>;

    #[cfg(all(feature = "AppKit_NSView", feature = "Foundation_NSMutableData"))]
    #[objc2::method(sel = "PDFOperationWithView:insideRect:toData:", managed = "Other")]
    pub unsafe fn PDFOperationWithView_insideRect_toData(
        view: &NSView,
        rect: NSRect,
        data: &NSMutableData,
    ) -> Id<NSPrintOperation>;

    #[cfg(all(feature = "AppKit_NSView", feature = "Foundation_NSMutableData"))]
    #[objc2::method(sel = "EPSOperationWithView:insideRect:toData:", managed = "Other")]
    pub unsafe fn EPSOperationWithView_insideRect_toData(
        view: &NSView,
        rect: NSRect,
        data: Option<&NSMutableData>,
    ) -> Id<NSPrintOperation>;

    #[objc2::method(sel = "currentOperation", managed = "Other")]
    pub unsafe fn currentOperation() -> Option<Id<NSPrintOperation>>;

    #[objc2::method(sel = "setCurrentOperation:")]
    pub unsafe fn setCurrentOperation(current_operation: Option<&NSPrintOperation>);

    #[objc2::method(sel = "isCopyingOperation")]
    pub unsafe fn isCopyingOperation(&self) -> bool;

    #[objc2::method(sel = "preferredRenderingQuality")]
    pub unsafe fn preferredRenderingQuality(&self) -> NSPrintRenderingQuality;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "jobTitle", managed = "Other")]
    pub unsafe fn jobTitle(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setJobTitle:")]
    pub unsafe fn setJobTitle(&self, job_title: Option<&NSString>);

    #[objc2::method(sel = "showsPrintPanel")]
    pub unsafe fn showsPrintPanel(&self) -> bool;

    #[objc2::method(sel = "setShowsPrintPanel:")]
    pub unsafe fn setShowsPrintPanel(&self, shows_print_panel: bool);

    #[objc2::method(sel = "showsProgressPanel")]
    pub unsafe fn showsProgressPanel(&self) -> bool;

    #[objc2::method(sel = "setShowsProgressPanel:")]
    pub unsafe fn setShowsProgressPanel(&self, shows_progress_panel: bool);

    #[cfg(feature = "AppKit_NSPrintPanel")]
    #[objc2::method(sel = "printPanel", managed = "Other")]
    pub unsafe fn printPanel(&self) -> Id<NSPrintPanel>;

    #[cfg(feature = "AppKit_NSPrintPanel")]
    #[objc2::method(sel = "setPrintPanel:")]
    pub unsafe fn setPrintPanel(&self, print_panel: &NSPrintPanel);

    #[cfg(feature = "AppKit_NSPDFPanel")]
    #[objc2::method(sel = "PDFPanel", managed = "Other")]
    pub unsafe fn PDFPanel(&self) -> Id<NSPDFPanel>;

    #[cfg(feature = "AppKit_NSPDFPanel")]
    #[objc2::method(sel = "setPDFPanel:")]
    pub unsafe fn setPDFPanel(&self, pdf_panel: &NSPDFPanel);

    #[objc2::method(sel = "canSpawnSeparateThread")]
    pub unsafe fn canSpawnSeparateThread(&self) -> bool;

    #[objc2::method(sel = "setCanSpawnSeparateThread:")]
    pub unsafe fn setCanSpawnSeparateThread(&self, can_spawn_separate_thread: bool);

    #[objc2::method(sel = "pageOrder")]
    pub unsafe fn pageOrder(&self) -> NSPrintingPageOrder;

    #[objc2::method(sel = "setPageOrder:")]
    pub unsafe fn setPageOrder(&self, page_order: NSPrintingPageOrder);

    #[cfg(feature = "AppKit_NSWindow")]
    #[objc2::method(sel = "runOperationModalForWindow:delegate:didRunSelector:contextInfo:")]
    pub unsafe fn runOperationModalForWindow_delegate_didRunSelector_contextInfo(
        &self,
        doc_window: &NSWindow,
        delegate: Option<&Object>,
        did_run_selector: Option<Sel>,
        context_info: *mut c_void,
    );

    #[objc2::method(sel = "runOperation")]
    pub unsafe fn runOperation(&self) -> bool;

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "view", managed = "Other")]
    pub unsafe fn view(&self) -> Option<Id<NSView>>;

    #[cfg(feature = "AppKit_NSPrintInfo")]
    #[objc2::method(sel = "printInfo", managed = "Other")]
    pub unsafe fn printInfo(&self) -> Id<NSPrintInfo>;

    #[cfg(feature = "AppKit_NSPrintInfo")]
    #[objc2::method(sel = "setPrintInfo:")]
    pub unsafe fn setPrintInfo(&self, print_info: &NSPrintInfo);

    #[cfg(feature = "AppKit_NSGraphicsContext")]
    #[objc2::method(sel = "context", managed = "Other")]
    pub unsafe fn context(&self) -> Option<Id<NSGraphicsContext>>;

    #[objc2::method(sel = "pageRange")]
    pub unsafe fn pageRange(&self) -> NSRange;

    #[objc2::method(sel = "currentPage")]
    pub unsafe fn currentPage(&self) -> NSInteger;

    #[cfg(feature = "AppKit_NSGraphicsContext")]
    #[objc2::method(sel = "createContext", managed = "Other")]
    pub unsafe fn createContext(&self) -> Option<Id<NSGraphicsContext>>;

    #[objc2::method(sel = "destroyContext")]
    pub unsafe fn destroyContext(&self);

    #[objc2::method(sel = "deliverResult")]
    pub unsafe fn deliverResult(&self) -> bool;

    #[objc2::method(sel = "cleanUpOperation")]
    pub unsafe fn cleanUpOperation(&self);
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSPrintOperation")]
    pub type NSPrintOperation;

    #[cfg(feature = "AppKit_NSView")]
    #[deprecated = "Use -[NSPrintPanel addAccessoryController:] and -[NSPrintPanel removeAccessoryController:] instead"]
    #[objc2::method(sel = "setAccessoryView:")]
    pub unsafe fn setAccessoryView(&self, view: Option<&NSView>);

    #[cfg(feature = "AppKit_NSView")]
    #[deprecated = "Use -[NSPrintPanel accessoryControllers] instead"]
    #[objc2::method(sel = "accessoryView", managed = "Other")]
    pub unsafe fn accessoryView(&self) -> Option<Id<NSView>>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "setJobStyleHint:")]
    pub unsafe fn setJobStyleHint(&self, hint: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "jobStyleHint", managed = "Other")]
    pub unsafe fn jobStyleHint(&self) -> Option<Id<NSString>>;

    #[deprecated = "Use -setShowsPrintPanel: and -setShowsProgressPanel: instead"]
    #[objc2::method(sel = "setShowPanels:")]
    pub unsafe fn setShowPanels(&self, flag: bool);

    #[deprecated = "Use -showsPrintPanel and -showsProgressPanel instead"]
    #[objc2::method(sel = "showPanels")]
    pub unsafe fn showPanels(&self) -> bool;
}
