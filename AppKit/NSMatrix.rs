//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSMatrixMode {
    NSRadioModeMatrix = 0,
    NSHighlightModeMatrix = 1,
    NSListModeMatrix = 2,
    NSTrackModeMatrix = 3,
}

#[objc2::interface(
    unsafe super = NSControl,
    unsafe inherits = [
        NSView,
        NSResponder,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSMatrix")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSMatrix;
}

#[cfg(feature = "AppKit_NSMatrix")]
unsafe impl NSAccessibility for NSMatrix {}

#[cfg(feature = "AppKit_NSMatrix")]
unsafe impl NSAccessibilityElementProtocol for NSMatrix {}

#[cfg(feature = "AppKit_NSMatrix")]
unsafe impl NSAnimatablePropertyContainer for NSMatrix {}

#[cfg(feature = "AppKit_NSMatrix")]
unsafe impl NSAppearanceCustomization for NSMatrix {}

#[cfg(feature = "AppKit_NSMatrix")]
unsafe impl NSCoding for NSMatrix {}

#[cfg(feature = "AppKit_NSMatrix")]
unsafe impl NSDraggingDestination for NSMatrix {}

#[cfg(feature = "AppKit_NSMatrix")]
unsafe impl NSObjectProtocol for NSMatrix {}

#[cfg(feature = "AppKit_NSMatrix")]
unsafe impl NSUserInterfaceItemIdentification for NSMatrix {}

#[cfg(feature = "AppKit_NSMatrix")]
unsafe impl NSUserInterfaceValidations for NSMatrix {}

#[cfg(feature = "AppKit_NSMatrix")]
unsafe impl NSViewToolTipOwner for NSMatrix {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSMatrix")]
    pub type NSMatrix;

    #[objc2::method(sel = "initWithFrame:", managed = "Init")]
    pub unsafe fn initWithFrame(this: Option<Allocated<Self>>, frame_rect: NSRect) -> Id<Self>;

    #[cfg(feature = "AppKit_NSCell")]
    #[objc2::method(
        sel = "initWithFrame:mode:prototype:numberOfRows:numberOfColumns:",
        managed = "Init"
    )]
    pub unsafe fn initWithFrame_mode_prototype_numberOfRows_numberOfColumns(
        this: Option<Allocated<Self>>,
        frame_rect: NSRect,
        mode: NSMatrixMode,
        cell: &NSCell,
        rows_high: NSInteger,
        cols_wide: NSInteger,
    ) -> Id<Self>;

    #[objc2::method(
        sel = "initWithFrame:mode:cellClass:numberOfRows:numberOfColumns:",
        managed = "Init"
    )]
    pub unsafe fn initWithFrame_mode_cellClass_numberOfRows_numberOfColumns(
        this: Option<Allocated<Self>>,
        frame_rect: NSRect,
        mode: NSMatrixMode,
        factory_id: Option<&Class>,
        rows_high: NSInteger,
        cols_wide: NSInteger,
    ) -> Id<Self>;

    #[objc2::method(sel = "cellClass")]
    pub unsafe fn cellClass(&self) -> &'static Class;

    #[objc2::method(sel = "setCellClass:")]
    pub unsafe fn setCellClass(&self, cell_class: &Class);

    #[cfg(feature = "AppKit_NSCell")]
    #[objc2::method(sel = "prototype", managed = "Other")]
    pub unsafe fn prototype(&self) -> Option<Id<NSCell>>;

    #[cfg(feature = "AppKit_NSCell")]
    #[objc2::method(sel = "setPrototype:")]
    pub unsafe fn setPrototype(&self, prototype: Option<&NSCell>);

    #[cfg(feature = "AppKit_NSCell")]
    #[objc2::method(sel = "makeCellAtRow:column:", managed = "Other")]
    pub unsafe fn makeCellAtRow_column(&self, row: NSInteger, col: NSInteger) -> Id<NSCell>;

    #[objc2::method(sel = "mode")]
    pub unsafe fn mode(&self) -> NSMatrixMode;

    #[objc2::method(sel = "setMode:")]
    pub unsafe fn setMode(&self, mode: NSMatrixMode);

    #[objc2::method(sel = "allowsEmptySelection")]
    pub unsafe fn allowsEmptySelection(&self) -> bool;

    #[objc2::method(sel = "setAllowsEmptySelection:")]
    pub unsafe fn setAllowsEmptySelection(&self, allows_empty_selection: bool);

    #[objc2::method(sel = "sendAction:to:forAllCells:")]
    pub unsafe fn sendAction_to_forAllCells(&self, selector: Sel, object: &Object, flag: bool);

    #[cfg(all(feature = "AppKit_NSCell", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "cells", managed = "Other")]
    pub unsafe fn cells(&self) -> Id<NSArray<NSCell>>;

    #[objc2::method(sel = "sortUsingSelector:")]
    pub unsafe fn sortUsingSelector(&self, comparator: Sel);

    #[objc2::method(sel = "sortUsingFunction:context:")]
    pub unsafe fn sortUsingFunction_context(
        &self,
        compare: unsafe extern "C" fn(NonNull<Object>, NonNull<Object>, *mut c_void) -> NSInteger,
        context: *mut c_void,
    );

    #[cfg(feature = "AppKit_NSCell")]
    #[objc2::method(sel = "selectedCell", managed = "Other")]
    pub unsafe fn selectedCell(&self) -> Option<Id<NSCell>>;

    #[cfg(all(feature = "AppKit_NSCell", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "selectedCells", managed = "Other")]
    pub unsafe fn selectedCells(&self) -> Id<NSArray<NSCell>>;

    #[objc2::method(sel = "selectedRow")]
    pub unsafe fn selectedRow(&self) -> NSInteger;

    #[objc2::method(sel = "selectedColumn")]
    pub unsafe fn selectedColumn(&self) -> NSInteger;

    #[objc2::method(sel = "isSelectionByRect")]
    pub unsafe fn isSelectionByRect(&self) -> bool;

    #[objc2::method(sel = "setSelectionByRect:")]
    pub unsafe fn setSelectionByRect(&self, selection_by_rect: bool);

    #[objc2::method(sel = "setSelectionFrom:to:anchor:highlight:")]
    pub unsafe fn setSelectionFrom_to_anchor_highlight(
        &self,
        start_pos: NSInteger,
        end_pos: NSInteger,
        anchor_pos: NSInteger,
        lit: bool,
    );

    #[objc2::method(sel = "deselectSelectedCell")]
    pub unsafe fn deselectSelectedCell(&self);

    #[objc2::method(sel = "deselectAllCells")]
    pub unsafe fn deselectAllCells(&self);

    #[objc2::method(sel = "selectCellAtRow:column:")]
    pub unsafe fn selectCellAtRow_column(&self, row: NSInteger, col: NSInteger);

    #[objc2::method(sel = "selectAll:")]
    pub unsafe fn selectAll(&self, sender: Option<&Object>);

    #[objc2::method(sel = "selectCellWithTag:")]
    pub unsafe fn selectCellWithTag(&self, tag: NSInteger) -> bool;

    #[objc2::method(sel = "cellSize")]
    pub unsafe fn cellSize(&self) -> NSSize;

    #[objc2::method(sel = "setCellSize:")]
    pub unsafe fn setCellSize(&self, cell_size: NSSize);

    #[objc2::method(sel = "intercellSpacing")]
    pub unsafe fn intercellSpacing(&self) -> NSSize;

    #[objc2::method(sel = "setIntercellSpacing:")]
    pub unsafe fn setIntercellSpacing(&self, intercell_spacing: NSSize);

    #[objc2::method(sel = "setScrollable:")]
    pub unsafe fn setScrollable(&self, flag: bool);

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "backgroundColor", managed = "Other")]
    pub unsafe fn backgroundColor(&self) -> Id<NSColor>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "setBackgroundColor:")]
    pub unsafe fn setBackgroundColor(&self, background_color: &NSColor);

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "cellBackgroundColor", managed = "Other")]
    pub unsafe fn cellBackgroundColor(&self) -> Option<Id<NSColor>>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "setCellBackgroundColor:")]
    pub unsafe fn setCellBackgroundColor(&self, cell_background_color: Option<&NSColor>);

    #[objc2::method(sel = "drawsCellBackground")]
    pub unsafe fn drawsCellBackground(&self) -> bool;

    #[objc2::method(sel = "setDrawsCellBackground:")]
    pub unsafe fn setDrawsCellBackground(&self, draws_cell_background: bool);

    #[objc2::method(sel = "drawsBackground")]
    pub unsafe fn drawsBackground(&self) -> bool;

    #[objc2::method(sel = "setDrawsBackground:")]
    pub unsafe fn setDrawsBackground(&self, draws_background: bool);

    #[objc2::method(sel = "setState:atRow:column:")]
    pub unsafe fn setState_atRow_column(&self, value: NSInteger, row: NSInteger, col: NSInteger);

    #[objc2::method(sel = "getNumberOfRows:columns:")]
    pub unsafe fn getNumberOfRows_columns(
        &self,
        row_count: *mut NSInteger,
        col_count: *mut NSInteger,
    );

    #[objc2::method(sel = "numberOfRows")]
    pub unsafe fn numberOfRows(&self) -> NSInteger;

    #[objc2::method(sel = "numberOfColumns")]
    pub unsafe fn numberOfColumns(&self) -> NSInteger;

    #[cfg(feature = "AppKit_NSCell")]
    #[objc2::method(sel = "cellAtRow:column:", managed = "Other")]
    pub unsafe fn cellAtRow_column(&self, row: NSInteger, col: NSInteger) -> Option<Id<NSCell>>;

    #[objc2::method(sel = "cellFrameAtRow:column:")]
    pub unsafe fn cellFrameAtRow_column(&self, row: NSInteger, col: NSInteger) -> NSRect;

    #[cfg(feature = "AppKit_NSCell")]
    #[objc2::method(sel = "getRow:column:ofCell:")]
    pub unsafe fn getRow_column_ofCell(
        &self,
        row: NonNull<NSInteger>,
        col: NonNull<NSInteger>,
        cell: &NSCell,
    ) -> bool;

    #[objc2::method(sel = "getRow:column:forPoint:")]
    pub unsafe fn getRow_column_forPoint(
        &self,
        row: NonNull<NSInteger>,
        col: NonNull<NSInteger>,
        point: NSPoint,
    ) -> bool;

    #[objc2::method(sel = "renewRows:columns:")]
    pub unsafe fn renewRows_columns(&self, new_rows: NSInteger, new_cols: NSInteger);

    #[cfg(feature = "AppKit_NSCell")]
    #[objc2::method(sel = "putCell:atRow:column:")]
    pub unsafe fn putCell_atRow_column(&self, new_cell: &NSCell, row: NSInteger, col: NSInteger);

    #[objc2::method(sel = "addRow")]
    pub unsafe fn addRow(&self);

    #[cfg(all(feature = "AppKit_NSCell", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "addRowWithCells:")]
    pub unsafe fn addRowWithCells(&self, new_cells: &NSArray<NSCell>);

    #[objc2::method(sel = "insertRow:")]
    pub unsafe fn insertRow(&self, row: NSInteger);

    #[cfg(all(feature = "AppKit_NSCell", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "insertRow:withCells:")]
    pub unsafe fn insertRow_withCells(&self, row: NSInteger, new_cells: Option<&NSArray<NSCell>>);

    #[objc2::method(sel = "removeRow:")]
    pub unsafe fn removeRow(&self, row: NSInteger);

    #[objc2::method(sel = "addColumn")]
    pub unsafe fn addColumn(&self);

    #[cfg(all(feature = "AppKit_NSCell", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "addColumnWithCells:")]
    pub unsafe fn addColumnWithCells(&self, new_cells: &NSArray<NSCell>);

    #[objc2::method(sel = "insertColumn:")]
    pub unsafe fn insertColumn(&self, column: NSInteger);

    #[cfg(all(feature = "AppKit_NSCell", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "insertColumn:withCells:")]
    pub unsafe fn insertColumn_withCells(
        &self,
        column: NSInteger,
        new_cells: Option<&NSArray<NSCell>>,
    );

    #[objc2::method(sel = "removeColumn:")]
    pub unsafe fn removeColumn(&self, col: NSInteger);

    #[cfg(feature = "AppKit_NSCell")]
    #[objc2::method(sel = "cellWithTag:", managed = "Other")]
    pub unsafe fn cellWithTag(&self, tag: NSInteger) -> Option<Id<NSCell>>;

    #[objc2::method(sel = "doubleAction")]
    pub unsafe fn doubleAction(&self) -> Option<Sel>;

    #[objc2::method(sel = "setDoubleAction:")]
    pub unsafe fn setDoubleAction(&self, double_action: Option<Sel>);

    #[objc2::method(sel = "autosizesCells")]
    pub unsafe fn autosizesCells(&self) -> bool;

    #[objc2::method(sel = "setAutosizesCells:")]
    pub unsafe fn setAutosizesCells(&self, autosizes_cells: bool);

    #[objc2::method(sel = "sizeToCells")]
    pub unsafe fn sizeToCells(&self);

    #[objc2::method(sel = "setValidateSize:")]
    pub unsafe fn setValidateSize(&self, flag: bool);

    #[objc2::method(sel = "drawCellAtRow:column:")]
    pub unsafe fn drawCellAtRow_column(&self, row: NSInteger, col: NSInteger);

    #[objc2::method(sel = "highlightCell:atRow:column:")]
    pub unsafe fn highlightCell_atRow_column(&self, flag: bool, row: NSInteger, col: NSInteger);

    #[objc2::method(sel = "isAutoscroll")]
    pub unsafe fn isAutoscroll(&self) -> bool;

    #[objc2::method(sel = "setAutoscroll:")]
    pub unsafe fn setAutoscroll(&self, autoscroll: bool);

    #[objc2::method(sel = "scrollCellToVisibleAtRow:column:")]
    pub unsafe fn scrollCellToVisibleAtRow_column(&self, row: NSInteger, col: NSInteger);

    #[objc2::method(sel = "mouseDownFlags")]
    pub unsafe fn mouseDownFlags(&self) -> NSInteger;

    #[cfg(feature = "AppKit_NSEvent")]
    #[objc2::method(sel = "mouseDown:")]
    pub unsafe fn mouseDown(&self, event: &NSEvent);

    #[cfg(feature = "AppKit_NSEvent")]
    #[objc2::method(sel = "performKeyEquivalent:")]
    pub unsafe fn performKeyEquivalent(&self, event: &NSEvent) -> bool;

    #[objc2::method(sel = "sendAction")]
    pub unsafe fn sendAction(&self) -> bool;

    #[objc2::method(sel = "sendDoubleAction")]
    pub unsafe fn sendDoubleAction(&self);

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn NSMatrixDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(&self, delegate: Option<&ProtocolObject<dyn NSMatrixDelegate>>);

    #[cfg(feature = "AppKit_NSText")]
    #[objc2::method(sel = "textShouldBeginEditing:")]
    pub unsafe fn textShouldBeginEditing(&self, text_object: &NSText) -> bool;

    #[cfg(feature = "AppKit_NSText")]
    #[objc2::method(sel = "textShouldEndEditing:")]
    pub unsafe fn textShouldEndEditing(&self, text_object: &NSText) -> bool;

    #[cfg(feature = "Foundation_NSNotification")]
    #[objc2::method(sel = "textDidBeginEditing:")]
    pub unsafe fn textDidBeginEditing(&self, notification: &NSNotification);

    #[cfg(feature = "Foundation_NSNotification")]
    #[objc2::method(sel = "textDidEndEditing:")]
    pub unsafe fn textDidEndEditing(&self, notification: &NSNotification);

    #[cfg(feature = "Foundation_NSNotification")]
    #[objc2::method(sel = "textDidChange:")]
    pub unsafe fn textDidChange(&self, notification: &NSNotification);

    #[objc2::method(sel = "selectText:")]
    pub unsafe fn selectText(&self, sender: Option<&Object>);

    #[cfg(feature = "AppKit_NSCell")]
    #[objc2::method(sel = "selectTextAtRow:column:", managed = "Other")]
    pub unsafe fn selectTextAtRow_column(
        &self,
        row: NSInteger,
        col: NSInteger,
    ) -> Option<Id<NSCell>>;

    #[cfg(feature = "AppKit_NSEvent")]
    #[objc2::method(sel = "acceptsFirstMouse:")]
    pub unsafe fn acceptsFirstMouse(&self, event: Option<&NSEvent>) -> bool;

    #[objc2::method(sel = "resetCursorRects")]
    pub unsafe fn resetCursorRects(&self);

    #[cfg(all(feature = "AppKit_NSCell", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setToolTip:forCell:")]
    pub unsafe fn setToolTip_forCell(&self, tool_tip_string: Option<&NSString>, cell: &NSCell);

    #[cfg(all(feature = "AppKit_NSCell", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "toolTipForCell:", managed = "Other")]
    pub unsafe fn toolTipForCell(&self, cell: &NSCell) -> Option<Id<NSString>>;

    #[objc2::method(sel = "autorecalculatesCellSize")]
    pub unsafe fn autorecalculatesCellSize(&self) -> bool;

    #[objc2::method(sel = "setAutorecalculatesCellSize:")]
    pub unsafe fn setAutorecalculatesCellSize(&self, autorecalculates_cell_size: bool);
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSMatrix")]
    pub type NSMatrix;

    #[objc2::method(sel = "tabKeyTraversesCells")]
    pub unsafe fn tabKeyTraversesCells(&self) -> bool;

    #[objc2::method(sel = "setTabKeyTraversesCells:")]
    pub unsafe fn setTabKeyTraversesCells(&self, tab_key_traverses_cells: bool);

    #[cfg(feature = "AppKit_NSCell")]
    #[objc2::method(sel = "keyCell", managed = "Other")]
    pub unsafe fn keyCell(&self) -> Option<Id<NSCell>>;

    #[cfg(feature = "AppKit_NSCell")]
    #[objc2::method(sel = "setKeyCell:")]
    pub unsafe fn setKeyCell(&self, key_cell: Option<&NSCell>);
}

#[objc2::protocol]
pub unsafe trait NSMatrixDelegate: NSControlTextEditingDelegate {}
