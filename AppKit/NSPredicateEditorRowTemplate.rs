//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSPredicateEditorRowTemplate")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSPredicateEditorRowTemplate;
}

#[cfg(feature = "AppKit_NSPredicateEditorRowTemplate")]
unsafe impl NSCoding for NSPredicateEditorRowTemplate {}

#[cfg(feature = "AppKit_NSPredicateEditorRowTemplate")]
unsafe impl NSObjectProtocol for NSPredicateEditorRowTemplate {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSPredicateEditorRowTemplate")]
    pub type NSPredicateEditorRowTemplate;

    #[cfg(feature = "Foundation_NSPredicate")]
    #[objc2::method(sel = "matchForPredicate:")]
    pub unsafe fn matchForPredicate(&self, predicate: &NSPredicate) -> c_double;

    #[cfg(all(feature = "AppKit_NSView", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "templateViews", managed = "Other")]
    pub unsafe fn templateViews(&self) -> Id<NSArray<NSView>>;

    #[cfg(feature = "Foundation_NSPredicate")]
    #[objc2::method(sel = "setPredicate:")]
    pub unsafe fn setPredicate(&self, predicate: &NSPredicate);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSPredicate"))]
    #[objc2::method(sel = "predicateWithSubpredicates:", managed = "Other")]
    pub unsafe fn predicateWithSubpredicates(
        &self,
        subpredicates: Option<&NSArray<NSPredicate>>,
    ) -> Id<NSPredicate>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSPredicate"))]
    #[objc2::method(sel = "displayableSubpredicatesOfPredicate:", managed = "Other")]
    pub unsafe fn displayableSubpredicatesOfPredicate(
        &self,
        predicate: &NSPredicate,
    ) -> Option<Id<NSArray<NSPredicate>>>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSExpression",
        feature = "Foundation_NSNumber"
    ))]
    #[objc2::method(
        sel = "initWithLeftExpressions:rightExpressions:modifier:operators:options:",
        managed = "Init"
    )]
    pub unsafe fn initWithLeftExpressions_rightExpressions_modifier_operators_options(
        this: Option<Allocated<Self>>,
        left_expressions: &NSArray<NSExpression>,
        right_expressions: &NSArray<NSExpression>,
        modifier: NSComparisonPredicateModifier,
        operators: &NSArray<NSNumber>,
        options: NSUInteger,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSExpression",
        feature = "Foundation_NSNumber"
    ))]
    #[objc2::method(
        sel = "initWithLeftExpressions:rightExpressionAttributeType:modifier:operators:options:",
        managed = "Init"
    )]
    pub unsafe fn initWithLeftExpressions_rightExpressionAttributeType_modifier_operators_options(
        this: Option<Allocated<Self>>,
        left_expressions: &NSArray<NSExpression>,
        attribute_type: NSAttributeType,
        modifier: NSComparisonPredicateModifier,
        operators: &NSArray<NSNumber>,
        options: NSUInteger,
    ) -> Id<Self>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
    #[objc2::method(sel = "initWithCompoundTypes:", managed = "Init")]
    pub unsafe fn initWithCompoundTypes(
        this: Option<Allocated<Self>>,
        compound_types: &NSArray<NSNumber>,
    ) -> Id<Self>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSExpression"))]
    #[objc2::method(sel = "leftExpressions", managed = "Other")]
    pub unsafe fn leftExpressions(&self) -> Option<Id<NSArray<NSExpression>>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSExpression"))]
    #[objc2::method(sel = "rightExpressions", managed = "Other")]
    pub unsafe fn rightExpressions(&self) -> Option<Id<NSArray<NSExpression>>>;

    #[objc2::method(sel = "rightExpressionAttributeType")]
    pub unsafe fn rightExpressionAttributeType(&self) -> NSAttributeType;

    #[objc2::method(sel = "modifier")]
    pub unsafe fn modifier(&self) -> NSComparisonPredicateModifier;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
    #[objc2::method(sel = "operators", managed = "Other")]
    pub unsafe fn operators(&self) -> Option<Id<NSArray<NSNumber>>>;

    #[objc2::method(sel = "options")]
    pub unsafe fn options(&self) -> NSUInteger;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
    #[objc2::method(sel = "compoundTypes", managed = "Other")]
    pub unsafe fn compoundTypes(&self) -> Option<Id<NSArray<NSNumber>>>;

    #[cfg(all(
        feature = "CoreData_NSEntityDescription",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        sel = "templatesWithAttributeKeyPaths:inEntityDescription:",
        managed = "Other"
    )]
    pub unsafe fn templatesWithAttributeKeyPaths_inEntityDescription(
        key_paths: &NSArray<NSString>,
        entity_description: &NSEntityDescription,
    ) -> Id<NSArray<NSPredicateEditorRowTemplate>>;
}
