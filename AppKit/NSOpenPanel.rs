//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSSavePanel,
    unsafe inherits = [
        NSPanel,
        NSWindow,
        NSResponder,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSOpenPanel")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSOpenPanel;
}

#[cfg(feature = "AppKit_NSOpenPanel")]
unsafe impl NSAccessibility for NSOpenPanel {}

#[cfg(feature = "AppKit_NSOpenPanel")]
unsafe impl NSAccessibilityElementProtocol for NSOpenPanel {}

#[cfg(feature = "AppKit_NSOpenPanel")]
unsafe impl NSAnimatablePropertyContainer for NSOpenPanel {}

#[cfg(feature = "AppKit_NSOpenPanel")]
unsafe impl NSAppearanceCustomization for NSOpenPanel {}

#[cfg(feature = "AppKit_NSOpenPanel")]
unsafe impl NSCoding for NSOpenPanel {}

#[cfg(feature = "AppKit_NSOpenPanel")]
unsafe impl NSMenuItemValidation for NSOpenPanel {}

#[cfg(feature = "AppKit_NSOpenPanel")]
unsafe impl NSObjectProtocol for NSOpenPanel {}

#[cfg(feature = "AppKit_NSOpenPanel")]
unsafe impl NSUserInterfaceItemIdentification for NSOpenPanel {}

#[cfg(feature = "AppKit_NSOpenPanel")]
unsafe impl NSUserInterfaceValidations for NSOpenPanel {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSOpenPanel")]
    pub type NSOpenPanel;

    #[objc2::method(sel = "openPanel", managed = "Other")]
    pub unsafe fn openPanel() -> Id<NSOpenPanel>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSURL"))]
    #[objc2::method(sel = "URLs", managed = "Other")]
    pub unsafe fn URLs(&self) -> Id<NSArray<NSURL>>;

    #[objc2::method(sel = "resolvesAliases")]
    pub unsafe fn resolvesAliases(&self) -> bool;

    #[objc2::method(sel = "setResolvesAliases:")]
    pub unsafe fn setResolvesAliases(&self, resolves_aliases: bool);

    #[objc2::method(sel = "canChooseDirectories")]
    pub unsafe fn canChooseDirectories(&self) -> bool;

    #[objc2::method(sel = "setCanChooseDirectories:")]
    pub unsafe fn setCanChooseDirectories(&self, can_choose_directories: bool);

    #[objc2::method(sel = "allowsMultipleSelection")]
    pub unsafe fn allowsMultipleSelection(&self) -> bool;

    #[objc2::method(sel = "setAllowsMultipleSelection:")]
    pub unsafe fn setAllowsMultipleSelection(&self, allows_multiple_selection: bool);

    #[objc2::method(sel = "canChooseFiles")]
    pub unsafe fn canChooseFiles(&self) -> bool;

    #[objc2::method(sel = "setCanChooseFiles:")]
    pub unsafe fn setCanChooseFiles(&self, can_choose_files: bool);

    #[objc2::method(sel = "canResolveUbiquitousConflicts")]
    pub unsafe fn canResolveUbiquitousConflicts(&self) -> bool;

    #[objc2::method(sel = "setCanResolveUbiquitousConflicts:")]
    pub unsafe fn setCanResolveUbiquitousConflicts(&self, can_resolve_ubiquitous_conflicts: bool);

    #[objc2::method(sel = "canDownloadUbiquitousContents")]
    pub unsafe fn canDownloadUbiquitousContents(&self) -> bool;

    #[objc2::method(sel = "setCanDownloadUbiquitousContents:")]
    pub unsafe fn setCanDownloadUbiquitousContents(&self, can_download_ubiquitous_contents: bool);

    #[objc2::method(sel = "isAccessoryViewDisclosed")]
    pub unsafe fn isAccessoryViewDisclosed(&self) -> bool;

    #[objc2::method(sel = "setAccessoryViewDisclosed:")]
    pub unsafe fn setAccessoryViewDisclosed(&self, accessory_view_disclosed: bool);
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSOpenPanel")]
    pub type NSOpenPanel;

    #[cfg(feature = "Foundation_NSArray")]
    #[deprecated]
    #[objc2::method(sel = "filenames", managed = "Other")]
    pub unsafe fn filenames(&self) -> Id<NSArray>;

    #[cfg(all(
        feature = "AppKit_NSWindow",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSString"
    ))]
    #[deprecated]
    #[objc2::method(
        sel = "beginSheetForDirectory:file:types:modalForWindow:modalDelegate:didEndSelector:contextInfo:"
    )]
    pub unsafe fn beginSheetForDirectory_file_types_modalForWindow_modalDelegate_didEndSelector_contextInfo(
        &self,
        path: Option<&NSString>,
        name: Option<&NSString>,
        file_types: Option<&NSArray>,
        doc_window: Option<&NSWindow>,
        delegate: Option<&Object>,
        did_end_selector: Option<Sel>,
        context_info: *mut c_void,
    );

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[deprecated]
    #[objc2::method(
        sel = "beginForDirectory:file:types:modelessDelegate:didEndSelector:contextInfo:"
    )]
    pub unsafe fn beginForDirectory_file_types_modelessDelegate_didEndSelector_contextInfo(
        &self,
        path: Option<&NSString>,
        name: Option<&NSString>,
        file_types: Option<&NSArray>,
        delegate: Option<&Object>,
        did_end_selector: Option<Sel>,
        context_info: *mut c_void,
    );

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[deprecated]
    #[objc2::method(sel = "runModalForDirectory:file:types:")]
    pub unsafe fn runModalForDirectory_file_types(
        &self,
        path: Option<&NSString>,
        name: Option<&NSString>,
        file_types: Option<&NSArray>,
    ) -> NSInteger;

    #[cfg(feature = "Foundation_NSArray")]
    #[deprecated]
    #[objc2::method(sel = "runModalForTypes:")]
    pub unsafe fn runModalForTypes(&self, file_types: Option<&NSArray>) -> NSInteger;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSWindow`
    #[cfg(feature = "AppKit_NSOpenPanel")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSOpenPanel")]
    pub type NSOpenPanel;

    #[objc2::method(sel = "initWithContentRect:styleMask:backing:defer:", managed = "Init")]
    pub unsafe fn initWithContentRect_styleMask_backing_defer(
        this: Option<Allocated<Self>>,
        content_rect: NSRect,
        style: NSWindowStyleMask,
        backing_store_type: NSBackingStoreType,
        flag: bool,
    ) -> Id<Self>;

    #[cfg(feature = "AppKit_NSScreen")]
    #[objc2::method(
        sel = "initWithContentRect:styleMask:backing:defer:screen:",
        managed = "Init"
    )]
    pub unsafe fn initWithContentRect_styleMask_backing_defer_screen(
        this: Option<Allocated<Self>>,
        content_rect: NSRect,
        style: NSWindowStyleMask,
        backing_store_type: NSBackingStoreType,
        flag: bool,
        screen: Option<&NSScreen>,
    ) -> Id<Self>;

    #[cfg(feature = "AppKit_NSViewController")]
    #[objc2::method(sel = "windowWithContentViewController:", managed = "Other")]
    pub unsafe fn windowWithContentViewController(
        content_view_controller: &NSViewController,
    ) -> Id<Self>;
}
