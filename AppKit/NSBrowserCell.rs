//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSCell,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSBrowserCell")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSBrowserCell;
}

#[cfg(feature = "AppKit_NSBrowserCell")]
unsafe impl NSAccessibility for NSBrowserCell {}

#[cfg(feature = "AppKit_NSBrowserCell")]
unsafe impl NSAccessibilityElementProtocol for NSBrowserCell {}

#[cfg(feature = "AppKit_NSBrowserCell")]
unsafe impl NSCoding for NSBrowserCell {}

#[cfg(feature = "AppKit_NSBrowserCell")]
unsafe impl NSObjectProtocol for NSBrowserCell {}

#[cfg(feature = "AppKit_NSBrowserCell")]
unsafe impl NSUserInterfaceItemIdentification for NSBrowserCell {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSBrowserCell")]
    pub type NSBrowserCell;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initTextCell:", managed = "Init")]
    pub unsafe fn initTextCell(this: Option<Allocated<Self>>, string: &NSString) -> Id<Self>;

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "initImageCell:", managed = "Init")]
    pub unsafe fn initImageCell(this: Option<Allocated<Self>>, image: Option<&NSImage>)
        -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, coder: &NSCoder) -> Id<Self>;

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "branchImage", managed = "Other")]
    pub unsafe fn branchImage() -> Option<Id<NSImage>>;

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "highlightedBranchImage", managed = "Other")]
    pub unsafe fn highlightedBranchImage() -> Option<Id<NSImage>>;

    #[cfg(all(feature = "AppKit_NSColor", feature = "AppKit_NSView"))]
    #[objc2::method(sel = "highlightColorInView:", managed = "Other")]
    pub unsafe fn highlightColorInView(&self, control_view: &NSView) -> Option<Id<NSColor>>;

    #[objc2::method(sel = "isLeaf")]
    pub unsafe fn isLeaf(&self) -> bool;

    #[objc2::method(sel = "setLeaf:")]
    pub unsafe fn setLeaf(&self, leaf: bool);

    #[objc2::method(sel = "isLoaded")]
    pub unsafe fn isLoaded(&self) -> bool;

    #[objc2::method(sel = "setLoaded:")]
    pub unsafe fn setLoaded(&self, loaded: bool);

    #[objc2::method(sel = "reset")]
    pub unsafe fn reset(&self);

    #[objc2::method(sel = "set")]
    pub unsafe fn set(&self);

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "image", managed = "Other")]
    pub unsafe fn image(&self) -> Option<Id<NSImage>>;

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "setImage:")]
    pub unsafe fn setImage(&self, image: Option<&NSImage>);

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "alternateImage", managed = "Other")]
    pub unsafe fn alternateImage(&self) -> Option<Id<NSImage>>;

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "setAlternateImage:")]
    pub unsafe fn setAlternateImage(&self, alternate_image: Option<&NSImage>);
}
