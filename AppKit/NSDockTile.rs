//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

extern_static!(NSAppKitVersionNumberWithDockTilePlugInSupport: NSAppKitVersion = 1001.0);

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSDockTile")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSDockTile;
}

#[cfg(feature = "AppKit_NSDockTile")]
unsafe impl NSObjectProtocol for NSDockTile {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSDockTile")]
    pub type NSDockTile;

    #[objc2::method(sel = "size")]
    pub unsafe fn size(&self) -> NSSize;

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "contentView", managed = "Other")]
    pub unsafe fn contentView(&self) -> Option<Id<NSView>>;

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "setContentView:")]
    pub unsafe fn setContentView(&self, content_view: Option<&NSView>);

    #[objc2::method(sel = "display")]
    pub unsafe fn display(&self);

    #[objc2::method(sel = "showsApplicationBadge")]
    pub unsafe fn showsApplicationBadge(&self) -> bool;

    #[objc2::method(sel = "setShowsApplicationBadge:")]
    pub unsafe fn setShowsApplicationBadge(&self, shows_application_badge: bool);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "badgeLabel", managed = "Other")]
    pub unsafe fn badgeLabel(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setBadgeLabel:")]
    pub unsafe fn setBadgeLabel(&self, badge_label: Option<&NSString>);

    #[objc2::method(sel = "owner", managed = "Other")]
    pub unsafe fn owner(&self) -> Option<Id<Object>>;
}

#[objc2::protocol]
pub unsafe trait NSDockTilePlugIn: NSObjectProtocol {
    #[cfg(feature = "AppKit_NSDockTile")]
    #[objc2::method(sel = "setDockTile:")]
    unsafe fn setDockTile(&self, dock_tile: Option<&NSDockTile>);

    #[cfg(feature = "AppKit_NSMenu")]
    #[objc2::method(optional, sel = "dockMenu", managed = "Other")]
    unsafe fn dockMenu(&self) -> Option<Id<NSMenu>>;
}
