//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

typed_enum!(
    pub type NSRuleEditorPredicatePartKey = NSString;
);

extern_static!(NSRuleEditorPredicateLeftExpression: &'static NSRuleEditorPredicatePartKey);

extern_static!(NSRuleEditorPredicateRightExpression: &'static NSRuleEditorPredicatePartKey);

extern_static!(NSRuleEditorPredicateComparisonModifier: &'static NSRuleEditorPredicatePartKey);

extern_static!(NSRuleEditorPredicateOptions: &'static NSRuleEditorPredicatePartKey);

extern_static!(NSRuleEditorPredicateOperatorType: &'static NSRuleEditorPredicatePartKey);

extern_static!(NSRuleEditorPredicateCustomSelector: &'static NSRuleEditorPredicatePartKey);

extern_static!(NSRuleEditorPredicateCompoundType: &'static NSRuleEditorPredicatePartKey);

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSRuleEditorNestingMode {
    NSRuleEditorNestingModeSingle = 0,
    NSRuleEditorNestingModeList = 1,
    NSRuleEditorNestingModeCompound = 2,
    NSRuleEditorNestingModeSimple = 3,
}

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSRuleEditorRowType {
    NSRuleEditorRowTypeSimple = 0,
    NSRuleEditorRowTypeCompound = 1,
}

#[objc2::interface(
    unsafe super = NSControl,
    unsafe inherits = [
        NSView,
        NSResponder,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSRuleEditor")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSRuleEditor;
}

#[cfg(feature = "AppKit_NSRuleEditor")]
unsafe impl NSAccessibility for NSRuleEditor {}

#[cfg(feature = "AppKit_NSRuleEditor")]
unsafe impl NSAccessibilityElementProtocol for NSRuleEditor {}

#[cfg(feature = "AppKit_NSRuleEditor")]
unsafe impl NSAnimatablePropertyContainer for NSRuleEditor {}

#[cfg(feature = "AppKit_NSRuleEditor")]
unsafe impl NSAppearanceCustomization for NSRuleEditor {}

#[cfg(feature = "AppKit_NSRuleEditor")]
unsafe impl NSCoding for NSRuleEditor {}

#[cfg(feature = "AppKit_NSRuleEditor")]
unsafe impl NSDraggingDestination for NSRuleEditor {}

#[cfg(feature = "AppKit_NSRuleEditor")]
unsafe impl NSObjectProtocol for NSRuleEditor {}

#[cfg(feature = "AppKit_NSRuleEditor")]
unsafe impl NSUserInterfaceItemIdentification for NSRuleEditor {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSRuleEditor")]
    pub type NSRuleEditor;

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn NSRuleEditorDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(&self, delegate: Option<&ProtocolObject<dyn NSRuleEditorDelegate>>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "formattingStringsFilename", managed = "Other")]
    pub unsafe fn formattingStringsFilename(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setFormattingStringsFilename:")]
    pub unsafe fn setFormattingStringsFilename(
        &self,
        formatting_strings_filename: Option<&NSString>,
    );

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "formattingDictionary", managed = "Other")]
    pub unsafe fn formattingDictionary(&self) -> Option<Id<NSDictionary<NSString, NSString>>>;

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setFormattingDictionary:")]
    pub unsafe fn setFormattingDictionary(
        &self,
        formatting_dictionary: Option<&NSDictionary<NSString, NSString>>,
    );

    #[objc2::method(sel = "reloadCriteria")]
    pub unsafe fn reloadCriteria(&self);

    #[objc2::method(sel = "nestingMode")]
    pub unsafe fn nestingMode(&self) -> NSRuleEditorNestingMode;

    #[objc2::method(sel = "setNestingMode:")]
    pub unsafe fn setNestingMode(&self, nesting_mode: NSRuleEditorNestingMode);

    #[objc2::method(sel = "rowHeight")]
    pub unsafe fn rowHeight(&self) -> CGFloat;

    #[objc2::method(sel = "setRowHeight:")]
    pub unsafe fn setRowHeight(&self, row_height: CGFloat);

    #[objc2::method(sel = "isEditable")]
    pub unsafe fn isEditable(&self) -> bool;

    #[objc2::method(sel = "setEditable:")]
    pub unsafe fn setEditable(&self, editable: bool);

    #[objc2::method(sel = "canRemoveAllRows")]
    pub unsafe fn canRemoveAllRows(&self) -> bool;

    #[objc2::method(sel = "setCanRemoveAllRows:")]
    pub unsafe fn setCanRemoveAllRows(&self, can_remove_all_rows: bool);

    #[cfg(feature = "Foundation_NSPredicate")]
    #[objc2::method(sel = "predicate", managed = "Other")]
    pub unsafe fn predicate(&self) -> Option<Id<NSPredicate>>;

    #[objc2::method(sel = "reloadPredicate")]
    pub unsafe fn reloadPredicate(&self);

    #[cfg(feature = "Foundation_NSPredicate")]
    #[objc2::method(sel = "predicateForRow:", managed = "Other")]
    pub unsafe fn predicateForRow(&self, row: NSInteger) -> Option<Id<NSPredicate>>;

    #[objc2::method(sel = "numberOfRows")]
    pub unsafe fn numberOfRows(&self) -> NSInteger;

    #[cfg(feature = "Foundation_NSIndexSet")]
    #[objc2::method(sel = "subrowIndexesForRow:", managed = "Other")]
    pub unsafe fn subrowIndexesForRow(&self, row_index: NSInteger) -> Id<NSIndexSet>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "criteriaForRow:", managed = "Other")]
    pub unsafe fn criteriaForRow(&self, row: NSInteger) -> Id<NSArray>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "displayValuesForRow:", managed = "Other")]
    pub unsafe fn displayValuesForRow(&self, row: NSInteger) -> Id<NSArray>;

    #[objc2::method(sel = "rowForDisplayValue:")]
    pub unsafe fn rowForDisplayValue(&self, display_value: &Object) -> NSInteger;

    #[objc2::method(sel = "rowTypeForRow:")]
    pub unsafe fn rowTypeForRow(&self, row_index: NSInteger) -> NSRuleEditorRowType;

    #[objc2::method(sel = "parentRowForRow:")]
    pub unsafe fn parentRowForRow(&self, row_index: NSInteger) -> NSInteger;

    #[objc2::method(sel = "addRow:")]
    pub unsafe fn addRow(&self, sender: Option<&Object>);

    #[objc2::method(sel = "insertRowAtIndex:withType:asSubrowOfRow:animate:")]
    pub unsafe fn insertRowAtIndex_withType_asSubrowOfRow_animate(
        &self,
        row_index: NSInteger,
        row_type: NSRuleEditorRowType,
        parent_row: NSInteger,
        should_animate: bool,
    );

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "setCriteria:andDisplayValues:forRowAtIndex:")]
    pub unsafe fn setCriteria_andDisplayValues_forRowAtIndex(
        &self,
        criteria: &NSArray,
        values: &NSArray,
        row_index: NSInteger,
    );

    #[objc2::method(sel = "removeRowAtIndex:")]
    pub unsafe fn removeRowAtIndex(&self, row_index: NSInteger);

    #[cfg(feature = "Foundation_NSIndexSet")]
    #[objc2::method(sel = "removeRowsAtIndexes:includeSubrows:")]
    pub unsafe fn removeRowsAtIndexes_includeSubrows(
        &self,
        row_indexes: &NSIndexSet,
        include_subrows: bool,
    );

    #[cfg(feature = "Foundation_NSIndexSet")]
    #[objc2::method(sel = "selectedRowIndexes", managed = "Other")]
    pub unsafe fn selectedRowIndexes(&self) -> Id<NSIndexSet>;

    #[cfg(feature = "Foundation_NSIndexSet")]
    #[objc2::method(sel = "selectRowIndexes:byExtendingSelection:")]
    pub unsafe fn selectRowIndexes_byExtendingSelection(&self, indexes: &NSIndexSet, extend: bool);

    #[objc2::method(sel = "rowClass")]
    pub unsafe fn rowClass(&self) -> &'static Class;

    #[objc2::method(sel = "setRowClass:")]
    pub unsafe fn setRowClass(&self, row_class: &Class);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "rowTypeKeyPath", managed = "Other")]
    pub unsafe fn rowTypeKeyPath(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setRowTypeKeyPath:")]
    pub unsafe fn setRowTypeKeyPath(&self, row_type_key_path: &NSString);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "subrowsKeyPath", managed = "Other")]
    pub unsafe fn subrowsKeyPath(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setSubrowsKeyPath:")]
    pub unsafe fn setSubrowsKeyPath(&self, subrows_key_path: &NSString);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "criteriaKeyPath", managed = "Other")]
    pub unsafe fn criteriaKeyPath(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setCriteriaKeyPath:")]
    pub unsafe fn setCriteriaKeyPath(&self, criteria_key_path: &NSString);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "displayValuesKeyPath", managed = "Other")]
    pub unsafe fn displayValuesKeyPath(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setDisplayValuesKeyPath:")]
    pub unsafe fn setDisplayValuesKeyPath(&self, display_values_key_path: &NSString);
}

#[objc2::protocol]
pub unsafe trait NSRuleEditorDelegate: NSObjectProtocol {
    #[cfg(feature = "AppKit_NSRuleEditor")]
    #[objc2::method(sel = "ruleEditor:numberOfChildrenForCriterion:withRowType:")]
    unsafe fn ruleEditor_numberOfChildrenForCriterion_withRowType(
        &self,
        editor: &NSRuleEditor,
        criterion: Option<&Object>,
        row_type: NSRuleEditorRowType,
    ) -> NSInteger;

    #[cfg(feature = "AppKit_NSRuleEditor")]
    #[objc2::method(sel = "ruleEditor:child:forCriterion:withRowType:", managed = "Other")]
    unsafe fn ruleEditor_child_forCriterion_withRowType(
        &self,
        editor: &NSRuleEditor,
        index: NSInteger,
        criterion: Option<&Object>,
        row_type: NSRuleEditorRowType,
    ) -> Id<Object>;

    #[cfg(feature = "AppKit_NSRuleEditor")]
    #[objc2::method(sel = "ruleEditor:displayValueForCriterion:inRow:", managed = "Other")]
    unsafe fn ruleEditor_displayValueForCriterion_inRow(
        &self,
        editor: &NSRuleEditor,
        criterion: &Object,
        row: NSInteger,
    ) -> Id<Object>;

    #[cfg(all(feature = "AppKit_NSRuleEditor", feature = "Foundation_NSDictionary"))]
    #[objc2::method(
        optional,
        sel = "ruleEditor:predicatePartsForCriterion:withDisplayValue:inRow:",
        managed = "Other"
    )]
    unsafe fn ruleEditor_predicatePartsForCriterion_withDisplayValue_inRow(
        &self,
        editor: &NSRuleEditor,
        criterion: &Object,
        value: &Object,
        row: NSInteger,
    ) -> Option<Id<NSDictionary<NSRuleEditorPredicatePartKey, Object>>>;

    #[cfg(feature = "Foundation_NSNotification")]
    #[objc2::method(optional, sel = "ruleEditorRowsDidChange:")]
    unsafe fn ruleEditorRowsDidChange(&self, notification: &NSNotification);
}

extern_static!(NSRuleEditorRowsDidChangeNotification: &'static NSNotificationName);

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSControl`
    #[cfg(feature = "AppKit_NSRuleEditor")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSRuleEditor")]
    pub type NSRuleEditor;

    #[objc2::method(sel = "initWithFrame:", managed = "Init")]
    pub unsafe fn initWithFrame(this: Option<Allocated<Self>>, frame_rect: NSRect) -> Id<Self>;
}
