//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSTabState {
    NSSelectedTab = 0,
    NSBackgroundTab = 1,
    NSPressedTab = 2,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTabViewItem")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSTabViewItem;
}

#[cfg(feature = "AppKit_NSTabViewItem")]
unsafe impl NSCoding for NSTabViewItem {}

#[cfg(feature = "AppKit_NSTabViewItem")]
unsafe impl NSObjectProtocol for NSTabViewItem {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTabViewItem")]
    pub type NSTabViewItem;

    #[cfg(feature = "AppKit_NSViewController")]
    #[objc2::method(sel = "tabViewItemWithViewController:", managed = "Other")]
    pub unsafe fn tabViewItemWithViewController(view_controller: &NSViewController) -> Id<Self>;

    #[objc2::method(sel = "initWithIdentifier:", managed = "Init")]
    pub unsafe fn initWithIdentifier(
        this: Option<Allocated<Self>>,
        identifier: Option<&Object>,
    ) -> Id<Self>;

    #[objc2::method(sel = "identifier", managed = "Other")]
    pub unsafe fn identifier(&self) -> Option<Id<Object>>;

    #[objc2::method(sel = "setIdentifier:")]
    pub unsafe fn setIdentifier(&self, identifier: Option<&Object>);

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "color", managed = "Other")]
    pub unsafe fn color(&self) -> Id<NSColor>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "setColor:")]
    pub unsafe fn setColor(&self, color: &NSColor);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "label", managed = "Other")]
    pub unsafe fn label(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setLabel:")]
    pub unsafe fn setLabel(&self, label: &NSString);

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "image", managed = "Other")]
    pub unsafe fn image(&self) -> Option<Id<NSImage>>;

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "setImage:")]
    pub unsafe fn setImage(&self, image: Option<&NSImage>);

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "view", managed = "Other")]
    pub unsafe fn view(&self) -> Option<Id<NSView>>;

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "setView:")]
    pub unsafe fn setView(&self, view: Option<&NSView>);

    #[cfg(feature = "AppKit_NSViewController")]
    #[objc2::method(sel = "viewController", managed = "Other")]
    pub unsafe fn viewController(&self) -> Option<Id<NSViewController>>;

    #[cfg(feature = "AppKit_NSViewController")]
    #[objc2::method(sel = "setViewController:")]
    pub unsafe fn setViewController(&self, view_controller: Option<&NSViewController>);

    #[objc2::method(sel = "tabState")]
    pub unsafe fn tabState(&self) -> NSTabState;

    #[cfg(feature = "AppKit_NSTabView")]
    #[objc2::method(sel = "tabView", managed = "Other")]
    pub unsafe fn tabView(&self) -> Option<Id<NSTabView>>;

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "initialFirstResponder", managed = "Other")]
    pub unsafe fn initialFirstResponder(&self) -> Option<Id<NSView>>;

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "setInitialFirstResponder:")]
    pub unsafe fn setInitialFirstResponder(&self, initial_first_responder: Option<&NSView>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "toolTip", managed = "Other")]
    pub unsafe fn toolTip(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setToolTip:")]
    pub unsafe fn setToolTip(&self, tool_tip: Option<&NSString>);

    #[objc2::method(sel = "drawLabel:inRect:")]
    pub unsafe fn drawLabel_inRect(&self, should_truncate_label: bool, label_rect: NSRect);

    #[objc2::method(sel = "sizeOfLabel:")]
    pub unsafe fn sizeOfLabel(&self, compute_min: bool) -> NSSize;
}
