//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

pub type NSTouchBarCustomizationIdentifier = NSString;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTouchBar")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSTouchBar;
}

#[cfg(feature = "AppKit_NSTouchBar")]
unsafe impl NSCoding for NSTouchBar {}

#[cfg(feature = "AppKit_NSTouchBar")]
unsafe impl NSObjectProtocol for NSTouchBar {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTouchBar")]
    pub type NSTouchBar;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, coder: &NSCoder)
        -> Option<Id<Self>>;

    #[objc2::method(sel = "customizationIdentifier", managed = "Other")]
    pub unsafe fn customizationIdentifier(&self) -> Option<Id<NSTouchBarCustomizationIdentifier>>;

    #[objc2::method(sel = "setCustomizationIdentifier:")]
    pub unsafe fn setCustomizationIdentifier(
        &self,
        customization_identifier: Option<&NSTouchBarCustomizationIdentifier>,
    );

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "customizationAllowedItemIdentifiers", managed = "Other")]
    pub unsafe fn customizationAllowedItemIdentifiers(
        &self,
    ) -> Id<NSArray<NSTouchBarItemIdentifier>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "setCustomizationAllowedItemIdentifiers:")]
    pub unsafe fn setCustomizationAllowedItemIdentifiers(
        &self,
        customization_allowed_item_identifiers: &NSArray<NSTouchBarItemIdentifier>,
    );

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "customizationRequiredItemIdentifiers", managed = "Other")]
    pub unsafe fn customizationRequiredItemIdentifiers(
        &self,
    ) -> Id<NSArray<NSTouchBarItemIdentifier>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "setCustomizationRequiredItemIdentifiers:")]
    pub unsafe fn setCustomizationRequiredItemIdentifiers(
        &self,
        customization_required_item_identifiers: &NSArray<NSTouchBarItemIdentifier>,
    );

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "defaultItemIdentifiers", managed = "Other")]
    pub unsafe fn defaultItemIdentifiers(&self) -> Id<NSArray<NSTouchBarItemIdentifier>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "setDefaultItemIdentifiers:")]
    pub unsafe fn setDefaultItemIdentifiers(
        &self,
        default_item_identifiers: &NSArray<NSTouchBarItemIdentifier>,
    );

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "itemIdentifiers", managed = "Other")]
    pub unsafe fn itemIdentifiers(&self) -> Id<NSArray<NSTouchBarItemIdentifier>>;

    #[objc2::method(sel = "principalItemIdentifier", managed = "Other")]
    pub unsafe fn principalItemIdentifier(&self) -> Option<Id<NSTouchBarItemIdentifier>>;

    #[objc2::method(sel = "setPrincipalItemIdentifier:")]
    pub unsafe fn setPrincipalItemIdentifier(
        &self,
        principal_item_identifier: Option<&NSTouchBarItemIdentifier>,
    );

    #[objc2::method(sel = "escapeKeyReplacementItemIdentifier", managed = "Other")]
    pub unsafe fn escapeKeyReplacementItemIdentifier(&self)
        -> Option<Id<NSTouchBarItemIdentifier>>;

    #[objc2::method(sel = "setEscapeKeyReplacementItemIdentifier:")]
    pub unsafe fn setEscapeKeyReplacementItemIdentifier(
        &self,
        escape_key_replacement_item_identifier: Option<&NSTouchBarItemIdentifier>,
    );

    #[cfg(all(feature = "AppKit_NSTouchBarItem", feature = "Foundation_NSSet"))]
    #[objc2::method(sel = "templateItems", managed = "Other")]
    pub unsafe fn templateItems(&self) -> Id<NSSet<NSTouchBarItem>>;

    #[cfg(all(feature = "AppKit_NSTouchBarItem", feature = "Foundation_NSSet"))]
    #[objc2::method(sel = "setTemplateItems:")]
    pub unsafe fn setTemplateItems(&self, template_items: &NSSet<NSTouchBarItem>);

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn NSTouchBarDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(&self, delegate: Option<&ProtocolObject<dyn NSTouchBarDelegate>>);

    #[cfg(feature = "AppKit_NSTouchBarItem")]
    #[objc2::method(sel = "itemForIdentifier:", managed = "Other")]
    pub unsafe fn itemForIdentifier(
        &self,
        identifier: &NSTouchBarItemIdentifier,
    ) -> Option<Id<NSTouchBarItem>>;

    #[objc2::method(sel = "isVisible")]
    pub unsafe fn isVisible(&self) -> bool;

    #[objc2::method(sel = "isAutomaticCustomizeTouchBarMenuItemEnabled")]
    pub unsafe fn isAutomaticCustomizeTouchBarMenuItemEnabled() -> bool;

    #[objc2::method(sel = "setAutomaticCustomizeTouchBarMenuItemEnabled:")]
    pub unsafe fn setAutomaticCustomizeTouchBarMenuItemEnabled(
        automatic_customize_touch_bar_menu_item_enabled: bool,
    );
}

#[objc2::protocol]
pub unsafe trait NSTouchBarDelegate: NSObjectProtocol {
    #[cfg(all(feature = "AppKit_NSTouchBar", feature = "AppKit_NSTouchBarItem"))]
    #[objc2::method(optional, sel = "touchBar:makeItemForIdentifier:", managed = "Other")]
    unsafe fn touchBar_makeItemForIdentifier(
        &self,
        touch_bar: &NSTouchBar,
        identifier: &NSTouchBarItemIdentifier,
    ) -> Option<Id<NSTouchBarItem>>;
}

#[objc2::protocol]
pub unsafe trait NSTouchBarProvider: NSObjectProtocol {
    #[cfg(feature = "AppKit_NSTouchBar")]
    #[objc2::method(sel = "touchBar", managed = "Other")]
    unsafe fn touchBar(&self) -> Option<Id<NSTouchBar>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSResponder")]
    pub type NSResponder;

    #[cfg(feature = "AppKit_NSTouchBar")]
    #[objc2::method(sel = "touchBar", managed = "Other")]
    pub unsafe fn touchBar(&self) -> Option<Id<NSTouchBar>>;

    #[cfg(feature = "AppKit_NSTouchBar")]
    #[objc2::method(sel = "setTouchBar:")]
    pub unsafe fn setTouchBar(&self, touch_bar: Option<&NSTouchBar>);

    #[cfg(feature = "AppKit_NSTouchBar")]
    #[objc2::method(sel = "makeTouchBar", managed = "Other")]
    pub unsafe fn makeTouchBar(&self) -> Option<Id<NSTouchBar>>;
}

#[cfg(feature = "AppKit_NSResponder")]
unsafe impl NSTouchBarProvider for NSResponder {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSApplication")]
    pub type NSApplication;

    #[objc2::method(sel = "isAutomaticCustomizeTouchBarMenuItemEnabled")]
    pub unsafe fn isAutomaticCustomizeTouchBarMenuItemEnabled(&self) -> bool;

    #[objc2::method(sel = "setAutomaticCustomizeTouchBarMenuItemEnabled:")]
    pub unsafe fn setAutomaticCustomizeTouchBarMenuItemEnabled(
        &self,
        automatic_customize_touch_bar_menu_item_enabled: bool,
    );

    #[objc2::method(sel = "toggleTouchBarCustomizationPalette:")]
    pub unsafe fn toggleTouchBarCustomizationPalette(&self, sender: Option<&Object>);
}
