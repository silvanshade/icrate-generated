//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSControl,
    unsafe inherits = [
        NSView,
        NSResponder,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSDatePicker")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSDatePicker;
}

#[cfg(feature = "AppKit_NSDatePicker")]
unsafe impl NSAccessibility for NSDatePicker {}

#[cfg(feature = "AppKit_NSDatePicker")]
unsafe impl NSAccessibilityElementProtocol for NSDatePicker {}

#[cfg(feature = "AppKit_NSDatePicker")]
unsafe impl NSAnimatablePropertyContainer for NSDatePicker {}

#[cfg(feature = "AppKit_NSDatePicker")]
unsafe impl NSAppearanceCustomization for NSDatePicker {}

#[cfg(feature = "AppKit_NSDatePicker")]
unsafe impl NSCoding for NSDatePicker {}

#[cfg(feature = "AppKit_NSDatePicker")]
unsafe impl NSDraggingDestination for NSDatePicker {}

#[cfg(feature = "AppKit_NSDatePicker")]
unsafe impl NSObjectProtocol for NSDatePicker {}

#[cfg(feature = "AppKit_NSDatePicker")]
unsafe impl NSUserInterfaceItemIdentification for NSDatePicker {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSDatePicker")]
    pub type NSDatePicker;

    #[objc2::method(sel = "datePickerStyle")]
    pub unsafe fn datePickerStyle(&self) -> NSDatePickerStyle;

    #[objc2::method(sel = "setDatePickerStyle:")]
    pub unsafe fn setDatePickerStyle(&self, date_picker_style: NSDatePickerStyle);

    #[objc2::method(sel = "isBezeled")]
    pub unsafe fn isBezeled(&self) -> bool;

    #[objc2::method(sel = "setBezeled:")]
    pub unsafe fn setBezeled(&self, bezeled: bool);

    #[objc2::method(sel = "isBordered")]
    pub unsafe fn isBordered(&self) -> bool;

    #[objc2::method(sel = "setBordered:")]
    pub unsafe fn setBordered(&self, bordered: bool);

    #[objc2::method(sel = "drawsBackground")]
    pub unsafe fn drawsBackground(&self) -> bool;

    #[objc2::method(sel = "setDrawsBackground:")]
    pub unsafe fn setDrawsBackground(&self, draws_background: bool);

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "backgroundColor", managed = "Other")]
    pub unsafe fn backgroundColor(&self) -> Id<NSColor>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "setBackgroundColor:")]
    pub unsafe fn setBackgroundColor(&self, background_color: &NSColor);

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "textColor", managed = "Other")]
    pub unsafe fn textColor(&self) -> Id<NSColor>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "setTextColor:")]
    pub unsafe fn setTextColor(&self, text_color: &NSColor);

    #[objc2::method(sel = "datePickerMode")]
    pub unsafe fn datePickerMode(&self) -> NSDatePickerMode;

    #[objc2::method(sel = "setDatePickerMode:")]
    pub unsafe fn setDatePickerMode(&self, date_picker_mode: NSDatePickerMode);

    #[objc2::method(sel = "datePickerElements")]
    pub unsafe fn datePickerElements(&self) -> NSDatePickerElementFlags;

    #[objc2::method(sel = "setDatePickerElements:")]
    pub unsafe fn setDatePickerElements(&self, date_picker_elements: NSDatePickerElementFlags);

    #[cfg(feature = "Foundation_NSCalendar")]
    #[objc2::method(sel = "calendar", managed = "Other")]
    pub unsafe fn calendar(&self) -> Option<Id<NSCalendar>>;

    #[cfg(feature = "Foundation_NSCalendar")]
    #[objc2::method(sel = "setCalendar:")]
    pub unsafe fn setCalendar(&self, calendar: Option<&NSCalendar>);

    #[cfg(feature = "Foundation_NSLocale")]
    #[objc2::method(sel = "locale", managed = "Other")]
    pub unsafe fn locale(&self) -> Option<Id<NSLocale>>;

    #[cfg(feature = "Foundation_NSLocale")]
    #[objc2::method(sel = "setLocale:")]
    pub unsafe fn setLocale(&self, locale: Option<&NSLocale>);

    #[cfg(feature = "Foundation_NSTimeZone")]
    #[objc2::method(sel = "timeZone", managed = "Other")]
    pub unsafe fn timeZone(&self) -> Option<Id<NSTimeZone>>;

    #[cfg(feature = "Foundation_NSTimeZone")]
    #[objc2::method(sel = "setTimeZone:")]
    pub unsafe fn setTimeZone(&self, time_zone: Option<&NSTimeZone>);

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "dateValue", managed = "Other")]
    pub unsafe fn dateValue(&self) -> Id<NSDate>;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "setDateValue:")]
    pub unsafe fn setDateValue(&self, date_value: &NSDate);

    #[objc2::method(sel = "timeInterval")]
    pub unsafe fn timeInterval(&self) -> NSTimeInterval;

    #[objc2::method(sel = "setTimeInterval:")]
    pub unsafe fn setTimeInterval(&self, time_interval: NSTimeInterval);

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "minDate", managed = "Other")]
    pub unsafe fn minDate(&self) -> Option<Id<NSDate>>;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "setMinDate:")]
    pub unsafe fn setMinDate(&self, min_date: Option<&NSDate>);

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "maxDate", managed = "Other")]
    pub unsafe fn maxDate(&self) -> Option<Id<NSDate>>;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "setMaxDate:")]
    pub unsafe fn setMaxDate(&self, max_date: Option<&NSDate>);

    #[objc2::method(sel = "presentsCalendarOverlay")]
    pub unsafe fn presentsCalendarOverlay(&self) -> bool;

    #[objc2::method(sel = "setPresentsCalendarOverlay:")]
    pub unsafe fn setPresentsCalendarOverlay(&self, presents_calendar_overlay: bool);

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn NSDatePickerCellDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(
        &self,
        delegate: Option<&ProtocolObject<dyn NSDatePickerCellDelegate>>,
    );
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSControl`
    #[cfg(feature = "AppKit_NSDatePicker")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSDatePicker")]
    pub type NSDatePicker;

    #[objc2::method(sel = "initWithFrame:", managed = "Init")]
    pub unsafe fn initWithFrame(this: Option<Allocated<Self>>, frame_rect: NSRect) -> Id<Self>;
}
