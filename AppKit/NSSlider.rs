//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSControl,
    unsafe inherits = [
        NSView,
        NSResponder,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSSlider")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSSlider;
}

#[cfg(feature = "AppKit_NSSlider")]
unsafe impl NSAccessibility for NSSlider {}

#[cfg(feature = "AppKit_NSSlider")]
unsafe impl NSAccessibilityElementProtocol for NSSlider {}

#[cfg(feature = "AppKit_NSSlider")]
unsafe impl NSAccessibilitySlider for NSSlider {}

#[cfg(feature = "AppKit_NSSlider")]
unsafe impl NSAnimatablePropertyContainer for NSSlider {}

#[cfg(feature = "AppKit_NSSlider")]
unsafe impl NSAppearanceCustomization for NSSlider {}

#[cfg(feature = "AppKit_NSSlider")]
unsafe impl NSCoding for NSSlider {}

#[cfg(feature = "AppKit_NSSlider")]
unsafe impl NSDraggingDestination for NSSlider {}

#[cfg(feature = "AppKit_NSSlider")]
unsafe impl NSObjectProtocol for NSSlider {}

#[cfg(feature = "AppKit_NSSlider")]
unsafe impl NSUserInterfaceItemIdentification for NSSlider {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSSlider")]
    pub type NSSlider;

    #[objc2::method(sel = "sliderType")]
    pub unsafe fn sliderType(&self) -> NSSliderType;

    #[objc2::method(sel = "setSliderType:")]
    pub unsafe fn setSliderType(&self, slider_type: NSSliderType);

    #[objc2::method(sel = "minValue")]
    pub unsafe fn minValue(&self) -> c_double;

    #[objc2::method(sel = "setMinValue:")]
    pub unsafe fn setMinValue(&self, min_value: c_double);

    #[objc2::method(sel = "maxValue")]
    pub unsafe fn maxValue(&self) -> c_double;

    #[objc2::method(sel = "setMaxValue:")]
    pub unsafe fn setMaxValue(&self, max_value: c_double);

    #[objc2::method(sel = "altIncrementValue")]
    pub unsafe fn altIncrementValue(&self) -> c_double;

    #[objc2::method(sel = "setAltIncrementValue:")]
    pub unsafe fn setAltIncrementValue(&self, alt_increment_value: c_double);

    #[objc2::method(sel = "knobThickness")]
    pub unsafe fn knobThickness(&self) -> CGFloat;

    #[cfg(feature = "AppKit_NSEvent")]
    #[objc2::method(sel = "acceptsFirstMouse:")]
    pub unsafe fn acceptsFirstMouse(&self, event: Option<&NSEvent>) -> bool;

    #[objc2::method(sel = "setVertical:")]
    pub unsafe fn setVertical(&self, vertical: bool);

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "trackFillColor", managed = "Other")]
    pub unsafe fn trackFillColor(&self) -> Option<Id<NSColor>>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "setTrackFillColor:")]
    pub unsafe fn setTrackFillColor(&self, track_fill_color: Option<&NSColor>);
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSSlider")]
    pub type NSSlider;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSSlider")]
    pub type NSSlider;

    #[objc2::method(sel = "numberOfTickMarks")]
    pub unsafe fn numberOfTickMarks(&self) -> NSInteger;

    #[objc2::method(sel = "setNumberOfTickMarks:")]
    pub unsafe fn setNumberOfTickMarks(&self, number_of_tick_marks: NSInteger);

    #[objc2::method(sel = "tickMarkPosition")]
    pub unsafe fn tickMarkPosition(&self) -> NSTickMarkPosition;

    #[objc2::method(sel = "setTickMarkPosition:")]
    pub unsafe fn setTickMarkPosition(&self, tick_mark_position: NSTickMarkPosition);

    #[objc2::method(sel = "allowsTickMarkValuesOnly")]
    pub unsafe fn allowsTickMarkValuesOnly(&self) -> bool;

    #[objc2::method(sel = "setAllowsTickMarkValuesOnly:")]
    pub unsafe fn setAllowsTickMarkValuesOnly(&self, allows_tick_mark_values_only: bool);

    #[objc2::method(sel = "tickMarkValueAtIndex:")]
    pub unsafe fn tickMarkValueAtIndex(&self, index: NSInteger) -> c_double;

    #[objc2::method(sel = "rectOfTickMarkAtIndex:")]
    pub unsafe fn rectOfTickMarkAtIndex(&self, index: NSInteger) -> NSRect;

    #[objc2::method(sel = "indexOfTickMarkAtPoint:")]
    pub unsafe fn indexOfTickMarkAtPoint(&self, point: NSPoint) -> NSInteger;

    #[objc2::method(sel = "closestTickMarkValueToValue:")]
    pub unsafe fn closestTickMarkValueToValue(&self, value: c_double) -> c_double;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSSlider")]
    pub type NSSlider;

    #[objc2::method(sel = "sliderWithTarget:action:", managed = "Other")]
    pub unsafe fn sliderWithTarget_action(target: Option<&Object>, action: Option<Sel>)
        -> Id<Self>;

    #[objc2::method(
        sel = "sliderWithValue:minValue:maxValue:target:action:",
        managed = "Other"
    )]
    pub unsafe fn sliderWithValue_minValue_maxValue_target_action(
        value: c_double,
        min_value: c_double,
        max_value: c_double,
        target: Option<&Object>,
        action: Option<Sel>,
    ) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSSlider")]
    pub type NSSlider;

    #[cfg(feature = "AppKit_NSCell")]
    #[deprecated = "-setTitleCell: had no effect since 10.0"]
    #[objc2::method(sel = "setTitleCell:")]
    pub unsafe fn setTitleCell(&self, cell: Option<&NSCell>);

    #[deprecated = "-titleCell has returned nil since 10.0"]
    #[objc2::method(sel = "titleCell", managed = "Other")]
    pub unsafe fn titleCell(&self) -> Option<Id<Object>>;

    #[cfg(feature = "AppKit_NSColor")]
    #[deprecated = "-setTitleColor: had no effect since 10.0"]
    #[objc2::method(sel = "setTitleColor:")]
    pub unsafe fn setTitleColor(&self, new_color: Option<&NSColor>);

    #[cfg(feature = "AppKit_NSColor")]
    #[deprecated = "-titleColor has returned nil since 10.0"]
    #[objc2::method(sel = "titleColor", managed = "Other")]
    pub unsafe fn titleColor(&self) -> Option<Id<NSColor>>;

    #[cfg(feature = "AppKit_NSFont")]
    #[deprecated = "-setTitleFont: had no effect since 10.0"]
    #[objc2::method(sel = "setTitleFont:")]
    pub unsafe fn setTitleFont(&self, font_obj: Option<&NSFont>);

    #[cfg(feature = "AppKit_NSFont")]
    #[deprecated = "-titleFont has returned nil since 10.0"]
    #[objc2::method(sel = "titleFont", managed = "Other")]
    pub unsafe fn titleFont(&self) -> Option<Id<NSFont>>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "-title has returned nil since 10.0"]
    #[objc2::method(sel = "title", managed = "Other")]
    pub unsafe fn title(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "-setTitle: had no effect since 10.0"]
    #[objc2::method(sel = "setTitle:")]
    pub unsafe fn setTitle(&self, string: Option<&NSString>);

    #[deprecated = "-knobThickness has returned 0 since 10.0"]
    #[objc2::method(sel = "setKnobThickness:")]
    pub unsafe fn setKnobThickness(&self, thickness: CGFloat);

    #[cfg(feature = "AppKit_NSImage")]
    #[deprecated = "-setImage: had no effect since 10.0"]
    #[objc2::method(sel = "setImage:")]
    pub unsafe fn setImage(&self, background_image: Option<&NSImage>);

    #[cfg(feature = "AppKit_NSImage")]
    #[deprecated = "-image has returned nil since 10.0"]
    #[objc2::method(sel = "image", managed = "Other")]
    pub unsafe fn image(&self) -> Option<Id<NSImage>>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSControl`
    #[cfg(feature = "AppKit_NSSlider")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSSlider")]
    pub type NSSlider;

    #[objc2::method(sel = "initWithFrame:", managed = "Init")]
    pub unsafe fn initWithFrame(this: Option<Allocated<Self>>, frame_rect: NSRect) -> Id<Self>;
}
