//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

typed_extensible_enum!(
    pub type NSAppearanceName = NSString;
);

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSAppearance")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSAppearance;
}

#[cfg(feature = "AppKit_NSAppearance")]
unsafe impl NSCoding for NSAppearance {}

#[cfg(feature = "AppKit_NSAppearance")]
unsafe impl NSObjectProtocol for NSAppearance {}

#[cfg(feature = "AppKit_NSAppearance")]
unsafe impl NSSecureCoding for NSAppearance {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSAppearance")]
    pub type NSAppearance;

    #[objc2::method(sel = "name", managed = "Other")]
    pub unsafe fn name(&self) -> Id<NSAppearanceName>;

    #[deprecated = "Use -performAsCurrentDrawingAppearance: to temporarily set the drawing appearance, or +currentDrawingAppearance to access the currently drawing appearance."]
    #[objc2::method(sel = "currentAppearance", managed = "Other")]
    pub unsafe fn currentAppearance() -> Option<Id<NSAppearance>>;

    #[deprecated = "Use -performAsCurrentDrawingAppearance: to temporarily set the drawing appearance, or +currentDrawingAppearance to access the currently drawing appearance."]
    #[objc2::method(sel = "setCurrentAppearance:")]
    pub unsafe fn setCurrentAppearance(current_appearance: Option<&NSAppearance>);

    #[objc2::method(sel = "currentDrawingAppearance", managed = "Other")]
    pub unsafe fn currentDrawingAppearance() -> Id<NSAppearance>;

    #[objc2::method(sel = "performAsCurrentDrawingAppearance:")]
    pub unsafe fn performAsCurrentDrawingAppearance(&self, block: &Block<(), ()>);

    #[objc2::method(sel = "appearanceNamed:", managed = "Other")]
    pub unsafe fn appearanceNamed(name: &NSAppearanceName) -> Option<Id<NSAppearance>>;

    #[cfg(feature = "Foundation_NSBundle")]
    #[objc2::method(sel = "initWithAppearanceNamed:bundle:", managed = "Init")]
    pub unsafe fn initWithAppearanceNamed_bundle(
        this: Option<Allocated<Self>>,
        name: &NSAppearanceName,
        bundle: Option<&NSBundle>,
    ) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, coder: &NSCoder)
        -> Option<Id<Self>>;

    #[objc2::method(sel = "allowsVibrancy")]
    pub unsafe fn allowsVibrancy(&self) -> bool;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "bestMatchFromAppearancesWithNames:", managed = "Other")]
    pub unsafe fn bestMatchFromAppearancesWithNames(
        &self,
        appearances: &NSArray<NSAppearanceName>,
    ) -> Option<Id<NSAppearanceName>>;
}

extern_static!(NSAppearanceNameAqua: &'static NSAppearanceName);

extern_static!(NSAppearanceNameDarkAqua: &'static NSAppearanceName);

extern_static!(NSAppearanceNameLightContent: &'static NSAppearanceName);

extern_static!(NSAppearanceNameVibrantDark: &'static NSAppearanceName);

extern_static!(NSAppearanceNameVibrantLight: &'static NSAppearanceName);

extern_static!(NSAppearanceNameAccessibilityHighContrastAqua: &'static NSAppearanceName);

extern_static!(NSAppearanceNameAccessibilityHighContrastDarkAqua: &'static NSAppearanceName);

extern_static!(NSAppearanceNameAccessibilityHighContrastVibrantLight: &'static NSAppearanceName);

extern_static!(NSAppearanceNameAccessibilityHighContrastVibrantDark: &'static NSAppearanceName);

#[objc2::protocol]
pub unsafe trait NSAppearanceCustomization: NSObjectProtocol {
    #[cfg(feature = "AppKit_NSAppearance")]
    #[objc2::method(sel = "appearance", managed = "Other")]
    unsafe fn appearance(&self) -> Option<Id<NSAppearance>>;

    #[cfg(feature = "AppKit_NSAppearance")]
    #[objc2::method(sel = "setAppearance:")]
    unsafe fn setAppearance(&self, appearance: Option<&NSAppearance>);

    #[cfg(feature = "AppKit_NSAppearance")]
    #[objc2::method(sel = "effectiveAppearance", managed = "Other")]
    unsafe fn effectiveAppearance(&self) -> Id<NSAppearance>;
}
