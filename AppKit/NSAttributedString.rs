//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

extern_static!(NSFontAttributeName: &'static NSAttributedStringKey);

extern_static!(NSParagraphStyleAttributeName: &'static NSAttributedStringKey);

extern_static!(NSForegroundColorAttributeName: &'static NSAttributedStringKey);

extern_static!(NSBackgroundColorAttributeName: &'static NSAttributedStringKey);

extern_static!(NSLigatureAttributeName: &'static NSAttributedStringKey);

extern_static!(NSKernAttributeName: &'static NSAttributedStringKey);

extern_static!(NSTrackingAttributeName: &'static NSAttributedStringKey);

extern_static!(NSStrikethroughStyleAttributeName: &'static NSAttributedStringKey);

extern_static!(NSUnderlineStyleAttributeName: &'static NSAttributedStringKey);

extern_static!(NSStrokeColorAttributeName: &'static NSAttributedStringKey);

extern_static!(NSStrokeWidthAttributeName: &'static NSAttributedStringKey);

extern_static!(NSShadowAttributeName: &'static NSAttributedStringKey);

extern_static!(NSTextEffectAttributeName: &'static NSAttributedStringKey);

extern_static!(NSAttachmentAttributeName: &'static NSAttributedStringKey);

extern_static!(NSLinkAttributeName: &'static NSAttributedStringKey);

extern_static!(NSBaselineOffsetAttributeName: &'static NSAttributedStringKey);

extern_static!(NSUnderlineColorAttributeName: &'static NSAttributedStringKey);

extern_static!(NSStrikethroughColorAttributeName: &'static NSAttributedStringKey);

extern_static!(NSObliquenessAttributeName: &'static NSAttributedStringKey);

extern_static!(NSExpansionAttributeName: &'static NSAttributedStringKey);

extern_static!(NSWritingDirectionAttributeName: &'static NSAttributedStringKey);

extern_static!(NSVerticalGlyphFormAttributeName: &'static NSAttributedStringKey);

extern_static!(NSCursorAttributeName: &'static NSAttributedStringKey);

extern_static!(NSToolTipAttributeName: &'static NSAttributedStringKey);

extern_static!(NSMarkedClauseSegmentAttributeName: &'static NSAttributedStringKey);

extern_static!(NSTextAlternativesAttributeName: &'static NSAttributedStringKey);

extern_static!(NSSpellingStateAttributeName: &'static NSAttributedStringKey);

extern_static!(NSSuperscriptAttributeName: &'static NSAttributedStringKey);

extern_static!(NSGlyphInfoAttributeName: &'static NSAttributedStringKey);

#[ns_options]
#[underlying(NSInteger)]
pub enum NSUnderlineStyle {
    NSUnderlineStyleNone = 0x00,
    NSUnderlineStyleSingle = 0x01,
    NSUnderlineStyleThick = 0x02,
    NSUnderlineStyleDouble = 0x09,
    NSUnderlineStylePatternSolid = 0x0000,
    NSUnderlineStylePatternDot = 0x0100,
    NSUnderlineStylePatternDash = 0x0200,
    NSUnderlineStylePatternDashDot = 0x0300,
    NSUnderlineStylePatternDashDotDot = 0x0400,
    NSUnderlineStyleByWord = 0x8000,
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSWritingDirectionFormatType {
    NSWritingDirectionEmbedding = 0 << 1,
    NSWritingDirectionOverride = 1 << 1,
}

typed_enum!(
    pub type NSTextEffectStyle = NSString;
);

extern_static!(NSTextEffectLetterpressStyle: &'static NSTextEffectStyle);

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSSpellingState {
    NSSpellingStateSpellingFlag = 1 << 0,
    NSSpellingStateGrammarFlag = 1 << 1,
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSMutableAttributedString")]
    pub type NSMutableAttributedString;

    #[objc2::method(sel = "fixAttributesInRange:")]
    pub unsafe fn fixAttributesInRange(&self, range: NSRange);

    #[objc2::method(sel = "fixFontAttributeInRange:")]
    pub unsafe fn fixFontAttributeInRange(&self, range: NSRange);

    #[objc2::method(sel = "fixParagraphStyleAttributeInRange:")]
    pub unsafe fn fixParagraphStyleAttributeInRange(&self, range: NSRange);

    #[objc2::method(sel = "fixAttachmentAttributeInRange:")]
    pub unsafe fn fixAttachmentAttributeInRange(&self, range: NSRange);
}

typed_extensible_enum!(
    pub type NSAttributedStringDocumentType = NSString;
);

extern_static!(NSPlainTextDocumentType: &'static NSAttributedStringDocumentType);

extern_static!(NSRTFTextDocumentType: &'static NSAttributedStringDocumentType);

extern_static!(NSRTFDTextDocumentType: &'static NSAttributedStringDocumentType);

extern_static!(NSHTMLTextDocumentType: &'static NSAttributedStringDocumentType);

extern_static!(NSMacSimpleTextDocumentType: &'static NSAttributedStringDocumentType);

extern_static!(NSDocFormatTextDocumentType: &'static NSAttributedStringDocumentType);

extern_static!(NSWordMLTextDocumentType: &'static NSAttributedStringDocumentType);

extern_static!(NSWebArchiveTextDocumentType: &'static NSAttributedStringDocumentType);

extern_static!(NSOfficeOpenXMLTextDocumentType: &'static NSAttributedStringDocumentType);

extern_static!(NSOpenDocumentTextDocumentType: &'static NSAttributedStringDocumentType);

typed_enum!(
    pub type NSTextLayoutSectionKey = NSString;
);

extern_static!(NSTextLayoutSectionOrientation: &'static NSTextLayoutSectionKey);

extern_static!(NSTextLayoutSectionRange: &'static NSTextLayoutSectionKey);

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSTextScalingType {
    NSTextScalingStandard = 0,
    NSTextScalingiOS = 1,
}

typed_extensible_enum!(
    pub type NSAttributedStringDocumentAttributeKey = NSString;
);

extern_static!(NSDocumentTypeDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

extern_static!(NSConvertedDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

extern_static!(NSCocoaVersionDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

extern_static!(NSFileTypeDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

extern_static!(NSTitleDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

extern_static!(NSCompanyDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

extern_static!(NSCopyrightDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

extern_static!(NSSubjectDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

extern_static!(NSAuthorDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

extern_static!(NSKeywordsDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

extern_static!(NSCommentDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

extern_static!(NSEditorDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

extern_static!(NSCreationTimeDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

extern_static!(
    NSModificationTimeDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey
);

extern_static!(NSManagerDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

extern_static!(NSCategoryDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

extern_static!(NSAppearanceDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

extern_static!(
    NSCharacterEncodingDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey
);

extern_static!(
    NSDefaultAttributesDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey
);

extern_static!(NSPaperSizeDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

extern_static!(NSLeftMarginDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

extern_static!(NSRightMarginDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

extern_static!(NSTopMarginDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

extern_static!(NSBottomMarginDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

extern_static!(NSViewSizeDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

extern_static!(NSViewZoomDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

extern_static!(NSViewModeDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

extern_static!(NSReadOnlyDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

extern_static!(NSBackgroundColorDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

extern_static!(
    NSHyphenationFactorDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey
);

extern_static!(
    NSDefaultTabIntervalDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey
);

extern_static!(NSTextLayoutSectionsAttribute: &'static NSAttributedStringDocumentAttributeKey);

extern_static!(
    NSExcludedElementsDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey
);

extern_static!(
    NSTextEncodingNameDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey
);

extern_static!(NSPrefixSpacesDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

extern_static!(NSTextScalingDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

extern_static!(
    NSSourceTextScalingDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey
);

typed_extensible_enum!(
    pub type NSAttributedStringDocumentReadingOptionKey = NSString;
);

extern_static!(NSDocumentTypeDocumentOption: &'static NSAttributedStringDocumentReadingOptionKey);

extern_static!(
    NSDefaultAttributesDocumentOption: &'static NSAttributedStringDocumentReadingOptionKey
);

extern_static!(
    NSCharacterEncodingDocumentOption: &'static NSAttributedStringDocumentReadingOptionKey
);

extern_static!(
    NSTextEncodingNameDocumentOption: &'static NSAttributedStringDocumentReadingOptionKey
);

extern_static!(NSBaseURLDocumentOption: &'static NSAttributedStringDocumentReadingOptionKey);

extern_static!(NSTimeoutDocumentOption: &'static NSAttributedStringDocumentReadingOptionKey);

extern_static!(NSWebPreferencesDocumentOption: &'static NSAttributedStringDocumentReadingOptionKey);

extern_static!(
    NSWebResourceLoadDelegateDocumentOption: &'static NSAttributedStringDocumentReadingOptionKey
);

extern_static!(
    NSTextSizeMultiplierDocumentOption: &'static NSAttributedStringDocumentReadingOptionKey
);

extern_static!(NSFileTypeDocumentOption: &'static NSAttributedStringDocumentReadingOptionKey);

extern_static!(
    NSTargetTextScalingDocumentOption: &'static NSAttributedStringDocumentReadingOptionKey
);

extern_static!(
    NSSourceTextScalingDocumentOption: &'static NSAttributedStringDocumentReadingOptionKey
);

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSAttributedString")]
    pub type NSAttributedString;

    #[cfg(all(
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSError",
        feature = "Foundation_NSURL"
    ))]
    #[objc2::method(
        sel = "initWithURL:options:documentAttributes:error:",
        managed = "Init",
        throws
    )]
    pub unsafe fn initWithURL_options_documentAttributes_error(
        this: Option<Allocated<Self>>,
        url: &NSURL,
        options: &NSDictionary<NSAttributedStringDocumentReadingOptionKey, Object>,
        dict: Option<&mut Option<Id<NSDictionary<NSAttributedStringDocumentAttributeKey, Object>>>>,
    ) -> Result<Id<Self>, Id<NSError>>;

    #[cfg(all(
        feature = "Foundation_NSData",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(
        sel = "initWithData:options:documentAttributes:error:",
        managed = "Init",
        throws
    )]
    pub unsafe fn initWithData_options_documentAttributes_error(
        this: Option<Allocated<Self>>,
        data: &NSData,
        options: &NSDictionary<NSAttributedStringDocumentReadingOptionKey, Object>,
        dict: Option<&mut Option<Id<NSDictionary<NSAttributedStringDocumentAttributeKey, Object>>>>,
    ) -> Result<Id<Self>, Id<NSError>>;

    #[cfg(all(
        feature = "Foundation_NSData",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(
        sel = "dataFromRange:documentAttributes:error:",
        managed = "Other",
        throws
    )]
    pub unsafe fn dataFromRange_documentAttributes_error(
        &self,
        range: NSRange,
        dict: &NSDictionary<NSAttributedStringDocumentAttributeKey, Object>,
    ) -> Result<Id<NSData>, Id<NSError>>;

    #[cfg(all(
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSError",
        feature = "Foundation_NSFileWrapper"
    ))]
    #[objc2::method(
        sel = "fileWrapperFromRange:documentAttributes:error:",
        managed = "Other",
        throws
    )]
    pub unsafe fn fileWrapperFromRange_documentAttributes_error(
        &self,
        range: NSRange,
        dict: &NSDictionary<NSAttributedStringDocumentAttributeKey, Object>,
    ) -> Result<Id<NSFileWrapper>, Id<NSError>>;

    #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSDictionary"))]
    #[objc2::method(sel = "initWithRTF:documentAttributes:", managed = "Init")]
    pub unsafe fn initWithRTF_documentAttributes(
        this: Option<Allocated<Self>>,
        data: &NSData,
        dict: Option<&mut Option<Id<NSDictionary<NSAttributedStringDocumentAttributeKey, Object>>>>,
    ) -> Option<Id<Self>>;

    #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSDictionary"))]
    #[objc2::method(sel = "initWithRTFD:documentAttributes:", managed = "Init")]
    pub unsafe fn initWithRTFD_documentAttributes(
        this: Option<Allocated<Self>>,
        data: &NSData,
        dict: Option<&mut Option<Id<NSDictionary<NSAttributedStringDocumentAttributeKey, Object>>>>,
    ) -> Option<Id<Self>>;

    #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSDictionary"))]
    #[objc2::method(sel = "initWithHTML:documentAttributes:", managed = "Init")]
    pub unsafe fn initWithHTML_documentAttributes(
        this: Option<Allocated<Self>>,
        data: &NSData,
        dict: Option<&mut Option<Id<NSDictionary<NSAttributedStringDocumentAttributeKey, Object>>>>,
    ) -> Option<Id<Self>>;

    #[cfg(all(
        feature = "Foundation_NSData",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSURL"
    ))]
    #[objc2::method(sel = "initWithHTML:baseURL:documentAttributes:", managed = "Init")]
    pub unsafe fn initWithHTML_baseURL_documentAttributes(
        this: Option<Allocated<Self>>,
        data: &NSData,
        base: &NSURL,
        dict: Option<&mut Option<Id<NSDictionary<NSAttributedStringDocumentAttributeKey, Object>>>>,
    ) -> Option<Id<Self>>;

    #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSDictionary"))]
    #[objc2::method(sel = "initWithDocFormat:documentAttributes:", managed = "Init")]
    pub unsafe fn initWithDocFormat_documentAttributes(
        this: Option<Allocated<Self>>,
        data: &NSData,
        dict: Option<&mut Option<Id<NSDictionary<NSAttributedStringDocumentAttributeKey, Object>>>>,
    ) -> Option<Id<Self>>;

    #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSDictionary"))]
    #[objc2::method(sel = "initWithHTML:options:documentAttributes:", managed = "Init")]
    pub unsafe fn initWithHTML_options_documentAttributes(
        this: Option<Allocated<Self>>,
        data: &NSData,
        options: &NSDictionary<NSAttributedStringDocumentReadingOptionKey, Object>,
        dict: Option<&mut Option<Id<NSDictionary<NSAttributedStringDocumentAttributeKey, Object>>>>,
    ) -> Option<Id<Self>>;

    #[cfg(all(
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSFileWrapper"
    ))]
    #[objc2::method(sel = "initWithRTFDFileWrapper:documentAttributes:", managed = "Init")]
    pub unsafe fn initWithRTFDFileWrapper_documentAttributes(
        this: Option<Allocated<Self>>,
        wrapper: &NSFileWrapper,
        dict: Option<&mut Option<Id<NSDictionary<NSAttributedStringDocumentAttributeKey, Object>>>>,
    ) -> Option<Id<Self>>;

    #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSDictionary"))]
    #[objc2::method(sel = "RTFFromRange:documentAttributes:", managed = "Other")]
    pub unsafe fn RTFFromRange_documentAttributes(
        &self,
        range: NSRange,
        dict: &NSDictionary<NSAttributedStringDocumentAttributeKey, Object>,
    ) -> Option<Id<NSData>>;

    #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSDictionary"))]
    #[objc2::method(sel = "RTFDFromRange:documentAttributes:", managed = "Other")]
    pub unsafe fn RTFDFromRange_documentAttributes(
        &self,
        range: NSRange,
        dict: &NSDictionary<NSAttributedStringDocumentAttributeKey, Object>,
    ) -> Option<Id<NSData>>;

    #[cfg(all(
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSFileWrapper"
    ))]
    #[objc2::method(
        sel = "RTFDFileWrapperFromRange:documentAttributes:",
        managed = "Other"
    )]
    pub unsafe fn RTFDFileWrapperFromRange_documentAttributes(
        &self,
        range: NSRange,
        dict: &NSDictionary<NSAttributedStringDocumentAttributeKey, Object>,
    ) -> Option<Id<NSFileWrapper>>;

    #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSDictionary"))]
    #[objc2::method(sel = "docFormatFromRange:documentAttributes:", managed = "Other")]
    pub unsafe fn docFormatFromRange_documentAttributes(
        &self,
        range: NSRange,
        dict: &NSDictionary<NSAttributedStringDocumentAttributeKey, Object>,
    ) -> Option<Id<NSData>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSMutableAttributedString")]
    pub type NSMutableAttributedString;

    #[cfg(all(
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSError",
        feature = "Foundation_NSURL"
    ))]
    #[objc2::method(sel = "readFromURL:options:documentAttributes:error:", throws)]
    pub unsafe fn readFromURL_options_documentAttributes_error(
        &self,
        url: &NSURL,
        opts: &NSDictionary<NSAttributedStringDocumentReadingOptionKey, Object>,
        dict: Option<&mut Option<Id<NSDictionary<NSAttributedStringDocumentAttributeKey, Object>>>>,
    ) -> Result<(), Id<NSError>>;

    #[cfg(all(
        feature = "Foundation_NSData",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "readFromData:options:documentAttributes:error:", throws)]
    pub unsafe fn readFromData_options_documentAttributes_error(
        &self,
        data: &NSData,
        opts: &NSDictionary<NSAttributedStringDocumentReadingOptionKey, Object>,
        dict: Option<&mut Option<Id<NSDictionary<NSAttributedStringDocumentAttributeKey, Object>>>>,
    ) -> Result<(), Id<NSError>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSAttributedString")]
    pub type NSAttributedString;

    #[cfg(feature = "Foundation_NSDictionary")]
    #[objc2::method(sel = "fontAttributesInRange:", managed = "Other")]
    pub unsafe fn fontAttributesInRange(
        &self,
        range: NSRange,
    ) -> Id<NSDictionary<NSAttributedStringKey, Object>>;

    #[cfg(feature = "Foundation_NSDictionary")]
    #[objc2::method(sel = "rulerAttributesInRange:", managed = "Other")]
    pub unsafe fn rulerAttributesInRange(
        &self,
        range: NSRange,
    ) -> Id<NSDictionary<NSAttributedStringKey, Object>>;

    #[objc2::method(sel = "containsAttachmentsInRange:")]
    pub unsafe fn containsAttachmentsInRange(&self, range: NSRange) -> bool;

    #[objc2::method(sel = "lineBreakBeforeIndex:withinRange:")]
    pub unsafe fn lineBreakBeforeIndex_withinRange(
        &self,
        location: NSUInteger,
        a_range: NSRange,
    ) -> NSUInteger;

    #[objc2::method(sel = "lineBreakByHyphenatingBeforeIndex:withinRange:")]
    pub unsafe fn lineBreakByHyphenatingBeforeIndex_withinRange(
        &self,
        location: NSUInteger,
        a_range: NSRange,
    ) -> NSUInteger;

    #[objc2::method(sel = "doubleClickAtIndex:")]
    pub unsafe fn doubleClickAtIndex(&self, location: NSUInteger) -> NSRange;

    #[objc2::method(sel = "nextWordFromIndex:forward:")]
    pub unsafe fn nextWordFromIndex_forward(
        &self,
        location: NSUInteger,
        is_forward: bool,
    ) -> NSUInteger;

    #[cfg(feature = "AppKit_NSTextBlock")]
    #[objc2::method(sel = "rangeOfTextBlock:atIndex:")]
    pub unsafe fn rangeOfTextBlock_atIndex(
        &self,
        block: &NSTextBlock,
        location: NSUInteger,
    ) -> NSRange;

    #[cfg(feature = "AppKit_NSTextTable")]
    #[objc2::method(sel = "rangeOfTextTable:atIndex:")]
    pub unsafe fn rangeOfTextTable_atIndex(
        &self,
        table: &NSTextTable,
        location: NSUInteger,
    ) -> NSRange;

    #[cfg(feature = "AppKit_NSTextList")]
    #[objc2::method(sel = "rangeOfTextList:atIndex:")]
    pub unsafe fn rangeOfTextList_atIndex(
        &self,
        list: &NSTextList,
        location: NSUInteger,
    ) -> NSRange;

    #[cfg(feature = "AppKit_NSTextList")]
    #[objc2::method(sel = "itemNumberInTextList:atIndex:")]
    pub unsafe fn itemNumberInTextList_atIndex(
        &self,
        list: &NSTextList,
        location: NSUInteger,
    ) -> NSInteger;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSAttributedString")]
    pub type NSAttributedString;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "textTypes", managed = "Other")]
    pub unsafe fn textTypes() -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "textUnfilteredTypes", managed = "Other")]
    pub unsafe fn textUnfilteredTypes() -> Id<NSArray<NSString>>;
}

#[cfg(feature = "Foundation_NSAttributedString")]
unsafe impl NSPasteboardReading for NSAttributedString {}

#[cfg(feature = "Foundation_NSAttributedString")]
unsafe impl NSPasteboardWriting for NSAttributedString {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSMutableAttributedString")]
    pub type NSMutableAttributedString;

    #[objc2::method(sel = "superscriptRange:")]
    pub unsafe fn superscriptRange(&self, range: NSRange);

    #[objc2::method(sel = "subscriptRange:")]
    pub unsafe fn subscriptRange(&self, range: NSRange);

    #[objc2::method(sel = "unscriptRange:")]
    pub unsafe fn unscriptRange(&self, range: NSRange);

    #[objc2::method(sel = "applyFontTraits:range:")]
    pub unsafe fn applyFontTraits_range(&self, trait_mask: NSFontTraitMask, range: NSRange);

    #[objc2::method(sel = "setAlignment:range:")]
    pub unsafe fn setAlignment_range(&self, alignment: NSTextAlignment, range: NSRange);

    #[objc2::method(sel = "setBaseWritingDirection:range:")]
    pub unsafe fn setBaseWritingDirection_range(
        &self,
        writing_direction: NSWritingDirection,
        range: NSRange,
    );
}

extern_static!(NSUnderlinePatternSolid: NSUnderlineStyle = NSUnderlineStylePatternSolid);

extern_static!(NSUnderlinePatternDot: NSUnderlineStyle = NSUnderlineStylePatternDot);

extern_static!(NSUnderlinePatternDash: NSUnderlineStyle = NSUnderlineStylePatternDash);

extern_static!(NSUnderlinePatternDashDot: NSUnderlineStyle = NSUnderlineStylePatternDashDot);

extern_static!(NSUnderlinePatternDashDotDot: NSUnderlineStyle = NSUnderlineStylePatternDashDotDot);

extern_static!(NSUnderlineByWord: NSUnderlineStyle = NSUnderlineStyleByWord);

extern_static!(NSCharacterShapeAttributeName: &'static NSAttributedStringKey);

extern_static!(NSUsesScreenFontsDocumentAttribute: &'static NSAttributedStringKey);

#[extern_enum]
#[underlying(c_uint)]
pub enum __anonymous__ {
    #[deprecated = "Use NSUnderlineStyleNone instead"]
    NSNoUnderlineStyle = 0,
    #[deprecated = "Use NSUnderlineStyleSingle instead"]
    NSSingleUnderlineStyle = 1,
}

extern_static!(NSUnderlineStrikethroughMask: NSUInteger);

extern_static!(NSUnderlineByWordMask: NSUInteger);

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSAttributedString")]
    pub type NSAttributedString;

    #[objc2::method(sel = "containsAttachments")]
    pub unsafe fn containsAttachments(&self) -> bool;

    #[cfg(feature = "Foundation_NSArray")]
    #[deprecated]
    #[objc2::method(sel = "textFileTypes", managed = "Other")]
    pub unsafe fn textFileTypes() -> Id<NSArray>;

    #[cfg(feature = "Foundation_NSArray")]
    #[deprecated]
    #[objc2::method(sel = "textPasteboardTypes", managed = "Other")]
    pub unsafe fn textPasteboardTypes() -> Id<NSArray>;

    #[cfg(feature = "Foundation_NSArray")]
    #[deprecated]
    #[objc2::method(sel = "textUnfilteredFileTypes", managed = "Other")]
    pub unsafe fn textUnfilteredFileTypes() -> Id<NSArray>;

    #[cfg(feature = "Foundation_NSArray")]
    #[deprecated]
    #[objc2::method(sel = "textUnfilteredPasteboardTypes", managed = "Other")]
    pub unsafe fn textUnfilteredPasteboardTypes() -> Id<NSArray>;

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSURL"))]
    #[deprecated = "Use -initWithURL:options:documentAttributes:error: instead"]
    #[objc2::method(sel = "initWithURL:documentAttributes:", managed = "Init")]
    pub unsafe fn initWithURL_documentAttributes(
        this: Option<Allocated<Self>>,
        url: &NSURL,
        dict: Option<&mut Option<Id<NSDictionary>>>,
    ) -> Option<Id<Self>>;

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[deprecated = "Use -initWithURL:options:documentAttributes:error: instead"]
    #[objc2::method(sel = "initWithPath:documentAttributes:", managed = "Init")]
    pub unsafe fn initWithPath_documentAttributes(
        this: Option<Allocated<Self>>,
        path: &NSString,
        dict: Option<&mut Option<Id<NSDictionary>>>,
    ) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSURL")]
    #[deprecated = "Use NSDataDetector instead"]
    #[objc2::method(sel = "URLAtIndex:effectiveRange:", managed = "Other")]
    pub unsafe fn URLAtIndex_effectiveRange(
        &self,
        location: NSUInteger,
        effective_range: NSRangePointer,
    ) -> Option<Id<NSURL>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSMutableAttributedString")]
    pub type NSMutableAttributedString;

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSURL"))]
    #[deprecated = "Use -readFromURL:options:documentAttributes:error: instead"]
    #[objc2::method(sel = "readFromURL:options:documentAttributes:")]
    pub unsafe fn readFromURL_options_documentAttributes(
        &self,
        url: &NSURL,
        options: &NSDictionary,
        dict: Option<&mut Option<Id<NSDictionary>>>,
    ) -> bool;

    #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSDictionary"))]
    #[deprecated = "Use -readFromData:options:documentAttributes:error: instead"]
    #[objc2::method(sel = "readFromData:options:documentAttributes:")]
    pub unsafe fn readFromData_options_documentAttributes(
        &self,
        data: &NSData,
        options: &NSDictionary,
        dict: Option<&mut Option<Id<NSDictionary>>>,
    ) -> bool;
}
