//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSButton,
    unsafe inherits = [
        NSControl,
        NSView,
        NSResponder,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSPopUpButton")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSPopUpButton;
}

#[cfg(feature = "AppKit_NSPopUpButton")]
unsafe impl NSAccessibility for NSPopUpButton {}

#[cfg(feature = "AppKit_NSPopUpButton")]
unsafe impl NSAccessibilityButton for NSPopUpButton {}

#[cfg(feature = "AppKit_NSPopUpButton")]
unsafe impl NSAccessibilityElementProtocol for NSPopUpButton {}

#[cfg(feature = "AppKit_NSPopUpButton")]
unsafe impl NSAnimatablePropertyContainer for NSPopUpButton {}

#[cfg(feature = "AppKit_NSPopUpButton")]
unsafe impl NSAppearanceCustomization for NSPopUpButton {}

#[cfg(feature = "AppKit_NSPopUpButton")]
unsafe impl NSCoding for NSPopUpButton {}

#[cfg(feature = "AppKit_NSPopUpButton")]
unsafe impl NSDraggingDestination for NSPopUpButton {}

#[cfg(feature = "AppKit_NSPopUpButton")]
unsafe impl NSObjectProtocol for NSPopUpButton {}

#[cfg(feature = "AppKit_NSPopUpButton")]
unsafe impl NSUserInterfaceCompression for NSPopUpButton {}

#[cfg(feature = "AppKit_NSPopUpButton")]
unsafe impl NSUserInterfaceItemIdentification for NSPopUpButton {}

#[cfg(feature = "AppKit_NSPopUpButton")]
unsafe impl NSUserInterfaceValidations for NSPopUpButton {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSPopUpButton")]
    pub type NSPopUpButton;

    #[objc2::method(sel = "initWithFrame:pullsDown:", managed = "Init")]
    pub unsafe fn initWithFrame_pullsDown(
        this: Option<Allocated<Self>>,
        button_frame: NSRect,
        flag: bool,
    ) -> Id<Self>;

    #[cfg(feature = "AppKit_NSMenu")]
    #[objc2::method(sel = "menu", managed = "Other")]
    pub unsafe fn menu(&self) -> Option<Id<NSMenu>>;

    #[cfg(feature = "AppKit_NSMenu")]
    #[objc2::method(sel = "setMenu:")]
    pub unsafe fn setMenu(&self, menu: Option<&NSMenu>);

    #[objc2::method(sel = "pullsDown")]
    pub unsafe fn pullsDown(&self) -> bool;

    #[objc2::method(sel = "setPullsDown:")]
    pub unsafe fn setPullsDown(&self, pulls_down: bool);

    #[objc2::method(sel = "autoenablesItems")]
    pub unsafe fn autoenablesItems(&self) -> bool;

    #[objc2::method(sel = "setAutoenablesItems:")]
    pub unsafe fn setAutoenablesItems(&self, autoenables_items: bool);

    #[objc2::method(sel = "preferredEdge")]
    pub unsafe fn preferredEdge(&self) -> NSRectEdge;

    #[objc2::method(sel = "setPreferredEdge:")]
    pub unsafe fn setPreferredEdge(&self, preferred_edge: NSRectEdge);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "addItemWithTitle:")]
    pub unsafe fn addItemWithTitle(&self, title: &NSString);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "addItemsWithTitles:")]
    pub unsafe fn addItemsWithTitles(&self, item_titles: &NSArray<NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "insertItemWithTitle:atIndex:")]
    pub unsafe fn insertItemWithTitle_atIndex(&self, title: &NSString, index: NSInteger);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "removeItemWithTitle:")]
    pub unsafe fn removeItemWithTitle(&self, title: &NSString);

    #[objc2::method(sel = "removeItemAtIndex:")]
    pub unsafe fn removeItemAtIndex(&self, index: NSInteger);

    #[objc2::method(sel = "removeAllItems")]
    pub unsafe fn removeAllItems(&self);

    #[cfg(all(feature = "AppKit_NSMenuItem", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "itemArray", managed = "Other")]
    pub unsafe fn itemArray(&self) -> Id<NSArray<NSMenuItem>>;

    #[objc2::method(sel = "numberOfItems")]
    pub unsafe fn numberOfItems(&self) -> NSInteger;

    #[cfg(feature = "AppKit_NSMenuItem")]
    #[objc2::method(sel = "indexOfItem:")]
    pub unsafe fn indexOfItem(&self, item: &NSMenuItem) -> NSInteger;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "indexOfItemWithTitle:")]
    pub unsafe fn indexOfItemWithTitle(&self, title: &NSString) -> NSInteger;

    #[objc2::method(sel = "indexOfItemWithTag:")]
    pub unsafe fn indexOfItemWithTag(&self, tag: NSInteger) -> NSInteger;

    #[objc2::method(sel = "indexOfItemWithRepresentedObject:")]
    pub unsafe fn indexOfItemWithRepresentedObject(&self, obj: Option<&Object>) -> NSInteger;

    #[objc2::method(sel = "indexOfItemWithTarget:andAction:")]
    pub unsafe fn indexOfItemWithTarget_andAction(
        &self,
        target: Option<&Object>,
        action_selector: Option<Sel>,
    ) -> NSInteger;

    #[cfg(feature = "AppKit_NSMenuItem")]
    #[objc2::method(sel = "itemAtIndex:", managed = "Other")]
    pub unsafe fn itemAtIndex(&self, index: NSInteger) -> Option<Id<NSMenuItem>>;

    #[cfg(all(feature = "AppKit_NSMenuItem", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "itemWithTitle:", managed = "Other")]
    pub unsafe fn itemWithTitle(&self, title: &NSString) -> Option<Id<NSMenuItem>>;

    #[cfg(feature = "AppKit_NSMenuItem")]
    #[objc2::method(sel = "lastItem", managed = "Other")]
    pub unsafe fn lastItem(&self) -> Option<Id<NSMenuItem>>;

    #[cfg(feature = "AppKit_NSMenuItem")]
    #[objc2::method(sel = "selectItem:")]
    pub unsafe fn selectItem(&self, item: Option<&NSMenuItem>);

    #[objc2::method(sel = "selectItemAtIndex:")]
    pub unsafe fn selectItemAtIndex(&self, index: NSInteger);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "selectItemWithTitle:")]
    pub unsafe fn selectItemWithTitle(&self, title: &NSString);

    #[objc2::method(sel = "selectItemWithTag:")]
    pub unsafe fn selectItemWithTag(&self, tag: NSInteger) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setTitle:")]
    pub unsafe fn setTitle(&self, string: &NSString);

    #[cfg(feature = "AppKit_NSMenuItem")]
    #[objc2::method(sel = "selectedItem", managed = "Other")]
    pub unsafe fn selectedItem(&self) -> Option<Id<NSMenuItem>>;

    #[objc2::method(sel = "indexOfSelectedItem")]
    pub unsafe fn indexOfSelectedItem(&self) -> NSInteger;

    #[objc2::method(sel = "selectedTag")]
    pub unsafe fn selectedTag(&self) -> NSInteger;

    #[objc2::method(sel = "synchronizeTitleAndSelectedItem")]
    pub unsafe fn synchronizeTitleAndSelectedItem(&self);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "itemTitleAtIndex:", managed = "Other")]
    pub unsafe fn itemTitleAtIndex(&self, index: NSInteger) -> Id<NSString>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "itemTitles", managed = "Other")]
    pub unsafe fn itemTitles(&self) -> Id<NSArray<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "titleOfSelectedItem", managed = "Other")]
    pub unsafe fn titleOfSelectedItem(&self) -> Option<Id<NSString>>;
}

extern_static!(NSPopUpButtonWillPopUpNotification: &'static NSNotificationName);

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSButton`
    #[cfg(feature = "AppKit_NSPopUpButton")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSPopUpButton")]
    pub type NSPopUpButton;

    #[cfg(all(feature = "AppKit_NSImage", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "buttonWithTitle:image:target:action:", managed = "Other")]
    pub unsafe fn buttonWithTitle_image_target_action(
        title: &NSString,
        image: &NSImage,
        target: Option<&Object>,
        action: Option<Sel>,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "buttonWithTitle:target:action:", managed = "Other")]
    pub unsafe fn buttonWithTitle_target_action(
        title: &NSString,
        target: Option<&Object>,
        action: Option<Sel>,
    ) -> Id<Self>;

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "buttonWithImage:target:action:", managed = "Other")]
    pub unsafe fn buttonWithImage_target_action(
        image: &NSImage,
        target: Option<&Object>,
        action: Option<Sel>,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "checkboxWithTitle:target:action:", managed = "Other")]
    pub unsafe fn checkboxWithTitle_target_action(
        title: &NSString,
        target: Option<&Object>,
        action: Option<Sel>,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "radioButtonWithTitle:target:action:", managed = "Other")]
    pub unsafe fn radioButtonWithTitle_target_action(
        title: &NSString,
        target: Option<&Object>,
        action: Option<Sel>,
    ) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSControl`
    #[cfg(feature = "AppKit_NSPopUpButton")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSPopUpButton")]
    pub type NSPopUpButton;

    #[objc2::method(sel = "initWithFrame:", managed = "Init")]
    pub unsafe fn initWithFrame(this: Option<Allocated<Self>>, frame_rect: NSRect) -> Id<Self>;
}
