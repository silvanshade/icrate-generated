//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_options]
#[underlying(NSUInteger)]
pub enum NSMediaLibrary {
    NSMediaLibraryAudio = 1 << 0,
    NSMediaLibraryImage = 1 << 1,
    NSMediaLibraryMovie = 1 << 2,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSMediaLibraryBrowserController")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSMediaLibraryBrowserController;
}

#[cfg(feature = "AppKit_NSMediaLibraryBrowserController")]
unsafe impl NSObjectProtocol for NSMediaLibraryBrowserController {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSMediaLibraryBrowserController")]
    pub type NSMediaLibraryBrowserController;

    #[objc2::method(sel = "isVisible")]
    pub unsafe fn isVisible(&self) -> bool;

    #[objc2::method(sel = "setVisible:")]
    pub unsafe fn setVisible(&self, visible: bool);

    #[objc2::method(sel = "frame")]
    pub unsafe fn frame(&self) -> NSRect;

    #[objc2::method(sel = "setFrame:")]
    pub unsafe fn setFrame(&self, frame: NSRect);

    #[objc2::method(sel = "mediaLibraries")]
    pub unsafe fn mediaLibraries(&self) -> NSMediaLibrary;

    #[objc2::method(sel = "setMediaLibraries:")]
    pub unsafe fn setMediaLibraries(&self, media_libraries: NSMediaLibrary);

    #[objc2::method(sel = "sharedMediaLibraryBrowserController", managed = "Other")]
    pub unsafe fn sharedMediaLibraryBrowserController() -> Id<NSMediaLibraryBrowserController>;

    #[objc2::method(sel = "togglePanel:")]
    pub unsafe fn togglePanel(&self, sender: Option<&Object>);
}
