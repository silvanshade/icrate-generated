//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

pub type NSFontSymbolicTraits = u32;

#[ns_options]
#[underlying(u32)]
pub enum NSFontDescriptorSymbolicTraits {
    NSFontDescriptorTraitItalic = 1 << 0,
    NSFontDescriptorTraitBold = 1 << 1,
    NSFontDescriptorTraitExpanded = 1 << 5,
    NSFontDescriptorTraitCondensed = 1 << 6,
    NSFontDescriptorTraitMonoSpace = 1 << 10,
    NSFontDescriptorTraitVertical = 1 << 11,
    NSFontDescriptorTraitUIOptimized = 1 << 12,
    NSFontDescriptorTraitTightLeading = 1 << 15,
    NSFontDescriptorTraitLooseLeading = 1 << 16,
    NSFontDescriptorTraitEmphasized = NSFontDescriptorTraitBold,
    NSFontDescriptorClassMask = 0xF0000000,
    NSFontDescriptorClassUnknown = 0 << 28,
    NSFontDescriptorClassOldStyleSerifs = 1 << 28,
    NSFontDescriptorClassTransitionalSerifs = 2 << 28,
    NSFontDescriptorClassModernSerifs = 3 << 28,
    NSFontDescriptorClassClarendonSerifs = 4 << 28,
    NSFontDescriptorClassSlabSerifs = 5 << 28,
    NSFontDescriptorClassFreeformSerifs = 7 << 28,
    NSFontDescriptorClassSansSerif = 8 << 28,
    NSFontDescriptorClassOrnamentals = 9 << 28,
    NSFontDescriptorClassScripts = 10 << 28,
    NSFontDescriptorClassSymbolic = 12 << 28,
}

typed_extensible_enum!(
    pub type NSFontDescriptorAttributeName = NSString;
);

typed_enum!(
    pub type NSFontDescriptorTraitKey = NSString;
);

typed_enum!(
    pub type NSFontDescriptorVariationKey = NSString;
);

typed_extensible_enum!(
    pub type NSFontDescriptorFeatureKey = NSString;
);

typed_extensible_enum!(
    pub type NSFontWeight = CGFloat;
);

typed_extensible_enum!(
    pub type NSFontWidth = CGFloat;
);

typed_enum!(
    pub type NSFontDescriptorSystemDesign = NSString;
);

typed_enum!(
    pub type NSFontTextStyle = NSString;
);

typed_enum!(
    pub type NSFontTextStyleOptionKey = NSString;
);

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSFontDescriptor")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSFontDescriptor;
}

#[cfg(feature = "AppKit_NSFontDescriptor")]
unsafe impl NSCoding for NSFontDescriptor {}

#[cfg(feature = "AppKit_NSFontDescriptor")]
unsafe impl NSObjectProtocol for NSFontDescriptor {}

#[cfg(feature = "AppKit_NSFontDescriptor")]
unsafe impl NSSecureCoding for NSFontDescriptor {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSFontDescriptor")]
    pub type NSFontDescriptor;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "postscriptName", managed = "Other")]
    pub unsafe fn postscriptName(&self) -> Option<Id<NSString>>;

    #[objc2::method(sel = "pointSize")]
    pub unsafe fn pointSize(&self) -> CGFloat;

    #[cfg(feature = "Foundation_NSAffineTransform")]
    #[objc2::method(sel = "matrix", managed = "Other")]
    pub unsafe fn matrix(&self) -> Option<Id<NSAffineTransform>>;

    #[objc2::method(sel = "symbolicTraits")]
    pub unsafe fn symbolicTraits(&self) -> NSFontDescriptorSymbolicTraits;

    #[objc2::method(sel = "requiresFontAssetRequest")]
    pub unsafe fn requiresFontAssetRequest(&self) -> bool;

    #[objc2::method(sel = "objectForKey:", managed = "Other")]
    pub unsafe fn objectForKey(
        &self,
        attribute: &NSFontDescriptorAttributeName,
    ) -> Option<Id<Object>>;

    #[cfg(feature = "Foundation_NSDictionary")]
    #[objc2::method(sel = "fontAttributes", managed = "Other")]
    pub unsafe fn fontAttributes(&self) -> Id<NSDictionary<NSFontDescriptorAttributeName, Object>>;

    #[cfg(feature = "Foundation_NSDictionary")]
    #[objc2::method(sel = "fontDescriptorWithFontAttributes:", managed = "Other")]
    pub unsafe fn fontDescriptorWithFontAttributes(
        attributes: Option<&NSDictionary<NSFontDescriptorAttributeName, Object>>,
    ) -> Id<NSFontDescriptor>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "fontDescriptorWithName:size:", managed = "Other")]
    pub unsafe fn fontDescriptorWithName_size(
        font_name: &NSString,
        size: CGFloat,
    ) -> Id<NSFontDescriptor>;

    #[cfg(all(
        feature = "Foundation_NSAffineTransform",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "fontDescriptorWithName:matrix:", managed = "Other")]
    pub unsafe fn fontDescriptorWithName_matrix(
        font_name: &NSString,
        matrix: &NSAffineTransform,
    ) -> Id<NSFontDescriptor>;

    #[cfg(feature = "Foundation_NSDictionary")]
    #[objc2::method(sel = "initWithFontAttributes:", managed = "Init")]
    pub unsafe fn initWithFontAttributes(
        this: Option<Allocated<Self>>,
        attributes: Option<&NSDictionary<NSFontDescriptorAttributeName, Object>>,
    ) -> Id<Self>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSSet"))]
    #[objc2::method(sel = "matchingFontDescriptorsWithMandatoryKeys:", managed = "Other")]
    pub unsafe fn matchingFontDescriptorsWithMandatoryKeys(
        &self,
        mandatory_keys: Option<&NSSet<NSFontDescriptorAttributeName>>,
    ) -> Id<NSArray<NSFontDescriptor>>;

    #[cfg(feature = "Foundation_NSSet")]
    #[objc2::method(sel = "matchingFontDescriptorWithMandatoryKeys:", managed = "Other")]
    pub unsafe fn matchingFontDescriptorWithMandatoryKeys(
        &self,
        mandatory_keys: Option<&NSSet<NSFontDescriptorAttributeName>>,
    ) -> Option<Id<NSFontDescriptor>>;

    #[cfg(feature = "Foundation_NSDictionary")]
    #[objc2::method(sel = "fontDescriptorByAddingAttributes:", managed = "Other")]
    pub unsafe fn fontDescriptorByAddingAttributes(
        &self,
        attributes: &NSDictionary<NSFontDescriptorAttributeName, Object>,
    ) -> Id<NSFontDescriptor>;

    #[objc2::method(sel = "fontDescriptorWithSymbolicTraits:", managed = "Other")]
    pub unsafe fn fontDescriptorWithSymbolicTraits(
        &self,
        symbolic_traits: NSFontDescriptorSymbolicTraits,
    ) -> Id<NSFontDescriptor>;

    #[objc2::method(sel = "fontDescriptorWithSize:", managed = "Other")]
    pub unsafe fn fontDescriptorWithSize(&self, new_point_size: CGFloat) -> Id<NSFontDescriptor>;

    #[cfg(feature = "Foundation_NSAffineTransform")]
    #[objc2::method(sel = "fontDescriptorWithMatrix:", managed = "Other")]
    pub unsafe fn fontDescriptorWithMatrix(
        &self,
        matrix: &NSAffineTransform,
    ) -> Id<NSFontDescriptor>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "fontDescriptorWithFace:", managed = "Other")]
    pub unsafe fn fontDescriptorWithFace(&self, new_face: &NSString) -> Id<NSFontDescriptor>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "fontDescriptorWithFamily:", managed = "Other")]
    pub unsafe fn fontDescriptorWithFamily(&self, new_family: &NSString) -> Id<NSFontDescriptor>;

    #[objc2::method(sel = "fontDescriptorWithDesign:", managed = "Other")]
    pub unsafe fn fontDescriptorWithDesign(
        &self,
        design: &NSFontDescriptorSystemDesign,
    ) -> Option<Id<Self>>;
}

extern_static!(NSFontFamilyAttribute: &'static NSFontDescriptorAttributeName);

extern_static!(NSFontNameAttribute: &'static NSFontDescriptorAttributeName);

extern_static!(NSFontFaceAttribute: &'static NSFontDescriptorAttributeName);

extern_static!(NSFontSizeAttribute: &'static NSFontDescriptorAttributeName);

extern_static!(NSFontVisibleNameAttribute: &'static NSFontDescriptorAttributeName);

extern_static!(NSFontMatrixAttribute: &'static NSFontDescriptorAttributeName);

extern_static!(NSFontVariationAttribute: &'static NSFontDescriptorAttributeName);

extern_static!(NSFontCharacterSetAttribute: &'static NSFontDescriptorAttributeName);

extern_static!(NSFontCascadeListAttribute: &'static NSFontDescriptorAttributeName);

extern_static!(NSFontTraitsAttribute: &'static NSFontDescriptorAttributeName);

extern_static!(NSFontFixedAdvanceAttribute: &'static NSFontDescriptorAttributeName);

extern_static!(NSFontFeatureSettingsAttribute: &'static NSFontDescriptorAttributeName);

extern_static!(NSFontSymbolicTrait: &'static NSFontDescriptorTraitKey);

extern_static!(NSFontWeightTrait: &'static NSFontDescriptorTraitKey);

extern_static!(NSFontWidthTrait: &'static NSFontDescriptorTraitKey);

extern_static!(NSFontSlantTrait: &'static NSFontDescriptorTraitKey);

extern_static!(NSFontVariationAxisIdentifierKey: &'static NSFontDescriptorVariationKey);

extern_static!(NSFontVariationAxisMinimumValueKey: &'static NSFontDescriptorVariationKey);

extern_static!(NSFontVariationAxisMaximumValueKey: &'static NSFontDescriptorVariationKey);

extern_static!(NSFontVariationAxisDefaultValueKey: &'static NSFontDescriptorVariationKey);

extern_static!(NSFontVariationAxisNameKey: &'static NSFontDescriptorVariationKey);

extern_static!(NSFontFeatureTypeIdentifierKey: &'static NSFontDescriptorFeatureKey);

extern_static!(NSFontFeatureSelectorIdentifierKey: &'static NSFontDescriptorFeatureKey);

extern_static!(NSFontWeightUltraLight: NSFontWeight);

extern_static!(NSFontWeightThin: NSFontWeight);

extern_static!(NSFontWeightLight: NSFontWeight);

extern_static!(NSFontWeightRegular: NSFontWeight);

extern_static!(NSFontWeightMedium: NSFontWeight);

extern_static!(NSFontWeightSemibold: NSFontWeight);

extern_static!(NSFontWeightBold: NSFontWeight);

extern_static!(NSFontWeightHeavy: NSFontWeight);

extern_static!(NSFontWeightBlack: NSFontWeight);

extern_static!(NSFontWidthCompressed: NSFontWidth);

extern_static!(NSFontWidthCondensed: NSFontWidth);

extern_static!(NSFontWidthStandard: NSFontWidth);

extern_static!(NSFontWidthExpanded: NSFontWidth);

extern_static!(NSFontDescriptorSystemDesignDefault: &'static NSFontDescriptorSystemDesign);

extern_static!(NSFontDescriptorSystemDesignSerif: &'static NSFontDescriptorSystemDesign);

extern_static!(NSFontDescriptorSystemDesignMonospaced: &'static NSFontDescriptorSystemDesign);

extern_static!(NSFontDescriptorSystemDesignRounded: &'static NSFontDescriptorSystemDesign);

extern_static!(NSFontTextStyleLargeTitle: &'static NSFontTextStyle);

extern_static!(NSFontTextStyleTitle1: &'static NSFontTextStyle);

extern_static!(NSFontTextStyleTitle2: &'static NSFontTextStyle);

extern_static!(NSFontTextStyleTitle3: &'static NSFontTextStyle);

extern_static!(NSFontTextStyleHeadline: &'static NSFontTextStyle);

extern_static!(NSFontTextStyleSubheadline: &'static NSFontTextStyle);

extern_static!(NSFontTextStyleBody: &'static NSFontTextStyle);

extern_static!(NSFontTextStyleCallout: &'static NSFontTextStyle);

extern_static!(NSFontTextStyleFootnote: &'static NSFontTextStyle);

extern_static!(NSFontTextStyleCaption1: &'static NSFontTextStyle);

extern_static!(NSFontTextStyleCaption2: &'static NSFontTextStyle);

pub type NSFontFamilyClass = u32;

#[extern_enum]
#[underlying(c_int)]
pub enum __anonymous__ {
    NSFontUnknownClass = 0 << 28,
    NSFontOldStyleSerifsClass = 1 << 28,
    NSFontTransitionalSerifsClass = 2 << 28,
    NSFontModernSerifsClass = 3 << 28,
    NSFontClarendonSerifsClass = 4 << 28,
    NSFontSlabSerifsClass = 5 << 28,
    NSFontFreeformSerifsClass = 7 << 28,
    NSFontSansSerifClass = 8 << 28,
    NSFontOrnamentalsClass = 9 << 28,
    NSFontScriptsClass = 10 << 28,
    NSFontSymbolicClass = 12 << 28,
}

#[extern_enum]
#[underlying(c_uint)]
pub enum __anonymous__ {
    NSFontFamilyClassMask = 0xF0000000,
}

#[extern_enum]
#[underlying(c_uint)]
pub enum __anonymous__ {
    NSFontItalicTrait = 1 << 0,
    NSFontBoldTrait = 1 << 1,
    NSFontExpandedTrait = 1 << 5,
    NSFontCondensedTrait = 1 << 6,
    NSFontMonoSpaceTrait = 1 << 10,
    NSFontVerticalTrait = 1 << 11,
    NSFontUIOptimizedTrait = 1 << 12,
}

extern_static!(NSFontColorAttribute: &'static NSString);

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSFontDescriptor")]
    pub type NSFontDescriptor;

    #[cfg(feature = "Foundation_NSDictionary")]
    #[objc2::method(
        sel = "preferredFontDescriptorForTextStyle:options:",
        managed = "Other"
    )]
    pub unsafe fn preferredFontDescriptorForTextStyle_options(
        style: &NSFontTextStyle,
        options: &NSDictionary<NSFontTextStyleOptionKey, Object>,
    ) -> Id<NSFontDescriptor>;
}
