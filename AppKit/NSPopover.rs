//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSInteger)]
#[deprecated]
pub enum NSPopoverAppearance {
    #[deprecated]
    NSPopoverAppearanceMinimal = 0,
    #[deprecated]
    NSPopoverAppearanceHUD = 1,
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSPopoverBehavior {
    NSPopoverBehaviorApplicationDefined = 0,
    NSPopoverBehaviorTransient = 1,
    NSPopoverBehaviorSemitransient = 2,
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSPopover")]
    pub type NSPopover;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, coder: &NSCoder)
        -> Option<Id<Self>>;

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn NSPopoverDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(&self, delegate: Option<&ProtocolObject<dyn NSPopoverDelegate>>);

    #[objc2::method(sel = "behavior")]
    pub unsafe fn behavior(&self) -> NSPopoverBehavior;

    #[objc2::method(sel = "setBehavior:")]
    pub unsafe fn setBehavior(&self, behavior: NSPopoverBehavior);

    #[objc2::method(sel = "animates")]
    pub unsafe fn animates(&self) -> bool;

    #[objc2::method(sel = "setAnimates:")]
    pub unsafe fn setAnimates(&self, animates: bool);

    #[cfg(feature = "AppKit_NSViewController")]
    #[objc2::method(sel = "contentViewController", managed = "Other")]
    pub unsafe fn contentViewController(&self) -> Option<Id<NSViewController>>;

    #[cfg(feature = "AppKit_NSViewController")]
    #[objc2::method(sel = "setContentViewController:")]
    pub unsafe fn setContentViewController(
        &self,
        content_view_controller: Option<&NSViewController>,
    );

    #[objc2::method(sel = "contentSize")]
    pub unsafe fn contentSize(&self) -> NSSize;

    #[objc2::method(sel = "setContentSize:")]
    pub unsafe fn setContentSize(&self, content_size: NSSize);

    #[objc2::method(sel = "isShown")]
    pub unsafe fn isShown(&self) -> bool;

    #[objc2::method(sel = "isDetached")]
    pub unsafe fn isDetached(&self) -> bool;

    #[objc2::method(sel = "positioningRect")]
    pub unsafe fn positioningRect(&self) -> NSRect;

    #[objc2::method(sel = "setPositioningRect:")]
    pub unsafe fn setPositioningRect(&self, positioning_rect: NSRect);

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "showRelativeToRect:ofView:preferredEdge:")]
    pub unsafe fn showRelativeToRect_ofView_preferredEdge(
        &self,
        positioning_rect: NSRect,
        positioning_view: &NSView,
        preferred_edge: NSRectEdge,
    );

    #[objc2::method(sel = "performClose:")]
    pub unsafe fn performClose(&self, sender: Option<&Object>);

    #[objc2::method(sel = "close")]
    pub unsafe fn close(&self);
}

extern_static!(NSPopoverCloseReasonKey: &'static NSString);

typed_enum!(
    pub type NSPopoverCloseReasonValue = NSString;
);

extern_static!(NSPopoverCloseReasonStandard: &'static NSPopoverCloseReasonValue);

extern_static!(NSPopoverCloseReasonDetachToWindow: &'static NSPopoverCloseReasonValue);

extern_static!(NSPopoverWillShowNotification: &'static NSNotificationName);

extern_static!(NSPopoverDidShowNotification: &'static NSNotificationName);

extern_static!(NSPopoverWillCloseNotification: &'static NSNotificationName);

extern_static!(NSPopoverDidCloseNotification: &'static NSNotificationName);

#[objc2::protocol]
pub unsafe trait NSPopoverDelegate: NSObjectProtocol {
    #[cfg(feature = "AppKit_NSPopover")]
    #[objc2::method(optional, sel = "popoverShouldClose:")]
    unsafe fn popoverShouldClose(&self, popover: &NSPopover) -> bool;

    #[cfg(feature = "AppKit_NSPopover")]
    #[objc2::method(optional, sel = "popoverShouldDetach:")]
    unsafe fn popoverShouldDetach(&self, popover: &NSPopover) -> bool;

    #[cfg(feature = "AppKit_NSPopover")]
    #[objc2::method(optional, sel = "popoverDidDetach:")]
    unsafe fn popoverDidDetach(&self, popover: &NSPopover);

    #[cfg(all(feature = "AppKit_NSPopover", feature = "AppKit_NSWindow"))]
    #[objc2::method(optional, sel = "detachableWindowForPopover:", managed = "Other")]
    unsafe fn detachableWindowForPopover(&self, popover: &NSPopover) -> Option<Id<NSWindow>>;

    #[cfg(feature = "Foundation_NSNotification")]
    #[objc2::method(optional, sel = "popoverWillShow:")]
    unsafe fn popoverWillShow(&self, notification: &NSNotification);

    #[cfg(feature = "Foundation_NSNotification")]
    #[objc2::method(optional, sel = "popoverDidShow:")]
    unsafe fn popoverDidShow(&self, notification: &NSNotification);

    #[cfg(feature = "Foundation_NSNotification")]
    #[objc2::method(optional, sel = "popoverWillClose:")]
    unsafe fn popoverWillClose(&self, notification: &NSNotification);

    #[cfg(feature = "Foundation_NSNotification")]
    #[objc2::method(optional, sel = "popoverDidClose:")]
    unsafe fn popoverDidClose(&self, notification: &NSNotification);
}
