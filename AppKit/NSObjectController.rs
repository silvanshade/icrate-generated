//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSController,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSObjectController")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSObjectController;
}

#[cfg(feature = "AppKit_NSObjectController")]
unsafe impl NSCoding for NSObjectController {}

#[cfg(feature = "AppKit_NSObjectController")]
unsafe impl NSEditor for NSObjectController {}

#[cfg(feature = "AppKit_NSObjectController")]
unsafe impl NSEditorRegistration for NSObjectController {}

#[cfg(feature = "AppKit_NSObjectController")]
unsafe impl NSObjectProtocol for NSObjectController {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSObjectController")]
    pub type NSObjectController;

    #[objc2::method(sel = "initWithContent:", managed = "Init")]
    pub unsafe fn initWithContent(
        this: Option<Allocated<Self>>,
        content: Option<&Object>,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, coder: &NSCoder)
        -> Option<Id<Self>>;

    #[objc2::method(sel = "content", managed = "Other")]
    pub unsafe fn content(&self) -> Option<Id<Object>>;

    #[objc2::method(sel = "setContent:")]
    pub unsafe fn setContent(&self, content: Option<&Object>);

    #[objc2::method(sel = "selection", managed = "Other")]
    pub unsafe fn selection(&self) -> Id<Object>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "selectedObjects", managed = "Other")]
    pub unsafe fn selectedObjects(&self) -> Id<NSArray>;

    #[objc2::method(sel = "automaticallyPreparesContent")]
    pub unsafe fn automaticallyPreparesContent(&self) -> bool;

    #[objc2::method(sel = "setAutomaticallyPreparesContent:")]
    pub unsafe fn setAutomaticallyPreparesContent(&self, automatically_prepares_content: bool);

    #[objc2::method(sel = "prepareContent")]
    pub unsafe fn prepareContent(&self);

    #[objc2::method(sel = "objectClass")]
    pub unsafe fn objectClass(&self) -> Option<&'static Class>;

    #[objc2::method(sel = "setObjectClass:")]
    pub unsafe fn setObjectClass(&self, object_class: Option<&Class>);

    #[objc2::method(sel = "newObject", managed = "New")]
    pub unsafe fn newObject(&self) -> Id<Object>;

    #[objc2::method(sel = "addObject:")]
    pub unsafe fn addObject(&self, object: &Object);

    #[objc2::method(sel = "removeObject:")]
    pub unsafe fn removeObject(&self, object: &Object);

    #[objc2::method(sel = "isEditable")]
    pub unsafe fn isEditable(&self) -> bool;

    #[objc2::method(sel = "setEditable:")]
    pub unsafe fn setEditable(&self, editable: bool);

    #[objc2::method(sel = "add:")]
    pub unsafe fn add(&self, sender: Option<&Object>);

    #[objc2::method(sel = "canAdd")]
    pub unsafe fn canAdd(&self) -> bool;

    #[objc2::method(sel = "remove:")]
    pub unsafe fn remove(&self, sender: Option<&Object>);

    #[objc2::method(sel = "canRemove")]
    pub unsafe fn canRemove(&self) -> bool;

    #[objc2::method(sel = "validateUserInterfaceItem:")]
    pub unsafe fn validateUserInterfaceItem(
        &self,
        item: &ProtocolObject<dyn NSValidatedUserInterfaceItem>,
    ) -> bool;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSObjectController")]
    pub type NSObjectController;

    #[cfg(feature = "CoreData_NSManagedObjectContext")]
    #[objc2::method(sel = "managedObjectContext", managed = "Other")]
    pub unsafe fn managedObjectContext(&self) -> Option<Id<NSManagedObjectContext>>;

    #[cfg(feature = "CoreData_NSManagedObjectContext")]
    #[objc2::method(sel = "setManagedObjectContext:")]
    pub unsafe fn setManagedObjectContext(
        &self,
        managed_object_context: Option<&NSManagedObjectContext>,
    );

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "entityName", managed = "Other")]
    pub unsafe fn entityName(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setEntityName:")]
    pub unsafe fn setEntityName(&self, entity_name: Option<&NSString>);

    #[cfg(feature = "Foundation_NSPredicate")]
    #[objc2::method(sel = "fetchPredicate", managed = "Other")]
    pub unsafe fn fetchPredicate(&self) -> Option<Id<NSPredicate>>;

    #[cfg(feature = "Foundation_NSPredicate")]
    #[objc2::method(sel = "setFetchPredicate:")]
    pub unsafe fn setFetchPredicate(&self, fetch_predicate: Option<&NSPredicate>);

    #[cfg(all(feature = "CoreData_NSFetchRequest", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "fetchWithRequest:merge:error:", throws)]
    pub unsafe fn fetchWithRequest_merge_error(
        &self,
        fetch_request: Option<&NSFetchRequest>,
        merge: bool,
    ) -> Result<(), Id<NSError>>;

    #[objc2::method(sel = "fetch:")]
    pub unsafe fn fetch(&self, sender: Option<&Object>);

    #[objc2::method(sel = "usesLazyFetching")]
    pub unsafe fn usesLazyFetching(&self) -> bool;

    #[objc2::method(sel = "setUsesLazyFetching:")]
    pub unsafe fn setUsesLazyFetching(&self, uses_lazy_fetching: bool);

    #[cfg(feature = "CoreData_NSFetchRequest")]
    #[objc2::method(sel = "defaultFetchRequest", managed = "Other")]
    pub unsafe fn defaultFetchRequest(&self) -> Id<NSFetchRequest>;
}
