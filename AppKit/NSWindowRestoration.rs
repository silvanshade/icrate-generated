//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::protocol]
pub unsafe trait NSWindowRestoration: NSObjectProtocol {
    #[cfg(all(
        feature = "AppKit_NSWindow",
        feature = "Foundation_NSCoder",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "restoreWindowWithIdentifier:state:completionHandler:")]
    unsafe fn restoreWindowWithIdentifier_state_completionHandler(
        identifier: &NSUserInterfaceItemIdentifier,
        state: &NSCoder,
        completion_handler: &Block<(*mut NSWindow, *mut NSError), ()>,
    );
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSDocumentController")]
    pub type NSDocumentController;
}

#[cfg(feature = "AppKit_NSDocumentController")]
unsafe impl NSWindowRestoration for NSDocumentController {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSApplication")]
    pub type NSApplication;

    #[cfg(all(
        feature = "AppKit_NSWindow",
        feature = "Foundation_NSCoder",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "restoreWindowWithIdentifier:state:completionHandler:")]
    pub unsafe fn restoreWindowWithIdentifier_state_completionHandler(
        &self,
        identifier: &NSUserInterfaceItemIdentifier,
        state: &NSCoder,
        completion_handler: &Block<(*mut NSWindow, *mut NSError), ()>,
    ) -> bool;
}

extern_static!(NSApplicationDidFinishRestoringWindowsNotification: &'static NSNotificationName);

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSWindow")]
    pub type NSWindow;

    #[objc2::method(sel = "isRestorable")]
    pub unsafe fn isRestorable(&self) -> bool;

    #[objc2::method(sel = "setRestorable:")]
    pub unsafe fn setRestorable(&self, restorable: bool);

    #[objc2::method(sel = "restorationClass", managed = "Other")]
    pub unsafe fn restorationClass(&self) -> Option<Id<TodoClass>>;

    #[objc2::method(sel = "setRestorationClass:")]
    pub unsafe fn setRestorationClass(&self, restoration_class: Option<&TodoClass>);

    #[objc2::method(sel = "disableSnapshotRestoration")]
    pub unsafe fn disableSnapshotRestoration(&self);

    #[objc2::method(sel = "enableSnapshotRestoration")]
    pub unsafe fn enableSnapshotRestoration(&self);
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSResponder")]
    pub type NSResponder;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "encodeRestorableStateWithCoder:")]
    pub unsafe fn encodeRestorableStateWithCoder(&self, coder: &NSCoder);

    #[cfg(all(
        feature = "Foundation_NSCoder",
        feature = "Foundation_NSOperationQueue"
    ))]
    #[objc2::method(sel = "encodeRestorableStateWithCoder:backgroundQueue:")]
    pub unsafe fn encodeRestorableStateWithCoder_backgroundQueue(
        &self,
        coder: &NSCoder,
        queue: &NSOperationQueue,
    );

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "restoreStateWithCoder:")]
    pub unsafe fn restoreStateWithCoder(&self, coder: &NSCoder);

    #[objc2::method(sel = "invalidateRestorableState")]
    pub unsafe fn invalidateRestorableState(&self);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "restorableStateKeyPaths", managed = "Other")]
    pub unsafe fn restorableStateKeyPaths() -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "allowedClassesForRestorableStateKeyPath:", managed = "Other")]
    pub unsafe fn allowedClassesForRestorableStateKeyPath(
        key_path: &NSString,
    ) -> Id<NSArray<TodoClass>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSApplication")]
    pub type NSApplication;

    #[objc2::method(sel = "extendStateRestoration")]
    pub unsafe fn extendStateRestoration(&self);

    #[objc2::method(sel = "completeStateRestoration")]
    pub unsafe fn completeStateRestoration(&self);
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSDocument")]
    pub type NSDocument;

    #[cfg(all(
        feature = "AppKit_NSWindow",
        feature = "Foundation_NSCoder",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "restoreDocumentWindowWithIdentifier:state:completionHandler:")]
    pub unsafe fn restoreDocumentWindowWithIdentifier_state_completionHandler(
        &self,
        identifier: &NSUserInterfaceItemIdentifier,
        state: &NSCoder,
        completion_handler: &Block<(*mut NSWindow, *mut NSError), ()>,
    );

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "encodeRestorableStateWithCoder:")]
    pub unsafe fn encodeRestorableStateWithCoder(&self, coder: &NSCoder);

    #[cfg(all(
        feature = "Foundation_NSCoder",
        feature = "Foundation_NSOperationQueue"
    ))]
    #[objc2::method(sel = "encodeRestorableStateWithCoder:backgroundQueue:")]
    pub unsafe fn encodeRestorableStateWithCoder_backgroundQueue(
        &self,
        coder: &NSCoder,
        queue: &NSOperationQueue,
    );

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "restoreStateWithCoder:")]
    pub unsafe fn restoreStateWithCoder(&self, coder: &NSCoder);

    #[objc2::method(sel = "invalidateRestorableState")]
    pub unsafe fn invalidateRestorableState(&self);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "restorableStateKeyPaths", managed = "Other")]
    pub unsafe fn restorableStateKeyPaths() -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "allowedClassesForRestorableStateKeyPath:", managed = "Other")]
    pub unsafe fn allowedClassesForRestorableStateKeyPath(
        key_path: &NSString,
    ) -> Id<NSArray<TodoClass>>;
}
