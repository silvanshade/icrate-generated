//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSDrawerState {
    #[deprecated = "Drawers are deprecated; consider using NSSplitViewController"]
    NSDrawerClosedState = 0,
    #[deprecated = "Drawers are deprecated; consider using NSSplitViewController"]
    NSDrawerOpeningState = 1,
    #[deprecated = "Drawers are deprecated; consider using NSSplitViewController"]
    NSDrawerOpenState = 2,
    #[deprecated = "Drawers are deprecated; consider using NSSplitViewController"]
    NSDrawerClosingState = 3,
}

#[objc2::interface(
    unsafe super = NSResponder,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[deprecated = "Drawers are deprecated; consider using NSSplitViewController"]
    #[cfg(feature = "AppKit_NSDrawer")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSDrawer;
}

#[cfg(feature = "AppKit_NSDrawer")]
unsafe impl NSAccessibility for NSDrawer {}

#[cfg(feature = "AppKit_NSDrawer")]
unsafe impl NSAccessibilityElementProtocol for NSDrawer {}

#[cfg(feature = "AppKit_NSDrawer")]
unsafe impl NSCoding for NSDrawer {}

#[cfg(feature = "AppKit_NSDrawer")]
unsafe impl NSObjectProtocol for NSDrawer {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSDrawer")]
    #[deprecated = "Drawers are deprecated; consider using NSSplitViewController"]
    pub type NSDrawer;

    #[objc2::method(sel = "initWithContentSize:preferredEdge:", managed = "Init")]
    pub unsafe fn initWithContentSize_preferredEdge(
        this: Option<Allocated<Self>>,
        content_size: NSSize,
        edge: NSRectEdge,
    ) -> Id<Self>;

    #[cfg(feature = "AppKit_NSWindow")]
    #[objc2::method(sel = "parentWindow", managed = "Other")]
    pub unsafe fn parentWindow(&self) -> Option<Id<NSWindow>>;

    #[cfg(feature = "AppKit_NSWindow")]
    #[objc2::method(sel = "setParentWindow:")]
    pub unsafe fn setParentWindow(&self, parent_window: Option<&NSWindow>);

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "contentView", managed = "Other")]
    pub unsafe fn contentView(&self) -> Option<Id<NSView>>;

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "setContentView:")]
    pub unsafe fn setContentView(&self, content_view: Option<&NSView>);

    #[objc2::method(sel = "preferredEdge")]
    pub unsafe fn preferredEdge(&self) -> NSRectEdge;

    #[objc2::method(sel = "setPreferredEdge:")]
    pub unsafe fn setPreferredEdge(&self, preferred_edge: NSRectEdge);

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn NSDrawerDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(&self, delegate: Option<&ProtocolObject<dyn NSDrawerDelegate>>);

    #[objc2::method(sel = "open")]
    pub unsafe fn open(&self);

    #[objc2::method(sel = "openOnEdge:")]
    pub unsafe fn openOnEdge(&self, edge: NSRectEdge);

    #[objc2::method(sel = "close")]
    pub unsafe fn close(&self);

    #[objc2::method(sel = "open:")]
    pub unsafe fn open_(&self, sender: Option<&Object>);

    #[objc2::method(sel = "close:")]
    pub unsafe fn close_(&self, sender: Option<&Object>);

    #[objc2::method(sel = "toggle:")]
    pub unsafe fn toggle(&self, sender: Option<&Object>);

    #[objc2::method(sel = "state")]
    pub unsafe fn state(&self) -> NSInteger;

    #[objc2::method(sel = "edge")]
    pub unsafe fn edge(&self) -> NSRectEdge;

    #[objc2::method(sel = "contentSize")]
    pub unsafe fn contentSize(&self) -> NSSize;

    #[objc2::method(sel = "setContentSize:")]
    pub unsafe fn setContentSize(&self, content_size: NSSize);

    #[objc2::method(sel = "minContentSize")]
    pub unsafe fn minContentSize(&self) -> NSSize;

    #[objc2::method(sel = "setMinContentSize:")]
    pub unsafe fn setMinContentSize(&self, min_content_size: NSSize);

    #[objc2::method(sel = "maxContentSize")]
    pub unsafe fn maxContentSize(&self) -> NSSize;

    #[objc2::method(sel = "setMaxContentSize:")]
    pub unsafe fn setMaxContentSize(&self, max_content_size: NSSize);

    #[objc2::method(sel = "leadingOffset")]
    pub unsafe fn leadingOffset(&self) -> CGFloat;

    #[objc2::method(sel = "setLeadingOffset:")]
    pub unsafe fn setLeadingOffset(&self, leading_offset: CGFloat);

    #[objc2::method(sel = "trailingOffset")]
    pub unsafe fn trailingOffset(&self) -> CGFloat;

    #[objc2::method(sel = "setTrailingOffset:")]
    pub unsafe fn setTrailingOffset(&self, trailing_offset: CGFloat);
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSWindow")]
    pub type NSWindow;

    #[cfg(all(feature = "AppKit_NSDrawer", feature = "Foundation_NSArray"))]
    #[deprecated = "Drawers are deprecated; consider using NSSplitViewController"]
    #[objc2::method(sel = "drawers", managed = "Other")]
    pub unsafe fn drawers(&self) -> Option<Id<NSArray<NSDrawer>>>;
}

#[objc2::protocol]
pub unsafe trait NSDrawerDelegate: NSObjectProtocol {
    #[cfg(feature = "AppKit_NSDrawer")]
    #[deprecated = "Drawers are deprecated; consider using NSSplitViewController"]
    #[objc2::method(optional, sel = "drawerShouldOpen:")]
    unsafe fn drawerShouldOpen(&self, sender: &NSDrawer) -> bool;

    #[cfg(feature = "AppKit_NSDrawer")]
    #[deprecated = "Drawers are deprecated; consider using NSSplitViewController"]
    #[objc2::method(optional, sel = "drawerShouldClose:")]
    unsafe fn drawerShouldClose(&self, sender: &NSDrawer) -> bool;

    #[cfg(feature = "AppKit_NSDrawer")]
    #[deprecated = "Drawers are deprecated; consider using NSSplitViewController"]
    #[objc2::method(optional, sel = "drawerWillResizeContents:toSize:")]
    unsafe fn drawerWillResizeContents_toSize(
        &self,
        sender: &NSDrawer,
        content_size: NSSize,
    ) -> NSSize;

    #[cfg(feature = "Foundation_NSNotification")]
    #[deprecated = "Drawers are deprecated; consider using NSSplitViewController"]
    #[objc2::method(optional, sel = "drawerWillOpen:")]
    unsafe fn drawerWillOpen(&self, notification: &NSNotification);

    #[cfg(feature = "Foundation_NSNotification")]
    #[deprecated = "Drawers are deprecated; consider using NSSplitViewController"]
    #[objc2::method(optional, sel = "drawerDidOpen:")]
    unsafe fn drawerDidOpen(&self, notification: &NSNotification);

    #[cfg(feature = "Foundation_NSNotification")]
    #[deprecated = "Drawers are deprecated; consider using NSSplitViewController"]
    #[objc2::method(optional, sel = "drawerWillClose:")]
    unsafe fn drawerWillClose(&self, notification: &NSNotification);

    #[cfg(feature = "Foundation_NSNotification")]
    #[deprecated = "Drawers are deprecated; consider using NSSplitViewController"]
    #[objc2::method(optional, sel = "drawerDidClose:")]
    unsafe fn drawerDidClose(&self, notification: &NSNotification);
}

extern_static!(NSDrawerWillOpenNotification: &'static NSNotificationName);

extern_static!(NSDrawerDidOpenNotification: &'static NSNotificationName);

extern_static!(NSDrawerWillCloseNotification: &'static NSNotificationName);

extern_static!(NSDrawerDidCloseNotification: &'static NSNotificationName);
