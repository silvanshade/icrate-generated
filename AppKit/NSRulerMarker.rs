//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSRulerMarker")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSRulerMarker;
}

#[cfg(feature = "AppKit_NSRulerMarker")]
unsafe impl NSCoding for NSRulerMarker {}

#[cfg(feature = "AppKit_NSRulerMarker")]
unsafe impl NSObjectProtocol for NSRulerMarker {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSRulerMarker")]
    pub type NSRulerMarker;

    #[cfg(all(feature = "AppKit_NSImage", feature = "AppKit_NSRulerView"))]
    #[objc2::method(
        sel = "initWithRulerView:markerLocation:image:imageOrigin:",
        managed = "Init"
    )]
    pub unsafe fn initWithRulerView_markerLocation_image_imageOrigin(
        this: Option<Allocated<Self>>,
        ruler: &NSRulerView,
        location: CGFloat,
        image: &NSImage,
        image_origin: NSPoint,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, coder: &NSCoder) -> Id<Self>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(feature = "AppKit_NSRulerView")]
    #[objc2::method(sel = "ruler", managed = "Other")]
    pub unsafe fn ruler(&self) -> Option<Id<NSRulerView>>;

    #[objc2::method(sel = "markerLocation")]
    pub unsafe fn markerLocation(&self) -> CGFloat;

    #[objc2::method(sel = "setMarkerLocation:")]
    pub unsafe fn setMarkerLocation(&self, marker_location: CGFloat);

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "image", managed = "Other")]
    pub unsafe fn image(&self) -> Id<NSImage>;

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "setImage:")]
    pub unsafe fn setImage(&self, image: &NSImage);

    #[objc2::method(sel = "imageOrigin")]
    pub unsafe fn imageOrigin(&self) -> NSPoint;

    #[objc2::method(sel = "setImageOrigin:")]
    pub unsafe fn setImageOrigin(&self, image_origin: NSPoint);

    #[objc2::method(sel = "isMovable")]
    pub unsafe fn isMovable(&self) -> bool;

    #[objc2::method(sel = "setMovable:")]
    pub unsafe fn setMovable(&self, movable: bool);

    #[objc2::method(sel = "isRemovable")]
    pub unsafe fn isRemovable(&self) -> bool;

    #[objc2::method(sel = "setRemovable:")]
    pub unsafe fn setRemovable(&self, removable: bool);

    #[objc2::method(sel = "isDragging")]
    pub unsafe fn isDragging(&self) -> bool;

    #[objc2::method(sel = "representedObject", managed = "Other")]
    pub unsafe fn representedObject(&self) -> Option<Id<Object>>;

    #[objc2::method(sel = "setRepresentedObject:")]
    pub unsafe fn setRepresentedObject(&self, represented_object: Option<&Object>);

    #[objc2::method(sel = "imageRectInRuler")]
    pub unsafe fn imageRectInRuler(&self) -> NSRect;

    #[objc2::method(sel = "thicknessRequiredInRuler")]
    pub unsafe fn thicknessRequiredInRuler(&self) -> CGFloat;

    #[objc2::method(sel = "drawRect:")]
    pub unsafe fn drawRect(&self, rect: NSRect);

    #[cfg(feature = "AppKit_NSEvent")]
    #[objc2::method(sel = "trackMouse:adding:")]
    pub unsafe fn trackMouse_adding(&self, mouse_down_event: &NSEvent, is_adding: bool) -> bool;
}
