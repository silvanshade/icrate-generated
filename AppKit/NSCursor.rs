//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSCursor")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSCursor;
}

#[cfg(feature = "AppKit_NSCursor")]
unsafe impl NSCoding for NSCursor {}

#[cfg(feature = "AppKit_NSCursor")]
unsafe impl NSObjectProtocol for NSCursor {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSCursor")]
    pub type NSCursor;

    #[objc2::method(sel = "currentCursor", managed = "Other")]
    pub unsafe fn currentCursor() -> Id<NSCursor>;

    #[objc2::method(sel = "currentSystemCursor", managed = "Other")]
    pub unsafe fn currentSystemCursor() -> Option<Id<NSCursor>>;

    #[objc2::method(sel = "arrowCursor", managed = "Other")]
    pub unsafe fn arrowCursor() -> Id<NSCursor>;

    #[objc2::method(sel = "IBeamCursor", managed = "Other")]
    pub unsafe fn IBeamCursor() -> Id<NSCursor>;

    #[objc2::method(sel = "pointingHandCursor", managed = "Other")]
    pub unsafe fn pointingHandCursor() -> Id<NSCursor>;

    #[objc2::method(sel = "closedHandCursor", managed = "Other")]
    pub unsafe fn closedHandCursor() -> Id<NSCursor>;

    #[objc2::method(sel = "openHandCursor", managed = "Other")]
    pub unsafe fn openHandCursor() -> Id<NSCursor>;

    #[objc2::method(sel = "resizeLeftCursor", managed = "Other")]
    pub unsafe fn resizeLeftCursor() -> Id<NSCursor>;

    #[objc2::method(sel = "resizeRightCursor", managed = "Other")]
    pub unsafe fn resizeRightCursor() -> Id<NSCursor>;

    #[objc2::method(sel = "resizeLeftRightCursor", managed = "Other")]
    pub unsafe fn resizeLeftRightCursor() -> Id<NSCursor>;

    #[objc2::method(sel = "resizeUpCursor", managed = "Other")]
    pub unsafe fn resizeUpCursor() -> Id<NSCursor>;

    #[objc2::method(sel = "resizeDownCursor", managed = "Other")]
    pub unsafe fn resizeDownCursor() -> Id<NSCursor>;

    #[objc2::method(sel = "resizeUpDownCursor", managed = "Other")]
    pub unsafe fn resizeUpDownCursor() -> Id<NSCursor>;

    #[objc2::method(sel = "crosshairCursor", managed = "Other")]
    pub unsafe fn crosshairCursor() -> Id<NSCursor>;

    #[objc2::method(sel = "disappearingItemCursor", managed = "Other")]
    pub unsafe fn disappearingItemCursor() -> Id<NSCursor>;

    #[objc2::method(sel = "operationNotAllowedCursor", managed = "Other")]
    pub unsafe fn operationNotAllowedCursor() -> Id<NSCursor>;

    #[objc2::method(sel = "dragLinkCursor", managed = "Other")]
    pub unsafe fn dragLinkCursor() -> Id<NSCursor>;

    #[objc2::method(sel = "dragCopyCursor", managed = "Other")]
    pub unsafe fn dragCopyCursor() -> Id<NSCursor>;

    #[objc2::method(sel = "contextualMenuCursor", managed = "Other")]
    pub unsafe fn contextualMenuCursor() -> Id<NSCursor>;

    #[objc2::method(sel = "IBeamCursorForVerticalLayout", managed = "Other")]
    pub unsafe fn IBeamCursorForVerticalLayout() -> Id<NSCursor>;

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "initWithImage:hotSpot:", managed = "Init")]
    pub unsafe fn initWithImage_hotSpot(
        this: Option<Allocated<Self>>,
        new_image: &NSImage,
        point: NSPoint,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, coder: &NSCoder) -> Id<Self>;

    #[objc2::method(sel = "hide")]
    pub unsafe fn hide();

    #[objc2::method(sel = "unhide")]
    pub unsafe fn unhide();

    #[objc2::method(sel = "setHiddenUntilMouseMoves:")]
    pub unsafe fn setHiddenUntilMouseMoves(flag: bool);

    #[objc2::method(sel = "pop")]
    pub unsafe fn pop_class();

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "image", managed = "Other")]
    pub unsafe fn image(&self) -> Id<NSImage>;

    #[objc2::method(sel = "hotSpot")]
    pub unsafe fn hotSpot(&self) -> NSPoint;

    #[objc2::method(sel = "push")]
    pub unsafe fn push(&self);

    #[objc2::method(sel = "pop")]
    pub unsafe fn pop(&self);

    #[objc2::method(sel = "set")]
    pub unsafe fn set(&self);
}

extern_static!(NSAppKitVersionNumberWithCursorSizeSupport: NSAppKitVersion = 682.0);

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSCursor")]
    pub type NSCursor;

    #[cfg(all(feature = "AppKit_NSColor", feature = "AppKit_NSImage"))]
    #[deprecated = "Color hints are ignored. Use -initWithImage:hotSpot: instead"]
    #[objc2::method(
        sel = "initWithImage:foregroundColorHint:backgroundColorHint:hotSpot:",
        managed = "Init"
    )]
    pub unsafe fn initWithImage_foregroundColorHint_backgroundColorHint_hotSpot(
        this: Option<Allocated<Self>>,
        new_image: &NSImage,
        fg: Option<&NSColor>,
        bg: Option<&NSColor>,
        hot_spot: NSPoint,
    ) -> Id<Self>;

    #[deprecated = "setOnMouseExited is unused and should not be called"]
    #[objc2::method(sel = "setOnMouseExited:")]
    pub unsafe fn setOnMouseExited(&self, flag: bool);

    #[deprecated = "setOnMouseEntered is unused and should not be called"]
    #[objc2::method(sel = "setOnMouseEntered:")]
    pub unsafe fn setOnMouseEntered(&self, flag: bool);

    #[deprecated = "isSetOnMouseExited is unused"]
    #[objc2::method(sel = "isSetOnMouseExited")]
    pub unsafe fn isSetOnMouseExited(&self) -> bool;

    #[deprecated = "isSetOnMouseEntered is unused"]
    #[objc2::method(sel = "isSetOnMouseEntered")]
    pub unsafe fn isSetOnMouseEntered(&self) -> bool;

    #[cfg(feature = "AppKit_NSEvent")]
    #[deprecated = "mouseEntered: is unused and should not be called"]
    #[objc2::method(sel = "mouseEntered:")]
    pub unsafe fn mouseEntered(&self, event: &NSEvent);

    #[cfg(feature = "AppKit_NSEvent")]
    #[deprecated = "mouseExited: is unused and should not be called"]
    #[objc2::method(sel = "mouseExited:")]
    pub unsafe fn mouseExited(&self, event: &NSEvent);
}
