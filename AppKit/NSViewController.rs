//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_options]
#[underlying(NSUInteger)]
pub enum NSViewControllerTransitionOptions {
    NSViewControllerTransitionNone = 0x0,
    NSViewControllerTransitionCrossfade = 0x1,
    NSViewControllerTransitionSlideUp = 0x10,
    NSViewControllerTransitionSlideDown = 0x20,
    NSViewControllerTransitionSlideLeft = 0x40,
    NSViewControllerTransitionSlideRight = 0x80,
    NSViewControllerTransitionSlideForward = 0x140,
    NSViewControllerTransitionSlideBackward = 0x180,
    NSViewControllerTransitionAllowUserInteraction = 0x1000,
}

#[objc2::interface(
    unsafe super = NSResponder,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSViewController")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSViewController;
}

#[cfg(feature = "AppKit_NSViewController")]
unsafe impl NSCoding for NSViewController {}

#[cfg(feature = "AppKit_NSViewController")]
unsafe impl NSEditor for NSViewController {}

#[cfg(feature = "AppKit_NSViewController")]
unsafe impl NSObjectProtocol for NSViewController {}

#[cfg(feature = "AppKit_NSViewController")]
unsafe impl NSSeguePerforming for NSViewController {}

#[cfg(feature = "AppKit_NSViewController")]
unsafe impl NSUserInterfaceItemIdentification for NSViewController {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSViewController")]
    pub type NSViewController;

    #[cfg(feature = "Foundation_NSBundle")]
    #[objc2::method(sel = "initWithNibName:bundle:", managed = "Init")]
    pub unsafe fn initWithNibName_bundle(
        this: Option<Allocated<Self>>,
        nib_name_or_nil: Option<&NSNibName>,
        nib_bundle_or_nil: Option<&NSBundle>,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, coder: &NSCoder)
        -> Option<Id<Self>>;

    #[objc2::method(sel = "nibName", managed = "Other")]
    pub unsafe fn nibName(&self) -> Option<Id<NSNibName>>;

    #[cfg(feature = "Foundation_NSBundle")]
    #[objc2::method(sel = "nibBundle", managed = "Other")]
    pub unsafe fn nibBundle(&self) -> Option<Id<NSBundle>>;

    #[objc2::method(sel = "representedObject", managed = "Other")]
    pub unsafe fn representedObject(&self) -> Option<Id<Object>>;

    #[objc2::method(sel = "setRepresentedObject:")]
    pub unsafe fn setRepresentedObject(&self, represented_object: Option<&Object>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "title", managed = "Other")]
    pub unsafe fn title(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setTitle:")]
    pub unsafe fn setTitle(&self, title: Option<&NSString>);

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "view", managed = "Other")]
    pub unsafe fn view(&self) -> Id<NSView>;

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "setView:")]
    pub unsafe fn setView(&self, view: &NSView);

    #[objc2::method(sel = "loadView")]
    pub unsafe fn loadView(&self);

    #[objc2::method(sel = "commitEditingWithDelegate:didCommitSelector:contextInfo:")]
    pub unsafe fn commitEditingWithDelegate_didCommitSelector_contextInfo(
        &self,
        delegate: Option<&Object>,
        did_commit_selector: Option<Sel>,
        context_info: *mut c_void,
    );

    #[objc2::method(sel = "commitEditing")]
    pub unsafe fn commitEditing(&self) -> bool;

    #[objc2::method(sel = "discardEditing")]
    pub unsafe fn discardEditing(&self);

    #[objc2::method(sel = "viewDidLoad")]
    pub unsafe fn viewDidLoad(&self);

    #[objc2::method(sel = "isViewLoaded")]
    pub unsafe fn isViewLoaded(&self) -> bool;

    #[objc2::method(sel = "viewWillAppear")]
    pub unsafe fn viewWillAppear(&self);

    #[objc2::method(sel = "viewDidAppear")]
    pub unsafe fn viewDidAppear(&self);

    #[objc2::method(sel = "viewWillDisappear")]
    pub unsafe fn viewWillDisappear(&self);

    #[objc2::method(sel = "viewDidDisappear")]
    pub unsafe fn viewDidDisappear(&self);

    #[objc2::method(sel = "preferredContentSize")]
    pub unsafe fn preferredContentSize(&self) -> NSSize;

    #[objc2::method(sel = "setPreferredContentSize:")]
    pub unsafe fn setPreferredContentSize(&self, preferred_content_size: NSSize);

    #[objc2::method(sel = "updateViewConstraints")]
    pub unsafe fn updateViewConstraints(&self);

    #[objc2::method(sel = "viewWillLayout")]
    pub unsafe fn viewWillLayout(&self);

    #[objc2::method(sel = "viewDidLayout")]
    pub unsafe fn viewDidLayout(&self);
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSViewController")]
    pub type NSViewController;

    #[objc2::method(sel = "presentViewController:animator:")]
    pub unsafe fn presentViewController_animator(
        &self,
        view_controller: &NSViewController,
        animator: &ProtocolObject<dyn NSViewControllerPresentationAnimator>,
    );

    #[objc2::method(sel = "dismissViewController:")]
    pub unsafe fn dismissViewController(&self, view_controller: &NSViewController);

    #[objc2::method(sel = "dismissController:")]
    pub unsafe fn dismissController(&self, sender: Option<&Object>);

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "presentedViewControllers", managed = "Other")]
    pub unsafe fn presentedViewControllers(&self) -> Option<Id<NSArray<NSViewController>>>;

    #[objc2::method(sel = "presentingViewController", managed = "Other")]
    pub unsafe fn presentingViewController(&self) -> Option<Id<NSViewController>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSViewController")]
    pub type NSViewController;

    #[objc2::method(sel = "presentViewControllerAsSheet:")]
    pub unsafe fn presentViewControllerAsSheet(&self, view_controller: &NSViewController);

    #[objc2::method(sel = "presentViewControllerAsModalWindow:")]
    pub unsafe fn presentViewControllerAsModalWindow(&self, view_controller: &NSViewController);

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(
        sel = "presentViewController:asPopoverRelativeToRect:ofView:preferredEdge:behavior:"
    )]
    pub unsafe fn presentViewController_asPopoverRelativeToRect_ofView_preferredEdge_behavior(
        &self,
        view_controller: &NSViewController,
        positioning_rect: NSRect,
        positioning_view: &NSView,
        preferred_edge: NSRectEdge,
        behavior: NSPopoverBehavior,
    );

    #[objc2::method(
        sel = "transitionFromViewController:toViewController:options:completionHandler:"
    )]
    pub unsafe fn transitionFromViewController_toViewController_options_completionHandler(
        &self,
        from_view_controller: &NSViewController,
        to_view_controller: &NSViewController,
        options: NSViewControllerTransitionOptions,
        completion: Option<&Block<(), ()>>,
    );
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSViewController")]
    pub type NSViewController;

    #[objc2::method(sel = "parentViewController", managed = "Other")]
    pub unsafe fn parentViewController(&self) -> Option<Id<NSViewController>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "childViewControllers", managed = "Other")]
    pub unsafe fn childViewControllers(&self) -> Id<NSArray<NSViewController>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "setChildViewControllers:")]
    pub unsafe fn setChildViewControllers(
        &self,
        child_view_controllers: &NSArray<NSViewController>,
    );

    #[objc2::method(sel = "addChildViewController:")]
    pub unsafe fn addChildViewController(&self, child_view_controller: &NSViewController);

    #[objc2::method(sel = "removeFromParentViewController")]
    pub unsafe fn removeFromParentViewController(&self);

    #[objc2::method(sel = "insertChildViewController:atIndex:")]
    pub unsafe fn insertChildViewController_atIndex(
        &self,
        child_view_controller: &NSViewController,
        index: NSInteger,
    );

    #[objc2::method(sel = "removeChildViewControllerAtIndex:")]
    pub unsafe fn removeChildViewControllerAtIndex(&self, index: NSInteger);

    #[objc2::method(sel = "preferredContentSizeDidChangeForViewController:")]
    pub unsafe fn preferredContentSizeDidChangeForViewController(
        &self,
        view_controller: &NSViewController,
    );

    #[objc2::method(sel = "viewWillTransitionToSize:")]
    pub unsafe fn viewWillTransitionToSize(&self, new_size: NSSize);
}

#[objc2::protocol]
pub unsafe trait NSViewControllerPresentationAnimator: NSObjectProtocol {
    #[cfg(feature = "AppKit_NSViewController")]
    #[objc2::method(sel = "animatePresentationOfViewController:fromViewController:")]
    unsafe fn animatePresentationOfViewController_fromViewController(
        &self,
        view_controller: &NSViewController,
        from_view_controller: &NSViewController,
    );

    #[cfg(feature = "AppKit_NSViewController")]
    #[objc2::method(sel = "animateDismissalOfViewController:fromViewController:")]
    unsafe fn animateDismissalOfViewController_fromViewController(
        &self,
        view_controller: &NSViewController,
        from_view_controller: &NSViewController,
    );
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSViewController")]
    pub type NSViewController;

    #[cfg(feature = "AppKit_NSStoryboard")]
    #[objc2::method(sel = "storyboard", managed = "Other")]
    pub unsafe fn storyboard(&self) -> Option<Id<NSStoryboard>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSViewController")]
    pub type NSViewController;

    #[cfg(feature = "Foundation_NSExtensionContext")]
    #[objc2::method(sel = "extensionContext", managed = "Other")]
    pub unsafe fn extensionContext(&self) -> Option<Id<NSExtensionContext>>;

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "sourceItemView", managed = "Other")]
    pub unsafe fn sourceItemView(&self) -> Option<Id<NSView>>;

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "setSourceItemView:")]
    pub unsafe fn setSourceItemView(&self, source_item_view: Option<&NSView>);

    #[objc2::method(sel = "preferredScreenOrigin")]
    pub unsafe fn preferredScreenOrigin(&self) -> NSPoint;

    #[objc2::method(sel = "setPreferredScreenOrigin:")]
    pub unsafe fn setPreferredScreenOrigin(&self, preferred_screen_origin: NSPoint);

    #[objc2::method(sel = "preferredMinimumSize")]
    pub unsafe fn preferredMinimumSize(&self) -> NSSize;

    #[objc2::method(sel = "preferredMaximumSize")]
    pub unsafe fn preferredMaximumSize(&self) -> NSSize;
}

#[cfg(feature = "AppKit_NSViewController")]
unsafe impl NSExtensionRequestHandling for NSViewController {}
