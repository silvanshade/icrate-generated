//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSControl,
    unsafe inherits = [
        NSView,
        NSResponder,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextField")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSTextField;
}

#[cfg(feature = "AppKit_NSTextField")]
unsafe impl NSAccessibility for NSTextField {}

#[cfg(feature = "AppKit_NSTextField")]
unsafe impl NSAccessibilityElementProtocol for NSTextField {}

#[cfg(feature = "AppKit_NSTextField")]
unsafe impl NSAccessibilityNavigableStaticText for NSTextField {}

#[cfg(feature = "AppKit_NSTextField")]
unsafe impl NSAccessibilityStaticText for NSTextField {}

#[cfg(feature = "AppKit_NSTextField")]
unsafe impl NSAnimatablePropertyContainer for NSTextField {}

#[cfg(feature = "AppKit_NSTextField")]
unsafe impl NSAppearanceCustomization for NSTextField {}

#[cfg(feature = "AppKit_NSTextField")]
unsafe impl NSCoding for NSTextField {}

#[cfg(feature = "AppKit_NSTextField")]
unsafe impl NSDraggingDestination for NSTextField {}

#[cfg(feature = "AppKit_NSTextField")]
unsafe impl NSObjectProtocol for NSTextField {}

#[cfg(feature = "AppKit_NSTextField")]
unsafe impl NSTextContent for NSTextField {}

#[cfg(feature = "AppKit_NSTextField")]
unsafe impl NSUserInterfaceItemIdentification for NSTextField {}

#[cfg(feature = "AppKit_NSTextField")]
unsafe impl NSUserInterfaceValidations for NSTextField {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextField")]
    pub type NSTextField;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "placeholderString", managed = "Other")]
    pub unsafe fn placeholderString(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setPlaceholderString:")]
    pub unsafe fn setPlaceholderString(&self, placeholder_string: Option<&NSString>);

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "placeholderAttributedString", managed = "Other")]
    pub unsafe fn placeholderAttributedString(&self) -> Option<Id<NSAttributedString>>;

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "setPlaceholderAttributedString:")]
    pub unsafe fn setPlaceholderAttributedString(
        &self,
        placeholder_attributed_string: Option<&NSAttributedString>,
    );

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "backgroundColor", managed = "Other")]
    pub unsafe fn backgroundColor(&self) -> Option<Id<NSColor>>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "setBackgroundColor:")]
    pub unsafe fn setBackgroundColor(&self, background_color: Option<&NSColor>);

    #[objc2::method(sel = "drawsBackground")]
    pub unsafe fn drawsBackground(&self) -> bool;

    #[objc2::method(sel = "setDrawsBackground:")]
    pub unsafe fn setDrawsBackground(&self, draws_background: bool);

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "textColor", managed = "Other")]
    pub unsafe fn textColor(&self) -> Option<Id<NSColor>>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "setTextColor:")]
    pub unsafe fn setTextColor(&self, text_color: Option<&NSColor>);

    #[objc2::method(sel = "isBordered")]
    pub unsafe fn isBordered(&self) -> bool;

    #[objc2::method(sel = "setBordered:")]
    pub unsafe fn setBordered(&self, bordered: bool);

    #[objc2::method(sel = "isBezeled")]
    pub unsafe fn isBezeled(&self) -> bool;

    #[objc2::method(sel = "setBezeled:")]
    pub unsafe fn setBezeled(&self, bezeled: bool);

    #[objc2::method(sel = "isEditable")]
    pub unsafe fn isEditable(&self) -> bool;

    #[objc2::method(sel = "setEditable:")]
    pub unsafe fn setEditable(&self, editable: bool);

    #[objc2::method(sel = "isSelectable")]
    pub unsafe fn isSelectable(&self) -> bool;

    #[objc2::method(sel = "setSelectable:")]
    pub unsafe fn setSelectable(&self, selectable: bool);

    #[objc2::method(sel = "selectText:")]
    pub unsafe fn selectText(&self, sender: Option<&Object>);

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn NSTextFieldDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(&self, delegate: Option<&ProtocolObject<dyn NSTextFieldDelegate>>);

    #[cfg(feature = "AppKit_NSText")]
    #[objc2::method(sel = "textShouldBeginEditing:")]
    pub unsafe fn textShouldBeginEditing(&self, text_object: &NSText) -> bool;

    #[cfg(feature = "AppKit_NSText")]
    #[objc2::method(sel = "textShouldEndEditing:")]
    pub unsafe fn textShouldEndEditing(&self, text_object: &NSText) -> bool;

    #[cfg(feature = "Foundation_NSNotification")]
    #[objc2::method(sel = "textDidBeginEditing:")]
    pub unsafe fn textDidBeginEditing(&self, notification: &NSNotification);

    #[cfg(feature = "Foundation_NSNotification")]
    #[objc2::method(sel = "textDidEndEditing:")]
    pub unsafe fn textDidEndEditing(&self, notification: &NSNotification);

    #[cfg(feature = "Foundation_NSNotification")]
    #[objc2::method(sel = "textDidChange:")]
    pub unsafe fn textDidChange(&self, notification: &NSNotification);

    #[objc2::method(sel = "acceptsFirstResponder")]
    pub unsafe fn acceptsFirstResponder(&self) -> bool;

    #[objc2::method(sel = "bezelStyle")]
    pub unsafe fn bezelStyle(&self) -> NSTextFieldBezelStyle;

    #[objc2::method(sel = "setBezelStyle:")]
    pub unsafe fn setBezelStyle(&self, bezel_style: NSTextFieldBezelStyle);

    #[objc2::method(sel = "preferredMaxLayoutWidth")]
    pub unsafe fn preferredMaxLayoutWidth(&self) -> CGFloat;

    #[objc2::method(sel = "setPreferredMaxLayoutWidth:")]
    pub unsafe fn setPreferredMaxLayoutWidth(&self, preferred_max_layout_width: CGFloat);

    #[objc2::method(sel = "maximumNumberOfLines")]
    pub unsafe fn maximumNumberOfLines(&self) -> NSInteger;

    #[objc2::method(sel = "setMaximumNumberOfLines:")]
    pub unsafe fn setMaximumNumberOfLines(&self, maximum_number_of_lines: NSInteger);

    #[objc2::method(sel = "allowsDefaultTighteningForTruncation")]
    pub unsafe fn allowsDefaultTighteningForTruncation(&self) -> bool;

    #[objc2::method(sel = "setAllowsDefaultTighteningForTruncation:")]
    pub unsafe fn setAllowsDefaultTighteningForTruncation(
        &self,
        allows_default_tightening_for_truncation: bool,
    );

    #[objc2::method(sel = "lineBreakStrategy")]
    pub unsafe fn lineBreakStrategy(&self) -> NSLineBreakStrategy;

    #[objc2::method(sel = "setLineBreakStrategy:")]
    pub unsafe fn setLineBreakStrategy(&self, line_break_strategy: NSLineBreakStrategy);
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextField")]
    pub type NSTextField;

    #[objc2::method(sel = "isAutomaticTextCompletionEnabled")]
    pub unsafe fn isAutomaticTextCompletionEnabled(&self) -> bool;

    #[objc2::method(sel = "setAutomaticTextCompletionEnabled:")]
    pub unsafe fn setAutomaticTextCompletionEnabled(&self, automatic_text_completion_enabled: bool);

    #[objc2::method(sel = "allowsCharacterPickerTouchBarItem")]
    pub unsafe fn allowsCharacterPickerTouchBarItem(&self) -> bool;

    #[objc2::method(sel = "setAllowsCharacterPickerTouchBarItem:")]
    pub unsafe fn setAllowsCharacterPickerTouchBarItem(
        &self,
        allows_character_picker_touch_bar_item: bool,
    );
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextField")]
    pub type NSTextField;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "labelWithString:", managed = "Other")]
    pub unsafe fn labelWithString(string_value: &NSString) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "wrappingLabelWithString:", managed = "Other")]
    pub unsafe fn wrappingLabelWithString(string_value: &NSString) -> Id<Self>;

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "labelWithAttributedString:", managed = "Other")]
    pub unsafe fn labelWithAttributedString(
        attributed_string_value: &NSAttributedString,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "textFieldWithString:", managed = "Other")]
    pub unsafe fn textFieldWithString(string_value: &NSString) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextField")]
    pub type NSTextField;

    #[objc2::method(sel = "allowsEditingTextAttributes")]
    pub unsafe fn allowsEditingTextAttributes(&self) -> bool;

    #[objc2::method(sel = "setAllowsEditingTextAttributes:")]
    pub unsafe fn setAllowsEditingTextAttributes(&self, allows_editing_text_attributes: bool);

    #[objc2::method(sel = "importsGraphics")]
    pub unsafe fn importsGraphics(&self) -> bool;

    #[objc2::method(sel = "setImportsGraphics:")]
    pub unsafe fn setImportsGraphics(&self, imports_graphics: bool);
}

#[objc2::protocol]
pub unsafe trait NSTextFieldDelegate: NSControlTextEditingDelegate {
    #[cfg(all(
        feature = "AppKit_NSTextField",
        feature = "AppKit_NSTextView",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(
        optional,
        sel = "textField:textView:candidatesForSelectedRange:",
        managed = "Other"
    )]
    unsafe fn textField_textView_candidatesForSelectedRange(
        &self,
        text_field: &NSTextField,
        text_view: &NSTextView,
        selected_range: NSRange,
    ) -> Option<Id<NSArray>>;

    #[cfg(all(
        feature = "AppKit_NSTextField",
        feature = "AppKit_NSTextView",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSTextCheckingResult"
    ))]
    #[objc2::method(
        optional,
        sel = "textField:textView:candidates:forSelectedRange:",
        managed = "Other"
    )]
    unsafe fn textField_textView_candidates_forSelectedRange(
        &self,
        text_field: &NSTextField,
        text_view: &NSTextView,
        candidates: &NSArray<NSTextCheckingResult>,
        selected_range: NSRange,
    ) -> Id<NSArray<NSTextCheckingResult>>;

    #[cfg(all(feature = "AppKit_NSTextField", feature = "AppKit_NSTextView"))]
    #[objc2::method(optional, sel = "textField:textView:shouldSelectCandidateAtIndex:")]
    unsafe fn textField_textView_shouldSelectCandidateAtIndex(
        &self,
        text_field: &NSTextField,
        text_view: &NSTextView,
        index: NSUInteger,
    ) -> bool;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextField")]
    pub type NSTextField;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "setTitleWithMnemonic:")]
    pub unsafe fn setTitleWithMnemonic(&self, string_with_ampersand: Option<&NSString>);
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSControl`
    #[cfg(feature = "AppKit_NSTextField")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextField")]
    pub type NSTextField;

    #[objc2::method(sel = "initWithFrame:", managed = "Init")]
    pub unsafe fn initWithFrame(this: Option<Allocated<Self>>, frame_rect: NSRect) -> Id<Self>;
}
