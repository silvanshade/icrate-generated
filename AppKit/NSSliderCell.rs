//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSTickMarkPosition {
    NSTickMarkPositionBelow = 0,
    NSTickMarkPositionAbove = 1,
    NSTickMarkPositionLeading = NSTickMarkPositionAbove,
    NSTickMarkPositionTrailing = NSTickMarkPositionBelow,
}

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSSliderType {
    NSSliderTypeLinear = 0,
    NSSliderTypeCircular = 1,
}

#[objc2::interface(
    unsafe super = NSActionCell,
    unsafe inherits = [
        NSCell,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSSliderCell")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSSliderCell;
}

#[cfg(feature = "AppKit_NSSliderCell")]
unsafe impl NSAccessibility for NSSliderCell {}

#[cfg(feature = "AppKit_NSSliderCell")]
unsafe impl NSAccessibilityElementProtocol for NSSliderCell {}

#[cfg(feature = "AppKit_NSSliderCell")]
unsafe impl NSCoding for NSSliderCell {}

#[cfg(feature = "AppKit_NSSliderCell")]
unsafe impl NSObjectProtocol for NSSliderCell {}

#[cfg(feature = "AppKit_NSSliderCell")]
unsafe impl NSUserInterfaceItemIdentification for NSSliderCell {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSSliderCell")]
    pub type NSSliderCell;

    #[objc2::method(sel = "prefersTrackingUntilMouseUp")]
    pub unsafe fn prefersTrackingUntilMouseUp() -> bool;

    #[objc2::method(sel = "minValue")]
    pub unsafe fn minValue(&self) -> c_double;

    #[objc2::method(sel = "setMinValue:")]
    pub unsafe fn setMinValue(&self, min_value: c_double);

    #[objc2::method(sel = "maxValue")]
    pub unsafe fn maxValue(&self) -> c_double;

    #[objc2::method(sel = "setMaxValue:")]
    pub unsafe fn setMaxValue(&self, max_value: c_double);

    #[objc2::method(sel = "altIncrementValue")]
    pub unsafe fn altIncrementValue(&self) -> c_double;

    #[objc2::method(sel = "setAltIncrementValue:")]
    pub unsafe fn setAltIncrementValue(&self, alt_increment_value: c_double);

    #[objc2::method(sel = "sliderType")]
    pub unsafe fn sliderType(&self) -> NSSliderType;

    #[objc2::method(sel = "setSliderType:")]
    pub unsafe fn setSliderType(&self, slider_type: NSSliderType);

    #[objc2::method(sel = "setVertical:")]
    pub unsafe fn setVertical(&self, vertical: bool);

    #[objc2::method(sel = "trackRect")]
    pub unsafe fn trackRect(&self) -> NSRect;

    #[objc2::method(sel = "knobThickness")]
    pub unsafe fn knobThickness(&self) -> CGFloat;

    #[objc2::method(sel = "knobRectFlipped:")]
    pub unsafe fn knobRectFlipped(&self, flipped: bool) -> NSRect;

    #[objc2::method(sel = "barRectFlipped:")]
    pub unsafe fn barRectFlipped(&self, flipped: bool) -> NSRect;

    #[objc2::method(sel = "drawKnob:")]
    pub unsafe fn drawKnob_(&self, knob_rect: NSRect);

    #[objc2::method(sel = "drawKnob")]
    pub unsafe fn drawKnob(&self);

    #[objc2::method(sel = "drawBarInside:flipped:")]
    pub unsafe fn drawBarInside_flipped(&self, rect: NSRect, flipped: bool);
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSSliderCell")]
    pub type NSSliderCell;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSSliderCell")]
    pub type NSSliderCell;

    #[objc2::method(sel = "numberOfTickMarks")]
    pub unsafe fn numberOfTickMarks(&self) -> NSInteger;

    #[objc2::method(sel = "setNumberOfTickMarks:")]
    pub unsafe fn setNumberOfTickMarks(&self, number_of_tick_marks: NSInteger);

    #[objc2::method(sel = "tickMarkPosition")]
    pub unsafe fn tickMarkPosition(&self) -> NSTickMarkPosition;

    #[objc2::method(sel = "setTickMarkPosition:")]
    pub unsafe fn setTickMarkPosition(&self, tick_mark_position: NSTickMarkPosition);

    #[objc2::method(sel = "allowsTickMarkValuesOnly")]
    pub unsafe fn allowsTickMarkValuesOnly(&self) -> bool;

    #[objc2::method(sel = "setAllowsTickMarkValuesOnly:")]
    pub unsafe fn setAllowsTickMarkValuesOnly(&self, allows_tick_mark_values_only: bool);

    #[objc2::method(sel = "tickMarkValueAtIndex:")]
    pub unsafe fn tickMarkValueAtIndex(&self, index: NSInteger) -> c_double;

    #[objc2::method(sel = "rectOfTickMarkAtIndex:")]
    pub unsafe fn rectOfTickMarkAtIndex(&self, index: NSInteger) -> NSRect;

    #[objc2::method(sel = "indexOfTickMarkAtPoint:")]
    pub unsafe fn indexOfTickMarkAtPoint(&self, point: NSPoint) -> NSInteger;

    #[objc2::method(sel = "closestTickMarkValueToValue:")]
    pub unsafe fn closestTickMarkValueToValue(&self, value: c_double) -> c_double;

    #[objc2::method(sel = "drawTickMarks")]
    pub unsafe fn drawTickMarks(&self);
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSSliderCell")]
    pub type NSSliderCell;

    #[cfg(feature = "AppKit_NSCell")]
    #[deprecated = "-setTitleCell: had no effect since 10.0"]
    #[objc2::method(sel = "setTitleCell:")]
    pub unsafe fn setTitleCell(&self, cell: Option<&NSCell>);

    #[deprecated = "-titleCell has returned nil since 10.0"]
    #[objc2::method(sel = "titleCell", managed = "Other")]
    pub unsafe fn titleCell(&self) -> Option<Id<Object>>;

    #[cfg(feature = "AppKit_NSColor")]
    #[deprecated = "-setTitleColor: had no effect since 10.0"]
    #[objc2::method(sel = "setTitleColor:")]
    pub unsafe fn setTitleColor(&self, new_color: Option<&NSColor>);

    #[cfg(feature = "AppKit_NSColor")]
    #[deprecated = "-titleColor has returned nil since 10.0"]
    #[objc2::method(sel = "titleColor", managed = "Other")]
    pub unsafe fn titleColor(&self) -> Option<Id<NSColor>>;

    #[cfg(feature = "AppKit_NSFont")]
    #[deprecated = "-setTitleFont: had no effect since 10.0"]
    #[objc2::method(sel = "setTitleFont:")]
    pub unsafe fn setTitleFont(&self, font_obj: Option<&NSFont>);

    #[cfg(feature = "AppKit_NSFont")]
    #[deprecated = "-titleFont has returned nil since 10.0"]
    #[objc2::method(sel = "titleFont", managed = "Other")]
    pub unsafe fn titleFont(&self) -> Option<Id<NSFont>>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "-title has returned nil since 10.0"]
    #[objc2::method(sel = "title", managed = "Other")]
    pub unsafe fn title(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "-setTitle: had no effect since 10.0"]
    #[objc2::method(sel = "setTitle:")]
    pub unsafe fn setTitle(&self, string: Option<&NSString>);

    #[deprecated = "-knobThickness has returned 0 since 10.0"]
    #[objc2::method(sel = "setKnobThickness:")]
    pub unsafe fn setKnobThickness(&self, thickness: CGFloat);

    #[cfg(feature = "AppKit_NSImage")]
    #[deprecated = "-setImage: had no effect since 10.0"]
    #[objc2::method(sel = "setImage:")]
    pub unsafe fn setImage(&self, background_image: Option<&NSImage>);

    #[cfg(feature = "AppKit_NSImage")]
    #[deprecated = "-image has returned nil since 10.0"]
    #[objc2::method(sel = "image", managed = "Other")]
    pub unsafe fn image(&self) -> Option<Id<NSImage>>;
}

extern_static!(NSTickMarkBelow: NSTickMarkPosition = NSTickMarkPositionBelow);

extern_static!(NSTickMarkAbove: NSTickMarkPosition = NSTickMarkPositionAbove);

extern_static!(NSTickMarkLeft: NSTickMarkPosition = NSTickMarkPositionLeading);

extern_static!(NSTickMarkRight: NSTickMarkPosition = NSTickMarkPositionTrailing);

extern_static!(NSLinearSlider: NSSliderType = NSSliderTypeLinear);

extern_static!(NSCircularSlider: NSSliderType = NSSliderTypeCircular);

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSCell`
    #[cfg(feature = "AppKit_NSSliderCell")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSSliderCell")]
    pub type NSSliderCell;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initTextCell:", managed = "Init")]
    pub unsafe fn initTextCell(this: Option<Allocated<Self>>, string: &NSString) -> Id<Self>;

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "initImageCell:", managed = "Init")]
    pub unsafe fn initImageCell(this: Option<Allocated<Self>>, image: Option<&NSImage>)
        -> Id<Self>;
}
