//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_options]
#[underlying(NSUInteger)]
pub enum NSFontTraitMask {
    NSItalicFontMask = 0x00000001,
    NSBoldFontMask = 0x00000002,
    NSUnboldFontMask = 0x00000004,
    NSNonStandardCharacterSetFontMask = 0x00000008,
    NSNarrowFontMask = 0x00000010,
    NSExpandedFontMask = 0x00000020,
    NSCondensedFontMask = 0x00000040,
    NSSmallCapsFontMask = 0x00000080,
    NSPosterFontMask = 0x00000100,
    NSCompressedFontMask = 0x00000200,
    NSFixedPitchFontMask = 0x00000400,
    NSUnitalicFontMask = 0x01000000,
}

#[ns_options]
#[underlying(NSUInteger)]
pub enum NSFontCollectionOptions {
    NSFontCollectionApplicationOnlyMask = 1 << 0,
}

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSFontAction {
    NSNoFontChangeAction = 0,
    NSViaPanelFontAction = 1,
    NSAddTraitFontAction = 2,
    NSSizeUpFontAction = 3,
    NSSizeDownFontAction = 4,
    NSHeavierFontAction = 5,
    NSLighterFontAction = 6,
    NSRemoveTraitFontAction = 7,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSFontManager")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSFontManager;
}

#[cfg(feature = "AppKit_NSFontManager")]
unsafe impl NSMenuItemValidation for NSFontManager {}

#[cfg(feature = "AppKit_NSFontManager")]
unsafe impl NSObjectProtocol for NSFontManager {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSFontManager")]
    pub type NSFontManager;

    #[objc2::method(sel = "setFontPanelFactory:")]
    pub unsafe fn setFontPanelFactory(factory_id: Option<&Class>);

    #[objc2::method(sel = "setFontManagerFactory:")]
    pub unsafe fn setFontManagerFactory(factory_id: Option<&Class>);

    #[objc2::method(sel = "sharedFontManager", managed = "Other")]
    pub unsafe fn sharedFontManager() -> Id<NSFontManager>;

    #[objc2::method(sel = "isMultiple")]
    pub unsafe fn isMultiple(&self) -> bool;

    #[cfg(feature = "AppKit_NSFont")]
    #[objc2::method(sel = "selectedFont", managed = "Other")]
    pub unsafe fn selectedFont(&self) -> Option<Id<NSFont>>;

    #[cfg(feature = "AppKit_NSFont")]
    #[objc2::method(sel = "setSelectedFont:isMultiple:")]
    pub unsafe fn setSelectedFont_isMultiple(&self, font_obj: &NSFont, flag: bool);

    #[cfg(feature = "AppKit_NSMenu")]
    #[objc2::method(sel = "setFontMenu:")]
    pub unsafe fn setFontMenu(&self, new_menu: &NSMenu);

    #[cfg(feature = "AppKit_NSMenu")]
    #[objc2::method(sel = "fontMenu:", managed = "Other")]
    pub unsafe fn fontMenu(&self, create: bool) -> Option<Id<NSMenu>>;

    #[cfg(feature = "AppKit_NSFontPanel")]
    #[objc2::method(sel = "fontPanel:", managed = "Other")]
    pub unsafe fn fontPanel(&self, create: bool) -> Option<Id<NSFontPanel>>;

    #[cfg(all(feature = "AppKit_NSFont", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "fontWithFamily:traits:weight:size:", managed = "Other")]
    pub unsafe fn fontWithFamily_traits_weight_size(
        &self,
        family: &NSString,
        traits: NSFontTraitMask,
        weight: NSInteger,
        size: CGFloat,
    ) -> Option<Id<NSFont>>;

    #[cfg(feature = "AppKit_NSFont")]
    #[objc2::method(sel = "traitsOfFont:")]
    pub unsafe fn traitsOfFont(&self, font_obj: &NSFont) -> NSFontTraitMask;

    #[cfg(feature = "AppKit_NSFont")]
    #[objc2::method(sel = "weightOfFont:")]
    pub unsafe fn weightOfFont(&self, font_obj: &NSFont) -> NSInteger;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "availableFonts", managed = "Other")]
    pub unsafe fn availableFonts(&self) -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "availableFontFamilies", managed = "Other")]
    pub unsafe fn availableFontFamilies(&self) -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "availableMembersOfFontFamily:", managed = "Other")]
    pub unsafe fn availableMembersOfFontFamily(
        &self,
        fam: &NSString,
    ) -> Option<Id<NSArray<NSArray>>>;

    #[cfg(feature = "AppKit_NSFont")]
    #[objc2::method(sel = "convertFont:", managed = "Other")]
    pub unsafe fn convertFont(&self, font_obj: &NSFont) -> Id<NSFont>;

    #[cfg(feature = "AppKit_NSFont")]
    #[objc2::method(sel = "convertFont:toSize:", managed = "Other")]
    pub unsafe fn convertFont_toSize(&self, font_obj: &NSFont, size: CGFloat) -> Id<NSFont>;

    #[cfg(all(feature = "AppKit_NSFont", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "convertFont:toFace:", managed = "Other")]
    pub unsafe fn convertFont_toFace(
        &self,
        font_obj: &NSFont,
        typeface: &NSString,
    ) -> Option<Id<NSFont>>;

    #[cfg(all(feature = "AppKit_NSFont", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "convertFont:toFamily:", managed = "Other")]
    pub unsafe fn convertFont_toFamily(&self, font_obj: &NSFont, family: &NSString) -> Id<NSFont>;

    #[cfg(feature = "AppKit_NSFont")]
    #[objc2::method(sel = "convertFont:toHaveTrait:", managed = "Other")]
    pub unsafe fn convertFont_toHaveTrait(
        &self,
        font_obj: &NSFont,
        r#trait: NSFontTraitMask,
    ) -> Id<NSFont>;

    #[cfg(feature = "AppKit_NSFont")]
    #[objc2::method(sel = "convertFont:toNotHaveTrait:", managed = "Other")]
    pub unsafe fn convertFont_toNotHaveTrait(
        &self,
        font_obj: &NSFont,
        r#trait: NSFontTraitMask,
    ) -> Id<NSFont>;

    #[cfg(feature = "AppKit_NSFont")]
    #[objc2::method(sel = "convertWeight:ofFont:", managed = "Other")]
    pub unsafe fn convertWeight_ofFont(&self, up_flag: bool, font_obj: &NSFont) -> Id<NSFont>;

    #[objc2::method(sel = "isEnabled")]
    pub unsafe fn isEnabled(&self) -> bool;

    #[objc2::method(sel = "setEnabled:")]
    pub unsafe fn setEnabled(&self, enabled: bool);

    #[objc2::method(sel = "action")]
    pub unsafe fn action(&self) -> Sel;

    #[objc2::method(sel = "setAction:")]
    pub unsafe fn setAction(&self, action: Sel);

    #[deprecated = "NSFontManager doesn't have any delegate method. This property should not be used."]
    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<Object>>;

    #[deprecated = "NSFontManager doesn't have any delegate method. This property should not be used."]
    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(&self, delegate: Option<&Object>);

    #[objc2::method(sel = "sendAction")]
    pub unsafe fn sendAction(&self) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "localizedNameForFamily:face:", managed = "Other")]
    pub unsafe fn localizedNameForFamily_face(
        &self,
        family: &NSString,
        face_key: Option<&NSString>,
    ) -> Id<NSString>;

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setSelectedAttributes:isMultiple:")]
    pub unsafe fn setSelectedAttributes_isMultiple(
        &self,
        attributes: &NSDictionary<NSString, Object>,
        flag: bool,
    );

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "convertAttributes:", managed = "Other")]
    pub unsafe fn convertAttributes(
        &self,
        attributes: &NSDictionary<NSString, Object>,
    ) -> Id<NSDictionary<NSString, Object>>;

    #[cfg(all(feature = "AppKit_NSFontDescriptor", feature = "Foundation_NSArray"))]
    #[deprecated = "Use -[NSFontDescriptor matchingFontDescriptorsWithMandatoryKeys:] instead"]
    #[objc2::method(sel = "availableFontNamesMatchingFontDescriptor:", managed = "Other")]
    pub unsafe fn availableFontNamesMatchingFontDescriptor(
        &self,
        descriptor: &NSFontDescriptor,
    ) -> Option<Id<NSArray>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[deprecated = "Use +[NSFontCollection allFontCollectionNames] instead"]
    #[objc2::method(sel = "collectionNames", managed = "Other")]
    pub unsafe fn collectionNames(&self) -> Id<NSArray>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[deprecated = "Use -[NSFontCollection matchingDescriptors] instead"]
    #[objc2::method(sel = "fontDescriptorsInCollection:", managed = "Other")]
    pub unsafe fn fontDescriptorsInCollection(
        &self,
        collection_names: &NSString,
    ) -> Option<Id<NSArray>>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "Use +[NSFontCollection showFontCollection:withName:visibility:name:] instead"]
    #[objc2::method(sel = "addCollection:options:")]
    pub unsafe fn addCollection_options(
        &self,
        collection_name: &NSString,
        collection_options: NSFontCollectionOptions,
    ) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "Use +[NSFontCollection hideFontCollectionWithName:visibility:error:] instead"]
    #[objc2::method(sel = "removeCollection:")]
    pub unsafe fn removeCollection(&self, collection_name: &NSString) -> bool;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[deprecated = "Use -[NSMutableFontCollection addQueryForDescriptors:] instead"]
    #[objc2::method(sel = "addFontDescriptors:toCollection:")]
    pub unsafe fn addFontDescriptors_toCollection(
        &self,
        descriptors: &NSArray,
        collection_name: &NSString,
    );

    #[cfg(all(feature = "AppKit_NSFontDescriptor", feature = "Foundation_NSString"))]
    #[deprecated = "Use -[NSMutableFontCollection removeQueryForDescriptors:] instead"]
    #[objc2::method(sel = "removeFontDescriptor:fromCollection:")]
    pub unsafe fn removeFontDescriptor_fromCollection(
        &self,
        descriptor: &NSFontDescriptor,
        collection: &NSString,
    );

    #[objc2::method(sel = "currentFontAction")]
    pub unsafe fn currentFontAction(&self) -> NSFontAction;

    #[objc2::method(sel = "convertFontTraits:")]
    pub unsafe fn convertFontTraits(&self, traits: NSFontTraitMask) -> NSFontTraitMask;

    #[objc2::method(sel = "target", managed = "Other")]
    pub unsafe fn target(&self) -> Option<Id<Object>>;

    #[objc2::method(sel = "setTarget:")]
    pub unsafe fn setTarget(&self, target: Option<&Object>);
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSFontManager")]
    pub type NSFontManager;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "fontNamed:hasTraits:")]
    pub unsafe fn fontNamed_hasTraits(
        &self,
        f_name: &NSString,
        some_traits: NSFontTraitMask,
    ) -> bool;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "availableFontNamesWithTraits:", managed = "Other")]
    pub unsafe fn availableFontNamesWithTraits(
        &self,
        some_traits: NSFontTraitMask,
    ) -> Option<Id<NSArray<NSString>>>;

    #[objc2::method(sel = "addFontTrait:")]
    pub unsafe fn addFontTrait(&self, sender: Option<&Object>);

    #[objc2::method(sel = "removeFontTrait:")]
    pub unsafe fn removeFontTrait(&self, sender: Option<&Object>);

    #[objc2::method(sel = "modifyFontViaPanel:")]
    pub unsafe fn modifyFontViaPanel(&self, sender: Option<&Object>);

    #[objc2::method(sel = "modifyFont:")]
    pub unsafe fn modifyFont(&self, sender: Option<&Object>);

    #[objc2::method(sel = "orderFrontFontPanel:")]
    pub unsafe fn orderFrontFontPanel(&self, sender: Option<&Object>);

    #[objc2::method(sel = "orderFrontStylesPanel:")]
    pub unsafe fn orderFrontStylesPanel(&self, sender: Option<&Object>);
}
