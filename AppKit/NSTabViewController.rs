//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSTabViewControllerTabStyle {
    NSTabViewControllerTabStyleSegmentedControlOnTop = 0,
    NSTabViewControllerTabStyleSegmentedControlOnBottom = 1,
    NSTabViewControllerTabStyleToolbar = 2,
    NSTabViewControllerTabStyleUnspecified = -1,
}

#[objc2::interface(
    unsafe super = NSViewController,
    unsafe inherits = [
        NSResponder,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTabViewController")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSTabViewController;
}

#[cfg(feature = "AppKit_NSTabViewController")]
unsafe impl NSCoding for NSTabViewController {}

#[cfg(feature = "AppKit_NSTabViewController")]
unsafe impl NSEditor for NSTabViewController {}

#[cfg(feature = "AppKit_NSTabViewController")]
unsafe impl NSObjectProtocol for NSTabViewController {}

#[cfg(feature = "AppKit_NSTabViewController")]
unsafe impl NSSeguePerforming for NSTabViewController {}

#[cfg(feature = "AppKit_NSTabViewController")]
unsafe impl NSTabViewDelegate for NSTabViewController {}

#[cfg(feature = "AppKit_NSTabViewController")]
unsafe impl NSToolbarDelegate for NSTabViewController {}

#[cfg(feature = "AppKit_NSTabViewController")]
unsafe impl NSUserInterfaceItemIdentification for NSTabViewController {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTabViewController")]
    pub type NSTabViewController;

    #[objc2::method(sel = "tabStyle")]
    pub unsafe fn tabStyle(&self) -> NSTabViewControllerTabStyle;

    #[objc2::method(sel = "setTabStyle:")]
    pub unsafe fn setTabStyle(&self, tab_style: NSTabViewControllerTabStyle);

    #[cfg(feature = "AppKit_NSTabView")]
    #[objc2::method(sel = "tabView", managed = "Other")]
    pub unsafe fn tabView(&self) -> Id<NSTabView>;

    #[cfg(feature = "AppKit_NSTabView")]
    #[objc2::method(sel = "setTabView:")]
    pub unsafe fn setTabView(&self, tab_view: &NSTabView);

    #[objc2::method(sel = "transitionOptions")]
    pub unsafe fn transitionOptions(&self) -> NSViewControllerTransitionOptions;

    #[objc2::method(sel = "setTransitionOptions:")]
    pub unsafe fn setTransitionOptions(
        &self,
        transition_options: NSViewControllerTransitionOptions,
    );

    #[objc2::method(sel = "canPropagateSelectedChildViewControllerTitle")]
    pub unsafe fn canPropagateSelectedChildViewControllerTitle(&self) -> bool;

    #[objc2::method(sel = "setCanPropagateSelectedChildViewControllerTitle:")]
    pub unsafe fn setCanPropagateSelectedChildViewControllerTitle(
        &self,
        can_propagate_selected_child_view_controller_title: bool,
    );

    #[cfg(all(feature = "AppKit_NSTabViewItem", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "tabViewItems", managed = "Other")]
    pub unsafe fn tabViewItems(&self) -> Id<NSArray<NSTabViewItem>>;

    #[cfg(all(feature = "AppKit_NSTabViewItem", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "setTabViewItems:")]
    pub unsafe fn setTabViewItems(&self, tab_view_items: &NSArray<NSTabViewItem>);

    #[objc2::method(sel = "selectedTabViewItemIndex")]
    pub unsafe fn selectedTabViewItemIndex(&self) -> NSInteger;

    #[objc2::method(sel = "setSelectedTabViewItemIndex:")]
    pub unsafe fn setSelectedTabViewItemIndex(&self, selected_tab_view_item_index: NSInteger);

    #[cfg(feature = "AppKit_NSTabViewItem")]
    #[objc2::method(sel = "addTabViewItem:")]
    pub unsafe fn addTabViewItem(&self, tab_view_item: &NSTabViewItem);

    #[cfg(feature = "AppKit_NSTabViewItem")]
    #[objc2::method(sel = "insertTabViewItem:atIndex:")]
    pub unsafe fn insertTabViewItem_atIndex(&self, tab_view_item: &NSTabViewItem, index: NSInteger);

    #[cfg(feature = "AppKit_NSTabViewItem")]
    #[objc2::method(sel = "removeTabViewItem:")]
    pub unsafe fn removeTabViewItem(&self, tab_view_item: &NSTabViewItem);

    #[cfg(feature = "AppKit_NSTabViewItem")]
    #[objc2::method(sel = "tabViewItemForViewController:", managed = "Other")]
    pub unsafe fn tabViewItemForViewController(
        &self,
        view_controller: &NSViewController,
    ) -> Option<Id<NSTabViewItem>>;

    #[objc2::method(sel = "viewDidLoad")]
    pub unsafe fn viewDidLoad(&self);

    #[cfg(all(feature = "AppKit_NSTabView", feature = "AppKit_NSTabViewItem"))]
    #[objc2::method(sel = "tabView:willSelectTabViewItem:")]
    pub unsafe fn tabView_willSelectTabViewItem(
        &self,
        tab_view: &NSTabView,
        tab_view_item: Option<&NSTabViewItem>,
    );

    #[cfg(all(feature = "AppKit_NSTabView", feature = "AppKit_NSTabViewItem"))]
    #[objc2::method(sel = "tabView:didSelectTabViewItem:")]
    pub unsafe fn tabView_didSelectTabViewItem(
        &self,
        tab_view: &NSTabView,
        tab_view_item: Option<&NSTabViewItem>,
    );

    #[cfg(all(feature = "AppKit_NSTabView", feature = "AppKit_NSTabViewItem"))]
    #[objc2::method(sel = "tabView:shouldSelectTabViewItem:")]
    pub unsafe fn tabView_shouldSelectTabViewItem(
        &self,
        tab_view: &NSTabView,
        tab_view_item: Option<&NSTabViewItem>,
    ) -> bool;

    #[cfg(all(feature = "AppKit_NSToolbar", feature = "AppKit_NSToolbarItem"))]
    #[objc2::method(
        sel = "toolbar:itemForItemIdentifier:willBeInsertedIntoToolbar:",
        managed = "Other"
    )]
    pub unsafe fn toolbar_itemForItemIdentifier_willBeInsertedIntoToolbar(
        &self,
        toolbar: &NSToolbar,
        item_identifier: &NSToolbarItemIdentifier,
        flag: bool,
    ) -> Option<Id<NSToolbarItem>>;

    #[cfg(all(feature = "AppKit_NSToolbar", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "toolbarDefaultItemIdentifiers:", managed = "Other")]
    pub unsafe fn toolbarDefaultItemIdentifiers(
        &self,
        toolbar: &NSToolbar,
    ) -> Id<NSArray<NSToolbarItemIdentifier>>;

    #[cfg(all(feature = "AppKit_NSToolbar", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "toolbarAllowedItemIdentifiers:", managed = "Other")]
    pub unsafe fn toolbarAllowedItemIdentifiers(
        &self,
        toolbar: &NSToolbar,
    ) -> Id<NSArray<NSToolbarItemIdentifier>>;

    #[cfg(all(feature = "AppKit_NSToolbar", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "toolbarSelectableItemIdentifiers:", managed = "Other")]
    pub unsafe fn toolbarSelectableItemIdentifiers(
        &self,
        toolbar: &NSToolbar,
    ) -> Id<NSArray<NSToolbarItemIdentifier>>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSViewController`
    #[cfg(feature = "AppKit_NSTabViewController")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTabViewController")]
    pub type NSTabViewController;

    #[cfg(feature = "Foundation_NSBundle")]
    #[objc2::method(sel = "initWithNibName:bundle:", managed = "Init")]
    pub unsafe fn initWithNibName_bundle(
        this: Option<Allocated<Self>>,
        nib_name_or_nil: Option<&NSNibName>,
        nib_bundle_or_nil: Option<&NSBundle>,
    ) -> Id<Self>;
}
