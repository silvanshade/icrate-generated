//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_options]
#[underlying(NSUInteger)]
pub enum NSApplicationActivationOptions {
    NSApplicationActivateAllWindows = 1 << 0,
    NSApplicationActivateIgnoringOtherApps = 1 << 1,
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSApplicationActivationPolicy {
    NSApplicationActivationPolicyRegular = 0,
    NSApplicationActivationPolicyAccessory = 1,
    NSApplicationActivationPolicyProhibited = 2,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSRunningApplication")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSRunningApplication;
}

#[cfg(feature = "AppKit_NSRunningApplication")]
unsafe impl NSObjectProtocol for NSRunningApplication {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSRunningApplication")]
    pub type NSRunningApplication;

    #[objc2::method(sel = "isTerminated")]
    pub unsafe fn isTerminated(&self) -> bool;

    #[objc2::method(sel = "isFinishedLaunching")]
    pub unsafe fn isFinishedLaunching(&self) -> bool;

    #[objc2::method(sel = "isHidden")]
    pub unsafe fn isHidden(&self) -> bool;

    #[objc2::method(sel = "isActive")]
    pub unsafe fn isActive(&self) -> bool;

    #[objc2::method(sel = "ownsMenuBar")]
    pub unsafe fn ownsMenuBar(&self) -> bool;

    #[objc2::method(sel = "activationPolicy")]
    pub unsafe fn activationPolicy(&self) -> NSApplicationActivationPolicy;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "localizedName", managed = "Other")]
    pub unsafe fn localizedName(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "bundleIdentifier", managed = "Other")]
    pub unsafe fn bundleIdentifier(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "bundleURL", managed = "Other")]
    pub unsafe fn bundleURL(&self) -> Option<Id<NSURL>>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "executableURL", managed = "Other")]
    pub unsafe fn executableURL(&self) -> Option<Id<NSURL>>;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "launchDate", managed = "Other")]
    pub unsafe fn launchDate(&self) -> Option<Id<NSDate>>;

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "icon", managed = "Other")]
    pub unsafe fn icon(&self) -> Option<Id<NSImage>>;

    #[objc2::method(sel = "executableArchitecture")]
    pub unsafe fn executableArchitecture(&self) -> NSInteger;

    #[objc2::method(sel = "hide")]
    pub unsafe fn hide(&self) -> bool;

    #[objc2::method(sel = "unhide")]
    pub unsafe fn unhide(&self) -> bool;

    #[objc2::method(sel = "activateWithOptions:")]
    pub unsafe fn activateWithOptions(&self, options: NSApplicationActivationOptions) -> bool;

    #[objc2::method(sel = "terminate")]
    pub unsafe fn terminate(&self) -> bool;

    #[objc2::method(sel = "forceTerminate")]
    pub unsafe fn forceTerminate(&self) -> bool;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "runningApplicationsWithBundleIdentifier:", managed = "Other")]
    pub unsafe fn runningApplicationsWithBundleIdentifier(
        bundle_identifier: &NSString,
    ) -> Id<NSArray<NSRunningApplication>>;

    #[objc2::method(sel = "currentApplication", managed = "Other")]
    pub unsafe fn currentApplication() -> Id<NSRunningApplication>;

    #[objc2::method(sel = "terminateAutomaticallyTerminableApplications")]
    pub unsafe fn terminateAutomaticallyTerminableApplications();
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSWorkspace")]
    pub type NSWorkspace;

    #[cfg(all(
        feature = "AppKit_NSRunningApplication",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(sel = "runningApplications", managed = "Other")]
    pub unsafe fn runningApplications(&self) -> Id<NSArray<NSRunningApplication>>;
}
