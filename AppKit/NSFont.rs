//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

extern_static!(NSFontIdentityMatrix: NonNull<CGFloat>);

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSFont")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSFont;
}

#[cfg(feature = "AppKit_NSFont")]
unsafe impl NSCoding for NSFont {}

#[cfg(feature = "AppKit_NSFont")]
unsafe impl NSObjectProtocol for NSFont {}

#[cfg(feature = "AppKit_NSFont")]
unsafe impl NSSecureCoding for NSFont {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSFont")]
    pub type NSFont;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "fontWithName:size:", managed = "Other")]
    pub unsafe fn fontWithName_size(font_name: &NSString, font_size: CGFloat)
        -> Option<Id<NSFont>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "fontWithName:matrix:", managed = "Other")]
    pub unsafe fn fontWithName_matrix(
        font_name: &NSString,
        font_matrix: NonNull<CGFloat>,
    ) -> Option<Id<NSFont>>;

    #[cfg(feature = "AppKit_NSFontDescriptor")]
    #[objc2::method(sel = "fontWithDescriptor:size:", managed = "Other")]
    pub unsafe fn fontWithDescriptor_size(
        font_descriptor: &NSFontDescriptor,
        font_size: CGFloat,
    ) -> Option<Id<NSFont>>;

    #[cfg(all(
        feature = "AppKit_NSFontDescriptor",
        feature = "Foundation_NSAffineTransform"
    ))]
    #[objc2::method(sel = "fontWithDescriptor:textTransform:", managed = "Other")]
    pub unsafe fn fontWithDescriptor_textTransform(
        font_descriptor: &NSFontDescriptor,
        text_transform: Option<&NSAffineTransform>,
    ) -> Option<Id<NSFont>>;

    #[objc2::method(sel = "userFontOfSize:", managed = "Other")]
    pub unsafe fn userFontOfSize(font_size: CGFloat) -> Option<Id<NSFont>>;

    #[objc2::method(sel = "userFixedPitchFontOfSize:", managed = "Other")]
    pub unsafe fn userFixedPitchFontOfSize(font_size: CGFloat) -> Option<Id<NSFont>>;

    #[objc2::method(sel = "setUserFont:")]
    pub unsafe fn setUserFont(font: Option<&NSFont>);

    #[objc2::method(sel = "setUserFixedPitchFont:")]
    pub unsafe fn setUserFixedPitchFont(font: Option<&NSFont>);

    #[objc2::method(sel = "systemFontOfSize:", managed = "Other")]
    pub unsafe fn systemFontOfSize(font_size: CGFloat) -> Id<NSFont>;

    #[objc2::method(sel = "boldSystemFontOfSize:", managed = "Other")]
    pub unsafe fn boldSystemFontOfSize(font_size: CGFloat) -> Id<NSFont>;

    #[objc2::method(sel = "labelFontOfSize:", managed = "Other")]
    pub unsafe fn labelFontOfSize(font_size: CGFloat) -> Id<NSFont>;

    #[objc2::method(sel = "titleBarFontOfSize:", managed = "Other")]
    pub unsafe fn titleBarFontOfSize(font_size: CGFloat) -> Id<NSFont>;

    #[objc2::method(sel = "menuFontOfSize:", managed = "Other")]
    pub unsafe fn menuFontOfSize(font_size: CGFloat) -> Id<NSFont>;

    #[objc2::method(sel = "menuBarFontOfSize:", managed = "Other")]
    pub unsafe fn menuBarFontOfSize(font_size: CGFloat) -> Id<NSFont>;

    #[objc2::method(sel = "messageFontOfSize:", managed = "Other")]
    pub unsafe fn messageFontOfSize(font_size: CGFloat) -> Id<NSFont>;

    #[objc2::method(sel = "paletteFontOfSize:", managed = "Other")]
    pub unsafe fn paletteFontOfSize(font_size: CGFloat) -> Id<NSFont>;

    #[objc2::method(sel = "toolTipsFontOfSize:", managed = "Other")]
    pub unsafe fn toolTipsFontOfSize(font_size: CGFloat) -> Id<NSFont>;

    #[objc2::method(sel = "controlContentFontOfSize:", managed = "Other")]
    pub unsafe fn controlContentFontOfSize(font_size: CGFloat) -> Id<NSFont>;

    #[objc2::method(sel = "systemFontOfSize:weight:", managed = "Other")]
    pub unsafe fn systemFontOfSize_weight(font_size: CGFloat, weight: NSFontWeight) -> Id<NSFont>;

    #[objc2::method(sel = "monospacedDigitSystemFontOfSize:weight:", managed = "Other")]
    pub unsafe fn monospacedDigitSystemFontOfSize_weight(
        font_size: CGFloat,
        weight: NSFontWeight,
    ) -> Id<NSFont>;

    #[objc2::method(sel = "systemFontOfSize:weight:width:", managed = "Other")]
    pub unsafe fn systemFontOfSize_weight_width(
        font_size: CGFloat,
        weight: NSFontWeight,
        width: NSFontWidth,
    ) -> Id<NSFont>;

    #[objc2::method(sel = "monospacedSystemFontOfSize:weight:", managed = "Other")]
    pub unsafe fn monospacedSystemFontOfSize_weight(
        font_size: CGFloat,
        weight: NSFontWeight,
    ) -> Id<NSFont>;

    #[objc2::method(sel = "fontWithSize:", managed = "Other")]
    pub unsafe fn fontWithSize(&self, font_size: CGFloat) -> Id<NSFont>;

    #[objc2::method(sel = "systemFontSize")]
    pub unsafe fn systemFontSize() -> CGFloat;

    #[objc2::method(sel = "smallSystemFontSize")]
    pub unsafe fn smallSystemFontSize() -> CGFloat;

    #[objc2::method(sel = "labelFontSize")]
    pub unsafe fn labelFontSize() -> CGFloat;

    #[objc2::method(sel = "systemFontSizeForControlSize:")]
    pub unsafe fn systemFontSizeForControlSize(control_size: NSControlSize) -> CGFloat;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "fontName", managed = "Other")]
    pub unsafe fn fontName(&self) -> Id<NSString>;

    #[objc2::method(sel = "pointSize")]
    pub unsafe fn pointSize(&self) -> CGFloat;

    #[objc2::method(sel = "matrix")]
    pub unsafe fn matrix(&self) -> NonNull<CGFloat>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "familyName", managed = "Other")]
    pub unsafe fn familyName(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "displayName", managed = "Other")]
    pub unsafe fn displayName(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "AppKit_NSFontDescriptor")]
    #[objc2::method(sel = "fontDescriptor", managed = "Other")]
    pub unsafe fn fontDescriptor(&self) -> Id<NSFontDescriptor>;

    #[cfg(feature = "Foundation_NSAffineTransform")]
    #[objc2::method(sel = "textTransform", managed = "Other")]
    pub unsafe fn textTransform(&self) -> Id<NSAffineTransform>;

    #[objc2::method(sel = "numberOfGlyphs")]
    pub unsafe fn numberOfGlyphs(&self) -> NSUInteger;

    #[objc2::method(sel = "mostCompatibleStringEncoding")]
    pub unsafe fn mostCompatibleStringEncoding(&self) -> NSStringEncoding;

    #[cfg(feature = "Foundation_NSCharacterSet")]
    #[objc2::method(sel = "coveredCharacterSet", managed = "Other")]
    pub unsafe fn coveredCharacterSet(&self) -> Id<NSCharacterSet>;

    #[objc2::method(sel = "boundingRectForFont")]
    pub unsafe fn boundingRectForFont(&self) -> NSRect;

    #[objc2::method(sel = "maximumAdvancement")]
    pub unsafe fn maximumAdvancement(&self) -> NSSize;

    #[objc2::method(sel = "ascender")]
    pub unsafe fn ascender(&self) -> CGFloat;

    #[objc2::method(sel = "descender")]
    pub unsafe fn descender(&self) -> CGFloat;

    #[objc2::method(sel = "leading")]
    pub unsafe fn leading(&self) -> CGFloat;

    #[objc2::method(sel = "underlinePosition")]
    pub unsafe fn underlinePosition(&self) -> CGFloat;

    #[objc2::method(sel = "underlineThickness")]
    pub unsafe fn underlineThickness(&self) -> CGFloat;

    #[objc2::method(sel = "italicAngle")]
    pub unsafe fn italicAngle(&self) -> CGFloat;

    #[objc2::method(sel = "capHeight")]
    pub unsafe fn capHeight(&self) -> CGFloat;

    #[objc2::method(sel = "xHeight")]
    pub unsafe fn xHeight(&self) -> CGFloat;

    #[objc2::method(sel = "isFixedPitch")]
    pub unsafe fn isFixedPitch(&self) -> bool;

    #[objc2::method(sel = "set")]
    pub unsafe fn set(&self);

    #[cfg(feature = "AppKit_NSGraphicsContext")]
    #[objc2::method(sel = "setInContext:")]
    pub unsafe fn setInContext(&self, graphics_context: &NSGraphicsContext);

    #[objc2::method(sel = "verticalFont", managed = "Other")]
    pub unsafe fn verticalFont(&self) -> Id<NSFont>;

    #[objc2::method(sel = "isVertical")]
    pub unsafe fn isVertical(&self) -> bool;
}

extern_static!(NSAntialiasThresholdChangedNotification: &'static NSNotificationName);

extern_static!(NSFontSetChangedNotification: &'static NSNotificationName);

pub type NSGlyph = c_uint;

#[extern_enum]
#[underlying(c_uint)]
pub enum __anonymous__ {
    NSControlGlyph = 0x00FFFFFF,
    NSNullGlyph = 0x0,
}

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSFontRenderingMode {
    NSFontDefaultRenderingMode = 0,
    NSFontAntialiasedRenderingMode = 1,
    NSFontIntegerAdvancementsRenderingMode = 2,
    NSFontAntialiasedIntegerAdvancementsRenderingMode = 3,
}

#[ns_enum]
#[underlying(NSUInteger)]
#[deprecated]
pub enum NSMultibyteGlyphPacking {
    #[deprecated]
    NSNativeShortGlyphPacking = 5,
}

extern_fn!(
    #[deprecated]
    pub unsafe fn NSConvertGlyphsToPackedGlyphs(
        gl_buf: NonNull<NSGlyph>,
        count: NSInteger,
        packing: NSMultibyteGlyphPacking,
        packed_glyphs: NonNull<c_char>,
    ) -> NSInteger;
);

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSFont")]
    pub type NSFont;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "glyphWithName:")]
    pub unsafe fn glyphWithName(&self, name: &NSString) -> NSGlyph;

    #[objc2::method(sel = "boundingRectForGlyph:")]
    pub unsafe fn boundingRectForGlyph(&self, glyph: NSGlyph) -> NSRect;

    #[objc2::method(sel = "advancementForGlyph:")]
    pub unsafe fn advancementForGlyph(&self, glyph: NSGlyph) -> NSSize;

    #[objc2::method(sel = "getBoundingRects:forGlyphs:count:")]
    pub unsafe fn getBoundingRects_forGlyphs_count(
        &self,
        bounds: NSRectArray,
        glyphs: NonNull<NSGlyph>,
        glyph_count: NSUInteger,
    );

    #[objc2::method(sel = "getAdvancements:forGlyphs:count:")]
    pub unsafe fn getAdvancements_forGlyphs_count(
        &self,
        advancements: NSSizeArray,
        glyphs: NonNull<NSGlyph>,
        glyph_count: NSUInteger,
    );

    #[objc2::method(sel = "getAdvancements:forPackedGlyphs:length:")]
    pub unsafe fn getAdvancements_forPackedGlyphs_length(
        &self,
        advancements: NSSizeArray,
        packed_glyphs: NonNull<c_void>,
        length: NSUInteger,
    );

    #[objc2::method(sel = "printerFont", managed = "Other")]
    pub unsafe fn printerFont(&self) -> Id<NSFont>;

    #[objc2::method(sel = "screenFont", managed = "Other")]
    pub unsafe fn screenFont(&self) -> Id<NSFont>;

    #[objc2::method(sel = "screenFontWithRenderingMode:", managed = "Other")]
    pub unsafe fn screenFontWithRenderingMode(
        &self,
        rendering_mode: NSFontRenderingMode,
    ) -> Id<NSFont>;

    #[objc2::method(sel = "renderingMode")]
    pub unsafe fn renderingMode(&self) -> NSFontRenderingMode;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSFont")]
    pub type NSFont;

    #[cfg(feature = "Foundation_NSDictionary")]
    #[objc2::method(sel = "preferredFontForTextStyle:options:", managed = "Other")]
    pub unsafe fn preferredFontForTextStyle_options(
        style: &NSFontTextStyle,
        options: &NSDictionary<NSFontTextStyleOptionKey, Object>,
    ) -> Id<NSFont>;
}
