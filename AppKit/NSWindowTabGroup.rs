//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSWindowTabGroup")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSWindowTabGroup;
}

#[cfg(feature = "AppKit_NSWindowTabGroup")]
unsafe impl NSObjectProtocol for NSWindowTabGroup {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSWindowTabGroup")]
    pub type NSWindowTabGroup;

    #[objc2::method(sel = "identifier", managed = "Other")]
    pub unsafe fn identifier(&self) -> Id<NSWindowTabbingIdentifier>;

    #[cfg(all(feature = "AppKit_NSWindow", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "windows", managed = "Other")]
    pub unsafe fn windows(&self) -> Id<NSArray<NSWindow>>;

    #[objc2::method(sel = "isOverviewVisible")]
    pub unsafe fn isOverviewVisible(&self) -> bool;

    #[objc2::method(sel = "setOverviewVisible:")]
    pub unsafe fn setOverviewVisible(&self, overview_visible: bool);

    #[objc2::method(sel = "isTabBarVisible")]
    pub unsafe fn isTabBarVisible(&self) -> bool;

    #[cfg(feature = "AppKit_NSWindow")]
    #[objc2::method(sel = "selectedWindow", managed = "Other")]
    pub unsafe fn selectedWindow(&self) -> Option<Id<NSWindow>>;

    #[cfg(feature = "AppKit_NSWindow")]
    #[objc2::method(sel = "setSelectedWindow:")]
    pub unsafe fn setSelectedWindow(&self, selected_window: Option<&NSWindow>);

    #[cfg(feature = "AppKit_NSWindow")]
    #[objc2::method(sel = "addWindow:")]
    pub unsafe fn addWindow(&self, window: &NSWindow);

    #[cfg(feature = "AppKit_NSWindow")]
    #[objc2::method(sel = "insertWindow:atIndex:")]
    pub unsafe fn insertWindow_atIndex(&self, window: &NSWindow, index: NSInteger);

    #[cfg(feature = "AppKit_NSWindow")]
    #[objc2::method(sel = "removeWindow:")]
    pub unsafe fn removeWindow(&self, window: &NSWindow);
}
