//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSTokenStyle {
    NSTokenStyleDefault = 0,
    NSTokenStyleNone = 1,
    NSTokenStyleRounded = 2,
    NSTokenStyleSquared = 3,
    NSTokenStylePlainSquared = 4,
}

#[objc2::interface(
    unsafe super = NSTextFieldCell,
    unsafe inherits = [
        NSActionCell,
        NSCell,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTokenFieldCell")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSTokenFieldCell;
}

#[cfg(feature = "AppKit_NSTokenFieldCell")]
unsafe impl NSAccessibility for NSTokenFieldCell {}

#[cfg(feature = "AppKit_NSTokenFieldCell")]
unsafe impl NSAccessibilityElementProtocol for NSTokenFieldCell {}

#[cfg(feature = "AppKit_NSTokenFieldCell")]
unsafe impl NSCoding for NSTokenFieldCell {}

#[cfg(feature = "AppKit_NSTokenFieldCell")]
unsafe impl NSObjectProtocol for NSTokenFieldCell {}

#[cfg(feature = "AppKit_NSTokenFieldCell")]
unsafe impl NSUserInterfaceItemIdentification for NSTokenFieldCell {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTokenFieldCell")]
    pub type NSTokenFieldCell;

    #[objc2::method(sel = "tokenStyle")]
    pub unsafe fn tokenStyle(&self) -> NSTokenStyle;

    #[objc2::method(sel = "setTokenStyle:")]
    pub unsafe fn setTokenStyle(&self, token_style: NSTokenStyle);

    #[objc2::method(sel = "completionDelay")]
    pub unsafe fn completionDelay(&self) -> NSTimeInterval;

    #[objc2::method(sel = "setCompletionDelay:")]
    pub unsafe fn setCompletionDelay(&self, completion_delay: NSTimeInterval);

    #[objc2::method(sel = "defaultCompletionDelay")]
    pub unsafe fn defaultCompletionDelay() -> NSTimeInterval;

    #[cfg(feature = "Foundation_NSCharacterSet")]
    #[objc2::method(sel = "tokenizingCharacterSet", managed = "Other")]
    pub unsafe fn tokenizingCharacterSet(&self) -> Id<NSCharacterSet>;

    #[cfg(feature = "Foundation_NSCharacterSet")]
    #[objc2::method(sel = "setTokenizingCharacterSet:")]
    pub unsafe fn setTokenizingCharacterSet(
        &self,
        tokenizing_character_set: Option<&NSCharacterSet>,
    );

    #[cfg(feature = "Foundation_NSCharacterSet")]
    #[objc2::method(sel = "defaultTokenizingCharacterSet", managed = "Other")]
    pub unsafe fn defaultTokenizingCharacterSet() -> Id<NSCharacterSet>;

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn NSTokenFieldCellDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(
        &self,
        delegate: Option<&ProtocolObject<dyn NSTokenFieldCellDelegate>>,
    );
}

#[objc2::protocol]
pub unsafe trait NSTokenFieldCellDelegate: NSObjectProtocol {
    #[cfg(all(
        feature = "AppKit_NSTokenFieldCell",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        optional,
        sel = "tokenFieldCell:completionsForSubstring:indexOfToken:indexOfSelectedItem:",
        managed = "Other"
    )]
    unsafe fn tokenFieldCell_completionsForSubstring_indexOfToken_indexOfSelectedItem(
        &self,
        token_field_cell: &NSTokenFieldCell,
        substring: &NSString,
        token_index: NSInteger,
        selected_index: NonNull<NSInteger>,
    ) -> Id<NSArray>;

    #[cfg(all(feature = "AppKit_NSTokenFieldCell", feature = "Foundation_NSArray"))]
    #[objc2::method(
        optional,
        sel = "tokenFieldCell:shouldAddObjects:atIndex:",
        managed = "Other"
    )]
    unsafe fn tokenFieldCell_shouldAddObjects_atIndex(
        &self,
        token_field_cell: &NSTokenFieldCell,
        tokens: &NSArray,
        index: NSUInteger,
    ) -> Id<NSArray>;

    #[cfg(all(feature = "AppKit_NSTokenFieldCell", feature = "Foundation_NSString"))]
    #[objc2::method(
        optional,
        sel = "tokenFieldCell:displayStringForRepresentedObject:",
        managed = "Other"
    )]
    unsafe fn tokenFieldCell_displayStringForRepresentedObject(
        &self,
        token_field_cell: &NSTokenFieldCell,
        represented_object: &Object,
    ) -> Option<Id<NSString>>;

    #[cfg(all(feature = "AppKit_NSTokenFieldCell", feature = "Foundation_NSString"))]
    #[objc2::method(
        optional,
        sel = "tokenFieldCell:editingStringForRepresentedObject:",
        managed = "Other"
    )]
    unsafe fn tokenFieldCell_editingStringForRepresentedObject(
        &self,
        token_field_cell: &NSTokenFieldCell,
        represented_object: &Object,
    ) -> Option<Id<NSString>>;

    #[cfg(all(feature = "AppKit_NSTokenFieldCell", feature = "Foundation_NSString"))]
    #[objc2::method(
        optional,
        sel = "tokenFieldCell:representedObjectForEditingString:",
        managed = "Other"
    )]
    unsafe fn tokenFieldCell_representedObjectForEditingString(
        &self,
        token_field_cell: &NSTokenFieldCell,
        editing_string: &NSString,
    ) -> Option<Id<Object>>;

    #[cfg(all(
        feature = "AppKit_NSPasteboard",
        feature = "AppKit_NSTokenFieldCell",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(optional, sel = "tokenFieldCell:writeRepresentedObjects:toPasteboard:")]
    unsafe fn tokenFieldCell_writeRepresentedObjects_toPasteboard(
        &self,
        token_field_cell: &NSTokenFieldCell,
        objects: &NSArray,
        pboard: &NSPasteboard,
    ) -> bool;

    #[cfg(all(
        feature = "AppKit_NSPasteboard",
        feature = "AppKit_NSTokenFieldCell",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(
        optional,
        sel = "tokenFieldCell:readFromPasteboard:",
        managed = "Other"
    )]
    unsafe fn tokenFieldCell_readFromPasteboard(
        &self,
        token_field_cell: &NSTokenFieldCell,
        pboard: &NSPasteboard,
    ) -> Option<Id<NSArray>>;

    #[cfg(all(feature = "AppKit_NSMenu", feature = "AppKit_NSTokenFieldCell"))]
    #[objc2::method(
        optional,
        sel = "tokenFieldCell:menuForRepresentedObject:",
        managed = "Other"
    )]
    unsafe fn tokenFieldCell_menuForRepresentedObject(
        &self,
        token_field_cell: &NSTokenFieldCell,
        represented_object: &Object,
    ) -> Option<Id<NSMenu>>;

    #[cfg(feature = "AppKit_NSTokenFieldCell")]
    #[objc2::method(optional, sel = "tokenFieldCell:hasMenuForRepresentedObject:")]
    unsafe fn tokenFieldCell_hasMenuForRepresentedObject(
        &self,
        token_field_cell: &NSTokenFieldCell,
        represented_object: &Object,
    ) -> bool;

    #[cfg(feature = "AppKit_NSTokenFieldCell")]
    #[objc2::method(optional, sel = "tokenFieldCell:styleForRepresentedObject:")]
    unsafe fn tokenFieldCell_styleForRepresentedObject(
        &self,
        token_field_cell: &NSTokenFieldCell,
        represented_object: &Object,
    ) -> NSTokenStyle;
}

extern_static!(NSDefaultTokenStyle: NSTokenStyle = NSTokenStyleDefault);

extern_static!(NSPlainTextTokenStyle: NSTokenStyle = NSTokenStyleNone);

extern_static!(NSRoundedTokenStyle: NSTokenStyle = NSTokenStyleRounded);

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSTextFieldCell`
    #[cfg(feature = "AppKit_NSTokenFieldCell")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTokenFieldCell")]
    pub type NSTokenFieldCell;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initTextCell:", managed = "Init")]
    pub unsafe fn initTextCell(this: Option<Allocated<Self>>, string: &NSString) -> Id<Self>;

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "initImageCell:", managed = "Init")]
    pub unsafe fn initImageCell(this: Option<Allocated<Self>>, image: Option<&NSImage>)
        -> Id<Self>;
}
