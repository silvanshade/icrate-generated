//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextCheckingController")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSTextCheckingController;
}

#[cfg(feature = "AppKit_NSTextCheckingController")]
unsafe impl NSObjectProtocol for NSTextCheckingController {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextCheckingController")]
    pub type NSTextCheckingController;

    #[objc2::method(sel = "initWithClient:", managed = "Init")]
    pub unsafe fn initWithClient(
        this: Option<Allocated<Self>>,
        client: &ProtocolObject<dyn NSTextCheckingClient>,
    ) -> Id<Self>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "client", managed = "Other")]
    pub unsafe fn client(&self) -> Id<ProtocolObject<dyn NSTextCheckingClient>>;

    #[objc2::method(sel = "invalidate")]
    pub unsafe fn invalidate(&self);

    #[objc2::method(sel = "didChangeTextInRange:")]
    pub unsafe fn didChangeTextInRange(&self, range: NSRange);

    #[objc2::method(sel = "insertedTextInRange:")]
    pub unsafe fn insertedTextInRange(&self, range: NSRange);

    #[objc2::method(sel = "didChangeSelectedRange")]
    pub unsafe fn didChangeSelectedRange(&self);

    #[objc2::method(sel = "considerTextCheckingForRange:")]
    pub unsafe fn considerTextCheckingForRange(&self, range: NSRange);

    #[cfg(feature = "Foundation_NSDictionary")]
    #[objc2::method(sel = "checkTextInRange:types:options:")]
    pub unsafe fn checkTextInRange_types_options(
        &self,
        range: NSRange,
        checking_types: NSTextCheckingTypes,
        options: &NSDictionary<NSTextCheckingOptionKey, Object>,
    );

    #[objc2::method(sel = "checkTextInSelection:")]
    pub unsafe fn checkTextInSelection(&self, sender: Option<&Object>);

    #[objc2::method(sel = "checkTextInDocument:")]
    pub unsafe fn checkTextInDocument(&self, sender: Option<&Object>);

    #[objc2::method(sel = "orderFrontSubstitutionsPanel:")]
    pub unsafe fn orderFrontSubstitutionsPanel(&self, sender: Option<&Object>);

    #[objc2::method(sel = "checkSpelling:")]
    pub unsafe fn checkSpelling(&self, sender: Option<&Object>);

    #[objc2::method(sel = "showGuessPanel:")]
    pub unsafe fn showGuessPanel(&self, sender: Option<&Object>);

    #[objc2::method(sel = "changeSpelling:")]
    pub unsafe fn changeSpelling(&self, sender: Option<&Object>);

    #[objc2::method(sel = "ignoreSpelling:")]
    pub unsafe fn ignoreSpelling(&self, sender: Option<&Object>);

    #[objc2::method(sel = "updateCandidates")]
    pub unsafe fn updateCandidates(&self);

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "validAnnotations", managed = "Other")]
    pub unsafe fn validAnnotations(&self) -> Id<NSArray<NSAttributedStringKey>>;

    #[cfg(feature = "AppKit_NSMenu")]
    #[objc2::method(
        sel = "menuAtIndex:clickedOnSelection:effectiveRange:",
        managed = "Other"
    )]
    pub unsafe fn menuAtIndex_clickedOnSelection_effectiveRange(
        &self,
        location: NSUInteger,
        clicked_on_selection: bool,
        effective_range: NSRangePointer,
    ) -> Option<Id<NSMenu>>;

    #[objc2::method(sel = "spellCheckerDocumentTag")]
    pub unsafe fn spellCheckerDocumentTag(&self) -> NSInteger;

    #[objc2::method(sel = "setSpellCheckerDocumentTag:")]
    pub unsafe fn setSpellCheckerDocumentTag(&self, spell_checker_document_tag: NSInteger);
}
