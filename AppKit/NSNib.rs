//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

pub type NSNibName = NSString;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSNib")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSNib;
}

#[cfg(feature = "AppKit_NSNib")]
unsafe impl NSCoding for NSNib {}

#[cfg(feature = "AppKit_NSNib")]
unsafe impl NSObjectProtocol for NSNib {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSNib")]
    pub type NSNib;

    #[cfg(feature = "Foundation_NSBundle")]
    #[objc2::method(sel = "initWithNibNamed:bundle:", managed = "Init")]
    pub unsafe fn initWithNibNamed_bundle(
        this: Option<Allocated<Self>>,
        nib_name: &NSNibName,
        bundle: Option<&NSBundle>,
    ) -> Option<Id<Self>>;

    #[cfg(all(feature = "Foundation_NSBundle", feature = "Foundation_NSData"))]
    #[objc2::method(sel = "initWithNibData:bundle:", managed = "Init")]
    pub unsafe fn initWithNibData_bundle(
        this: Option<Allocated<Self>>,
        nib_data: &NSData,
        bundle: Option<&NSBundle>,
    ) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSNib")]
    pub type NSNib;

    #[cfg(feature = "Foundation_NSURL")]
    #[deprecated]
    #[objc2::method(sel = "initWithContentsOfURL:", managed = "Init")]
    pub unsafe fn initWithContentsOfURL(
        this: Option<Allocated<Self>>,
        nib_file_url: Option<&NSURL>,
    ) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSDictionary")]
    #[deprecated]
    #[objc2::method(sel = "instantiateNibWithExternalNameTable:")]
    pub unsafe fn instantiateNibWithExternalNameTable(
        &self,
        external_name_table: Option<&NSDictionary>,
    ) -> bool;

    #[cfg(feature = "Foundation_NSArray")]
    #[deprecated]
    #[objc2::method(sel = "instantiateNibWithOwner:topLevelObjects:")]
    pub unsafe fn instantiateNibWithOwner_topLevelObjects(
        &self,
        owner: Option<&Object>,
        top_level_objects: Option<&mut Option<Id<NSArray>>>,
    ) -> bool;
}

extern_static!(NSNibOwner: &'static NSString);

extern_static!(NSNibTopLevelObjects: &'static NSString);
