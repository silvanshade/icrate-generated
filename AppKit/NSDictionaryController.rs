//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSDictionaryControllerKeyValuePair")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSDictionaryControllerKeyValuePair;
}

#[cfg(feature = "AppKit_NSDictionaryControllerKeyValuePair")]
unsafe impl NSObjectProtocol for NSDictionaryControllerKeyValuePair {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSDictionaryControllerKeyValuePair")]
    pub type NSDictionaryControllerKeyValuePair;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "key", managed = "Other")]
    pub unsafe fn key(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setKey:")]
    pub unsafe fn setKey(&self, key: Option<&NSString>);

    #[objc2::method(sel = "value", managed = "Other")]
    pub unsafe fn value(&self) -> Option<Id<Object>>;

    #[objc2::method(sel = "setValue:")]
    pub unsafe fn setValue(&self, value: Option<&Object>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "localizedKey", managed = "Other")]
    pub unsafe fn localizedKey(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setLocalizedKey:")]
    pub unsafe fn setLocalizedKey(&self, localized_key: Option<&NSString>);

    #[objc2::method(sel = "isExplicitlyIncluded")]
    pub unsafe fn isExplicitlyIncluded(&self) -> bool;
}

#[objc2::interface(
    unsafe super = NSArrayController,
    unsafe inherits = [
        NSObjectController,
        NSController,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSDictionaryController")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSDictionaryController;
}

#[cfg(feature = "AppKit_NSDictionaryController")]
unsafe impl NSCoding for NSDictionaryController {}

#[cfg(feature = "AppKit_NSDictionaryController")]
unsafe impl NSEditor for NSDictionaryController {}

#[cfg(feature = "AppKit_NSDictionaryController")]
unsafe impl NSEditorRegistration for NSDictionaryController {}

#[cfg(feature = "AppKit_NSDictionaryController")]
unsafe impl NSObjectProtocol for NSDictionaryController {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSDictionaryController")]
    pub type NSDictionaryController;

    #[cfg(feature = "AppKit_NSDictionaryControllerKeyValuePair")]
    #[objc2::method(sel = "newObject", managed = "New")]
    pub unsafe fn newObject(&self) -> Id<NSDictionaryControllerKeyValuePair>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initialKey", managed = "Other")]
    pub unsafe fn initialKey(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setInitialKey:")]
    pub unsafe fn setInitialKey(&self, initial_key: &NSString);

    #[objc2::method(sel = "initialValue", managed = "Other")]
    pub unsafe fn initialValue(&self) -> Id<Object>;

    #[objc2::method(sel = "setInitialValue:")]
    pub unsafe fn setInitialValue(&self, initial_value: &Object);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "includedKeys", managed = "Other")]
    pub unsafe fn includedKeys(&self) -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setIncludedKeys:")]
    pub unsafe fn setIncludedKeys(&self, included_keys: &NSArray<NSString>);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "excludedKeys", managed = "Other")]
    pub unsafe fn excludedKeys(&self) -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setExcludedKeys:")]
    pub unsafe fn setExcludedKeys(&self, excluded_keys: &NSArray<NSString>);

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "localizedKeyDictionary", managed = "Other")]
    pub unsafe fn localizedKeyDictionary(&self) -> Id<NSDictionary<NSString, NSString>>;

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setLocalizedKeyDictionary:")]
    pub unsafe fn setLocalizedKeyDictionary(
        &self,
        localized_key_dictionary: &NSDictionary<NSString, NSString>,
    );

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "localizedKeyTable", managed = "Other")]
    pub unsafe fn localizedKeyTable(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setLocalizedKeyTable:")]
    pub unsafe fn setLocalizedKeyTable(&self, localized_key_table: Option<&NSString>);
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSObjectController`
    #[cfg(feature = "AppKit_NSDictionaryController")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSDictionaryController")]
    pub type NSDictionaryController;

    #[objc2::method(sel = "initWithContent:", managed = "Init")]
    pub unsafe fn initWithContent(
        this: Option<Allocated<Self>>,
        content: Option<&Object>,
    ) -> Id<Self>;
}
