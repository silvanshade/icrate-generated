//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSSplitViewItemBehavior {
    NSSplitViewItemBehaviorDefault = 0,
    NSSplitViewItemBehaviorSidebar = 1,
    NSSplitViewItemBehaviorContentList = 2,
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSSplitViewItemCollapseBehavior {
    NSSplitViewItemCollapseBehaviorDefault = 0,
    NSSplitViewItemCollapseBehaviorPreferResizingSplitViewWithFixedSiblings = 1,
    NSSplitViewItemCollapseBehaviorPreferResizingSiblingsWithFixedSplitView = 2,
    NSSplitViewItemCollapseBehaviorUseConstraints = 3,
}

extern_static!(NSSplitViewItemUnspecifiedDimension: CGFloat);

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSSplitViewItem")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSSplitViewItem;
}

#[cfg(feature = "AppKit_NSSplitViewItem")]
unsafe impl NSAnimatablePropertyContainer for NSSplitViewItem {}

#[cfg(feature = "AppKit_NSSplitViewItem")]
unsafe impl NSCoding for NSSplitViewItem {}

#[cfg(feature = "AppKit_NSSplitViewItem")]
unsafe impl NSObjectProtocol for NSSplitViewItem {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSSplitViewItem")]
    pub type NSSplitViewItem;

    #[cfg(feature = "AppKit_NSViewController")]
    #[objc2::method(sel = "splitViewItemWithViewController:", managed = "Other")]
    pub unsafe fn splitViewItemWithViewController(view_controller: &NSViewController) -> Id<Self>;

    #[cfg(feature = "AppKit_NSViewController")]
    #[objc2::method(sel = "sidebarWithViewController:", managed = "Other")]
    pub unsafe fn sidebarWithViewController(view_controller: &NSViewController) -> Id<Self>;

    #[cfg(feature = "AppKit_NSViewController")]
    #[objc2::method(sel = "contentListWithViewController:", managed = "Other")]
    pub unsafe fn contentListWithViewController(view_controller: &NSViewController) -> Id<Self>;

    #[objc2::method(sel = "behavior")]
    pub unsafe fn behavior(&self) -> NSSplitViewItemBehavior;

    #[cfg(feature = "AppKit_NSViewController")]
    #[objc2::method(sel = "viewController", managed = "Other")]
    pub unsafe fn viewController(&self) -> Id<NSViewController>;

    #[cfg(feature = "AppKit_NSViewController")]
    #[objc2::method(sel = "setViewController:")]
    pub unsafe fn setViewController(&self, view_controller: &NSViewController);

    #[objc2::method(sel = "isCollapsed")]
    pub unsafe fn isCollapsed(&self) -> bool;

    #[objc2::method(sel = "setCollapsed:")]
    pub unsafe fn setCollapsed(&self, collapsed: bool);

    #[objc2::method(sel = "canCollapse")]
    pub unsafe fn canCollapse(&self) -> bool;

    #[objc2::method(sel = "setCanCollapse:")]
    pub unsafe fn setCanCollapse(&self, can_collapse: bool);

    #[objc2::method(sel = "collapseBehavior")]
    pub unsafe fn collapseBehavior(&self) -> NSSplitViewItemCollapseBehavior;

    #[objc2::method(sel = "setCollapseBehavior:")]
    pub unsafe fn setCollapseBehavior(&self, collapse_behavior: NSSplitViewItemCollapseBehavior);

    #[objc2::method(sel = "minimumThickness")]
    pub unsafe fn minimumThickness(&self) -> CGFloat;

    #[objc2::method(sel = "setMinimumThickness:")]
    pub unsafe fn setMinimumThickness(&self, minimum_thickness: CGFloat);

    #[objc2::method(sel = "maximumThickness")]
    pub unsafe fn maximumThickness(&self) -> CGFloat;

    #[objc2::method(sel = "setMaximumThickness:")]
    pub unsafe fn setMaximumThickness(&self, maximum_thickness: CGFloat);

    #[objc2::method(sel = "preferredThicknessFraction")]
    pub unsafe fn preferredThicknessFraction(&self) -> CGFloat;

    #[objc2::method(sel = "setPreferredThicknessFraction:")]
    pub unsafe fn setPreferredThicknessFraction(&self, preferred_thickness_fraction: CGFloat);

    #[objc2::method(sel = "holdingPriority")]
    pub unsafe fn holdingPriority(&self) -> NSLayoutPriority;

    #[objc2::method(sel = "setHoldingPriority:")]
    pub unsafe fn setHoldingPriority(&self, holding_priority: NSLayoutPriority);

    #[objc2::method(sel = "automaticMaximumThickness")]
    pub unsafe fn automaticMaximumThickness(&self) -> CGFloat;

    #[objc2::method(sel = "setAutomaticMaximumThickness:")]
    pub unsafe fn setAutomaticMaximumThickness(&self, automatic_maximum_thickness: CGFloat);

    #[objc2::method(sel = "isSpringLoaded")]
    pub unsafe fn isSpringLoaded(&self) -> bool;

    #[objc2::method(sel = "setSpringLoaded:")]
    pub unsafe fn setSpringLoaded(&self, spring_loaded: bool);

    #[objc2::method(sel = "allowsFullHeightLayout")]
    pub unsafe fn allowsFullHeightLayout(&self) -> bool;

    #[objc2::method(sel = "setAllowsFullHeightLayout:")]
    pub unsafe fn setAllowsFullHeightLayout(&self, allows_full_height_layout: bool);

    #[objc2::method(sel = "titlebarSeparatorStyle")]
    pub unsafe fn titlebarSeparatorStyle(&self) -> NSTitlebarSeparatorStyle;

    #[objc2::method(sel = "setTitlebarSeparatorStyle:")]
    pub unsafe fn setTitlebarSeparatorStyle(
        &self,
        titlebar_separator_style: NSTitlebarSeparatorStyle,
    );
}
