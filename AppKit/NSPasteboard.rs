//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

typed_extensible_enum!(
    pub type NSPasteboardType = NSString;
);

extern_static!(NSPasteboardTypeString: &'static NSPasteboardType);

extern_static!(NSPasteboardTypePDF: &'static NSPasteboardType);

extern_static!(NSPasteboardTypeTIFF: &'static NSPasteboardType);

extern_static!(NSPasteboardTypePNG: &'static NSPasteboardType);

extern_static!(NSPasteboardTypeRTF: &'static NSPasteboardType);

extern_static!(NSPasteboardTypeRTFD: &'static NSPasteboardType);

extern_static!(NSPasteboardTypeHTML: &'static NSPasteboardType);

extern_static!(NSPasteboardTypeTabularText: &'static NSPasteboardType);

extern_static!(NSPasteboardTypeFont: &'static NSPasteboardType);

extern_static!(NSPasteboardTypeRuler: &'static NSPasteboardType);

extern_static!(NSPasteboardTypeColor: &'static NSPasteboardType);

extern_static!(NSPasteboardTypeSound: &'static NSPasteboardType);

extern_static!(NSPasteboardTypeMultipleTextSelection: &'static NSPasteboardType);

extern_static!(NSPasteboardTypeTextFinderOptions: &'static NSPasteboardType);

extern_static!(NSPasteboardTypeURL: &'static NSPasteboardType);

extern_static!(NSPasteboardTypeFileURL: &'static NSPasteboardType);

typed_extensible_enum!(
    pub type NSPasteboardName = NSString;
);

extern_static!(NSPasteboardNameGeneral: &'static NSPasteboardName);

extern_static!(NSPasteboardNameFont: &'static NSPasteboardName);

extern_static!(NSPasteboardNameRuler: &'static NSPasteboardName);

extern_static!(NSPasteboardNameFind: &'static NSPasteboardName);

extern_static!(NSPasteboardNameDrag: &'static NSPasteboardName);

#[ns_options]
#[underlying(NSUInteger)]
pub enum NSPasteboardContentsOptions {
    NSPasteboardContentsCurrentHostOnly = 1 << 0,
}

typed_enum!(
    pub type NSPasteboardReadingOptionKey = NSString;
);

extern_static!(NSPasteboardURLReadingFileURLsOnlyKey: &'static NSPasteboardReadingOptionKey);

extern_static!(
    NSPasteboardURLReadingContentsConformToTypesKey: &'static NSPasteboardReadingOptionKey
);

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSPasteboard")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSPasteboard;
}

#[cfg(feature = "AppKit_NSPasteboard")]
unsafe impl NSObjectProtocol for NSPasteboard {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSPasteboard")]
    pub type NSPasteboard;

    #[objc2::method(sel = "generalPasteboard", managed = "Other")]
    pub unsafe fn generalPasteboard() -> Id<NSPasteboard>;

    #[objc2::method(sel = "pasteboardWithName:", managed = "Other")]
    pub unsafe fn pasteboardWithName(name: &NSPasteboardName) -> Id<NSPasteboard>;

    #[objc2::method(sel = "pasteboardWithUniqueName", managed = "Other")]
    pub unsafe fn pasteboardWithUniqueName() -> Id<NSPasteboard>;

    #[objc2::method(sel = "name", managed = "Other")]
    pub unsafe fn name(&self) -> Id<NSPasteboardName>;

    #[objc2::method(sel = "changeCount")]
    pub unsafe fn changeCount(&self) -> NSInteger;

    #[objc2::method(sel = "prepareForNewContentsWithOptions:")]
    pub unsafe fn prepareForNewContentsWithOptions(
        &self,
        options: NSPasteboardContentsOptions,
    ) -> NSInteger;

    #[objc2::method(sel = "clearContents")]
    pub unsafe fn clearContents(&self) -> NSInteger;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "writeObjects:")]
    pub unsafe fn writeObjects(
        &self,
        objects: &NSArray<ProtocolObject<dyn NSPasteboardWriting>>,
    ) -> bool;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSDictionary"))]
    #[objc2::method(sel = "readObjectsForClasses:options:", managed = "Other")]
    pub unsafe fn readObjectsForClasses_options(
        &self,
        class_array: &NSArray<TodoClass>,
        options: Option<&NSDictionary<NSPasteboardReadingOptionKey, Object>>,
    ) -> Option<Id<NSArray>>;

    #[cfg(all(feature = "AppKit_NSPasteboardItem", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "pasteboardItems", managed = "Other")]
    pub unsafe fn pasteboardItems(&self) -> Option<Id<NSArray<NSPasteboardItem>>>;

    #[cfg(feature = "AppKit_NSPasteboardItem")]
    #[objc2::method(sel = "indexOfPasteboardItem:")]
    pub unsafe fn indexOfPasteboardItem(&self, pasteboard_item: &NSPasteboardItem) -> NSUInteger;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "canReadItemWithDataConformingToTypes:")]
    pub unsafe fn canReadItemWithDataConformingToTypes(&self, types: &NSArray<NSString>) -> bool;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSDictionary"))]
    #[objc2::method(sel = "canReadObjectForClasses:options:")]
    pub unsafe fn canReadObjectForClasses_options(
        &self,
        class_array: &NSArray<TodoClass>,
        options: Option<&NSDictionary<NSPasteboardReadingOptionKey, Object>>,
    ) -> bool;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "declareTypes:owner:")]
    pub unsafe fn declareTypes_owner(
        &self,
        new_types: &NSArray<NSPasteboardType>,
        new_owner: Option<&Object>,
    ) -> NSInteger;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "addTypes:owner:")]
    pub unsafe fn addTypes_owner(
        &self,
        new_types: &NSArray<NSPasteboardType>,
        new_owner: Option<&Object>,
    ) -> NSInteger;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "types", managed = "Other")]
    pub unsafe fn types(&self) -> Option<Id<NSArray<NSPasteboardType>>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "availableTypeFromArray:", managed = "Other")]
    pub unsafe fn availableTypeFromArray(
        &self,
        types: &NSArray<NSPasteboardType>,
    ) -> Option<Id<NSPasteboardType>>;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "setData:forType:")]
    pub unsafe fn setData_forType(
        &self,
        data: Option<&NSData>,
        data_type: &NSPasteboardType,
    ) -> bool;

    #[objc2::method(sel = "setPropertyList:forType:")]
    pub unsafe fn setPropertyList_forType(
        &self,
        plist: &Object,
        data_type: &NSPasteboardType,
    ) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setString:forType:")]
    pub unsafe fn setString_forType(&self, string: &NSString, data_type: &NSPasteboardType)
        -> bool;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "dataForType:", managed = "Other")]
    pub unsafe fn dataForType(&self, data_type: &NSPasteboardType) -> Option<Id<NSData>>;

    #[objc2::method(sel = "propertyListForType:", managed = "Other")]
    pub unsafe fn propertyListForType(&self, data_type: &NSPasteboardType) -> Option<Id<Object>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "stringForType:", managed = "Other")]
    pub unsafe fn stringForType(&self, data_type: &NSPasteboardType) -> Option<Id<NSString>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSPasteboard")]
    pub type NSPasteboard;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "typesFilterableTo:", managed = "Other")]
    pub unsafe fn typesFilterableTo(r#type: &NSPasteboardType) -> Id<NSArray<NSPasteboardType>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "pasteboardByFilteringFile:", managed = "Other")]
    pub unsafe fn pasteboardByFilteringFile(filename: &NSString) -> Id<NSPasteboard>;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "pasteboardByFilteringData:ofType:", managed = "Other")]
    pub unsafe fn pasteboardByFilteringData_ofType(
        data: &NSData,
        r#type: &NSPasteboardType,
    ) -> Id<NSPasteboard>;

    #[objc2::method(sel = "pasteboardByFilteringTypesInPasteboard:", managed = "Other")]
    pub unsafe fn pasteboardByFilteringTypesInPasteboard(pboard: &NSPasteboard)
        -> Id<NSPasteboard>;
}

#[objc2::protocol]
pub unsafe trait NSPasteboardTypeOwner: NSObjectProtocol {
    #[cfg(feature = "AppKit_NSPasteboard")]
    #[objc2::method(sel = "pasteboard:provideDataForType:")]
    unsafe fn pasteboard_provideDataForType(
        &self,
        sender: &NSPasteboard,
        r#type: &NSPasteboardType,
    );

    #[cfg(feature = "AppKit_NSPasteboard")]
    #[objc2::method(optional, sel = "pasteboardChangedOwner:")]
    unsafe fn pasteboardChangedOwner(&self, sender: &NSPasteboard);
}

#[ns_options]
#[underlying(NSUInteger)]
pub enum NSPasteboardWritingOptions {
    NSPasteboardWritingPromised = 1 << 9,
}

#[objc2::protocol]
pub unsafe trait NSPasteboardWriting: NSObjectProtocol {
    #[cfg(all(feature = "AppKit_NSPasteboard", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "writableTypesForPasteboard:", managed = "Other")]
    unsafe fn writableTypesForPasteboard(
        &self,
        pasteboard: &NSPasteboard,
    ) -> Id<NSArray<NSPasteboardType>>;

    #[cfg(feature = "AppKit_NSPasteboard")]
    #[objc2::method(optional, sel = "writingOptionsForType:pasteboard:")]
    unsafe fn writingOptionsForType_pasteboard(
        &self,
        r#type: &NSPasteboardType,
        pasteboard: &NSPasteboard,
    ) -> NSPasteboardWritingOptions;

    #[objc2::method(sel = "pasteboardPropertyListForType:", managed = "Other")]
    unsafe fn pasteboardPropertyListForType(&self, r#type: &NSPasteboardType)
        -> Option<Id<Object>>;
}

#[ns_options]
#[underlying(NSUInteger)]
pub enum NSPasteboardReadingOptions {
    NSPasteboardReadingAsData = 0,
    NSPasteboardReadingAsString = 1 << 0,
    NSPasteboardReadingAsPropertyList = 1 << 1,
    NSPasteboardReadingAsKeyedArchive = 1 << 2,
}

#[objc2::protocol]
pub unsafe trait NSPasteboardReading: NSObjectProtocol {
    #[cfg(all(feature = "AppKit_NSPasteboard", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "readableTypesForPasteboard:", managed = "Other")]
    unsafe fn readableTypesForPasteboard(
        pasteboard: &NSPasteboard,
    ) -> Id<NSArray<NSPasteboardType>>;

    #[cfg(feature = "AppKit_NSPasteboard")]
    #[objc2::method(optional, sel = "readingOptionsForType:pasteboard:")]
    unsafe fn readingOptionsForType_pasteboard(
        r#type: &NSPasteboardType,
        pasteboard: &NSPasteboard,
    ) -> NSPasteboardReadingOptions;

    #[objc2::method(
        optional,
        sel = "initWithPasteboardPropertyList:ofType:",
        managed = "Init"
    )]
    unsafe fn initWithPasteboardPropertyList_ofType(
        this: Option<Allocated<Self>>,
        property_list: &Object,
        r#type: &NSPasteboardType,
    ) -> Option<Id<Self>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSURL")]
    pub type NSURL;

    #[cfg(feature = "AppKit_NSPasteboard")]
    #[objc2::method(sel = "URLFromPasteboard:", managed = "Other")]
    pub unsafe fn URLFromPasteboard(paste_board: &NSPasteboard) -> Option<Id<NSURL>>;

    #[cfg(feature = "AppKit_NSPasteboard")]
    #[objc2::method(sel = "writeToPasteboard:")]
    pub unsafe fn writeToPasteboard(&self, paste_board: &NSPasteboard);
}

#[cfg(feature = "Foundation_NSURL")]
unsafe impl NSPasteboardReading for NSURL {}

#[cfg(feature = "Foundation_NSURL")]
unsafe impl NSPasteboardWriting for NSURL {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSString")]
    pub type NSString;
}

#[cfg(feature = "Foundation_NSString")]
unsafe impl NSPasteboardReading for NSString {}

#[cfg(feature = "Foundation_NSString")]
unsafe impl NSPasteboardWriting for NSString {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSPasteboard")]
    pub type NSPasteboard;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "writeFileContents:")]
    pub unsafe fn writeFileContents(&self, filename: &NSString) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "readFileContentsType:toFile:", managed = "Other")]
    pub unsafe fn readFileContentsType_toFile(
        &self,
        r#type: Option<&NSPasteboardType>,
        filename: &NSString,
    ) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSFileWrapper")]
    #[objc2::method(sel = "writeFileWrapper:")]
    pub unsafe fn writeFileWrapper(&self, wrapper: &NSFileWrapper) -> bool;

    #[cfg(feature = "Foundation_NSFileWrapper")]
    #[objc2::method(sel = "readFileWrapper", managed = "Other")]
    pub unsafe fn readFileWrapper(&self) -> Option<Id<NSFileWrapper>>;
}

extern_static!(NSFileContentsPboardType: &'static NSPasteboardType);

extern_fn!(
    #[cfg(feature = "Foundation_NSString")]
    pub unsafe fn NSCreateFilenamePboardType(file_type: &NSString) -> *mut NSPasteboardType;
);

extern_fn!(
    #[cfg(feature = "Foundation_NSString")]
    pub unsafe fn NSCreateFileContentsPboardType(file_type: &NSString) -> *mut NSPasteboardType;
);

extern_fn!(
    #[cfg(feature = "Foundation_NSString")]
    pub unsafe fn NSGetFileType(pboard_type: &NSPasteboardType) -> *mut NSString;
);

extern_fn!(
    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    pub unsafe fn NSGetFileTypes(
        pboard_types: &NSArray<NSPasteboardType>,
    ) -> *mut NSArray<NSString>;
);

extern_static!(NSStringPboardType: &'static NSPasteboardType);

extern_static!(NSFilenamesPboardType: &'static NSPasteboardType);

extern_static!(NSTIFFPboardType: &'static NSPasteboardType);

extern_static!(NSRTFPboardType: &'static NSPasteboardType);

extern_static!(NSTabularTextPboardType: &'static NSPasteboardType);

extern_static!(NSFontPboardType: &'static NSPasteboardType);

extern_static!(NSRulerPboardType: &'static NSPasteboardType);

extern_static!(NSColorPboardType: &'static NSPasteboardType);

extern_static!(NSRTFDPboardType: &'static NSPasteboardType);

extern_static!(NSHTMLPboardType: &'static NSPasteboardType);

extern_static!(NSURLPboardType: &'static NSPasteboardType);

extern_static!(NSPDFPboardType: &'static NSPasteboardType);

extern_static!(NSMultipleTextSelectionPboardType: &'static NSPasteboardType);

extern_static!(NSPostScriptPboardType: &'static NSPasteboardType);

extern_static!(NSVCardPboardType: &'static NSPasteboardType);

extern_static!(NSInkTextPboardType: &'static NSPasteboardType);

extern_static!(NSFilesPromisePboardType: &'static NSPasteboardType);

extern_static!(NSPasteboardTypeFindPanelSearchOptions: &'static NSPasteboardType);

extern_static!(NSGeneralPboard: &'static NSPasteboardName);

extern_static!(NSFontPboard: &'static NSPasteboardName);

extern_static!(NSRulerPboard: &'static NSPasteboardName);

extern_static!(NSFindPboard: &'static NSPasteboardName);

extern_static!(NSDragPboard: &'static NSPasteboardName);

extern_static!(NSPICTPboardType: &'static NSPasteboardType);
