//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSFilePromiseProvider")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSFilePromiseProvider;
}

#[cfg(feature = "AppKit_NSFilePromiseProvider")]
unsafe impl NSObjectProtocol for NSFilePromiseProvider {}

#[cfg(feature = "AppKit_NSFilePromiseProvider")]
unsafe impl NSPasteboardWriting for NSFilePromiseProvider {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSFilePromiseProvider")]
    pub type NSFilePromiseProvider;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "fileType", managed = "Other")]
    pub unsafe fn fileType(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setFileType:")]
    pub unsafe fn setFileType(&self, file_type: &NSString);

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn NSFilePromiseProviderDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(
        &self,
        delegate: Option<&ProtocolObject<dyn NSFilePromiseProviderDelegate>>,
    );

    #[objc2::method(sel = "userInfo", managed = "Other")]
    pub unsafe fn userInfo(&self) -> Option<Id<Object>>;

    #[objc2::method(sel = "setUserInfo:")]
    pub unsafe fn setUserInfo(&self, user_info: Option<&Object>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithFileType:delegate:", managed = "Init")]
    pub unsafe fn initWithFileType_delegate(
        this: Option<Allocated<Self>>,
        file_type: &NSString,
        delegate: &ProtocolObject<dyn NSFilePromiseProviderDelegate>,
    ) -> Id<Self>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;
}

#[objc2::protocol]
pub unsafe trait NSFilePromiseProviderDelegate: NSObjectProtocol {
    #[cfg(all(
        feature = "AppKit_NSFilePromiseProvider",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "filePromiseProvider:fileNameForType:", managed = "Other")]
    unsafe fn filePromiseProvider_fileNameForType(
        &self,
        file_promise_provider: &NSFilePromiseProvider,
        file_type: &NSString,
    ) -> Id<NSString>;

    #[cfg(all(
        feature = "AppKit_NSFilePromiseProvider",
        feature = "Foundation_NSError",
        feature = "Foundation_NSURL"
    ))]
    #[objc2::method(sel = "filePromiseProvider:writePromiseToURL:completionHandler:")]
    unsafe fn filePromiseProvider_writePromiseToURL_completionHandler(
        &self,
        file_promise_provider: &NSFilePromiseProvider,
        url: &NSURL,
        completion_handler: &Block<(*mut NSError,), ()>,
    );

    #[cfg(all(
        feature = "AppKit_NSFilePromiseProvider",
        feature = "Foundation_NSOperationQueue"
    ))]
    #[objc2::method(
        optional,
        sel = "operationQueueForFilePromiseProvider:",
        managed = "Other"
    )]
    unsafe fn operationQueueForFilePromiseProvider(
        &self,
        file_promise_provider: &NSFilePromiseProvider,
    ) -> Id<NSOperationQueue>;
}
