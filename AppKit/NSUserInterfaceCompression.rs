//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSUserInterfaceCompressionOptions")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSUserInterfaceCompressionOptions;
}

#[cfg(feature = "AppKit_NSUserInterfaceCompressionOptions")]
unsafe impl NSCoding for NSUserInterfaceCompressionOptions {}

#[cfg(feature = "AppKit_NSUserInterfaceCompressionOptions")]
unsafe impl NSObjectProtocol for NSUserInterfaceCompressionOptions {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSUserInterfaceCompressionOptions")]
    pub type NSUserInterfaceCompressionOptions;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, coder: &NSCoder) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithIdentifier:", managed = "Init")]
    pub unsafe fn initWithIdentifier(
        this: Option<Allocated<Self>>,
        identifier: &NSString,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSSet")]
    #[objc2::method(sel = "initWithCompressionOptions:", managed = "Init")]
    pub unsafe fn initWithCompressionOptions(
        this: Option<Allocated<Self>>,
        options: &NSSet<NSUserInterfaceCompressionOptions>,
    ) -> Id<Self>;

    #[objc2::method(sel = "containsOptions:")]
    pub unsafe fn containsOptions(&self, options: &NSUserInterfaceCompressionOptions) -> bool;

    #[objc2::method(sel = "intersectsOptions:")]
    pub unsafe fn intersectsOptions(&self, options: &NSUserInterfaceCompressionOptions) -> bool;

    #[objc2::method(sel = "isEmpty")]
    pub unsafe fn isEmpty(&self) -> bool;

    #[objc2::method(sel = "optionsByAddingOptions:", managed = "Other")]
    pub unsafe fn optionsByAddingOptions(
        &self,
        options: &NSUserInterfaceCompressionOptions,
    ) -> Id<NSUserInterfaceCompressionOptions>;

    #[objc2::method(sel = "optionsByRemovingOptions:", managed = "Other")]
    pub unsafe fn optionsByRemovingOptions(
        &self,
        options: &NSUserInterfaceCompressionOptions,
    ) -> Id<NSUserInterfaceCompressionOptions>;

    #[objc2::method(sel = "hideImagesOption", managed = "Other")]
    pub unsafe fn hideImagesOption() -> Id<NSUserInterfaceCompressionOptions>;

    #[objc2::method(sel = "hideTextOption", managed = "Other")]
    pub unsafe fn hideTextOption() -> Id<NSUserInterfaceCompressionOptions>;

    #[objc2::method(sel = "reduceMetricsOption", managed = "Other")]
    pub unsafe fn reduceMetricsOption() -> Id<NSUserInterfaceCompressionOptions>;

    #[objc2::method(sel = "breakEqualWidthsOption", managed = "Other")]
    pub unsafe fn breakEqualWidthsOption() -> Id<NSUserInterfaceCompressionOptions>;

    #[objc2::method(sel = "standardOptions", managed = "Other")]
    pub unsafe fn standardOptions() -> Id<NSUserInterfaceCompressionOptions>;
}

#[objc2::protocol]
pub unsafe trait NSUserInterfaceCompression {
    #[cfg(all(
        feature = "AppKit_NSUserInterfaceCompressionOptions",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(sel = "compressWithPrioritizedCompressionOptions:")]
    unsafe fn compressWithPrioritizedCompressionOptions(
        &self,
        prioritized_options: &NSArray<NSUserInterfaceCompressionOptions>,
    );

    #[cfg(all(
        feature = "AppKit_NSUserInterfaceCompressionOptions",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(sel = "minimumSizeWithPrioritizedCompressionOptions:")]
    unsafe fn minimumSizeWithPrioritizedCompressionOptions(
        &self,
        prioritized_options: &NSArray<NSUserInterfaceCompressionOptions>,
    ) -> NSSize;

    #[cfg(feature = "AppKit_NSUserInterfaceCompressionOptions")]
    #[objc2::method(sel = "activeCompressionOptions", managed = "Other")]
    unsafe fn activeCompressionOptions(&self) -> Id<NSUserInterfaceCompressionOptions>;
}
