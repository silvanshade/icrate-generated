//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSPasteboardItem")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSPasteboardItem;
}

#[cfg(feature = "AppKit_NSPasteboardItem")]
unsafe impl NSObjectProtocol for NSPasteboardItem {}

#[cfg(feature = "AppKit_NSPasteboardItem")]
unsafe impl NSPasteboardReading for NSPasteboardItem {}

#[cfg(feature = "AppKit_NSPasteboardItem")]
unsafe impl NSPasteboardWriting for NSPasteboardItem {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSPasteboardItem")]
    pub type NSPasteboardItem;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "types", managed = "Other")]
    pub unsafe fn types(&self) -> Id<NSArray<NSPasteboardType>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "availableTypeFromArray:", managed = "Other")]
    pub unsafe fn availableTypeFromArray(
        &self,
        types: &NSArray<NSPasteboardType>,
    ) -> Option<Id<NSPasteboardType>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "setDataProvider:forTypes:")]
    pub unsafe fn setDataProvider_forTypes(
        &self,
        data_provider: &ProtocolObject<dyn NSPasteboardItemDataProvider>,
        types: &NSArray<NSPasteboardType>,
    ) -> bool;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "setData:forType:")]
    pub unsafe fn setData_forType(&self, data: &NSData, r#type: &NSPasteboardType) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setString:forType:")]
    pub unsafe fn setString_forType(&self, string: &NSString, r#type: &NSPasteboardType) -> bool;

    #[objc2::method(sel = "setPropertyList:forType:")]
    pub unsafe fn setPropertyList_forType(
        &self,
        property_list: &Object,
        r#type: &NSPasteboardType,
    ) -> bool;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "dataForType:", managed = "Other")]
    pub unsafe fn dataForType(&self, r#type: &NSPasteboardType) -> Option<Id<NSData>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "stringForType:", managed = "Other")]
    pub unsafe fn stringForType(&self, r#type: &NSPasteboardType) -> Option<Id<NSString>>;

    #[objc2::method(sel = "propertyListForType:", managed = "Other")]
    pub unsafe fn propertyListForType(&self, r#type: &NSPasteboardType) -> Option<Id<Object>>;
}

#[objc2::protocol]
pub unsafe trait NSPasteboardItemDataProvider: NSObjectProtocol {
    #[cfg(all(feature = "AppKit_NSPasteboard", feature = "AppKit_NSPasteboardItem"))]
    #[objc2::method(sel = "pasteboard:item:provideDataForType:")]
    unsafe fn pasteboard_item_provideDataForType(
        &self,
        pasteboard: Option<&NSPasteboard>,
        item: &NSPasteboardItem,
        r#type: &NSPasteboardType,
    );

    #[cfg(feature = "AppKit_NSPasteboard")]
    #[objc2::method(optional, sel = "pasteboardFinishedWithDataProvider:")]
    unsafe fn pasteboardFinishedWithDataProvider(&self, pasteboard: &NSPasteboard);
}
