//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::protocol]
pub unsafe trait NSTokenFieldDelegate: NSTextFieldDelegate {
    #[cfg(all(
        feature = "AppKit_NSTokenField",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        optional,
        sel = "tokenField:completionsForSubstring:indexOfToken:indexOfSelectedItem:",
        managed = "Other"
    )]
    unsafe fn tokenField_completionsForSubstring_indexOfToken_indexOfSelectedItem(
        &self,
        token_field: &NSTokenField,
        substring: &NSString,
        token_index: NSInteger,
        selected_index: *mut NSInteger,
    ) -> Option<Id<NSArray>>;

    #[cfg(all(feature = "AppKit_NSTokenField", feature = "Foundation_NSArray"))]
    #[objc2::method(
        optional,
        sel = "tokenField:shouldAddObjects:atIndex:",
        managed = "Other"
    )]
    unsafe fn tokenField_shouldAddObjects_atIndex(
        &self,
        token_field: &NSTokenField,
        tokens: &NSArray,
        index: NSUInteger,
    ) -> Id<NSArray>;

    #[cfg(all(feature = "AppKit_NSTokenField", feature = "Foundation_NSString"))]
    #[objc2::method(
        optional,
        sel = "tokenField:displayStringForRepresentedObject:",
        managed = "Other"
    )]
    unsafe fn tokenField_displayStringForRepresentedObject(
        &self,
        token_field: &NSTokenField,
        represented_object: &Object,
    ) -> Option<Id<NSString>>;

    #[cfg(all(feature = "AppKit_NSTokenField", feature = "Foundation_NSString"))]
    #[objc2::method(
        optional,
        sel = "tokenField:editingStringForRepresentedObject:",
        managed = "Other"
    )]
    unsafe fn tokenField_editingStringForRepresentedObject(
        &self,
        token_field: &NSTokenField,
        represented_object: &Object,
    ) -> Option<Id<NSString>>;

    #[cfg(all(feature = "AppKit_NSTokenField", feature = "Foundation_NSString"))]
    #[objc2::method(
        optional,
        sel = "tokenField:representedObjectForEditingString:",
        managed = "Other"
    )]
    unsafe fn tokenField_representedObjectForEditingString(
        &self,
        token_field: &NSTokenField,
        editing_string: &NSString,
    ) -> Option<Id<Object>>;

    #[cfg(all(
        feature = "AppKit_NSPasteboard",
        feature = "AppKit_NSTokenField",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(optional, sel = "tokenField:writeRepresentedObjects:toPasteboard:")]
    unsafe fn tokenField_writeRepresentedObjects_toPasteboard(
        &self,
        token_field: &NSTokenField,
        objects: &NSArray,
        pboard: &NSPasteboard,
    ) -> bool;

    #[cfg(all(
        feature = "AppKit_NSPasteboard",
        feature = "AppKit_NSTokenField",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(optional, sel = "tokenField:readFromPasteboard:", managed = "Other")]
    unsafe fn tokenField_readFromPasteboard(
        &self,
        token_field: &NSTokenField,
        pboard: &NSPasteboard,
    ) -> Option<Id<NSArray>>;

    #[cfg(all(feature = "AppKit_NSMenu", feature = "AppKit_NSTokenField"))]
    #[objc2::method(
        optional,
        sel = "tokenField:menuForRepresentedObject:",
        managed = "Other"
    )]
    unsafe fn tokenField_menuForRepresentedObject(
        &self,
        token_field: &NSTokenField,
        represented_object: &Object,
    ) -> Option<Id<NSMenu>>;

    #[cfg(feature = "AppKit_NSTokenField")]
    #[objc2::method(optional, sel = "tokenField:hasMenuForRepresentedObject:")]
    unsafe fn tokenField_hasMenuForRepresentedObject(
        &self,
        token_field: &NSTokenField,
        represented_object: &Object,
    ) -> bool;

    #[cfg(feature = "AppKit_NSTokenField")]
    #[objc2::method(optional, sel = "tokenField:styleForRepresentedObject:")]
    unsafe fn tokenField_styleForRepresentedObject(
        &self,
        token_field: &NSTokenField,
        represented_object: &Object,
    ) -> NSTokenStyle;
}

#[objc2::interface(
    unsafe super = NSTextField,
    unsafe inherits = [
        NSControl,
        NSView,
        NSResponder,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTokenField")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSTokenField;
}

#[cfg(feature = "AppKit_NSTokenField")]
unsafe impl NSAccessibility for NSTokenField {}

#[cfg(feature = "AppKit_NSTokenField")]
unsafe impl NSAccessibilityElementProtocol for NSTokenField {}

#[cfg(feature = "AppKit_NSTokenField")]
unsafe impl NSAccessibilityNavigableStaticText for NSTokenField {}

#[cfg(feature = "AppKit_NSTokenField")]
unsafe impl NSAccessibilityStaticText for NSTokenField {}

#[cfg(feature = "AppKit_NSTokenField")]
unsafe impl NSAnimatablePropertyContainer for NSTokenField {}

#[cfg(feature = "AppKit_NSTokenField")]
unsafe impl NSAppearanceCustomization for NSTokenField {}

#[cfg(feature = "AppKit_NSTokenField")]
unsafe impl NSCoding for NSTokenField {}

#[cfg(feature = "AppKit_NSTokenField")]
unsafe impl NSDraggingDestination for NSTokenField {}

#[cfg(feature = "AppKit_NSTokenField")]
unsafe impl NSObjectProtocol for NSTokenField {}

#[cfg(feature = "AppKit_NSTokenField")]
unsafe impl NSTextContent for NSTokenField {}

#[cfg(feature = "AppKit_NSTokenField")]
unsafe impl NSUserInterfaceItemIdentification for NSTokenField {}

#[cfg(feature = "AppKit_NSTokenField")]
unsafe impl NSUserInterfaceValidations for NSTokenField {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTokenField")]
    pub type NSTokenField;

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn NSTokenFieldDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(&self, delegate: Option<&ProtocolObject<dyn NSTokenFieldDelegate>>);

    #[objc2::method(sel = "tokenStyle")]
    pub unsafe fn tokenStyle(&self) -> NSTokenStyle;

    #[objc2::method(sel = "setTokenStyle:")]
    pub unsafe fn setTokenStyle(&self, token_style: NSTokenStyle);

    #[objc2::method(sel = "completionDelay")]
    pub unsafe fn completionDelay(&self) -> NSTimeInterval;

    #[objc2::method(sel = "setCompletionDelay:")]
    pub unsafe fn setCompletionDelay(&self, completion_delay: NSTimeInterval);

    #[objc2::method(sel = "defaultCompletionDelay")]
    pub unsafe fn defaultCompletionDelay() -> NSTimeInterval;

    #[cfg(feature = "Foundation_NSCharacterSet")]
    #[objc2::method(sel = "tokenizingCharacterSet", managed = "Other")]
    pub unsafe fn tokenizingCharacterSet(&self) -> Id<NSCharacterSet>;

    #[cfg(feature = "Foundation_NSCharacterSet")]
    #[objc2::method(sel = "setTokenizingCharacterSet:")]
    pub unsafe fn setTokenizingCharacterSet(
        &self,
        tokenizing_character_set: Option<&NSCharacterSet>,
    );

    #[cfg(feature = "Foundation_NSCharacterSet")]
    #[objc2::method(sel = "defaultTokenizingCharacterSet", managed = "Other")]
    pub unsafe fn defaultTokenizingCharacterSet() -> Id<NSCharacterSet>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSTextField`
        ///
        /// NSTextFieldConvenience
    #[cfg(feature = "AppKit_NSTokenField")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTokenField")]
    pub type NSTokenField;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "labelWithString:", managed = "Other")]
    pub unsafe fn labelWithString(string_value: &NSString) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "wrappingLabelWithString:", managed = "Other")]
    pub unsafe fn wrappingLabelWithString(string_value: &NSString) -> Id<Self>;

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "labelWithAttributedString:", managed = "Other")]
    pub unsafe fn labelWithAttributedString(
        attributed_string_value: &NSAttributedString,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "textFieldWithString:", managed = "Other")]
    pub unsafe fn textFieldWithString(string_value: &NSString) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSControl`
    #[cfg(feature = "AppKit_NSTokenField")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTokenField")]
    pub type NSTokenField;

    #[objc2::method(sel = "initWithFrame:", managed = "Init")]
    pub unsafe fn initWithFrame(this: Option<Allocated<Self>>, frame_rect: NSRect) -> Id<Self>;
}
