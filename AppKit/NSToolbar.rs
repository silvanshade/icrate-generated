//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

pub type NSToolbarIdentifier = NSString;

typed_extensible_enum!(
    pub type NSToolbarItemIdentifier = NSString;
);

typed_enum!(
    pub type NSToolbarUserInfoKey = NSString;
);

extern_static!(NSToolbarItemKey: &'static NSToolbarUserInfoKey);

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSToolbarDisplayMode {
    NSToolbarDisplayModeDefault = 0,
    NSToolbarDisplayModeIconAndLabel = 1,
    NSToolbarDisplayModeIconOnly = 2,
    NSToolbarDisplayModeLabelOnly = 3,
}

#[ns_enum]
#[underlying(NSUInteger)]
#[deprecated = "NSToolbarSizeMode is no longer recommended and will be ignored in the future"]
pub enum NSToolbarSizeMode {
    #[deprecated = "NSToolbarSizeMode is no longer recommended and will be ignored in the future"]
    NSToolbarSizeModeDefault = 0,
    #[deprecated = "NSToolbarSizeMode is no longer recommended and will be ignored in the future"]
    NSToolbarSizeModeRegular = 1,
    #[deprecated = "NSToolbarSizeMode is no longer recommended and will be ignored in the future"]
    NSToolbarSizeModeSmall = 2,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSToolbar")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSToolbar;
}

#[cfg(feature = "AppKit_NSToolbar")]
unsafe impl NSObjectProtocol for NSToolbar {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSToolbar")]
    pub type NSToolbar;

    #[objc2::method(sel = "initWithIdentifier:", managed = "Init")]
    pub unsafe fn initWithIdentifier(
        this: Option<Allocated<Self>>,
        identifier: &NSToolbarIdentifier,
    ) -> Id<Self>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "insertItemWithItemIdentifier:atIndex:")]
    pub unsafe fn insertItemWithItemIdentifier_atIndex(
        &self,
        item_identifier: &NSToolbarItemIdentifier,
        index: NSInteger,
    );

    #[objc2::method(sel = "removeItemAtIndex:")]
    pub unsafe fn removeItemAtIndex(&self, index: NSInteger);

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn NSToolbarDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(&self, delegate: Option<&ProtocolObject<dyn NSToolbarDelegate>>);

    #[objc2::method(sel = "isVisible")]
    pub unsafe fn isVisible(&self) -> bool;

    #[objc2::method(sel = "setVisible:")]
    pub unsafe fn setVisible(&self, visible: bool);

    #[objc2::method(sel = "runCustomizationPalette:")]
    pub unsafe fn runCustomizationPalette(&self, sender: Option<&Object>);

    #[objc2::method(sel = "customizationPaletteIsRunning")]
    pub unsafe fn customizationPaletteIsRunning(&self) -> bool;

    #[objc2::method(sel = "displayMode")]
    pub unsafe fn displayMode(&self) -> NSToolbarDisplayMode;

    #[objc2::method(sel = "setDisplayMode:")]
    pub unsafe fn setDisplayMode(&self, display_mode: NSToolbarDisplayMode);

    #[objc2::method(sel = "selectedItemIdentifier", managed = "Other")]
    pub unsafe fn selectedItemIdentifier(&self) -> Option<Id<NSToolbarItemIdentifier>>;

    #[objc2::method(sel = "setSelectedItemIdentifier:")]
    pub unsafe fn setSelectedItemIdentifier(
        &self,
        selected_item_identifier: Option<&NSToolbarItemIdentifier>,
    );

    #[deprecated = "NSToolbarSizeMode is no longer recommended and will be ignored in the future"]
    #[objc2::method(sel = "sizeMode")]
    pub unsafe fn sizeMode(&self) -> NSToolbarSizeMode;

    #[deprecated = "NSToolbarSizeMode is no longer recommended and will be ignored in the future"]
    #[objc2::method(sel = "setSizeMode:")]
    pub unsafe fn setSizeMode(&self, size_mode: NSToolbarSizeMode);

    #[objc2::method(sel = "showsBaselineSeparator")]
    pub unsafe fn showsBaselineSeparator(&self) -> bool;

    #[objc2::method(sel = "setShowsBaselineSeparator:")]
    pub unsafe fn setShowsBaselineSeparator(&self, shows_baseline_separator: bool);

    #[objc2::method(sel = "allowsUserCustomization")]
    pub unsafe fn allowsUserCustomization(&self) -> bool;

    #[objc2::method(sel = "setAllowsUserCustomization:")]
    pub unsafe fn setAllowsUserCustomization(&self, allows_user_customization: bool);

    #[objc2::method(sel = "identifier", managed = "Other")]
    pub unsafe fn identifier(&self) -> Id<NSToolbarIdentifier>;

    #[cfg(all(feature = "AppKit_NSToolbarItem", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "items", managed = "Other")]
    pub unsafe fn items(&self) -> Id<NSArray<NSToolbarItem>>;

    #[cfg(all(feature = "AppKit_NSToolbarItem", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "visibleItems", managed = "Other")]
    pub unsafe fn visibleItems(&self) -> Option<Id<NSArray<NSToolbarItem>>>;

    #[cfg(feature = "Foundation_NSSet")]
    #[objc2::method(sel = "centeredItemIdentifiers", managed = "Other")]
    pub unsafe fn centeredItemIdentifiers(&self) -> Id<NSSet<NSToolbarItemIdentifier>>;

    #[cfg(feature = "Foundation_NSSet")]
    #[objc2::method(sel = "setCenteredItemIdentifiers:")]
    pub unsafe fn setCenteredItemIdentifiers(
        &self,
        centered_item_identifiers: &NSSet<NSToolbarItemIdentifier>,
    );

    #[deprecated = "Use the centeredItemIdentifiers property instead"]
    #[objc2::method(sel = "centeredItemIdentifier", managed = "Other")]
    pub unsafe fn centeredItemIdentifier(&self) -> Option<Id<NSToolbarItemIdentifier>>;

    #[deprecated = "Use the centeredItemIdentifiers property instead"]
    #[objc2::method(sel = "setCenteredItemIdentifier:")]
    pub unsafe fn setCenteredItemIdentifier(
        &self,
        centered_item_identifier: Option<&NSToolbarItemIdentifier>,
    );

    #[objc2::method(sel = "autosavesConfiguration")]
    pub unsafe fn autosavesConfiguration(&self) -> bool;

    #[objc2::method(sel = "setAutosavesConfiguration:")]
    pub unsafe fn setAutosavesConfiguration(&self, autosaves_configuration: bool);

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setConfigurationFromDictionary:")]
    pub unsafe fn setConfigurationFromDictionary(
        &self,
        config_dict: &NSDictionary<NSString, Object>,
    );

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "configurationDictionary", managed = "Other")]
    pub unsafe fn configurationDictionary(&self) -> Id<NSDictionary<NSString, Object>>;

    #[objc2::method(sel = "validateVisibleItems")]
    pub unsafe fn validateVisibleItems(&self);

    #[objc2::method(sel = "allowsExtensionItems")]
    pub unsafe fn allowsExtensionItems(&self) -> bool;

    #[objc2::method(sel = "setAllowsExtensionItems:")]
    pub unsafe fn setAllowsExtensionItems(&self, allows_extension_items: bool);
}

#[objc2::protocol]
pub unsafe trait NSToolbarDelegate: NSObjectProtocol {
    #[cfg(all(feature = "AppKit_NSToolbar", feature = "AppKit_NSToolbarItem"))]
    #[objc2::method(
        optional,
        sel = "toolbar:itemForItemIdentifier:willBeInsertedIntoToolbar:",
        managed = "Other"
    )]
    unsafe fn toolbar_itemForItemIdentifier_willBeInsertedIntoToolbar(
        &self,
        toolbar: &NSToolbar,
        item_identifier: &NSToolbarItemIdentifier,
        flag: bool,
    ) -> Option<Id<NSToolbarItem>>;

    #[cfg(all(feature = "AppKit_NSToolbar", feature = "Foundation_NSArray"))]
    #[objc2::method(optional, sel = "toolbarDefaultItemIdentifiers:", managed = "Other")]
    unsafe fn toolbarDefaultItemIdentifiers(
        &self,
        toolbar: &NSToolbar,
    ) -> Id<NSArray<NSToolbarItemIdentifier>>;

    #[cfg(all(feature = "AppKit_NSToolbar", feature = "Foundation_NSArray"))]
    #[objc2::method(optional, sel = "toolbarAllowedItemIdentifiers:", managed = "Other")]
    unsafe fn toolbarAllowedItemIdentifiers(
        &self,
        toolbar: &NSToolbar,
    ) -> Id<NSArray<NSToolbarItemIdentifier>>;

    #[cfg(all(feature = "AppKit_NSToolbar", feature = "Foundation_NSArray"))]
    #[objc2::method(optional, sel = "toolbarSelectableItemIdentifiers:", managed = "Other")]
    unsafe fn toolbarSelectableItemIdentifiers(
        &self,
        toolbar: &NSToolbar,
    ) -> Id<NSArray<NSToolbarItemIdentifier>>;

    #[cfg(all(feature = "AppKit_NSToolbar", feature = "Foundation_NSSet"))]
    #[objc2::method(optional, sel = "toolbarImmovableItemIdentifiers:", managed = "Other")]
    unsafe fn toolbarImmovableItemIdentifiers(
        &self,
        toolbar: &NSToolbar,
    ) -> Id<NSSet<NSToolbarItemIdentifier>>;

    #[cfg(feature = "AppKit_NSToolbar")]
    #[objc2::method(optional, sel = "toolbar:itemIdentifier:canBeInsertedAtIndex:")]
    unsafe fn toolbar_itemIdentifier_canBeInsertedAtIndex(
        &self,
        toolbar: &NSToolbar,
        item_identifier: &NSToolbarItemIdentifier,
        index: NSInteger,
    ) -> bool;

    #[cfg(feature = "Foundation_NSNotification")]
    #[objc2::method(optional, sel = "toolbarWillAddItem:")]
    unsafe fn toolbarWillAddItem(&self, notification: &NSNotification);

    #[cfg(feature = "Foundation_NSNotification")]
    #[objc2::method(optional, sel = "toolbarDidRemoveItem:")]
    unsafe fn toolbarDidRemoveItem(&self, notification: &NSNotification);
}

extern_static!(NSToolbarWillAddItemNotification: &'static NSNotificationName);

extern_static!(NSToolbarDidRemoveItemNotification: &'static NSNotificationName);

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSToolbar")]
    pub type NSToolbar;

    #[cfg(feature = "AppKit_NSView")]
    #[deprecated = "Use NSTitlebarAccessoryViewController with NSWindow instead"]
    #[objc2::method(sel = "fullScreenAccessoryView", managed = "Other")]
    pub unsafe fn fullScreenAccessoryView(&self) -> Option<Id<NSView>>;

    #[cfg(feature = "AppKit_NSView")]
    #[deprecated = "Use NSTitlebarAccessoryViewController with NSWindow instead"]
    #[objc2::method(sel = "setFullScreenAccessoryView:")]
    pub unsafe fn setFullScreenAccessoryView(&self, full_screen_accessory_view: Option<&NSView>);

    #[deprecated = "Use NSTitlebarAccessoryViewController and its fullScreenMinHeight property with NSWindow instead."]
    #[objc2::method(sel = "fullScreenAccessoryViewMinHeight")]
    pub unsafe fn fullScreenAccessoryViewMinHeight(&self) -> CGFloat;

    #[deprecated = "Use NSTitlebarAccessoryViewController and its fullScreenMinHeight property with NSWindow instead."]
    #[objc2::method(sel = "setFullScreenAccessoryViewMinHeight:")]
    pub unsafe fn setFullScreenAccessoryViewMinHeight(
        &self,
        full_screen_accessory_view_min_height: CGFloat,
    );

    #[deprecated = "Use NSTitlebarAccessoryViewController with NSWindow instead. The max height of a titlebar accessory is implied by its view's height."]
    #[objc2::method(sel = "fullScreenAccessoryViewMaxHeight")]
    pub unsafe fn fullScreenAccessoryViewMaxHeight(&self) -> CGFloat;

    #[deprecated = "Use NSTitlebarAccessoryViewController with NSWindow instead. The max height of a titlebar accessory is implied by its view's height."]
    #[objc2::method(sel = "setFullScreenAccessoryViewMaxHeight:")]
    pub unsafe fn setFullScreenAccessoryViewMaxHeight(
        &self,
        full_screen_accessory_view_max_height: CGFloat,
    );
}
