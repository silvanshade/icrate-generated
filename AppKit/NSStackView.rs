//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSStackViewGravity {
    NSStackViewGravityTop = 1,
    NSStackViewGravityLeading = 1,
    NSStackViewGravityCenter = 2,
    NSStackViewGravityBottom = 3,
    NSStackViewGravityTrailing = 3,
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSStackViewDistribution {
    NSStackViewDistributionGravityAreas = -1,
    NSStackViewDistributionFill = 0,
    NSStackViewDistributionFillEqually = 1,
    NSStackViewDistributionFillProportionally = 2,
    NSStackViewDistributionEqualSpacing = 3,
    NSStackViewDistributionEqualCentering = 4,
}

typed_extensible_enum!(
    pub type NSStackViewVisibilityPriority = c_float;
);

extern_static!(NSStackViewVisibilityPriorityMustHold: NSStackViewVisibilityPriority = 1000);

extern_static!(
    NSStackViewVisibilityPriorityDetachOnlyIfNecessary: NSStackViewVisibilityPriority = 900
);

extern_static!(NSStackViewVisibilityPriorityNotVisible: NSStackViewVisibilityPriority = 0);

#[objc2::interface(
    unsafe super = NSView,
    unsafe inherits = [
        NSResponder,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSStackView")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSStackView;
}

#[cfg(feature = "AppKit_NSStackView")]
unsafe impl NSAccessibility for NSStackView {}

#[cfg(feature = "AppKit_NSStackView")]
unsafe impl NSAccessibilityElementProtocol for NSStackView {}

#[cfg(feature = "AppKit_NSStackView")]
unsafe impl NSAnimatablePropertyContainer for NSStackView {}

#[cfg(feature = "AppKit_NSStackView")]
unsafe impl NSAppearanceCustomization for NSStackView {}

#[cfg(feature = "AppKit_NSStackView")]
unsafe impl NSCoding for NSStackView {}

#[cfg(feature = "AppKit_NSStackView")]
unsafe impl NSDraggingDestination for NSStackView {}

#[cfg(feature = "AppKit_NSStackView")]
unsafe impl NSObjectProtocol for NSStackView {}

#[cfg(feature = "AppKit_NSStackView")]
unsafe impl NSUserInterfaceItemIdentification for NSStackView {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSStackView")]
    pub type NSStackView;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "stackViewWithViews:", managed = "Other")]
    pub unsafe fn stackViewWithViews(views: &NSArray<NSView>) -> Id<Self>;

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn NSStackViewDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(&self, delegate: Option<&ProtocolObject<dyn NSStackViewDelegate>>);

    #[objc2::method(sel = "orientation")]
    pub unsafe fn orientation(&self) -> NSUserInterfaceLayoutOrientation;

    #[objc2::method(sel = "setOrientation:")]
    pub unsafe fn setOrientation(&self, orientation: NSUserInterfaceLayoutOrientation);

    #[objc2::method(sel = "alignment")]
    pub unsafe fn alignment(&self) -> NSLayoutAttribute;

    #[objc2::method(sel = "setAlignment:")]
    pub unsafe fn setAlignment(&self, alignment: NSLayoutAttribute);

    #[objc2::method(sel = "edgeInsets")]
    pub unsafe fn edgeInsets(&self) -> NSEdgeInsets;

    #[objc2::method(sel = "setEdgeInsets:")]
    pub unsafe fn setEdgeInsets(&self, edge_insets: NSEdgeInsets);

    #[objc2::method(sel = "distribution")]
    pub unsafe fn distribution(&self) -> NSStackViewDistribution;

    #[objc2::method(sel = "setDistribution:")]
    pub unsafe fn setDistribution(&self, distribution: NSStackViewDistribution);

    #[objc2::method(sel = "spacing")]
    pub unsafe fn spacing(&self) -> CGFloat;

    #[objc2::method(sel = "setSpacing:")]
    pub unsafe fn setSpacing(&self, spacing: CGFloat);

    #[objc2::method(sel = "setCustomSpacing:afterView:")]
    pub unsafe fn setCustomSpacing_afterView(&self, spacing: CGFloat, view: &NSView);

    #[objc2::method(sel = "customSpacingAfterView:")]
    pub unsafe fn customSpacingAfterView(&self, view: &NSView) -> CGFloat;

    #[objc2::method(sel = "detachesHiddenViews")]
    pub unsafe fn detachesHiddenViews(&self) -> bool;

    #[objc2::method(sel = "setDetachesHiddenViews:")]
    pub unsafe fn setDetachesHiddenViews(&self, detaches_hidden_views: bool);

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "arrangedSubviews", managed = "Other")]
    pub unsafe fn arrangedSubviews(&self) -> Id<NSArray<NSView>>;

    #[objc2::method(sel = "addArrangedSubview:")]
    pub unsafe fn addArrangedSubview(&self, view: &NSView);

    #[objc2::method(sel = "insertArrangedSubview:atIndex:")]
    pub unsafe fn insertArrangedSubview_atIndex(&self, view: &NSView, index: NSInteger);

    #[objc2::method(sel = "removeArrangedSubview:")]
    pub unsafe fn removeArrangedSubview(&self, view: &NSView);

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "detachedViews", managed = "Other")]
    pub unsafe fn detachedViews(&self) -> Id<NSArray<NSView>>;

    #[objc2::method(sel = "setVisibilityPriority:forView:")]
    pub unsafe fn setVisibilityPriority_forView(
        &self,
        priority: NSStackViewVisibilityPriority,
        view: &NSView,
    );

    #[objc2::method(sel = "visibilityPriorityForView:")]
    pub unsafe fn visibilityPriorityForView(&self, view: &NSView) -> NSStackViewVisibilityPriority;

    #[objc2::method(sel = "clippingResistancePriorityForOrientation:")]
    pub unsafe fn clippingResistancePriorityForOrientation(
        &self,
        orientation: NSLayoutConstraintOrientation,
    ) -> NSLayoutPriority;

    #[objc2::method(sel = "setClippingResistancePriority:forOrientation:")]
    pub unsafe fn setClippingResistancePriority_forOrientation(
        &self,
        clipping_resistance_priority: NSLayoutPriority,
        orientation: NSLayoutConstraintOrientation,
    );

    #[objc2::method(sel = "huggingPriorityForOrientation:")]
    pub unsafe fn huggingPriorityForOrientation(
        &self,
        orientation: NSLayoutConstraintOrientation,
    ) -> NSLayoutPriority;

    #[objc2::method(sel = "setHuggingPriority:forOrientation:")]
    pub unsafe fn setHuggingPriority_forOrientation(
        &self,
        hugging_priority: NSLayoutPriority,
        orientation: NSLayoutConstraintOrientation,
    );
}

#[objc2::protocol]
pub unsafe trait NSStackViewDelegate: NSObjectProtocol {
    #[cfg(all(
        feature = "AppKit_NSStackView",
        feature = "AppKit_NSView",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(optional, sel = "stackView:willDetachViews:")]
    unsafe fn stackView_willDetachViews(&self, stack_view: &NSStackView, views: &NSArray<NSView>);

    #[cfg(all(
        feature = "AppKit_NSStackView",
        feature = "AppKit_NSView",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(optional, sel = "stackView:didReattachViews:")]
    unsafe fn stackView_didReattachViews(&self, stack_view: &NSStackView, views: &NSArray<NSView>);
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSStackView")]
    pub type NSStackView;

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "addView:inGravity:")]
    pub unsafe fn addView_inGravity(&self, view: &NSView, gravity: NSStackViewGravity);

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "insertView:atIndex:inGravity:")]
    pub unsafe fn insertView_atIndex_inGravity(
        &self,
        view: &NSView,
        index: NSUInteger,
        gravity: NSStackViewGravity,
    );

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "removeView:")]
    pub unsafe fn removeView(&self, view: &NSView);

    #[cfg(all(feature = "AppKit_NSView", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "viewsInGravity:", managed = "Other")]
    pub unsafe fn viewsInGravity(&self, gravity: NSStackViewGravity) -> Id<NSArray<NSView>>;

    #[cfg(all(feature = "AppKit_NSView", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "setViews:inGravity:")]
    pub unsafe fn setViews_inGravity(&self, views: &NSArray<NSView>, gravity: NSStackViewGravity);

    #[cfg(all(feature = "AppKit_NSView", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "views", managed = "Other")]
    pub unsafe fn views(&self) -> Id<NSArray<NSView>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSStackView")]
    pub type NSStackView;

    #[deprecated = "Set -distribution to NSStackViewDistributionEqualSpacing instead."]
    #[objc2::method(sel = "hasEqualSpacing")]
    pub unsafe fn hasEqualSpacing(&self) -> bool;

    #[deprecated = "Set -distribution to NSStackViewDistributionEqualSpacing instead."]
    #[objc2::method(sel = "setHasEqualSpacing:")]
    pub unsafe fn setHasEqualSpacing(&self, has_equal_spacing: bool);
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSView`
    #[cfg(feature = "AppKit_NSStackView")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSStackView")]
    pub type NSStackView;

    #[objc2::method(sel = "initWithFrame:", managed = "Init")]
    pub unsafe fn initWithFrame(this: Option<Allocated<Self>>, frame_rect: NSRect) -> Id<Self>;
}
