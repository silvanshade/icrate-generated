//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::protocol]
pub unsafe trait NSTextInput {
    #[deprecated]
    #[objc2::method(sel = "insertText:")]
    unsafe fn insertText(&self, string: Option<&Object>);

    #[deprecated]
    #[objc2::method(sel = "doCommandBySelector:")]
    unsafe fn doCommandBySelector(&self, selector: Option<Sel>);

    #[deprecated]
    #[objc2::method(sel = "setMarkedText:selectedRange:")]
    unsafe fn setMarkedText_selectedRange(&self, string: Option<&Object>, sel_range: NSRange);

    #[deprecated]
    #[objc2::method(sel = "unmarkText")]
    unsafe fn unmarkText(&self);

    #[deprecated]
    #[objc2::method(sel = "hasMarkedText")]
    unsafe fn hasMarkedText(&self) -> bool;

    #[deprecated]
    #[objc2::method(sel = "conversationIdentifier")]
    unsafe fn conversationIdentifier(&self) -> NSInteger;

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[deprecated]
    #[objc2::method(sel = "attributedSubstringFromRange:", managed = "Other")]
    unsafe fn attributedSubstringFromRange(&self, range: NSRange)
        -> Option<Id<NSAttributedString>>;

    #[deprecated]
    #[objc2::method(sel = "markedRange")]
    unsafe fn markedRange(&self) -> NSRange;

    #[deprecated]
    #[objc2::method(sel = "selectedRange")]
    unsafe fn selectedRange(&self) -> NSRange;

    #[deprecated]
    #[objc2::method(sel = "firstRectForCharacterRange:")]
    unsafe fn firstRectForCharacterRange(&self, range: NSRange) -> NSRect;

    #[deprecated]
    #[objc2::method(sel = "characterIndexForPoint:")]
    unsafe fn characterIndexForPoint(&self, point: NSPoint) -> NSUInteger;

    #[cfg(feature = "Foundation_NSArray")]
    #[deprecated]
    #[objc2::method(sel = "validAttributesForMarkedText", managed = "Other")]
    unsafe fn validAttributesForMarkedText(&self) -> Option<Id<NSArray>>;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[deprecated = "Use NSTextInputContext instead"]
    #[cfg(feature = "AppKit_NSInputManager")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSInputManager;
}

#[cfg(feature = "AppKit_NSInputManager")]
unsafe impl NSObjectProtocol for NSInputManager {}

#[cfg(feature = "AppKit_NSInputManager")]
unsafe impl NSTextInput for NSInputManager {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSInputManager")]
    #[deprecated = "Use NSTextInputContext instead"]
    pub type NSInputManager;

    #[deprecated]
    #[objc2::method(sel = "currentInputManager", managed = "Other")]
    pub unsafe fn currentInputManager() -> Option<Id<NSInputManager>>;

    #[deprecated]
    #[objc2::method(sel = "cycleToNextInputLanguage:")]
    pub unsafe fn cycleToNextInputLanguage(sender: Option<&Object>);

    #[deprecated]
    #[objc2::method(sel = "cycleToNextInputServerInLanguage:")]
    pub unsafe fn cycleToNextInputServerInLanguage(sender: Option<&Object>);

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "initWithName:host:", managed = "Init")]
    pub unsafe fn initWithName_host(
        this: Option<Allocated<Self>>,
        input_server_name: Option<&NSString>,
        host_name: Option<&NSString>,
    ) -> Option<Id<NSInputManager>>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "localizedInputManagerName", managed = "Other")]
    pub unsafe fn localizedInputManagerName(&self) -> Option<Id<NSString>>;

    #[deprecated]
    #[objc2::method(sel = "markedTextAbandoned:")]
    pub unsafe fn markedTextAbandoned(&self, cli: Option<&Object>);

    #[deprecated]
    #[objc2::method(sel = "markedTextSelectionChanged:client:")]
    pub unsafe fn markedTextSelectionChanged_client(&self, new_sel: NSRange, cli: Option<&Object>);

    #[deprecated]
    #[objc2::method(sel = "wantsToInterpretAllKeystrokes")]
    pub unsafe fn wantsToInterpretAllKeystrokes(&self) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "language", managed = "Other")]
    pub unsafe fn language(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "AppKit_NSImage")]
    #[deprecated]
    #[objc2::method(sel = "image", managed = "Other")]
    pub unsafe fn image(&self) -> Option<Id<NSImage>>;

    #[cfg(feature = "AppKit_NSInputServer")]
    #[deprecated]
    #[objc2::method(sel = "server", managed = "Other")]
    pub unsafe fn server(&self) -> Option<Id<NSInputServer>>;

    #[deprecated]
    #[objc2::method(sel = "wantsToHandleMouseEvents")]
    pub unsafe fn wantsToHandleMouseEvents(&self) -> bool;

    #[cfg(feature = "AppKit_NSEvent")]
    #[deprecated]
    #[objc2::method(sel = "handleMouseEvent:")]
    pub unsafe fn handleMouseEvent(&self, mouse_event: Option<&NSEvent>) -> bool;

    #[deprecated]
    #[objc2::method(sel = "wantsToDelayTextChangeNotifications")]
    pub unsafe fn wantsToDelayTextChangeNotifications(&self) -> bool;
}
