//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

pub type NSColorListName = NSString;

pub type NSColorName = NSString;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSColorList")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSColorList;
}

#[cfg(feature = "AppKit_NSColorList")]
unsafe impl NSCoding for NSColorList {}

#[cfg(feature = "AppKit_NSColorList")]
unsafe impl NSObjectProtocol for NSColorList {}

#[cfg(feature = "AppKit_NSColorList")]
unsafe impl NSSecureCoding for NSColorList {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSColorList")]
    pub type NSColorList;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "availableColorLists", managed = "Other")]
    pub unsafe fn availableColorLists() -> Id<NSArray<NSColorList>>;

    #[objc2::method(sel = "colorListNamed:", managed = "Other")]
    pub unsafe fn colorListNamed(name: &NSColorListName) -> Option<Id<NSColorList>>;

    #[objc2::method(sel = "initWithName:", managed = "Init")]
    pub unsafe fn initWithName(this: Option<Allocated<Self>>, name: &NSColorListName) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithName:fromFile:", managed = "Init")]
    pub unsafe fn initWithName_fromFile(
        this: Option<Allocated<Self>>,
        name: &NSColorListName,
        path: Option<&NSString>,
    ) -> Option<Id<Self>>;

    #[objc2::method(sel = "name", managed = "Other")]
    pub unsafe fn name(&self) -> Option<Id<NSColorListName>>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "setColor:forKey:")]
    pub unsafe fn setColor_forKey(&self, color: &NSColor, key: &NSColorName);

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "insertColor:key:atIndex:")]
    pub unsafe fn insertColor_key_atIndex(
        &self,
        color: &NSColor,
        key: &NSColorName,
        loc: NSUInteger,
    );

    #[objc2::method(sel = "removeColorWithKey:")]
    pub unsafe fn removeColorWithKey(&self, key: &NSColorName);

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "colorWithKey:", managed = "Other")]
    pub unsafe fn colorWithKey(&self, key: &NSColorName) -> Option<Id<NSColor>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "allKeys", managed = "Other")]
    pub unsafe fn allKeys(&self) -> Id<NSArray<NSColorName>>;

    #[objc2::method(sel = "isEditable")]
    pub unsafe fn isEditable(&self) -> bool;

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
    #[objc2::method(sel = "writeToURL:error:", throws)]
    pub unsafe fn writeToURL_error(&self, url: Option<&NSURL>) -> Result<(), Id<NSError>>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "Use -writeToURL:error: instead"]
    #[objc2::method(sel = "writeToFile:")]
    pub unsafe fn writeToFile(&self, path: Option<&NSString>) -> bool;

    #[objc2::method(sel = "removeFile")]
    pub unsafe fn removeFile(&self);
}

extern_static!(NSColorListDidChangeNotification: &'static NSNotificationName);
