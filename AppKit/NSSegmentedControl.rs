//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSSegmentSwitchTracking {
    NSSegmentSwitchTrackingSelectOne = 0,
    NSSegmentSwitchTrackingSelectAny = 1,
    NSSegmentSwitchTrackingMomentary = 2,
    NSSegmentSwitchTrackingMomentaryAccelerator = 3,
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSSegmentStyle {
    NSSegmentStyleAutomatic = 0,
    NSSegmentStyleRounded = 1,
    NSSegmentStyleRoundRect = 3,
    NSSegmentStyleTexturedSquare = 4,
    NSSegmentStyleSmallSquare = 6,
    NSSegmentStyleSeparated = 8,
    NSSegmentStyleTexturedRounded = 2,
    NSSegmentStyleCapsule = 5,
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSSegmentDistribution {
    NSSegmentDistributionFit = 0,
    NSSegmentDistributionFill = 1,
    NSSegmentDistributionFillEqually = 2,
    NSSegmentDistributionFillProportionally = 3,
}

#[objc2::interface(
    unsafe super = NSControl,
    unsafe inherits = [
        NSView,
        NSResponder,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSSegmentedControl")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSSegmentedControl;
}

#[cfg(feature = "AppKit_NSSegmentedControl")]
unsafe impl NSAccessibility for NSSegmentedControl {}

#[cfg(feature = "AppKit_NSSegmentedControl")]
unsafe impl NSAccessibilityElementProtocol for NSSegmentedControl {}

#[cfg(feature = "AppKit_NSSegmentedControl")]
unsafe impl NSAnimatablePropertyContainer for NSSegmentedControl {}

#[cfg(feature = "AppKit_NSSegmentedControl")]
unsafe impl NSAppearanceCustomization for NSSegmentedControl {}

#[cfg(feature = "AppKit_NSSegmentedControl")]
unsafe impl NSCoding for NSSegmentedControl {}

#[cfg(feature = "AppKit_NSSegmentedControl")]
unsafe impl NSDraggingDestination for NSSegmentedControl {}

#[cfg(feature = "AppKit_NSSegmentedControl")]
unsafe impl NSObjectProtocol for NSSegmentedControl {}

#[cfg(feature = "AppKit_NSSegmentedControl")]
unsafe impl NSUserInterfaceCompression for NSSegmentedControl {}

#[cfg(feature = "AppKit_NSSegmentedControl")]
unsafe impl NSUserInterfaceItemIdentification for NSSegmentedControl {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSSegmentedControl")]
    pub type NSSegmentedControl;

    #[objc2::method(sel = "segmentCount")]
    pub unsafe fn segmentCount(&self) -> NSInteger;

    #[objc2::method(sel = "setSegmentCount:")]
    pub unsafe fn setSegmentCount(&self, segment_count: NSInteger);

    #[objc2::method(sel = "selectedSegment")]
    pub unsafe fn selectedSegment(&self) -> NSInteger;

    #[objc2::method(sel = "setSelectedSegment:")]
    pub unsafe fn setSelectedSegment(&self, selected_segment: NSInteger);

    #[objc2::method(sel = "selectSegmentWithTag:")]
    pub unsafe fn selectSegmentWithTag(&self, tag: NSInteger) -> bool;

    #[objc2::method(sel = "setWidth:forSegment:")]
    pub unsafe fn setWidth_forSegment(&self, width: CGFloat, segment: NSInteger);

    #[objc2::method(sel = "widthForSegment:")]
    pub unsafe fn widthForSegment(&self, segment: NSInteger) -> CGFloat;

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "setImage:forSegment:")]
    pub unsafe fn setImage_forSegment(&self, image: Option<&NSImage>, segment: NSInteger);

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "imageForSegment:", managed = "Other")]
    pub unsafe fn imageForSegment(&self, segment: NSInteger) -> Option<Id<NSImage>>;

    #[objc2::method(sel = "setImageScaling:forSegment:")]
    pub unsafe fn setImageScaling_forSegment(&self, scaling: NSImageScaling, segment: NSInteger);

    #[objc2::method(sel = "imageScalingForSegment:")]
    pub unsafe fn imageScalingForSegment(&self, segment: NSInteger) -> NSImageScaling;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setLabel:forSegment:")]
    pub unsafe fn setLabel_forSegment(&self, label: &NSString, segment: NSInteger);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "labelForSegment:", managed = "Other")]
    pub unsafe fn labelForSegment(&self, segment: NSInteger) -> Option<Id<NSString>>;

    #[cfg(feature = "AppKit_NSMenu")]
    #[objc2::method(sel = "setMenu:forSegment:")]
    pub unsafe fn setMenu_forSegment(&self, menu: Option<&NSMenu>, segment: NSInteger);

    #[cfg(feature = "AppKit_NSMenu")]
    #[objc2::method(sel = "menuForSegment:", managed = "Other")]
    pub unsafe fn menuForSegment(&self, segment: NSInteger) -> Option<Id<NSMenu>>;

    #[objc2::method(sel = "setSelected:forSegment:")]
    pub unsafe fn setSelected_forSegment(&self, selected: bool, segment: NSInteger);

    #[objc2::method(sel = "isSelectedForSegment:")]
    pub unsafe fn isSelectedForSegment(&self, segment: NSInteger) -> bool;

    #[objc2::method(sel = "setEnabled:forSegment:")]
    pub unsafe fn setEnabled_forSegment(&self, enabled: bool, segment: NSInteger);

    #[objc2::method(sel = "isEnabledForSegment:")]
    pub unsafe fn isEnabledForSegment(&self, segment: NSInteger) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setToolTip:forSegment:")]
    pub unsafe fn setToolTip_forSegment(&self, tool_tip: Option<&NSString>, segment: NSInteger);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "toolTipForSegment:", managed = "Other")]
    pub unsafe fn toolTipForSegment(&self, segment: NSInteger) -> Option<Id<NSString>>;

    #[objc2::method(sel = "setTag:forSegment:")]
    pub unsafe fn setTag_forSegment(&self, tag: NSInteger, segment: NSInteger);

    #[objc2::method(sel = "tagForSegment:")]
    pub unsafe fn tagForSegment(&self, segment: NSInteger) -> NSInteger;

    #[objc2::method(sel = "setShowsMenuIndicator:forSegment:")]
    pub unsafe fn setShowsMenuIndicator_forSegment(
        &self,
        shows_menu_indicator: bool,
        segment: NSInteger,
    );

    #[objc2::method(sel = "showsMenuIndicatorForSegment:")]
    pub unsafe fn showsMenuIndicatorForSegment(&self, segment: NSInteger) -> bool;

    #[objc2::method(sel = "segmentStyle")]
    pub unsafe fn segmentStyle(&self) -> NSSegmentStyle;

    #[objc2::method(sel = "setSegmentStyle:")]
    pub unsafe fn setSegmentStyle(&self, segment_style: NSSegmentStyle);

    #[objc2::method(sel = "isSpringLoaded")]
    pub unsafe fn isSpringLoaded(&self) -> bool;

    #[objc2::method(sel = "setSpringLoaded:")]
    pub unsafe fn setSpringLoaded(&self, spring_loaded: bool);

    #[objc2::method(sel = "trackingMode")]
    pub unsafe fn trackingMode(&self) -> NSSegmentSwitchTracking;

    #[objc2::method(sel = "setTrackingMode:")]
    pub unsafe fn setTrackingMode(&self, tracking_mode: NSSegmentSwitchTracking);

    #[objc2::method(sel = "doubleValueForSelectedSegment")]
    pub unsafe fn doubleValueForSelectedSegment(&self) -> c_double;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "selectedSegmentBezelColor", managed = "Other")]
    pub unsafe fn selectedSegmentBezelColor(&self) -> Option<Id<NSColor>>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "setSelectedSegmentBezelColor:")]
    pub unsafe fn setSelectedSegmentBezelColor(
        &self,
        selected_segment_bezel_color: Option<&NSColor>,
    );

    #[objc2::method(sel = "indexOfSelectedItem")]
    pub unsafe fn indexOfSelectedItem(&self) -> NSInteger;

    #[objc2::method(sel = "setAlignment:forSegment:")]
    pub unsafe fn setAlignment_forSegment(&self, alignment: NSTextAlignment, segment: NSInteger);

    #[objc2::method(sel = "alignmentForSegment:")]
    pub unsafe fn alignmentForSegment(&self, segment: NSInteger) -> NSTextAlignment;

    #[objc2::method(sel = "segmentDistribution")]
    pub unsafe fn segmentDistribution(&self) -> NSSegmentDistribution;

    #[objc2::method(sel = "setSegmentDistribution:")]
    pub unsafe fn setSegmentDistribution(&self, segment_distribution: NSSegmentDistribution);

    #[cfg(all(
        feature = "AppKit_NSUserInterfaceCompressionOptions",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(sel = "compressWithPrioritizedCompressionOptions:")]
    pub unsafe fn compressWithPrioritizedCompressionOptions(
        &self,
        prioritized_options: &NSArray<NSUserInterfaceCompressionOptions>,
    );

    #[cfg(all(
        feature = "AppKit_NSUserInterfaceCompressionOptions",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(sel = "minimumSizeWithPrioritizedCompressionOptions:")]
    pub unsafe fn minimumSizeWithPrioritizedCompressionOptions(
        &self,
        prioritized_options: &NSArray<NSUserInterfaceCompressionOptions>,
    ) -> NSSize;

    #[cfg(feature = "AppKit_NSUserInterfaceCompressionOptions")]
    #[objc2::method(sel = "activeCompressionOptions", managed = "Other")]
    pub unsafe fn activeCompressionOptions(&self) -> Id<NSUserInterfaceCompressionOptions>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSSegmentedControl")]
    pub type NSSegmentedControl;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(
        sel = "segmentedControlWithLabels:trackingMode:target:action:",
        managed = "Other"
    )]
    pub unsafe fn segmentedControlWithLabels_trackingMode_target_action(
        labels: &NSArray<NSString>,
        tracking_mode: NSSegmentSwitchTracking,
        target: Option<&Object>,
        action: Option<Sel>,
    ) -> Id<Self>;

    #[cfg(all(feature = "AppKit_NSImage", feature = "Foundation_NSArray"))]
    #[objc2::method(
        sel = "segmentedControlWithImages:trackingMode:target:action:",
        managed = "Other"
    )]
    pub unsafe fn segmentedControlWithImages_trackingMode_target_action(
        images: &NSArray<NSImage>,
        tracking_mode: NSSegmentSwitchTracking,
        target: Option<&Object>,
        action: Option<Sel>,
    ) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSControl`
    #[cfg(feature = "AppKit_NSSegmentedControl")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSSegmentedControl")]
    pub type NSSegmentedControl;

    #[objc2::method(sel = "initWithFrame:", managed = "Init")]
    pub unsafe fn initWithFrame(this: Option<Allocated<Self>>, frame_rect: NSRect) -> Id<Self>;
}
