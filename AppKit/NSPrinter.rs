//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSPrinterTableStatus {
    NSPrinterTableOK = 0,
    NSPrinterTableNotFound = 1,
    NSPrinterTableError = 2,
}

typed_extensible_enum!(
    pub type NSPrinterTypeName = NSString;
);

typed_extensible_enum!(
    pub type NSPrinterPaperName = NSString;
);

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSPrinter")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSPrinter;
}

#[cfg(feature = "AppKit_NSPrinter")]
unsafe impl NSCoding for NSPrinter {}

#[cfg(feature = "AppKit_NSPrinter")]
unsafe impl NSObjectProtocol for NSPrinter {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSPrinter")]
    pub type NSPrinter;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "printerNames", managed = "Other")]
    pub unsafe fn printerNames() -> Id<NSArray<NSString>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "printerTypes", managed = "Other")]
    pub unsafe fn printerTypes() -> Id<NSArray<NSPrinterTypeName>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "printerWithName:", managed = "Other")]
    pub unsafe fn printerWithName(name: &NSString) -> Option<Id<NSPrinter>>;

    #[objc2::method(sel = "printerWithType:", managed = "Other")]
    pub unsafe fn printerWithType(r#type: &NSPrinterTypeName) -> Option<Id<NSPrinter>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "name", managed = "Other")]
    pub unsafe fn name(&self) -> Id<NSString>;

    #[objc2::method(sel = "type", managed = "Other")]
    pub unsafe fn r#type(&self) -> Id<NSPrinterTypeName>;

    #[objc2::method(sel = "languageLevel")]
    pub unsafe fn languageLevel(&self) -> NSInteger;

    #[objc2::method(sel = "pageSizeForPaper:")]
    pub unsafe fn pageSizeForPaper(&self, paper_name: &NSPrinterPaperName) -> NSSize;

    #[cfg(feature = "Foundation_NSDictionary")]
    #[objc2::method(sel = "deviceDescription", managed = "Other")]
    pub unsafe fn deviceDescription(&self) -> Id<NSDictionary<NSDeviceDescriptionKey, Object>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSPrinter")]
    pub type NSPrinter;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "statusForTable:")]
    pub unsafe fn statusForTable(&self, table_name: &NSString) -> NSPrinterTableStatus;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "isKey:inTable:")]
    pub unsafe fn isKey_inTable(&self, key: Option<&NSString>, table: &NSString) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "booleanForKey:inTable:")]
    pub unsafe fn booleanForKey_inTable(&self, key: Option<&NSString>, table: &NSString) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "floatForKey:inTable:")]
    pub unsafe fn floatForKey_inTable(&self, key: Option<&NSString>, table: &NSString) -> c_float;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "intForKey:inTable:")]
    pub unsafe fn intForKey_inTable(&self, key: Option<&NSString>, table: &NSString) -> c_int;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "rectForKey:inTable:")]
    pub unsafe fn rectForKey_inTable(&self, key: Option<&NSString>, table: &NSString) -> NSRect;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "sizeForKey:inTable:")]
    pub unsafe fn sizeForKey_inTable(&self, key: Option<&NSString>, table: &NSString) -> NSSize;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "stringForKey:inTable:", managed = "Other")]
    pub unsafe fn stringForKey_inTable(
        &self,
        key: Option<&NSString>,
        table: &NSString,
    ) -> Option<Id<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[deprecated]
    #[objc2::method(sel = "stringListForKey:inTable:", managed = "Other")]
    pub unsafe fn stringListForKey_inTable(
        &self,
        key: Option<&NSString>,
        table: &NSString,
    ) -> Option<Id<NSArray>>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "imageRectForPaper:")]
    pub unsafe fn imageRectForPaper(&self, paper_name: Option<&NSString>) -> NSRect;

    #[deprecated]
    #[objc2::method(sel = "acceptsBinary")]
    pub unsafe fn acceptsBinary(&self) -> bool;

    #[deprecated]
    #[objc2::method(sel = "isColor")]
    pub unsafe fn isColor(&self) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "isFontAvailable:")]
    pub unsafe fn isFontAvailable(&self, face_name: Option<&NSString>) -> bool;

    #[deprecated]
    #[objc2::method(sel = "isOutputStackInReverseOrder")]
    pub unsafe fn isOutputStackInReverseOrder(&self) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "printerWithName:domain:includeUnavailable:", managed = "Other")]
    pub unsafe fn printerWithName_domain_includeUnavailable(
        name: &NSString,
        domain: Option<&NSString>,
        flag: bool,
    ) -> Option<Id<NSPrinter>>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "domain", managed = "Other")]
    pub unsafe fn domain(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "host", managed = "Other")]
    pub unsafe fn host(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "note", managed = "Other")]
    pub unsafe fn note(&self) -> Id<NSString>;
}
