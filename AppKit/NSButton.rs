//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSControl,
    unsafe inherits = [
        NSView,
        NSResponder,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSButton")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSButton;
}

#[cfg(feature = "AppKit_NSButton")]
unsafe impl NSAccessibility for NSButton {}

#[cfg(feature = "AppKit_NSButton")]
unsafe impl NSAccessibilityButton for NSButton {}

#[cfg(feature = "AppKit_NSButton")]
unsafe impl NSAccessibilityElementProtocol for NSButton {}

#[cfg(feature = "AppKit_NSButton")]
unsafe impl NSAnimatablePropertyContainer for NSButton {}

#[cfg(feature = "AppKit_NSButton")]
unsafe impl NSAppearanceCustomization for NSButton {}

#[cfg(feature = "AppKit_NSButton")]
unsafe impl NSCoding for NSButton {}

#[cfg(feature = "AppKit_NSButton")]
unsafe impl NSDraggingDestination for NSButton {}

#[cfg(feature = "AppKit_NSButton")]
unsafe impl NSObjectProtocol for NSButton {}

#[cfg(feature = "AppKit_NSButton")]
unsafe impl NSUserInterfaceCompression for NSButton {}

#[cfg(feature = "AppKit_NSButton")]
unsafe impl NSUserInterfaceItemIdentification for NSButton {}

#[cfg(feature = "AppKit_NSButton")]
unsafe impl NSUserInterfaceValidations for NSButton {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSButton")]
    pub type NSButton;

    #[cfg(all(feature = "AppKit_NSImage", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "buttonWithTitle:image:target:action:", managed = "Other")]
    pub unsafe fn buttonWithTitle_image_target_action(
        title: &NSString,
        image: &NSImage,
        target: Option<&Object>,
        action: Option<Sel>,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "buttonWithTitle:target:action:", managed = "Other")]
    pub unsafe fn buttonWithTitle_target_action(
        title: &NSString,
        target: Option<&Object>,
        action: Option<Sel>,
    ) -> Id<Self>;

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "buttonWithImage:target:action:", managed = "Other")]
    pub unsafe fn buttonWithImage_target_action(
        image: &NSImage,
        target: Option<&Object>,
        action: Option<Sel>,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "checkboxWithTitle:target:action:", managed = "Other")]
    pub unsafe fn checkboxWithTitle_target_action(
        title: &NSString,
        target: Option<&Object>,
        action: Option<Sel>,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "radioButtonWithTitle:target:action:", managed = "Other")]
    pub unsafe fn radioButtonWithTitle_target_action(
        title: &NSString,
        target: Option<&Object>,
        action: Option<Sel>,
    ) -> Id<Self>;

    #[objc2::method(sel = "setButtonType:")]
    pub unsafe fn setButtonType(&self, r#type: NSButtonType);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "title", managed = "Other")]
    pub unsafe fn title(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setTitle:")]
    pub unsafe fn setTitle(&self, title: &NSString);

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "attributedTitle", managed = "Other")]
    pub unsafe fn attributedTitle(&self) -> Id<NSAttributedString>;

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "setAttributedTitle:")]
    pub unsafe fn setAttributedTitle(&self, attributed_title: &NSAttributedString);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "alternateTitle", managed = "Other")]
    pub unsafe fn alternateTitle(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setAlternateTitle:")]
    pub unsafe fn setAlternateTitle(&self, alternate_title: &NSString);

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "attributedAlternateTitle", managed = "Other")]
    pub unsafe fn attributedAlternateTitle(&self) -> Id<NSAttributedString>;

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "setAttributedAlternateTitle:")]
    pub unsafe fn setAttributedAlternateTitle(
        &self,
        attributed_alternate_title: &NSAttributedString,
    );

    #[objc2::method(sel = "hasDestructiveAction")]
    pub unsafe fn hasDestructiveAction(&self) -> bool;

    #[objc2::method(sel = "setHasDestructiveAction:")]
    pub unsafe fn setHasDestructiveAction(&self, has_destructive_action: bool);

    #[cfg(feature = "AppKit_NSSound")]
    #[objc2::method(sel = "sound", managed = "Other")]
    pub unsafe fn sound(&self) -> Option<Id<NSSound>>;

    #[cfg(feature = "AppKit_NSSound")]
    #[objc2::method(sel = "setSound:")]
    pub unsafe fn setSound(&self, sound: Option<&NSSound>);

    #[objc2::method(sel = "isSpringLoaded")]
    pub unsafe fn isSpringLoaded(&self) -> bool;

    #[objc2::method(sel = "setSpringLoaded:")]
    pub unsafe fn setSpringLoaded(&self, spring_loaded: bool);

    #[objc2::method(sel = "maxAcceleratorLevel")]
    pub unsafe fn maxAcceleratorLevel(&self) -> NSInteger;

    #[objc2::method(sel = "setMaxAcceleratorLevel:")]
    pub unsafe fn setMaxAcceleratorLevel(&self, max_accelerator_level: NSInteger);

    #[objc2::method(sel = "setPeriodicDelay:interval:")]
    pub unsafe fn setPeriodicDelay_interval(&self, delay: c_float, interval: c_float);

    #[objc2::method(sel = "getPeriodicDelay:interval:")]
    pub unsafe fn getPeriodicDelay_interval(
        &self,
        delay: NonNull<c_float>,
        interval: NonNull<c_float>,
    );

    #[objc2::method(sel = "bezelStyle")]
    pub unsafe fn bezelStyle(&self) -> NSBezelStyle;

    #[objc2::method(sel = "setBezelStyle:")]
    pub unsafe fn setBezelStyle(&self, bezel_style: NSBezelStyle);

    #[objc2::method(sel = "isBordered")]
    pub unsafe fn isBordered(&self) -> bool;

    #[objc2::method(sel = "setBordered:")]
    pub unsafe fn setBordered(&self, bordered: bool);

    #[objc2::method(sel = "isTransparent")]
    pub unsafe fn isTransparent(&self) -> bool;

    #[objc2::method(sel = "setTransparent:")]
    pub unsafe fn setTransparent(&self, transparent: bool);

    #[objc2::method(sel = "showsBorderOnlyWhileMouseInside")]
    pub unsafe fn showsBorderOnlyWhileMouseInside(&self) -> bool;

    #[objc2::method(sel = "setShowsBorderOnlyWhileMouseInside:")]
    pub unsafe fn setShowsBorderOnlyWhileMouseInside(
        &self,
        shows_border_only_while_mouse_inside: bool,
    );

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "image", managed = "Other")]
    pub unsafe fn image(&self) -> Option<Id<NSImage>>;

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "setImage:")]
    pub unsafe fn setImage(&self, image: Option<&NSImage>);

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "alternateImage", managed = "Other")]
    pub unsafe fn alternateImage(&self) -> Option<Id<NSImage>>;

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "setAlternateImage:")]
    pub unsafe fn setAlternateImage(&self, alternate_image: Option<&NSImage>);

    #[objc2::method(sel = "imagePosition")]
    pub unsafe fn imagePosition(&self) -> NSCellImagePosition;

    #[objc2::method(sel = "setImagePosition:")]
    pub unsafe fn setImagePosition(&self, image_position: NSCellImagePosition);

    #[objc2::method(sel = "imageScaling")]
    pub unsafe fn imageScaling(&self) -> NSImageScaling;

    #[objc2::method(sel = "setImageScaling:")]
    pub unsafe fn setImageScaling(&self, image_scaling: NSImageScaling);

    #[objc2::method(sel = "imageHugsTitle")]
    pub unsafe fn imageHugsTitle(&self) -> bool;

    #[objc2::method(sel = "setImageHugsTitle:")]
    pub unsafe fn setImageHugsTitle(&self, image_hugs_title: bool);

    #[cfg(feature = "AppKit_NSImageSymbolConfiguration")]
    #[objc2::method(sel = "symbolConfiguration", managed = "Other")]
    pub unsafe fn symbolConfiguration(&self) -> Option<Id<NSImageSymbolConfiguration>>;

    #[cfg(feature = "AppKit_NSImageSymbolConfiguration")]
    #[objc2::method(sel = "setSymbolConfiguration:")]
    pub unsafe fn setSymbolConfiguration(
        &self,
        symbol_configuration: Option<&NSImageSymbolConfiguration>,
    );

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "bezelColor", managed = "Other")]
    pub unsafe fn bezelColor(&self) -> Option<Id<NSColor>>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "setBezelColor:")]
    pub unsafe fn setBezelColor(&self, bezel_color: Option<&NSColor>);

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "contentTintColor", managed = "Other")]
    pub unsafe fn contentTintColor(&self) -> Option<Id<NSColor>>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "setContentTintColor:")]
    pub unsafe fn setContentTintColor(&self, content_tint_color: Option<&NSColor>);

    #[objc2::method(sel = "state")]
    pub unsafe fn state(&self) -> NSControlStateValue;

    #[objc2::method(sel = "setState:")]
    pub unsafe fn setState(&self, state: NSControlStateValue);

    #[objc2::method(sel = "allowsMixedState")]
    pub unsafe fn allowsMixedState(&self) -> bool;

    #[objc2::method(sel = "setAllowsMixedState:")]
    pub unsafe fn setAllowsMixedState(&self, allows_mixed_state: bool);

    #[objc2::method(sel = "setNextState")]
    pub unsafe fn setNextState(&self);

    #[objc2::method(sel = "highlight:")]
    pub unsafe fn highlight(&self, flag: bool);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "keyEquivalent", managed = "Other")]
    pub unsafe fn keyEquivalent(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setKeyEquivalent:")]
    pub unsafe fn setKeyEquivalent(&self, key_equivalent: &NSString);

    #[objc2::method(sel = "keyEquivalentModifierMask")]
    pub unsafe fn keyEquivalentModifierMask(&self) -> NSEventModifierFlags;

    #[objc2::method(sel = "setKeyEquivalentModifierMask:")]
    pub unsafe fn setKeyEquivalentModifierMask(
        &self,
        key_equivalent_modifier_mask: NSEventModifierFlags,
    );

    #[cfg(feature = "AppKit_NSEvent")]
    #[objc2::method(sel = "performKeyEquivalent:")]
    pub unsafe fn performKeyEquivalent(&self, key: &NSEvent) -> bool;

    #[cfg(all(
        feature = "AppKit_NSUserInterfaceCompressionOptions",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(sel = "compressWithPrioritizedCompressionOptions:")]
    pub unsafe fn compressWithPrioritizedCompressionOptions(
        &self,
        prioritized_options: &NSArray<NSUserInterfaceCompressionOptions>,
    );

    #[cfg(all(
        feature = "AppKit_NSUserInterfaceCompressionOptions",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(sel = "minimumSizeWithPrioritizedCompressionOptions:")]
    pub unsafe fn minimumSizeWithPrioritizedCompressionOptions(
        &self,
        prioritized_options: &NSArray<NSUserInterfaceCompressionOptions>,
    ) -> NSSize;

    #[cfg(feature = "AppKit_NSUserInterfaceCompressionOptions")]
    #[objc2::method(sel = "activeCompressionOptions", managed = "Other")]
    pub unsafe fn activeCompressionOptions(&self) -> Id<NSUserInterfaceCompressionOptions>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSButton")]
    pub type NSButton;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "Mnemonics are not used on macOS. Set the title property directly instead."]
    #[objc2::method(sel = "setTitleWithMnemonic:")]
    pub unsafe fn setTitleWithMnemonic(&self, string_with_ampersand: Option<&NSString>);
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSControl`
    #[cfg(feature = "AppKit_NSButton")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSButton")]
    pub type NSButton;

    #[objc2::method(sel = "initWithFrame:", managed = "Init")]
    pub unsafe fn initWithFrame(this: Option<Allocated<Self>>, frame_rect: NSRect) -> Id<Self>;
}
