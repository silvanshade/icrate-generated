//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_options]
#[underlying(NSUInteger)]
pub enum NSTextContentManagerEnumerationOptions {
    NSTextContentManagerEnumerationOptionsNone = 0,
    NSTextContentManagerEnumerationOptionsReverse = 1 << 0,
}

#[objc2::protocol]
pub unsafe trait NSTextElementProvider: NSObjectProtocol {
    #[cfg(feature = "AppKit_NSTextRange")]
    #[objc2::method(sel = "documentRange", managed = "Other")]
    unsafe fn documentRange(&self) -> Id<NSTextRange>;

    #[cfg(feature = "AppKit_NSTextElement")]
    #[objc2::method(
        sel = "enumerateTextElementsFromLocation:options:usingBlock:",
        managed = "Other"
    )]
    unsafe fn enumerateTextElementsFromLocation_options_usingBlock(
        &self,
        text_location: Option<&ProtocolObject<dyn NSTextLocation>>,
        options: NSTextContentManagerEnumerationOptions,
        block: &Block<(NonNull<NSTextElement>,), Bool>,
    ) -> Option<Id<ProtocolObject<dyn NSTextLocation>>>;

    #[cfg(all(
        feature = "AppKit_NSTextElement",
        feature = "AppKit_NSTextRange",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(sel = "replaceContentsInRange:withTextElements:")]
    unsafe fn replaceContentsInRange_withTextElements(
        &self,
        range: &NSTextRange,
        text_elements: Option<&NSArray<NSTextElement>>,
    );

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "synchronizeToBackingStore:")]
    unsafe fn synchronizeToBackingStore(
        &self,
        completion_handler: Option<&Block<(*mut NSError,), ()>>,
    );

    #[objc2::method(optional, sel = "locationFromLocation:withOffset:", managed = "Other")]
    unsafe fn locationFromLocation_withOffset(
        &self,
        location: &ProtocolObject<dyn NSTextLocation>,
        offset: NSInteger,
    ) -> Option<Id<ProtocolObject<dyn NSTextLocation>>>;

    #[objc2::method(optional, sel = "offsetFromLocation:toLocation:")]
    unsafe fn offsetFromLocation_toLocation(
        &self,
        from: &ProtocolObject<dyn NSTextLocation>,
        to: &ProtocolObject<dyn NSTextLocation>,
    ) -> NSInteger;

    #[cfg(feature = "AppKit_NSTextRange")]
    #[objc2::method(
        optional,
        sel = "adjustedRangeFromRange:forEditingTextSelection:",
        managed = "Other"
    )]
    unsafe fn adjustedRangeFromRange_forEditingTextSelection(
        &self,
        text_range: &NSTextRange,
        for_editing_text_selection: bool,
    ) -> Option<Id<NSTextRange>>;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextContentManager")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSTextContentManager;
}

#[cfg(feature = "AppKit_NSTextContentManager")]
unsafe impl NSCoding for NSTextContentManager {}

#[cfg(feature = "AppKit_NSTextContentManager")]
unsafe impl NSObjectProtocol for NSTextContentManager {}

#[cfg(feature = "AppKit_NSTextContentManager")]
unsafe impl NSSecureCoding for NSTextContentManager {}

#[cfg(feature = "AppKit_NSTextContentManager")]
unsafe impl NSTextElementProvider for NSTextContentManager {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextContentManager")]
    pub type NSTextContentManager;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, coder: &NSCoder)
        -> Option<Id<Self>>;

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn NSTextContentManagerDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(
        &self,
        delegate: Option<&ProtocolObject<dyn NSTextContentManagerDelegate>>,
    );

    #[cfg(all(feature = "AppKit_NSTextLayoutManager", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "textLayoutManagers", managed = "Other")]
    pub unsafe fn textLayoutManagers(&self) -> Id<NSArray<NSTextLayoutManager>>;

    #[cfg(feature = "AppKit_NSTextLayoutManager")]
    #[objc2::method(sel = "addTextLayoutManager:")]
    pub unsafe fn addTextLayoutManager(&self, text_layout_manager: &NSTextLayoutManager);

    #[cfg(feature = "AppKit_NSTextLayoutManager")]
    #[objc2::method(sel = "removeTextLayoutManager:")]
    pub unsafe fn removeTextLayoutManager(&self, text_layout_manager: &NSTextLayoutManager);

    #[cfg(feature = "AppKit_NSTextLayoutManager")]
    #[objc2::method(sel = "primaryTextLayoutManager", managed = "Other")]
    pub unsafe fn primaryTextLayoutManager(&self) -> Option<Id<NSTextLayoutManager>>;

    #[cfg(feature = "AppKit_NSTextLayoutManager")]
    #[objc2::method(sel = "setPrimaryTextLayoutManager:")]
    pub unsafe fn setPrimaryTextLayoutManager(
        &self,
        primary_text_layout_manager: Option<&NSTextLayoutManager>,
    );

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "synchronizeTextLayoutManagers:")]
    pub unsafe fn synchronizeTextLayoutManagers(
        &self,
        completion_handler: Option<&Block<(*mut NSError,), ()>>,
    );

    #[cfg(all(
        feature = "AppKit_NSTextElement",
        feature = "AppKit_NSTextRange",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(sel = "textElementsForRange:", managed = "Other")]
    pub unsafe fn textElementsForRange(&self, range: &NSTextRange) -> Id<NSArray<NSTextElement>>;

    #[objc2::method(sel = "hasEditingTransaction")]
    pub unsafe fn hasEditingTransaction(&self) -> bool;

    #[objc2::method(sel = "performEditingTransactionUsingBlock:")]
    pub unsafe fn performEditingTransactionUsingBlock(&self, transaction: &Block<(), ()>);

    #[cfg(feature = "AppKit_NSTextRange")]
    #[objc2::method(sel = "recordEditActionInRange:newTextRange:")]
    pub unsafe fn recordEditActionInRange_newTextRange(
        &self,
        original_text_range: &NSTextRange,
        new_text_range: &NSTextRange,
    );

    #[objc2::method(sel = "automaticallySynchronizesTextLayoutManagers")]
    pub unsafe fn automaticallySynchronizesTextLayoutManagers(&self) -> bool;

    #[objc2::method(sel = "setAutomaticallySynchronizesTextLayoutManagers:")]
    pub unsafe fn setAutomaticallySynchronizesTextLayoutManagers(
        &self,
        automatically_synchronizes_text_layout_managers: bool,
    );

    #[objc2::method(sel = "automaticallySynchronizesToBackingStore")]
    pub unsafe fn automaticallySynchronizesToBackingStore(&self) -> bool;

    #[objc2::method(sel = "setAutomaticallySynchronizesToBackingStore:")]
    pub unsafe fn setAutomaticallySynchronizesToBackingStore(
        &self,
        automatically_synchronizes_to_backing_store: bool,
    );
}

#[objc2::protocol]
pub unsafe trait NSTextContentManagerDelegate: NSObjectProtocol {
    #[cfg(all(
        feature = "AppKit_NSTextContentManager",
        feature = "AppKit_NSTextElement"
    ))]
    #[objc2::method(
        optional,
        sel = "textContentManager:textElementAtLocation:",
        managed = "Other"
    )]
    unsafe fn textContentManager_textElementAtLocation(
        &self,
        text_content_manager: &NSTextContentManager,
        location: &ProtocolObject<dyn NSTextLocation>,
    ) -> Option<Id<NSTextElement>>;

    #[cfg(all(
        feature = "AppKit_NSTextContentManager",
        feature = "AppKit_NSTextElement"
    ))]
    #[objc2::method(
        optional,
        sel = "textContentManager:shouldEnumerateTextElement:options:"
    )]
    unsafe fn textContentManager_shouldEnumerateTextElement_options(
        &self,
        text_content_manager: &NSTextContentManager,
        text_element: &NSTextElement,
        options: NSTextContentManagerEnumerationOptions,
    ) -> bool;
}

#[objc2::protocol]
pub unsafe trait NSTextContentStorageDelegate: NSTextContentManagerDelegate {
    #[cfg(all(
        feature = "AppKit_NSTextContentStorage",
        feature = "AppKit_NSTextParagraph"
    ))]
    #[objc2::method(
        optional,
        sel = "textContentStorage:textParagraphWithRange:",
        managed = "Other"
    )]
    unsafe fn textContentStorage_textParagraphWithRange(
        &self,
        text_content_storage: &NSTextContentStorage,
        range: NSRange,
    ) -> Option<Id<NSTextParagraph>>;
}

#[objc2::interface(
    unsafe super = NSTextContentManager,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextContentStorage")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSTextContentStorage;
}

#[cfg(feature = "AppKit_NSTextContentStorage")]
unsafe impl NSCoding for NSTextContentStorage {}

#[cfg(feature = "AppKit_NSTextContentStorage")]
unsafe impl NSObjectProtocol for NSTextContentStorage {}

#[cfg(feature = "AppKit_NSTextContentStorage")]
unsafe impl NSSecureCoding for NSTextContentStorage {}

#[cfg(feature = "AppKit_NSTextContentStorage")]
unsafe impl NSTextElementProvider for NSTextContentStorage {}

#[cfg(feature = "AppKit_NSTextContentStorage")]
unsafe impl NSTextStorageObserving for NSTextContentStorage {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextContentStorage")]
    pub type NSTextContentStorage;

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn NSTextContentStorageDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(
        &self,
        delegate: Option<&ProtocolObject<dyn NSTextContentStorageDelegate>>,
    );

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "attributedString", managed = "Other")]
    pub unsafe fn attributedString(&self) -> Option<Id<NSAttributedString>>;

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "setAttributedString:")]
    pub unsafe fn setAttributedString(&self, attributed_string: Option<&NSAttributedString>);

    #[cfg(all(
        feature = "AppKit_NSTextElement",
        feature = "Foundation_NSAttributedString"
    ))]
    #[objc2::method(sel = "attributedStringForTextElement:", managed = "Other")]
    pub unsafe fn attributedStringForTextElement(
        &self,
        text_element: &NSTextElement,
    ) -> Option<Id<NSAttributedString>>;

    #[cfg(all(
        feature = "AppKit_NSTextElement",
        feature = "Foundation_NSAttributedString"
    ))]
    #[objc2::method(sel = "textElementForAttributedString:", managed = "Other")]
    pub unsafe fn textElementForAttributedString(
        &self,
        attributed_string: &NSAttributedString,
    ) -> Option<Id<NSTextElement>>;

    #[objc2::method(sel = "locationFromLocation:withOffset:", managed = "Other")]
    pub unsafe fn locationFromLocation_withOffset(
        &self,
        location: &ProtocolObject<dyn NSTextLocation>,
        offset: NSInteger,
    ) -> Option<Id<ProtocolObject<dyn NSTextLocation>>>;

    #[objc2::method(sel = "offsetFromLocation:toLocation:")]
    pub unsafe fn offsetFromLocation_toLocation(
        &self,
        from: &ProtocolObject<dyn NSTextLocation>,
        to: &ProtocolObject<dyn NSTextLocation>,
    ) -> NSInteger;

    #[cfg(feature = "AppKit_NSTextRange")]
    #[objc2::method(
        sel = "adjustedRangeFromRange:forEditingTextSelection:",
        managed = "Other"
    )]
    pub unsafe fn adjustedRangeFromRange_forEditingTextSelection(
        &self,
        text_range: &NSTextRange,
        for_editing_text_selection: bool,
    ) -> Option<Id<NSTextRange>>;
}

extern_static!(
    NSTextContentStorageUnsupportedAttributeAddedNotification: &'static NSNotificationName
);
