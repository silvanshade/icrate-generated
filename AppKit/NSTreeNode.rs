//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTreeNode")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSTreeNode;
}

#[cfg(feature = "AppKit_NSTreeNode")]
unsafe impl NSObjectProtocol for NSTreeNode {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTreeNode")]
    pub type NSTreeNode;

    #[objc2::method(sel = "treeNodeWithRepresentedObject:", managed = "Other")]
    pub unsafe fn treeNodeWithRepresentedObject(model_object: Option<&Object>) -> Id<Self>;

    #[objc2::method(sel = "initWithRepresentedObject:", managed = "Init")]
    pub unsafe fn initWithRepresentedObject(
        this: Option<Allocated<Self>>,
        model_object: Option<&Object>,
    ) -> Id<Self>;

    #[objc2::method(sel = "representedObject", managed = "Other")]
    pub unsafe fn representedObject(&self) -> Option<Id<Object>>;

    #[cfg(feature = "Foundation_NSIndexPath")]
    #[objc2::method(sel = "indexPath", managed = "Other")]
    pub unsafe fn indexPath(&self) -> Id<NSIndexPath>;

    #[objc2::method(sel = "isLeaf")]
    pub unsafe fn isLeaf(&self) -> bool;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "childNodes", managed = "Other")]
    pub unsafe fn childNodes(&self) -> Option<Id<NSArray<NSTreeNode>>>;

    #[cfg(feature = "Foundation_NSMutableArray")]
    #[objc2::method(sel = "mutableChildNodes", managed = "Other")]
    pub unsafe fn mutableChildNodes(&self) -> Id<NSMutableArray<NSTreeNode>, Owned>;

    #[cfg(feature = "Foundation_NSIndexPath")]
    #[objc2::method(sel = "descendantNodeAtIndexPath:", managed = "Other")]
    pub unsafe fn descendantNodeAtIndexPath(
        &self,
        index_path: &NSIndexPath,
    ) -> Option<Id<NSTreeNode>>;

    #[objc2::method(sel = "parentNode", managed = "Other")]
    pub unsafe fn parentNode(&self) -> Option<Id<NSTreeNode>>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSSortDescriptor"
    ))]
    #[objc2::method(sel = "sortWithSortDescriptors:recursively:")]
    pub unsafe fn sortWithSortDescriptors_recursively(
        &self,
        sort_descriptors: &NSArray<NSSortDescriptor>,
        recursively: bool,
    );
}
