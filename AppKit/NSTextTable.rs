//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSTextBlockValueType {
    NSTextBlockAbsoluteValueType = 0,
    NSTextBlockPercentageValueType = 1,
}

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSTextBlockDimension {
    NSTextBlockWidth = 0,
    NSTextBlockMinimumWidth = 1,
    NSTextBlockMaximumWidth = 2,
    NSTextBlockHeight = 4,
    NSTextBlockMinimumHeight = 5,
    NSTextBlockMaximumHeight = 6,
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSTextBlockLayer {
    NSTextBlockPadding = -1,
    NSTextBlockBorder = 0,
    NSTextBlockMargin = 1,
}

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSTextBlockVerticalAlignment {
    NSTextBlockTopAlignment = 0,
    NSTextBlockMiddleAlignment = 1,
    NSTextBlockBottomAlignment = 2,
    NSTextBlockBaselineAlignment = 3,
}

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSTextTableLayoutAlgorithm {
    NSTextTableAutomaticLayoutAlgorithm = 0,
    NSTextTableFixedLayoutAlgorithm = 1,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextBlock")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSTextBlock;
}

#[cfg(feature = "AppKit_NSTextBlock")]
unsafe impl NSCoding for NSTextBlock {}

#[cfg(feature = "AppKit_NSTextBlock")]
unsafe impl NSObjectProtocol for NSTextBlock {}

#[cfg(feature = "AppKit_NSTextBlock")]
unsafe impl NSSecureCoding for NSTextBlock {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextBlock")]
    pub type NSTextBlock;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "setValue:type:forDimension:")]
    pub unsafe fn setValue_type_forDimension(
        &self,
        val: CGFloat,
        r#type: NSTextBlockValueType,
        dimension: NSTextBlockDimension,
    );

    #[objc2::method(sel = "valueForDimension:")]
    pub unsafe fn valueForDimension(&self, dimension: NSTextBlockDimension) -> CGFloat;

    #[objc2::method(sel = "valueTypeForDimension:")]
    pub unsafe fn valueTypeForDimension(
        &self,
        dimension: NSTextBlockDimension,
    ) -> NSTextBlockValueType;

    #[objc2::method(sel = "setContentWidth:type:")]
    pub unsafe fn setContentWidth_type(&self, val: CGFloat, r#type: NSTextBlockValueType);

    #[objc2::method(sel = "contentWidth")]
    pub unsafe fn contentWidth(&self) -> CGFloat;

    #[objc2::method(sel = "contentWidthValueType")]
    pub unsafe fn contentWidthValueType(&self) -> NSTextBlockValueType;

    #[objc2::method(sel = "setWidth:type:forLayer:edge:")]
    pub unsafe fn setWidth_type_forLayer_edge(
        &self,
        val: CGFloat,
        r#type: NSTextBlockValueType,
        layer: NSTextBlockLayer,
        edge: NSRectEdge,
    );

    #[objc2::method(sel = "setWidth:type:forLayer:")]
    pub unsafe fn setWidth_type_forLayer(
        &self,
        val: CGFloat,
        r#type: NSTextBlockValueType,
        layer: NSTextBlockLayer,
    );

    #[objc2::method(sel = "widthForLayer:edge:")]
    pub unsafe fn widthForLayer_edge(&self, layer: NSTextBlockLayer, edge: NSRectEdge) -> CGFloat;

    #[objc2::method(sel = "widthValueTypeForLayer:edge:")]
    pub unsafe fn widthValueTypeForLayer_edge(
        &self,
        layer: NSTextBlockLayer,
        edge: NSRectEdge,
    ) -> NSTextBlockValueType;

    #[objc2::method(sel = "verticalAlignment")]
    pub unsafe fn verticalAlignment(&self) -> NSTextBlockVerticalAlignment;

    #[objc2::method(sel = "setVerticalAlignment:")]
    pub unsafe fn setVerticalAlignment(&self, vertical_alignment: NSTextBlockVerticalAlignment);

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "backgroundColor", managed = "Other")]
    pub unsafe fn backgroundColor(&self) -> Option<Id<NSColor>>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "setBackgroundColor:")]
    pub unsafe fn setBackgroundColor(&self, background_color: Option<&NSColor>);

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "setBorderColor:forEdge:")]
    pub unsafe fn setBorderColor_forEdge(&self, color: Option<&NSColor>, edge: NSRectEdge);

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "setBorderColor:")]
    pub unsafe fn setBorderColor(&self, color: Option<&NSColor>);

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "borderColorForEdge:", managed = "Other")]
    pub unsafe fn borderColorForEdge(&self, edge: NSRectEdge) -> Option<Id<NSColor>>;

    #[cfg(feature = "AppKit_NSTextContainer")]
    #[objc2::method(sel = "rectForLayoutAtPoint:inRect:textContainer:characterRange:")]
    pub unsafe fn rectForLayoutAtPoint_inRect_textContainer_characterRange(
        &self,
        starting_point: NSPoint,
        rect: NSRect,
        text_container: &NSTextContainer,
        char_range: NSRange,
    ) -> NSRect;

    #[cfg(feature = "AppKit_NSTextContainer")]
    #[objc2::method(sel = "boundsRectForContentRect:inRect:textContainer:characterRange:")]
    pub unsafe fn boundsRectForContentRect_inRect_textContainer_characterRange(
        &self,
        content_rect: NSRect,
        rect: NSRect,
        text_container: &NSTextContainer,
        char_range: NSRange,
    ) -> NSRect;

    #[cfg(all(feature = "AppKit_NSLayoutManager", feature = "AppKit_NSView"))]
    #[objc2::method(sel = "drawBackgroundWithFrame:inView:characterRange:layoutManager:")]
    pub unsafe fn drawBackgroundWithFrame_inView_characterRange_layoutManager(
        &self,
        frame_rect: NSRect,
        control_view: &NSView,
        char_range: NSRange,
        layout_manager: &NSLayoutManager,
    );
}

#[objc2::interface(
    unsafe super = NSTextBlock,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextTableBlock")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSTextTableBlock;
}

#[cfg(feature = "AppKit_NSTextTableBlock")]
unsafe impl NSCoding for NSTextTableBlock {}

#[cfg(feature = "AppKit_NSTextTableBlock")]
unsafe impl NSObjectProtocol for NSTextTableBlock {}

#[cfg(feature = "AppKit_NSTextTableBlock")]
unsafe impl NSSecureCoding for NSTextTableBlock {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextTableBlock")]
    pub type NSTextTableBlock;

    #[cfg(feature = "AppKit_NSTextTable")]
    #[objc2::method(
        sel = "initWithTable:startingRow:rowSpan:startingColumn:columnSpan:",
        managed = "Init"
    )]
    pub unsafe fn initWithTable_startingRow_rowSpan_startingColumn_columnSpan(
        this: Option<Allocated<Self>>,
        table: &NSTextTable,
        row: NSInteger,
        row_span: NSInteger,
        col: NSInteger,
        col_span: NSInteger,
    ) -> Id<Self>;

    #[cfg(feature = "AppKit_NSTextTable")]
    #[objc2::method(sel = "table", managed = "Other")]
    pub unsafe fn table(&self) -> Id<NSTextTable>;

    #[objc2::method(sel = "startingRow")]
    pub unsafe fn startingRow(&self) -> NSInteger;

    #[objc2::method(sel = "rowSpan")]
    pub unsafe fn rowSpan(&self) -> NSInteger;

    #[objc2::method(sel = "startingColumn")]
    pub unsafe fn startingColumn(&self) -> NSInteger;

    #[objc2::method(sel = "columnSpan")]
    pub unsafe fn columnSpan(&self) -> NSInteger;
}

#[objc2::interface(
    unsafe super = NSTextBlock,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextTable")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSTextTable;
}

#[cfg(feature = "AppKit_NSTextTable")]
unsafe impl NSCoding for NSTextTable {}

#[cfg(feature = "AppKit_NSTextTable")]
unsafe impl NSObjectProtocol for NSTextTable {}

#[cfg(feature = "AppKit_NSTextTable")]
unsafe impl NSSecureCoding for NSTextTable {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextTable")]
    pub type NSTextTable;

    #[objc2::method(sel = "numberOfColumns")]
    pub unsafe fn numberOfColumns(&self) -> NSUInteger;

    #[objc2::method(sel = "setNumberOfColumns:")]
    pub unsafe fn setNumberOfColumns(&self, number_of_columns: NSUInteger);

    #[objc2::method(sel = "layoutAlgorithm")]
    pub unsafe fn layoutAlgorithm(&self) -> NSTextTableLayoutAlgorithm;

    #[objc2::method(sel = "setLayoutAlgorithm:")]
    pub unsafe fn setLayoutAlgorithm(&self, layout_algorithm: NSTextTableLayoutAlgorithm);

    #[objc2::method(sel = "collapsesBorders")]
    pub unsafe fn collapsesBorders(&self) -> bool;

    #[objc2::method(sel = "setCollapsesBorders:")]
    pub unsafe fn setCollapsesBorders(&self, collapses_borders: bool);

    #[objc2::method(sel = "hidesEmptyCells")]
    pub unsafe fn hidesEmptyCells(&self) -> bool;

    #[objc2::method(sel = "setHidesEmptyCells:")]
    pub unsafe fn setHidesEmptyCells(&self, hides_empty_cells: bool);

    #[cfg(all(
        feature = "AppKit_NSTextContainer",
        feature = "AppKit_NSTextTableBlock"
    ))]
    #[objc2::method(sel = "rectForBlock:layoutAtPoint:inRect:textContainer:characterRange:")]
    pub unsafe fn rectForBlock_layoutAtPoint_inRect_textContainer_characterRange(
        &self,
        block: &NSTextTableBlock,
        starting_point: NSPoint,
        rect: NSRect,
        text_container: &NSTextContainer,
        char_range: NSRange,
    ) -> NSRect;

    #[cfg(all(
        feature = "AppKit_NSTextContainer",
        feature = "AppKit_NSTextTableBlock"
    ))]
    #[objc2::method(sel = "boundsRectForBlock:contentRect:inRect:textContainer:characterRange:")]
    pub unsafe fn boundsRectForBlock_contentRect_inRect_textContainer_characterRange(
        &self,
        block: &NSTextTableBlock,
        content_rect: NSRect,
        rect: NSRect,
        text_container: &NSTextContainer,
        char_range: NSRange,
    ) -> NSRect;

    #[cfg(all(
        feature = "AppKit_NSLayoutManager",
        feature = "AppKit_NSTextTableBlock",
        feature = "AppKit_NSView"
    ))]
    #[objc2::method(sel = "drawBackgroundForBlock:withFrame:inView:characterRange:layoutManager:")]
    pub unsafe fn drawBackgroundForBlock_withFrame_inView_characterRange_layoutManager(
        &self,
        block: &NSTextTableBlock,
        frame_rect: NSRect,
        control_view: &NSView,
        char_range: NSRange,
        layout_manager: &NSLayoutManager,
    );
}
