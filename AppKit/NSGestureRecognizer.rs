//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSGestureRecognizerState {
    NSGestureRecognizerStatePossible = 0,
    NSGestureRecognizerStateBegan = 1,
    NSGestureRecognizerStateChanged = 2,
    NSGestureRecognizerStateEnded = 3,
    NSGestureRecognizerStateCancelled = 4,
    NSGestureRecognizerStateFailed = 5,
    NSGestureRecognizerStateRecognized = NSGestureRecognizerStateEnded,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSGestureRecognizer")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSGestureRecognizer;
}

#[cfg(feature = "AppKit_NSGestureRecognizer")]
unsafe impl NSCoding for NSGestureRecognizer {}

#[cfg(feature = "AppKit_NSGestureRecognizer")]
unsafe impl NSObjectProtocol for NSGestureRecognizer {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSGestureRecognizer")]
    pub type NSGestureRecognizer;

    #[objc2::method(sel = "initWithTarget:action:", managed = "Init")]
    pub unsafe fn initWithTarget_action(
        this: Option<Allocated<Self>>,
        target: Option<&Object>,
        action: Option<Sel>,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, coder: &NSCoder)
        -> Option<Id<Self>>;

    #[objc2::method(sel = "target", managed = "Other")]
    pub unsafe fn target(&self) -> Option<Id<Object>>;

    #[objc2::method(sel = "setTarget:")]
    pub unsafe fn setTarget(&self, target: Option<&Object>);

    #[objc2::method(sel = "action")]
    pub unsafe fn action(&self) -> Option<Sel>;

    #[objc2::method(sel = "setAction:")]
    pub unsafe fn setAction(&self, action: Option<Sel>);

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn NSGestureRecognizerDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(
        &self,
        delegate: Option<&ProtocolObject<dyn NSGestureRecognizerDelegate>>,
    );

    #[objc2::method(sel = "isEnabled")]
    pub unsafe fn isEnabled(&self) -> bool;

    #[objc2::method(sel = "setEnabled:")]
    pub unsafe fn setEnabled(&self, enabled: bool);

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "view", managed = "Other")]
    pub unsafe fn view(&self) -> Option<Id<NSView>>;

    #[cfg(feature = "AppKit_NSPressureConfiguration")]
    #[objc2::method(sel = "pressureConfiguration", managed = "Other")]
    pub unsafe fn pressureConfiguration(&self) -> Id<NSPressureConfiguration>;

    #[cfg(feature = "AppKit_NSPressureConfiguration")]
    #[objc2::method(sel = "setPressureConfiguration:")]
    pub unsafe fn setPressureConfiguration(&self, pressure_configuration: &NSPressureConfiguration);

    #[objc2::method(sel = "delaysPrimaryMouseButtonEvents")]
    pub unsafe fn delaysPrimaryMouseButtonEvents(&self) -> bool;

    #[objc2::method(sel = "setDelaysPrimaryMouseButtonEvents:")]
    pub unsafe fn setDelaysPrimaryMouseButtonEvents(
        &self,
        delays_primary_mouse_button_events: bool,
    );

    #[objc2::method(sel = "delaysSecondaryMouseButtonEvents")]
    pub unsafe fn delaysSecondaryMouseButtonEvents(&self) -> bool;

    #[objc2::method(sel = "setDelaysSecondaryMouseButtonEvents:")]
    pub unsafe fn setDelaysSecondaryMouseButtonEvents(
        &self,
        delays_secondary_mouse_button_events: bool,
    );

    #[objc2::method(sel = "delaysOtherMouseButtonEvents")]
    pub unsafe fn delaysOtherMouseButtonEvents(&self) -> bool;

    #[objc2::method(sel = "setDelaysOtherMouseButtonEvents:")]
    pub unsafe fn setDelaysOtherMouseButtonEvents(&self, delays_other_mouse_button_events: bool);

    #[objc2::method(sel = "delaysKeyEvents")]
    pub unsafe fn delaysKeyEvents(&self) -> bool;

    #[objc2::method(sel = "setDelaysKeyEvents:")]
    pub unsafe fn setDelaysKeyEvents(&self, delays_key_events: bool);

    #[objc2::method(sel = "delaysMagnificationEvents")]
    pub unsafe fn delaysMagnificationEvents(&self) -> bool;

    #[objc2::method(sel = "setDelaysMagnificationEvents:")]
    pub unsafe fn setDelaysMagnificationEvents(&self, delays_magnification_events: bool);

    #[objc2::method(sel = "delaysRotationEvents")]
    pub unsafe fn delaysRotationEvents(&self) -> bool;

    #[objc2::method(sel = "setDelaysRotationEvents:")]
    pub unsafe fn setDelaysRotationEvents(&self, delays_rotation_events: bool);

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "locationInView:")]
    pub unsafe fn locationInView(&self, view: Option<&NSView>) -> NSPoint;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSGestureRecognizer")]
    pub type NSGestureRecognizer;

    #[objc2::method(sel = "allowedTouchTypes")]
    pub unsafe fn allowedTouchTypes(&self) -> NSTouchTypeMask;

    #[objc2::method(sel = "setAllowedTouchTypes:")]
    pub unsafe fn setAllowedTouchTypes(&self, allowed_touch_types: NSTouchTypeMask);
}

#[objc2::protocol]
pub unsafe trait NSGestureRecognizerDelegate: NSObjectProtocol {
    #[cfg(all(feature = "AppKit_NSEvent", feature = "AppKit_NSGestureRecognizer"))]
    #[objc2::method(optional, sel = "gestureRecognizer:shouldAttemptToRecognizeWithEvent:")]
    unsafe fn gestureRecognizer_shouldAttemptToRecognizeWithEvent(
        &self,
        gesture_recognizer: &NSGestureRecognizer,
        event: &NSEvent,
    ) -> bool;

    #[cfg(feature = "AppKit_NSGestureRecognizer")]
    #[objc2::method(optional, sel = "gestureRecognizerShouldBegin:")]
    unsafe fn gestureRecognizerShouldBegin(&self, gesture_recognizer: &NSGestureRecognizer)
        -> bool;

    #[cfg(feature = "AppKit_NSGestureRecognizer")]
    #[objc2::method(
        optional,
        sel = "gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:"
    )]
    unsafe fn gestureRecognizer_shouldRecognizeSimultaneouslyWithGestureRecognizer(
        &self,
        gesture_recognizer: &NSGestureRecognizer,
        other_gesture_recognizer: &NSGestureRecognizer,
    ) -> bool;

    #[cfg(feature = "AppKit_NSGestureRecognizer")]
    #[objc2::method(
        optional,
        sel = "gestureRecognizer:shouldRequireFailureOfGestureRecognizer:"
    )]
    unsafe fn gestureRecognizer_shouldRequireFailureOfGestureRecognizer(
        &self,
        gesture_recognizer: &NSGestureRecognizer,
        other_gesture_recognizer: &NSGestureRecognizer,
    ) -> bool;

    #[cfg(feature = "AppKit_NSGestureRecognizer")]
    #[objc2::method(
        optional,
        sel = "gestureRecognizer:shouldBeRequiredToFailByGestureRecognizer:"
    )]
    unsafe fn gestureRecognizer_shouldBeRequiredToFailByGestureRecognizer(
        &self,
        gesture_recognizer: &NSGestureRecognizer,
        other_gesture_recognizer: &NSGestureRecognizer,
    ) -> bool;

    #[cfg(all(feature = "AppKit_NSGestureRecognizer", feature = "AppKit_NSTouch"))]
    #[objc2::method(optional, sel = "gestureRecognizer:shouldReceiveTouch:")]
    unsafe fn gestureRecognizer_shouldReceiveTouch(
        &self,
        gesture_recognizer: &NSGestureRecognizer,
        touch: &NSTouch,
    ) -> bool;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSGestureRecognizer")]
    pub type NSGestureRecognizer;

    #[objc2::method(sel = "setState:")]
    pub unsafe fn setState(&self, state: NSGestureRecognizerState);

    #[objc2::method(sel = "reset")]
    pub unsafe fn reset(&self);

    #[objc2::method(sel = "canPreventGestureRecognizer:")]
    pub unsafe fn canPreventGestureRecognizer(
        &self,
        prevented_gesture_recognizer: &NSGestureRecognizer,
    ) -> bool;

    #[objc2::method(sel = "canBePreventedByGestureRecognizer:")]
    pub unsafe fn canBePreventedByGestureRecognizer(
        &self,
        preventing_gesture_recognizer: &NSGestureRecognizer,
    ) -> bool;

    #[objc2::method(sel = "shouldRequireFailureOfGestureRecognizer:")]
    pub unsafe fn shouldRequireFailureOfGestureRecognizer(
        &self,
        other_gesture_recognizer: &NSGestureRecognizer,
    ) -> bool;

    #[objc2::method(sel = "shouldBeRequiredToFailByGestureRecognizer:")]
    pub unsafe fn shouldBeRequiredToFailByGestureRecognizer(
        &self,
        other_gesture_recognizer: &NSGestureRecognizer,
    ) -> bool;

    #[cfg(feature = "AppKit_NSEvent")]
    #[objc2::method(sel = "mouseDown:")]
    pub unsafe fn mouseDown(&self, event: &NSEvent);

    #[cfg(feature = "AppKit_NSEvent")]
    #[objc2::method(sel = "rightMouseDown:")]
    pub unsafe fn rightMouseDown(&self, event: &NSEvent);

    #[cfg(feature = "AppKit_NSEvent")]
    #[objc2::method(sel = "otherMouseDown:")]
    pub unsafe fn otherMouseDown(&self, event: &NSEvent);

    #[cfg(feature = "AppKit_NSEvent")]
    #[objc2::method(sel = "mouseUp:")]
    pub unsafe fn mouseUp(&self, event: &NSEvent);

    #[cfg(feature = "AppKit_NSEvent")]
    #[objc2::method(sel = "rightMouseUp:")]
    pub unsafe fn rightMouseUp(&self, event: &NSEvent);

    #[cfg(feature = "AppKit_NSEvent")]
    #[objc2::method(sel = "otherMouseUp:")]
    pub unsafe fn otherMouseUp(&self, event: &NSEvent);

    #[cfg(feature = "AppKit_NSEvent")]
    #[objc2::method(sel = "mouseDragged:")]
    pub unsafe fn mouseDragged(&self, event: &NSEvent);

    #[cfg(feature = "AppKit_NSEvent")]
    #[objc2::method(sel = "rightMouseDragged:")]
    pub unsafe fn rightMouseDragged(&self, event: &NSEvent);

    #[cfg(feature = "AppKit_NSEvent")]
    #[objc2::method(sel = "otherMouseDragged:")]
    pub unsafe fn otherMouseDragged(&self, event: &NSEvent);

    #[cfg(feature = "AppKit_NSEvent")]
    #[objc2::method(sel = "keyDown:")]
    pub unsafe fn keyDown(&self, event: &NSEvent);

    #[cfg(feature = "AppKit_NSEvent")]
    #[objc2::method(sel = "keyUp:")]
    pub unsafe fn keyUp(&self, event: &NSEvent);

    #[cfg(feature = "AppKit_NSEvent")]
    #[objc2::method(sel = "flagsChanged:")]
    pub unsafe fn flagsChanged(&self, event: &NSEvent);

    #[cfg(feature = "AppKit_NSEvent")]
    #[objc2::method(sel = "tabletPoint:")]
    pub unsafe fn tabletPoint(&self, event: &NSEvent);

    #[cfg(feature = "AppKit_NSEvent")]
    #[objc2::method(sel = "magnifyWithEvent:")]
    pub unsafe fn magnifyWithEvent(&self, event: &NSEvent);

    #[cfg(feature = "AppKit_NSEvent")]
    #[objc2::method(sel = "rotateWithEvent:")]
    pub unsafe fn rotateWithEvent(&self, event: &NSEvent);

    #[cfg(feature = "AppKit_NSEvent")]
    #[objc2::method(sel = "pressureChangeWithEvent:")]
    pub unsafe fn pressureChangeWithEvent(&self, event: &NSEvent);

    #[cfg(feature = "AppKit_NSEvent")]
    #[objc2::method(sel = "touchesBeganWithEvent:")]
    pub unsafe fn touchesBeganWithEvent(&self, event: &NSEvent);

    #[cfg(feature = "AppKit_NSEvent")]
    #[objc2::method(sel = "touchesMovedWithEvent:")]
    pub unsafe fn touchesMovedWithEvent(&self, event: &NSEvent);

    #[cfg(feature = "AppKit_NSEvent")]
    #[objc2::method(sel = "touchesEndedWithEvent:")]
    pub unsafe fn touchesEndedWithEvent(&self, event: &NSEvent);

    #[cfg(feature = "AppKit_NSEvent")]
    #[objc2::method(sel = "touchesCancelledWithEvent:")]
    pub unsafe fn touchesCancelledWithEvent(&self, event: &NSEvent);
}
