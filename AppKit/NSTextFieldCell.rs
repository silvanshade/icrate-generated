//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSTextFieldBezelStyle {
    NSTextFieldSquareBezel = 0,
    NSTextFieldRoundedBezel = 1,
}

#[objc2::interface(
    unsafe super = NSActionCell,
    unsafe inherits = [
        NSCell,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextFieldCell")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSTextFieldCell;
}

#[cfg(feature = "AppKit_NSTextFieldCell")]
unsafe impl NSAccessibility for NSTextFieldCell {}

#[cfg(feature = "AppKit_NSTextFieldCell")]
unsafe impl NSAccessibilityElementProtocol for NSTextFieldCell {}

#[cfg(feature = "AppKit_NSTextFieldCell")]
unsafe impl NSCoding for NSTextFieldCell {}

#[cfg(feature = "AppKit_NSTextFieldCell")]
unsafe impl NSObjectProtocol for NSTextFieldCell {}

#[cfg(feature = "AppKit_NSTextFieldCell")]
unsafe impl NSUserInterfaceItemIdentification for NSTextFieldCell {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextFieldCell")]
    pub type NSTextFieldCell;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initTextCell:", managed = "Init")]
    pub unsafe fn initTextCell(this: Option<Allocated<Self>>, string: &NSString) -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, coder: &NSCoder) -> Id<Self>;

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "initImageCell:", managed = "Init")]
    pub unsafe fn initImageCell(this: Option<Allocated<Self>>, image: Option<&NSImage>)
        -> Id<Self>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "backgroundColor", managed = "Other")]
    pub unsafe fn backgroundColor(&self) -> Option<Id<NSColor>>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "setBackgroundColor:")]
    pub unsafe fn setBackgroundColor(&self, background_color: Option<&NSColor>);

    #[objc2::method(sel = "drawsBackground")]
    pub unsafe fn drawsBackground(&self) -> bool;

    #[objc2::method(sel = "setDrawsBackground:")]
    pub unsafe fn setDrawsBackground(&self, draws_background: bool);

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "textColor", managed = "Other")]
    pub unsafe fn textColor(&self) -> Option<Id<NSColor>>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "setTextColor:")]
    pub unsafe fn setTextColor(&self, text_color: Option<&NSColor>);

    #[cfg(feature = "AppKit_NSText")]
    #[objc2::method(sel = "setUpFieldEditorAttributes:", managed = "Other")]
    pub unsafe fn setUpFieldEditorAttributes(&self, text_obj: &NSText) -> Id<NSText>;

    #[objc2::method(sel = "bezelStyle")]
    pub unsafe fn bezelStyle(&self) -> NSTextFieldBezelStyle;

    #[objc2::method(sel = "setBezelStyle:")]
    pub unsafe fn setBezelStyle(&self, bezel_style: NSTextFieldBezelStyle);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "placeholderString", managed = "Other")]
    pub unsafe fn placeholderString(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setPlaceholderString:")]
    pub unsafe fn setPlaceholderString(&self, placeholder_string: Option<&NSString>);

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "placeholderAttributedString", managed = "Other")]
    pub unsafe fn placeholderAttributedString(&self) -> Option<Id<NSAttributedString>>;

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "setPlaceholderAttributedString:")]
    pub unsafe fn setPlaceholderAttributedString(
        &self,
        placeholder_attributed_string: Option<&NSAttributedString>,
    );

    #[objc2::method(sel = "setWantsNotificationForMarkedText:")]
    pub unsafe fn setWantsNotificationForMarkedText(&self, flag: bool);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "allowedInputSourceLocales", managed = "Other")]
    pub unsafe fn allowedInputSourceLocales(&self) -> Option<Id<NSArray<NSString>>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setAllowedInputSourceLocales:")]
    pub unsafe fn setAllowedInputSourceLocales(
        &self,
        allowed_input_source_locales: Option<&NSArray<NSString>>,
    );
}
