//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSMatrix,
    unsafe inherits = [
        NSControl,
        NSView,
        NSResponder,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[deprecated = "Use NSTextField directly instead, and consider NSStackView for layout assistance"]
    #[cfg(feature = "AppKit_NSForm")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSForm;
}

#[cfg(feature = "AppKit_NSForm")]
unsafe impl NSAccessibility for NSForm {}

#[cfg(feature = "AppKit_NSForm")]
unsafe impl NSAccessibilityElementProtocol for NSForm {}

#[cfg(feature = "AppKit_NSForm")]
unsafe impl NSAnimatablePropertyContainer for NSForm {}

#[cfg(feature = "AppKit_NSForm")]
unsafe impl NSAppearanceCustomization for NSForm {}

#[cfg(feature = "AppKit_NSForm")]
unsafe impl NSCoding for NSForm {}

#[cfg(feature = "AppKit_NSForm")]
unsafe impl NSDraggingDestination for NSForm {}

#[cfg(feature = "AppKit_NSForm")]
unsafe impl NSObjectProtocol for NSForm {}

#[cfg(feature = "AppKit_NSForm")]
unsafe impl NSUserInterfaceItemIdentification for NSForm {}

#[cfg(feature = "AppKit_NSForm")]
unsafe impl NSUserInterfaceValidations for NSForm {}

#[cfg(feature = "AppKit_NSForm")]
unsafe impl NSViewToolTipOwner for NSForm {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSForm")]
    #[deprecated = "Use NSTextField directly instead, and consider NSStackView for layout assistance"]
    pub type NSForm;

    #[objc2::method(sel = "indexOfSelectedItem")]
    pub unsafe fn indexOfSelectedItem(&self) -> NSInteger;

    #[objc2::method(sel = "setEntryWidth:")]
    pub unsafe fn setEntryWidth(&self, width: CGFloat);

    #[objc2::method(sel = "setInterlineSpacing:")]
    pub unsafe fn setInterlineSpacing(&self, spacing: CGFloat);

    #[objc2::method(sel = "setBordered:")]
    pub unsafe fn setBordered(&self, flag: bool);

    #[objc2::method(sel = "setBezeled:")]
    pub unsafe fn setBezeled(&self, flag: bool);

    #[objc2::method(sel = "setTitleAlignment:")]
    pub unsafe fn setTitleAlignment(&self, mode: NSTextAlignment);

    #[objc2::method(sel = "setTextAlignment:")]
    pub unsafe fn setTextAlignment(&self, mode: NSTextAlignment);

    #[cfg(feature = "AppKit_NSFont")]
    #[objc2::method(sel = "setTitleFont:")]
    pub unsafe fn setTitleFont(&self, font_obj: &NSFont);

    #[cfg(feature = "AppKit_NSFont")]
    #[objc2::method(sel = "setTextFont:")]
    pub unsafe fn setTextFont(&self, font_obj: &NSFont);

    #[objc2::method(sel = "cellAtIndex:", managed = "Other")]
    pub unsafe fn cellAtIndex(&self, index: NSInteger) -> Option<Id<Object>>;

    #[objc2::method(sel = "drawCellAtIndex:")]
    pub unsafe fn drawCellAtIndex(&self, index: NSInteger);

    #[cfg(all(feature = "AppKit_NSFormCell", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "addEntry:", managed = "Other")]
    pub unsafe fn addEntry(&self, title: &NSString) -> Id<NSFormCell>;

    #[cfg(all(feature = "AppKit_NSFormCell", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "insertEntry:atIndex:", managed = "Other")]
    pub unsafe fn insertEntry_atIndex(
        &self,
        title: &NSString,
        index: NSInteger,
    ) -> Option<Id<NSFormCell>>;

    #[objc2::method(sel = "removeEntryAtIndex:")]
    pub unsafe fn removeEntryAtIndex(&self, index: NSInteger);

    #[objc2::method(sel = "indexOfCellWithTag:")]
    pub unsafe fn indexOfCellWithTag(&self, tag: NSInteger) -> NSInteger;

    #[objc2::method(sel = "selectTextAtIndex:")]
    pub unsafe fn selectTextAtIndex(&self, index: NSInteger);

    #[objc2::method(sel = "setFrameSize:")]
    pub unsafe fn setFrameSize(&self, new_size: NSSize);

    #[objc2::method(sel = "setTitleBaseWritingDirection:")]
    pub unsafe fn setTitleBaseWritingDirection(&self, writing_direction: NSWritingDirection);

    #[objc2::method(sel = "setTextBaseWritingDirection:")]
    pub unsafe fn setTextBaseWritingDirection(&self, writing_direction: NSWritingDirection);

    #[objc2::method(sel = "setPreferredTextFieldWidth:")]
    pub unsafe fn setPreferredTextFieldWidth(&self, preferred_width: CGFloat);

    #[objc2::method(sel = "preferredTextFieldWidth")]
    pub unsafe fn preferredTextFieldWidth(&self) -> CGFloat;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSMatrix`
    #[cfg(feature = "AppKit_NSForm")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSForm")]
    pub type NSForm;

    #[objc2::method(sel = "initWithFrame:", managed = "Init")]
    pub unsafe fn initWithFrame(this: Option<Allocated<Self>>, frame_rect: NSRect) -> Id<Self>;

    #[cfg(feature = "AppKit_NSCell")]
    #[objc2::method(
        sel = "initWithFrame:mode:prototype:numberOfRows:numberOfColumns:",
        managed = "Init"
    )]
    pub unsafe fn initWithFrame_mode_prototype_numberOfRows_numberOfColumns(
        this: Option<Allocated<Self>>,
        frame_rect: NSRect,
        mode: NSMatrixMode,
        cell: &NSCell,
        rows_high: NSInteger,
        cols_wide: NSInteger,
    ) -> Id<Self>;

    #[objc2::method(
        sel = "initWithFrame:mode:cellClass:numberOfRows:numberOfColumns:",
        managed = "Init"
    )]
    pub unsafe fn initWithFrame_mode_cellClass_numberOfRows_numberOfColumns(
        this: Option<Allocated<Self>>,
        frame_rect: NSRect,
        mode: NSMatrixMode,
        factory_id: Option<&Class>,
        rows_high: NSInteger,
        cols_wide: NSInteger,
    ) -> Id<Self>;
}
