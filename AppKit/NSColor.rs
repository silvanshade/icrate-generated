//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

extern_static!(NSAppKitVersionNumberWithPatternColorLeakFix: NSAppKitVersion = 641.0);

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSColorType {
    NSColorTypeComponentBased = 0,
    NSColorTypePattern = 1,
    NSColorTypeCatalog = 2,
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSColorSystemEffect {
    NSColorSystemEffectNone = 0,
    NSColorSystemEffectPressed = 1,
    NSColorSystemEffectDeepPressed = 2,
    NSColorSystemEffectDisabled = 3,
    NSColorSystemEffectRollover = 4,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSColor")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSColor;
}

#[cfg(feature = "AppKit_NSColor")]
unsafe impl NSCoding for NSColor {}

#[cfg(feature = "AppKit_NSColor")]
unsafe impl NSObjectProtocol for NSColor {}

#[cfg(feature = "AppKit_NSColor")]
unsafe impl NSPasteboardReading for NSColor {}

#[cfg(feature = "AppKit_NSColor")]
unsafe impl NSPasteboardWriting for NSColor {}

#[cfg(feature = "AppKit_NSColor")]
unsafe impl NSSecureCoding for NSColor {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSColor")]
    pub type NSColor;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, coder: &NSCoder)
        -> Option<Id<Self>>;

    #[cfg(feature = "AppKit_NSColorSpace")]
    #[objc2::method(sel = "colorWithColorSpace:components:count:", managed = "Other")]
    pub unsafe fn colorWithColorSpace_components_count(
        space: &NSColorSpace,
        components: NonNull<CGFloat>,
        number_of_components: NSInteger,
    ) -> Id<NSColor>;

    #[objc2::method(sel = "colorWithSRGBRed:green:blue:alpha:", managed = "Other")]
    pub unsafe fn colorWithSRGBRed_green_blue_alpha(
        red: CGFloat,
        green: CGFloat,
        blue: CGFloat,
        alpha: CGFloat,
    ) -> Id<NSColor>;

    #[objc2::method(sel = "colorWithGenericGamma22White:alpha:", managed = "Other")]
    pub unsafe fn colorWithGenericGamma22White_alpha(white: CGFloat, alpha: CGFloat)
        -> Id<NSColor>;

    #[objc2::method(sel = "colorWithDisplayP3Red:green:blue:alpha:", managed = "Other")]
    pub unsafe fn colorWithDisplayP3Red_green_blue_alpha(
        red: CGFloat,
        green: CGFloat,
        blue: CGFloat,
        alpha: CGFloat,
    ) -> Id<NSColor>;

    #[objc2::method(sel = "colorWithWhite:alpha:", managed = "Other")]
    pub unsafe fn colorWithWhite_alpha(white: CGFloat, alpha: CGFloat) -> Id<NSColor>;

    #[objc2::method(sel = "colorWithRed:green:blue:alpha:", managed = "Other")]
    pub unsafe fn colorWithRed_green_blue_alpha(
        red: CGFloat,
        green: CGFloat,
        blue: CGFloat,
        alpha: CGFloat,
    ) -> Id<NSColor>;

    #[objc2::method(sel = "colorWithHue:saturation:brightness:alpha:", managed = "Other")]
    pub unsafe fn colorWithHue_saturation_brightness_alpha(
        hue: CGFloat,
        saturation: CGFloat,
        brightness: CGFloat,
        alpha: CGFloat,
    ) -> Id<NSColor>;

    #[cfg(feature = "AppKit_NSColorSpace")]
    #[objc2::method(
        sel = "colorWithColorSpace:hue:saturation:brightness:alpha:",
        managed = "Other"
    )]
    pub unsafe fn colorWithColorSpace_hue_saturation_brightness_alpha(
        space: &NSColorSpace,
        hue: CGFloat,
        saturation: CGFloat,
        brightness: CGFloat,
        alpha: CGFloat,
    ) -> Id<NSColor>;

    #[objc2::method(sel = "colorWithCatalogName:colorName:", managed = "Other")]
    pub unsafe fn colorWithCatalogName_colorName(
        list_name: &NSColorListName,
        color_name: &NSColorName,
    ) -> Option<Id<NSColor>>;

    #[cfg(feature = "Foundation_NSBundle")]
    #[objc2::method(sel = "colorNamed:bundle:", managed = "Other")]
    pub unsafe fn colorNamed_bundle(
        name: &NSColorName,
        bundle: Option<&NSBundle>,
    ) -> Option<Id<NSColor>>;

    #[objc2::method(sel = "colorNamed:", managed = "Other")]
    pub unsafe fn colorNamed(name: &NSColorName) -> Option<Id<NSColor>>;

    #[cfg(feature = "AppKit_NSAppearance")]
    #[objc2::method(sel = "colorWithName:dynamicProvider:", managed = "Other")]
    pub unsafe fn colorWithName_dynamicProvider(
        color_name: Option<&NSColorName>,
        dynamic_provider: &Block<(NonNull<NSAppearance>,), NonNull<NSColor>>,
    ) -> Id<NSColor>;

    #[objc2::method(sel = "colorWithDeviceWhite:alpha:", managed = "Other")]
    pub unsafe fn colorWithDeviceWhite_alpha(white: CGFloat, alpha: CGFloat) -> Id<NSColor>;

    #[objc2::method(sel = "colorWithDeviceRed:green:blue:alpha:", managed = "Other")]
    pub unsafe fn colorWithDeviceRed_green_blue_alpha(
        red: CGFloat,
        green: CGFloat,
        blue: CGFloat,
        alpha: CGFloat,
    ) -> Id<NSColor>;

    #[objc2::method(
        sel = "colorWithDeviceHue:saturation:brightness:alpha:",
        managed = "Other"
    )]
    pub unsafe fn colorWithDeviceHue_saturation_brightness_alpha(
        hue: CGFloat,
        saturation: CGFloat,
        brightness: CGFloat,
        alpha: CGFloat,
    ) -> Id<NSColor>;

    #[objc2::method(
        sel = "colorWithDeviceCyan:magenta:yellow:black:alpha:",
        managed = "Other"
    )]
    pub unsafe fn colorWithDeviceCyan_magenta_yellow_black_alpha(
        cyan: CGFloat,
        magenta: CGFloat,
        yellow: CGFloat,
        black: CGFloat,
        alpha: CGFloat,
    ) -> Id<NSColor>;

    #[objc2::method(sel = "colorWithCalibratedWhite:alpha:", managed = "Other")]
    pub unsafe fn colorWithCalibratedWhite_alpha(white: CGFloat, alpha: CGFloat) -> Id<NSColor>;

    #[objc2::method(sel = "colorWithCalibratedRed:green:blue:alpha:", managed = "Other")]
    pub unsafe fn colorWithCalibratedRed_green_blue_alpha(
        red: CGFloat,
        green: CGFloat,
        blue: CGFloat,
        alpha: CGFloat,
    ) -> Id<NSColor>;

    #[objc2::method(
        sel = "colorWithCalibratedHue:saturation:brightness:alpha:",
        managed = "Other"
    )]
    pub unsafe fn colorWithCalibratedHue_saturation_brightness_alpha(
        hue: CGFloat,
        saturation: CGFloat,
        brightness: CGFloat,
        alpha: CGFloat,
    ) -> Id<NSColor>;

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "colorWithPatternImage:", managed = "Other")]
    pub unsafe fn colorWithPatternImage(image: &NSImage) -> Id<NSColor>;

    #[objc2::method(sel = "type")]
    pub unsafe fn r#type(&self) -> NSColorType;

    #[objc2::method(sel = "colorUsingType:", managed = "Other")]
    pub unsafe fn colorUsingType(&self, r#type: NSColorType) -> Option<Id<NSColor>>;

    #[cfg(feature = "AppKit_NSColorSpace")]
    #[objc2::method(sel = "colorUsingColorSpace:", managed = "Other")]
    pub unsafe fn colorUsingColorSpace(&self, space: &NSColorSpace) -> Option<Id<NSColor>>;

    #[objc2::method(sel = "blackColor", managed = "Other")]
    pub unsafe fn blackColor() -> Id<NSColor>;

    #[objc2::method(sel = "darkGrayColor", managed = "Other")]
    pub unsafe fn darkGrayColor() -> Id<NSColor>;

    #[objc2::method(sel = "lightGrayColor", managed = "Other")]
    pub unsafe fn lightGrayColor() -> Id<NSColor>;

    #[objc2::method(sel = "whiteColor", managed = "Other")]
    pub unsafe fn whiteColor() -> Id<NSColor>;

    #[objc2::method(sel = "grayColor", managed = "Other")]
    pub unsafe fn grayColor() -> Id<NSColor>;

    #[objc2::method(sel = "redColor", managed = "Other")]
    pub unsafe fn redColor() -> Id<NSColor>;

    #[objc2::method(sel = "greenColor", managed = "Other")]
    pub unsafe fn greenColor() -> Id<NSColor>;

    #[objc2::method(sel = "blueColor", managed = "Other")]
    pub unsafe fn blueColor() -> Id<NSColor>;

    #[objc2::method(sel = "cyanColor", managed = "Other")]
    pub unsafe fn cyanColor() -> Id<NSColor>;

    #[objc2::method(sel = "yellowColor", managed = "Other")]
    pub unsafe fn yellowColor() -> Id<NSColor>;

    #[objc2::method(sel = "magentaColor", managed = "Other")]
    pub unsafe fn magentaColor() -> Id<NSColor>;

    #[objc2::method(sel = "orangeColor", managed = "Other")]
    pub unsafe fn orangeColor() -> Id<NSColor>;

    #[objc2::method(sel = "purpleColor", managed = "Other")]
    pub unsafe fn purpleColor() -> Id<NSColor>;

    #[objc2::method(sel = "brownColor", managed = "Other")]
    pub unsafe fn brownColor() -> Id<NSColor>;

    #[objc2::method(sel = "clearColor", managed = "Other")]
    pub unsafe fn clearColor() -> Id<NSColor>;

    #[objc2::method(sel = "labelColor", managed = "Other")]
    pub unsafe fn labelColor() -> Id<NSColor>;

    #[objc2::method(sel = "secondaryLabelColor", managed = "Other")]
    pub unsafe fn secondaryLabelColor() -> Id<NSColor>;

    #[objc2::method(sel = "tertiaryLabelColor", managed = "Other")]
    pub unsafe fn tertiaryLabelColor() -> Id<NSColor>;

    #[objc2::method(sel = "quaternaryLabelColor", managed = "Other")]
    pub unsafe fn quaternaryLabelColor() -> Id<NSColor>;

    #[objc2::method(sel = "linkColor", managed = "Other")]
    pub unsafe fn linkColor() -> Id<NSColor>;

    #[objc2::method(sel = "placeholderTextColor", managed = "Other")]
    pub unsafe fn placeholderTextColor() -> Id<NSColor>;

    #[objc2::method(sel = "windowFrameTextColor", managed = "Other")]
    pub unsafe fn windowFrameTextColor() -> Id<NSColor>;

    #[objc2::method(sel = "selectedMenuItemTextColor", managed = "Other")]
    pub unsafe fn selectedMenuItemTextColor() -> Id<NSColor>;

    #[objc2::method(sel = "alternateSelectedControlTextColor", managed = "Other")]
    pub unsafe fn alternateSelectedControlTextColor() -> Id<NSColor>;

    #[objc2::method(sel = "headerTextColor", managed = "Other")]
    pub unsafe fn headerTextColor() -> Id<NSColor>;

    #[objc2::method(sel = "separatorColor", managed = "Other")]
    pub unsafe fn separatorColor() -> Id<NSColor>;

    #[objc2::method(sel = "gridColor", managed = "Other")]
    pub unsafe fn gridColor() -> Id<NSColor>;

    #[objc2::method(sel = "windowBackgroundColor", managed = "Other")]
    pub unsafe fn windowBackgroundColor() -> Id<NSColor>;

    #[objc2::method(sel = "underPageBackgroundColor", managed = "Other")]
    pub unsafe fn underPageBackgroundColor() -> Id<NSColor>;

    #[objc2::method(sel = "controlBackgroundColor", managed = "Other")]
    pub unsafe fn controlBackgroundColor() -> Id<NSColor>;

    #[objc2::method(sel = "selectedContentBackgroundColor", managed = "Other")]
    pub unsafe fn selectedContentBackgroundColor() -> Id<NSColor>;

    #[objc2::method(sel = "unemphasizedSelectedContentBackgroundColor", managed = "Other")]
    pub unsafe fn unemphasizedSelectedContentBackgroundColor() -> Id<NSColor>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "alternatingContentBackgroundColors", managed = "Other")]
    pub unsafe fn alternatingContentBackgroundColors() -> Id<NSArray<NSColor>>;

    #[objc2::method(sel = "findHighlightColor", managed = "Other")]
    pub unsafe fn findHighlightColor() -> Id<NSColor>;

    #[objc2::method(sel = "textColor", managed = "Other")]
    pub unsafe fn textColor() -> Id<NSColor>;

    #[objc2::method(sel = "textBackgroundColor", managed = "Other")]
    pub unsafe fn textBackgroundColor() -> Id<NSColor>;

    #[objc2::method(sel = "selectedTextColor", managed = "Other")]
    pub unsafe fn selectedTextColor() -> Id<NSColor>;

    #[objc2::method(sel = "selectedTextBackgroundColor", managed = "Other")]
    pub unsafe fn selectedTextBackgroundColor() -> Id<NSColor>;

    #[objc2::method(sel = "unemphasizedSelectedTextBackgroundColor", managed = "Other")]
    pub unsafe fn unemphasizedSelectedTextBackgroundColor() -> Id<NSColor>;

    #[objc2::method(sel = "unemphasizedSelectedTextColor", managed = "Other")]
    pub unsafe fn unemphasizedSelectedTextColor() -> Id<NSColor>;

    #[objc2::method(sel = "controlColor", managed = "Other")]
    pub unsafe fn controlColor() -> Id<NSColor>;

    #[objc2::method(sel = "controlTextColor", managed = "Other")]
    pub unsafe fn controlTextColor() -> Id<NSColor>;

    #[objc2::method(sel = "selectedControlColor", managed = "Other")]
    pub unsafe fn selectedControlColor() -> Id<NSColor>;

    #[objc2::method(sel = "selectedControlTextColor", managed = "Other")]
    pub unsafe fn selectedControlTextColor() -> Id<NSColor>;

    #[objc2::method(sel = "disabledControlTextColor", managed = "Other")]
    pub unsafe fn disabledControlTextColor() -> Id<NSColor>;

    #[objc2::method(sel = "keyboardFocusIndicatorColor", managed = "Other")]
    pub unsafe fn keyboardFocusIndicatorColor() -> Id<NSColor>;

    #[objc2::method(sel = "scrubberTexturedBackgroundColor", managed = "Other")]
    pub unsafe fn scrubberTexturedBackgroundColor() -> Id<NSColor>;

    #[objc2::method(sel = "systemRedColor", managed = "Other")]
    pub unsafe fn systemRedColor() -> Id<NSColor>;

    #[objc2::method(sel = "systemGreenColor", managed = "Other")]
    pub unsafe fn systemGreenColor() -> Id<NSColor>;

    #[objc2::method(sel = "systemBlueColor", managed = "Other")]
    pub unsafe fn systemBlueColor() -> Id<NSColor>;

    #[objc2::method(sel = "systemOrangeColor", managed = "Other")]
    pub unsafe fn systemOrangeColor() -> Id<NSColor>;

    #[objc2::method(sel = "systemYellowColor", managed = "Other")]
    pub unsafe fn systemYellowColor() -> Id<NSColor>;

    #[objc2::method(sel = "systemBrownColor", managed = "Other")]
    pub unsafe fn systemBrownColor() -> Id<NSColor>;

    #[objc2::method(sel = "systemPinkColor", managed = "Other")]
    pub unsafe fn systemPinkColor() -> Id<NSColor>;

    #[objc2::method(sel = "systemPurpleColor", managed = "Other")]
    pub unsafe fn systemPurpleColor() -> Id<NSColor>;

    #[objc2::method(sel = "systemGrayColor", managed = "Other")]
    pub unsafe fn systemGrayColor() -> Id<NSColor>;

    #[objc2::method(sel = "systemTealColor", managed = "Other")]
    pub unsafe fn systemTealColor() -> Id<NSColor>;

    #[objc2::method(sel = "systemIndigoColor", managed = "Other")]
    pub unsafe fn systemIndigoColor() -> Id<NSColor>;

    #[objc2::method(sel = "systemMintColor", managed = "Other")]
    pub unsafe fn systemMintColor() -> Id<NSColor>;

    #[objc2::method(sel = "systemCyanColor", managed = "Other")]
    pub unsafe fn systemCyanColor() -> Id<NSColor>;

    #[objc2::method(sel = "controlAccentColor", managed = "Other")]
    pub unsafe fn controlAccentColor() -> Id<NSColor>;

    #[objc2::method(sel = "currentControlTint")]
    pub unsafe fn currentControlTint() -> NSControlTint;

    #[deprecated = "NSControlTint does not describe the full range of available control accent colors. Use +[NSColor controlAccentColor] instead."]
    #[objc2::method(sel = "colorForControlTint:", managed = "Other")]
    pub unsafe fn colorForControlTint(control_tint: NSControlTint) -> Id<NSColor>;

    #[objc2::method(sel = "highlightColor", managed = "Other")]
    pub unsafe fn highlightColor() -> Id<NSColor>;

    #[objc2::method(sel = "shadowColor", managed = "Other")]
    pub unsafe fn shadowColor() -> Id<NSColor>;

    #[objc2::method(sel = "highlightWithLevel:", managed = "Other")]
    pub unsafe fn highlightWithLevel(&self, val: CGFloat) -> Option<Id<NSColor>>;

    #[objc2::method(sel = "shadowWithLevel:", managed = "Other")]
    pub unsafe fn shadowWithLevel(&self, val: CGFloat) -> Option<Id<NSColor>>;

    #[objc2::method(sel = "colorWithSystemEffect:", managed = "Other")]
    pub unsafe fn colorWithSystemEffect(&self, system_effect: NSColorSystemEffect) -> Id<NSColor>;

    #[objc2::method(sel = "set")]
    pub unsafe fn set(&self);

    #[objc2::method(sel = "setFill")]
    pub unsafe fn setFill(&self);

    #[objc2::method(sel = "setStroke")]
    pub unsafe fn setStroke(&self);

    #[objc2::method(sel = "blendedColorWithFraction:ofColor:", managed = "Other")]
    pub unsafe fn blendedColorWithFraction_ofColor(
        &self,
        fraction: CGFloat,
        color: &NSColor,
    ) -> Option<Id<NSColor>>;

    #[objc2::method(sel = "colorWithAlphaComponent:", managed = "Other")]
    pub unsafe fn colorWithAlphaComponent(&self, alpha: CGFloat) -> Id<NSColor>;

    #[objc2::method(sel = "catalogNameComponent", managed = "Other")]
    pub unsafe fn catalogNameComponent(&self) -> Id<NSColorListName>;

    #[objc2::method(sel = "colorNameComponent", managed = "Other")]
    pub unsafe fn colorNameComponent(&self) -> Id<NSColorName>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "localizedCatalogNameComponent", managed = "Other")]
    pub unsafe fn localizedCatalogNameComponent(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "localizedColorNameComponent", managed = "Other")]
    pub unsafe fn localizedColorNameComponent(&self) -> Id<NSString>;

    #[objc2::method(sel = "redComponent")]
    pub unsafe fn redComponent(&self) -> CGFloat;

    #[objc2::method(sel = "greenComponent")]
    pub unsafe fn greenComponent(&self) -> CGFloat;

    #[objc2::method(sel = "blueComponent")]
    pub unsafe fn blueComponent(&self) -> CGFloat;

    #[objc2::method(sel = "getRed:green:blue:alpha:")]
    pub unsafe fn getRed_green_blue_alpha(
        &self,
        red: *mut CGFloat,
        green: *mut CGFloat,
        blue: *mut CGFloat,
        alpha: *mut CGFloat,
    );

    #[objc2::method(sel = "hueComponent")]
    pub unsafe fn hueComponent(&self) -> CGFloat;

    #[objc2::method(sel = "saturationComponent")]
    pub unsafe fn saturationComponent(&self) -> CGFloat;

    #[objc2::method(sel = "brightnessComponent")]
    pub unsafe fn brightnessComponent(&self) -> CGFloat;

    #[objc2::method(sel = "getHue:saturation:brightness:alpha:")]
    pub unsafe fn getHue_saturation_brightness_alpha(
        &self,
        hue: *mut CGFloat,
        saturation: *mut CGFloat,
        brightness: *mut CGFloat,
        alpha: *mut CGFloat,
    );

    #[objc2::method(sel = "whiteComponent")]
    pub unsafe fn whiteComponent(&self) -> CGFloat;

    #[objc2::method(sel = "getWhite:alpha:")]
    pub unsafe fn getWhite_alpha(&self, white: *mut CGFloat, alpha: *mut CGFloat);

    #[objc2::method(sel = "cyanComponent")]
    pub unsafe fn cyanComponent(&self) -> CGFloat;

    #[objc2::method(sel = "magentaComponent")]
    pub unsafe fn magentaComponent(&self) -> CGFloat;

    #[objc2::method(sel = "yellowComponent")]
    pub unsafe fn yellowComponent(&self) -> CGFloat;

    #[objc2::method(sel = "blackComponent")]
    pub unsafe fn blackComponent(&self) -> CGFloat;

    #[objc2::method(sel = "getCyan:magenta:yellow:black:alpha:")]
    pub unsafe fn getCyan_magenta_yellow_black_alpha(
        &self,
        cyan: *mut CGFloat,
        magenta: *mut CGFloat,
        yellow: *mut CGFloat,
        black: *mut CGFloat,
        alpha: *mut CGFloat,
    );

    #[cfg(feature = "AppKit_NSColorSpace")]
    #[objc2::method(sel = "colorSpace", managed = "Other")]
    pub unsafe fn colorSpace(&self) -> Id<NSColorSpace>;

    #[objc2::method(sel = "numberOfComponents")]
    pub unsafe fn numberOfComponents(&self) -> NSInteger;

    #[objc2::method(sel = "getComponents:")]
    pub unsafe fn getComponents(&self, components: NonNull<CGFloat>);

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "patternImage", managed = "Other")]
    pub unsafe fn patternImage(&self) -> Id<NSImage>;

    #[objc2::method(sel = "alphaComponent")]
    pub unsafe fn alphaComponent(&self) -> CGFloat;

    #[cfg(feature = "AppKit_NSPasteboard")]
    #[objc2::method(sel = "colorFromPasteboard:", managed = "Other")]
    pub unsafe fn colorFromPasteboard(paste_board: &NSPasteboard) -> Option<Id<NSColor>>;

    #[cfg(feature = "AppKit_NSPasteboard")]
    #[objc2::method(sel = "writeToPasteboard:")]
    pub unsafe fn writeToPasteboard(&self, paste_board: &NSPasteboard);

    #[objc2::method(sel = "drawSwatchInRect:")]
    pub unsafe fn drawSwatchInRect(&self, rect: NSRect);

    #[objc2::method(sel = "ignoresAlpha")]
    pub unsafe fn ignoresAlpha() -> bool;

    #[objc2::method(sel = "setIgnoresAlpha:")]
    pub unsafe fn setIgnoresAlpha(ignores_alpha: bool);
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSColor")]
    pub type NSColor;

    #[deprecated = "Use a color that matches the semantics being used, such as `separatorColor`"]
    #[objc2::method(sel = "controlHighlightColor", managed = "Other")]
    pub unsafe fn controlHighlightColor() -> Id<NSColor>;

    #[deprecated = "Use a color that matches the semantics being used, such as `separatorColor`"]
    #[objc2::method(sel = "controlLightHighlightColor", managed = "Other")]
    pub unsafe fn controlLightHighlightColor() -> Id<NSColor>;

    #[deprecated = "Use a color that matches the semantics being used, such as `separatorColor`"]
    #[objc2::method(sel = "controlShadowColor", managed = "Other")]
    pub unsafe fn controlShadowColor() -> Id<NSColor>;

    #[deprecated = "Use a color that matches the semantics being used, such as `separatorColor`"]
    #[objc2::method(sel = "controlDarkShadowColor", managed = "Other")]
    pub unsafe fn controlDarkShadowColor() -> Id<NSColor>;

    #[deprecated = "Use NSScroller instead"]
    #[objc2::method(sel = "scrollBarColor", managed = "Other")]
    pub unsafe fn scrollBarColor() -> Id<NSColor>;

    #[deprecated = "Use NSScroller instead"]
    #[objc2::method(sel = "knobColor", managed = "Other")]
    pub unsafe fn knobColor() -> Id<NSColor>;

    #[deprecated = "Use NSScroller instead"]
    #[objc2::method(sel = "selectedKnobColor", managed = "Other")]
    pub unsafe fn selectedKnobColor() -> Id<NSColor>;

    #[deprecated = "Use NSVisualEffectMaterialTitlebar"]
    #[objc2::method(sel = "windowFrameColor", managed = "Other")]
    pub unsafe fn windowFrameColor() -> Id<NSColor>;

    #[deprecated = "Use NSVisualEffectMaterialSelection"]
    #[objc2::method(sel = "selectedMenuItemColor", managed = "Other")]
    pub unsafe fn selectedMenuItemColor() -> Id<NSColor>;

    #[deprecated = "Use NSVisualEffectMaterialHeaderView"]
    #[objc2::method(sel = "headerColor", managed = "Other")]
    pub unsafe fn headerColor() -> Id<NSColor>;

    #[deprecated]
    #[objc2::method(sel = "secondarySelectedControlColor", managed = "Other")]
    pub unsafe fn secondarySelectedControlColor() -> Id<NSColor>;

    #[deprecated]
    #[objc2::method(sel = "alternateSelectedControlColor", managed = "Other")]
    pub unsafe fn alternateSelectedControlColor() -> Id<NSColor>;

    #[cfg(feature = "Foundation_NSArray")]
    #[deprecated]
    #[objc2::method(sel = "controlAlternatingRowBackgroundColors", managed = "Other")]
    pub unsafe fn controlAlternatingRowBackgroundColors() -> Id<NSArray<NSColor>>;

    #[deprecated = "Use -type and NSColorType instead"]
    #[objc2::method(sel = "colorSpaceName", managed = "Other")]
    pub unsafe fn colorSpaceName(&self) -> Id<NSColorSpaceName>;

    #[cfg(feature = "Foundation_NSDictionary")]
    #[deprecated = "Use -colorUsingType: or -colorUsingColorSpace: instead"]
    #[objc2::method(sel = "colorUsingColorSpaceName:device:", managed = "Other")]
    pub unsafe fn colorUsingColorSpaceName_device(
        &self,
        name: Option<&NSColorSpaceName>,
        device_description: Option<&NSDictionary<NSDeviceDescriptionKey, Object>>,
    ) -> Option<Id<NSColor>>;

    #[deprecated = "Use -colorUsingType: or -colorUsingColorSpace: instead"]
    #[objc2::method(sel = "colorUsingColorSpaceName:", managed = "Other")]
    pub unsafe fn colorUsingColorSpaceName(&self, name: &NSColorSpaceName) -> Option<Id<NSColor>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSColor")]
    pub type NSColor;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSCoder")]
    pub type NSCoder;

    #[cfg(feature = "AppKit_NSColor")]
    #[deprecated]
    #[objc2::method(sel = "decodeNXColor", managed = "Other")]
    pub unsafe fn decodeNXColor(&self) -> Option<Id<NSColor>>;
}

extern_static!(NSSystemColorsDidChangeNotification: &'static NSNotificationName);
