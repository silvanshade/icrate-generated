//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObjectController,
    unsafe inherits = [
        NSController,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTreeController")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSTreeController;
}

#[cfg(feature = "AppKit_NSTreeController")]
unsafe impl NSCoding for NSTreeController {}

#[cfg(feature = "AppKit_NSTreeController")]
unsafe impl NSEditor for NSTreeController {}

#[cfg(feature = "AppKit_NSTreeController")]
unsafe impl NSEditorRegistration for NSTreeController {}

#[cfg(feature = "AppKit_NSTreeController")]
unsafe impl NSObjectProtocol for NSTreeController {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTreeController")]
    pub type NSTreeController;

    #[objc2::method(sel = "rearrangeObjects")]
    pub unsafe fn rearrangeObjects(&self);

    #[cfg(feature = "AppKit_NSTreeNode")]
    #[objc2::method(sel = "arrangedObjects", managed = "Other")]
    pub unsafe fn arrangedObjects(&self) -> Id<NSTreeNode>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "childrenKeyPath", managed = "Other")]
    pub unsafe fn childrenKeyPath(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setChildrenKeyPath:")]
    pub unsafe fn setChildrenKeyPath(&self, children_key_path: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "countKeyPath", managed = "Other")]
    pub unsafe fn countKeyPath(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setCountKeyPath:")]
    pub unsafe fn setCountKeyPath(&self, count_key_path: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "leafKeyPath", managed = "Other")]
    pub unsafe fn leafKeyPath(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setLeafKeyPath:")]
    pub unsafe fn setLeafKeyPath(&self, leaf_key_path: Option<&NSString>);

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSSortDescriptor"
    ))]
    #[objc2::method(sel = "sortDescriptors", managed = "Other")]
    pub unsafe fn sortDescriptors(&self) -> Id<NSArray<NSSortDescriptor>>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSSortDescriptor"
    ))]
    #[objc2::method(sel = "setSortDescriptors:")]
    pub unsafe fn setSortDescriptors(&self, sort_descriptors: &NSArray<NSSortDescriptor>);

    #[objc2::method(sel = "content", managed = "Other")]
    pub unsafe fn content(&self) -> Option<Id<Object>>;

    #[objc2::method(sel = "setContent:")]
    pub unsafe fn setContent(&self, content: Option<&Object>);

    #[objc2::method(sel = "add:")]
    pub unsafe fn add(&self, sender: Option<&Object>);

    #[objc2::method(sel = "remove:")]
    pub unsafe fn remove(&self, sender: Option<&Object>);

    #[objc2::method(sel = "addChild:")]
    pub unsafe fn addChild(&self, sender: Option<&Object>);

    #[objc2::method(sel = "insert:")]
    pub unsafe fn insert(&self, sender: Option<&Object>);

    #[objc2::method(sel = "insertChild:")]
    pub unsafe fn insertChild(&self, sender: Option<&Object>);

    #[objc2::method(sel = "canInsert")]
    pub unsafe fn canInsert(&self) -> bool;

    #[objc2::method(sel = "canInsertChild")]
    pub unsafe fn canInsertChild(&self) -> bool;

    #[objc2::method(sel = "canAddChild")]
    pub unsafe fn canAddChild(&self) -> bool;

    #[cfg(feature = "Foundation_NSIndexPath")]
    #[objc2::method(sel = "insertObject:atArrangedObjectIndexPath:")]
    pub unsafe fn insertObject_atArrangedObjectIndexPath(
        &self,
        object: Option<&Object>,
        index_path: &NSIndexPath,
    );

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSIndexPath"))]
    #[objc2::method(sel = "insertObjects:atArrangedObjectIndexPaths:")]
    pub unsafe fn insertObjects_atArrangedObjectIndexPaths(
        &self,
        objects: &NSArray,
        index_paths: &NSArray<NSIndexPath>,
    );

    #[cfg(feature = "Foundation_NSIndexPath")]
    #[objc2::method(sel = "removeObjectAtArrangedObjectIndexPath:")]
    pub unsafe fn removeObjectAtArrangedObjectIndexPath(&self, index_path: &NSIndexPath);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSIndexPath"))]
    #[objc2::method(sel = "removeObjectsAtArrangedObjectIndexPaths:")]
    pub unsafe fn removeObjectsAtArrangedObjectIndexPaths(
        &self,
        index_paths: &NSArray<NSIndexPath>,
    );

    #[objc2::method(sel = "avoidsEmptySelection")]
    pub unsafe fn avoidsEmptySelection(&self) -> bool;

    #[objc2::method(sel = "setAvoidsEmptySelection:")]
    pub unsafe fn setAvoidsEmptySelection(&self, avoids_empty_selection: bool);

    #[objc2::method(sel = "preservesSelection")]
    pub unsafe fn preservesSelection(&self) -> bool;

    #[objc2::method(sel = "setPreservesSelection:")]
    pub unsafe fn setPreservesSelection(&self, preserves_selection: bool);

    #[objc2::method(sel = "selectsInsertedObjects")]
    pub unsafe fn selectsInsertedObjects(&self) -> bool;

    #[objc2::method(sel = "setSelectsInsertedObjects:")]
    pub unsafe fn setSelectsInsertedObjects(&self, selects_inserted_objects: bool);

    #[objc2::method(sel = "alwaysUsesMultipleValuesMarker")]
    pub unsafe fn alwaysUsesMultipleValuesMarker(&self) -> bool;

    #[objc2::method(sel = "setAlwaysUsesMultipleValuesMarker:")]
    pub unsafe fn setAlwaysUsesMultipleValuesMarker(
        &self,
        always_uses_multiple_values_marker: bool,
    );

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "selectedObjects", managed = "Other")]
    pub unsafe fn selectedObjects(&self) -> Id<NSArray>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSIndexPath"))]
    #[objc2::method(sel = "setSelectionIndexPaths:")]
    pub unsafe fn setSelectionIndexPaths(&self, index_paths: &NSArray<NSIndexPath>) -> bool;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSIndexPath"))]
    #[objc2::method(sel = "selectionIndexPaths", managed = "Other")]
    pub unsafe fn selectionIndexPaths(&self) -> Id<NSArray<NSIndexPath>>;

    #[cfg(feature = "Foundation_NSIndexPath")]
    #[objc2::method(sel = "setSelectionIndexPath:")]
    pub unsafe fn setSelectionIndexPath(&self, index_path: Option<&NSIndexPath>) -> bool;

    #[cfg(feature = "Foundation_NSIndexPath")]
    #[objc2::method(sel = "selectionIndexPath", managed = "Other")]
    pub unsafe fn selectionIndexPath(&self) -> Option<Id<NSIndexPath>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSIndexPath"))]
    #[objc2::method(sel = "addSelectionIndexPaths:")]
    pub unsafe fn addSelectionIndexPaths(&self, index_paths: &NSArray<NSIndexPath>) -> bool;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSIndexPath"))]
    #[objc2::method(sel = "removeSelectionIndexPaths:")]
    pub unsafe fn removeSelectionIndexPaths(&self, index_paths: &NSArray<NSIndexPath>) -> bool;

    #[cfg(all(feature = "AppKit_NSTreeNode", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "selectedNodes", managed = "Other")]
    pub unsafe fn selectedNodes(&self) -> Id<NSArray<NSTreeNode>>;

    #[cfg(all(feature = "AppKit_NSTreeNode", feature = "Foundation_NSIndexPath"))]
    #[objc2::method(sel = "moveNode:toIndexPath:")]
    pub unsafe fn moveNode_toIndexPath(&self, node: &NSTreeNode, index_path: &NSIndexPath);

    #[cfg(all(
        feature = "AppKit_NSTreeNode",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSIndexPath"
    ))]
    #[objc2::method(sel = "moveNodes:toIndexPath:")]
    pub unsafe fn moveNodes_toIndexPath(
        &self,
        nodes: &NSArray<NSTreeNode>,
        starting_index_path: &NSIndexPath,
    );

    #[cfg(all(feature = "AppKit_NSTreeNode", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "childrenKeyPathForNode:", managed = "Other")]
    pub unsafe fn childrenKeyPathForNode(&self, node: &NSTreeNode) -> Option<Id<NSString>>;

    #[cfg(all(feature = "AppKit_NSTreeNode", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "countKeyPathForNode:", managed = "Other")]
    pub unsafe fn countKeyPathForNode(&self, node: &NSTreeNode) -> Option<Id<NSString>>;

    #[cfg(all(feature = "AppKit_NSTreeNode", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "leafKeyPathForNode:", managed = "Other")]
    pub unsafe fn leafKeyPathForNode(&self, node: &NSTreeNode) -> Option<Id<NSString>>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSObjectController`
    #[cfg(feature = "AppKit_NSTreeController")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTreeController")]
    pub type NSTreeController;

    #[objc2::method(sel = "initWithContent:", managed = "Init")]
    pub unsafe fn initWithContent(
        this: Option<Allocated<Self>>,
        content: Option<&Object>,
    ) -> Id<Self>;
}
