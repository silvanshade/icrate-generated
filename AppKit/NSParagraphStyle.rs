//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSLineBreakMode {
    NSLineBreakByWordWrapping = 0,
    NSLineBreakByCharWrapping = 1,
    NSLineBreakByClipping = 2,
    NSLineBreakByTruncatingHead = 3,
    NSLineBreakByTruncatingTail = 4,
    NSLineBreakByTruncatingMiddle = 5,
}

#[ns_options]
#[underlying(NSUInteger)]
pub enum NSLineBreakStrategy {
    NSLineBreakStrategyNone = 0,
    NSLineBreakStrategyPushOut = 1 << 0,
    NSLineBreakStrategyHangulWordPriority = 1 << 1,
    NSLineBreakStrategyStandard = 0xFFFF,
}

typed_enum!(
    pub type NSTextTabOptionKey = NSString;
);

extern_static!(NSTabColumnTerminatorsAttributeName: &'static NSTextTabOptionKey);

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextTab")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSTextTab;
}

#[cfg(feature = "AppKit_NSTextTab")]
unsafe impl NSCoding for NSTextTab {}

#[cfg(feature = "AppKit_NSTextTab")]
unsafe impl NSObjectProtocol for NSTextTab {}

#[cfg(feature = "AppKit_NSTextTab")]
unsafe impl NSSecureCoding for NSTextTab {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextTab")]
    pub type NSTextTab;

    #[cfg(all(feature = "Foundation_NSCharacterSet", feature = "Foundation_NSLocale"))]
    #[objc2::method(sel = "columnTerminatorsForLocale:", managed = "Other")]
    pub unsafe fn columnTerminatorsForLocale(a_locale: Option<&NSLocale>) -> Id<NSCharacterSet>;

    #[cfg(feature = "Foundation_NSDictionary")]
    #[objc2::method(sel = "initWithTextAlignment:location:options:", managed = "Init")]
    pub unsafe fn initWithTextAlignment_location_options(
        this: Option<Allocated<Self>>,
        alignment: NSTextAlignment,
        loc: CGFloat,
        options: &NSDictionary<NSTextTabOptionKey, Object>,
    ) -> Id<Self>;

    #[objc2::method(sel = "alignment")]
    pub unsafe fn alignment(&self) -> NSTextAlignment;

    #[objc2::method(sel = "location")]
    pub unsafe fn location(&self) -> CGFloat;

    #[cfg(feature = "Foundation_NSDictionary")]
    #[objc2::method(sel = "options", managed = "Other")]
    pub unsafe fn options(&self) -> Id<NSDictionary<NSTextTabOptionKey, Object>>;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSParagraphStyle")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSParagraphStyle;
}

#[cfg(feature = "AppKit_NSParagraphStyle")]
unsafe impl NSCoding for NSParagraphStyle {}

#[cfg(feature = "AppKit_NSParagraphStyle")]
unsafe impl NSObjectProtocol for NSParagraphStyle {}

#[cfg(feature = "AppKit_NSParagraphStyle")]
unsafe impl NSSecureCoding for NSParagraphStyle {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSParagraphStyle")]
    pub type NSParagraphStyle;

    #[objc2::method(sel = "defaultParagraphStyle", managed = "Other")]
    pub unsafe fn defaultParagraphStyle() -> Id<NSParagraphStyle>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "defaultWritingDirectionForLanguage:")]
    pub unsafe fn defaultWritingDirectionForLanguage(
        language_name: Option<&NSString>,
    ) -> NSWritingDirection;

    #[objc2::method(sel = "lineSpacing")]
    pub unsafe fn lineSpacing(&self) -> CGFloat;

    #[objc2::method(sel = "paragraphSpacing")]
    pub unsafe fn paragraphSpacing(&self) -> CGFloat;

    #[objc2::method(sel = "alignment")]
    pub unsafe fn alignment(&self) -> NSTextAlignment;

    #[objc2::method(sel = "headIndent")]
    pub unsafe fn headIndent(&self) -> CGFloat;

    #[objc2::method(sel = "tailIndent")]
    pub unsafe fn tailIndent(&self) -> CGFloat;

    #[objc2::method(sel = "firstLineHeadIndent")]
    pub unsafe fn firstLineHeadIndent(&self) -> CGFloat;

    #[objc2::method(sel = "minimumLineHeight")]
    pub unsafe fn minimumLineHeight(&self) -> CGFloat;

    #[objc2::method(sel = "maximumLineHeight")]
    pub unsafe fn maximumLineHeight(&self) -> CGFloat;

    #[objc2::method(sel = "lineBreakMode")]
    pub unsafe fn lineBreakMode(&self) -> NSLineBreakMode;

    #[objc2::method(sel = "baseWritingDirection")]
    pub unsafe fn baseWritingDirection(&self) -> NSWritingDirection;

    #[objc2::method(sel = "lineHeightMultiple")]
    pub unsafe fn lineHeightMultiple(&self) -> CGFloat;

    #[objc2::method(sel = "paragraphSpacingBefore")]
    pub unsafe fn paragraphSpacingBefore(&self) -> CGFloat;

    #[objc2::method(sel = "hyphenationFactor")]
    pub unsafe fn hyphenationFactor(&self) -> c_float;

    #[objc2::method(sel = "usesDefaultHyphenation")]
    pub unsafe fn usesDefaultHyphenation(&self) -> bool;

    #[cfg(all(feature = "AppKit_NSTextTab", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "tabStops", managed = "Other")]
    pub unsafe fn tabStops(&self) -> Id<NSArray<NSTextTab>>;

    #[objc2::method(sel = "defaultTabInterval")]
    pub unsafe fn defaultTabInterval(&self) -> CGFloat;

    #[objc2::method(sel = "allowsDefaultTighteningForTruncation")]
    pub unsafe fn allowsDefaultTighteningForTruncation(&self) -> bool;

    #[objc2::method(sel = "tighteningFactorForTruncation")]
    pub unsafe fn tighteningFactorForTruncation(&self) -> c_float;

    #[cfg(all(feature = "AppKit_NSTextBlock", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "textBlocks", managed = "Other")]
    pub unsafe fn textBlocks(&self) -> Id<NSArray<NSTextBlock>>;

    #[cfg(all(feature = "AppKit_NSTextList", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "textLists", managed = "Other")]
    pub unsafe fn textLists(&self) -> Id<NSArray<NSTextList>>;

    #[objc2::method(sel = "headerLevel")]
    pub unsafe fn headerLevel(&self) -> NSInteger;

    #[objc2::method(sel = "lineBreakStrategy")]
    pub unsafe fn lineBreakStrategy(&self) -> NSLineBreakStrategy;
}

#[objc2::interface(
    unsafe super = NSParagraphStyle,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSMutableParagraphStyle")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSMutableParagraphStyle;
}

#[cfg(feature = "AppKit_NSMutableParagraphStyle")]
unsafe impl NSCoding for NSMutableParagraphStyle {}

#[cfg(feature = "AppKit_NSMutableParagraphStyle")]
unsafe impl NSObjectProtocol for NSMutableParagraphStyle {}

#[cfg(feature = "AppKit_NSMutableParagraphStyle")]
unsafe impl NSSecureCoding for NSMutableParagraphStyle {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSMutableParagraphStyle")]
    pub type NSMutableParagraphStyle;

    #[objc2::method(sel = "lineSpacing")]
    pub unsafe fn lineSpacing(&self) -> CGFloat;

    #[objc2::method(sel = "setLineSpacing:")]
    pub unsafe fn setLineSpacing(&self, line_spacing: CGFloat);

    #[objc2::method(sel = "paragraphSpacing")]
    pub unsafe fn paragraphSpacing(&self) -> CGFloat;

    #[objc2::method(sel = "setParagraphSpacing:")]
    pub unsafe fn setParagraphSpacing(&self, paragraph_spacing: CGFloat);

    #[objc2::method(sel = "alignment")]
    pub unsafe fn alignment(&self) -> NSTextAlignment;

    #[objc2::method(sel = "setAlignment:")]
    pub unsafe fn setAlignment(&self, alignment: NSTextAlignment);

    #[objc2::method(sel = "firstLineHeadIndent")]
    pub unsafe fn firstLineHeadIndent(&self) -> CGFloat;

    #[objc2::method(sel = "setFirstLineHeadIndent:")]
    pub unsafe fn setFirstLineHeadIndent(&self, first_line_head_indent: CGFloat);

    #[objc2::method(sel = "headIndent")]
    pub unsafe fn headIndent(&self) -> CGFloat;

    #[objc2::method(sel = "setHeadIndent:")]
    pub unsafe fn setHeadIndent(&self, head_indent: CGFloat);

    #[objc2::method(sel = "tailIndent")]
    pub unsafe fn tailIndent(&self) -> CGFloat;

    #[objc2::method(sel = "setTailIndent:")]
    pub unsafe fn setTailIndent(&self, tail_indent: CGFloat);

    #[objc2::method(sel = "lineBreakMode")]
    pub unsafe fn lineBreakMode(&self) -> NSLineBreakMode;

    #[objc2::method(sel = "setLineBreakMode:")]
    pub unsafe fn setLineBreakMode(&self, line_break_mode: NSLineBreakMode);

    #[objc2::method(sel = "minimumLineHeight")]
    pub unsafe fn minimumLineHeight(&self) -> CGFloat;

    #[objc2::method(sel = "setMinimumLineHeight:")]
    pub unsafe fn setMinimumLineHeight(&self, minimum_line_height: CGFloat);

    #[objc2::method(sel = "maximumLineHeight")]
    pub unsafe fn maximumLineHeight(&self) -> CGFloat;

    #[objc2::method(sel = "setMaximumLineHeight:")]
    pub unsafe fn setMaximumLineHeight(&self, maximum_line_height: CGFloat);

    #[objc2::method(sel = "baseWritingDirection")]
    pub unsafe fn baseWritingDirection(&self) -> NSWritingDirection;

    #[objc2::method(sel = "setBaseWritingDirection:")]
    pub unsafe fn setBaseWritingDirection(&self, base_writing_direction: NSWritingDirection);

    #[objc2::method(sel = "lineHeightMultiple")]
    pub unsafe fn lineHeightMultiple(&self) -> CGFloat;

    #[objc2::method(sel = "setLineHeightMultiple:")]
    pub unsafe fn setLineHeightMultiple(&self, line_height_multiple: CGFloat);

    #[objc2::method(sel = "paragraphSpacingBefore")]
    pub unsafe fn paragraphSpacingBefore(&self) -> CGFloat;

    #[objc2::method(sel = "setParagraphSpacingBefore:")]
    pub unsafe fn setParagraphSpacingBefore(&self, paragraph_spacing_before: CGFloat);

    #[objc2::method(sel = "hyphenationFactor")]
    pub unsafe fn hyphenationFactor(&self) -> c_float;

    #[objc2::method(sel = "setHyphenationFactor:")]
    pub unsafe fn setHyphenationFactor(&self, hyphenation_factor: c_float);

    #[objc2::method(sel = "usesDefaultHyphenation")]
    pub unsafe fn usesDefaultHyphenation(&self) -> bool;

    #[objc2::method(sel = "setUsesDefaultHyphenation:")]
    pub unsafe fn setUsesDefaultHyphenation(&self, uses_default_hyphenation: bool);

    #[cfg(all(feature = "AppKit_NSTextTab", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "tabStops", managed = "Other")]
    pub unsafe fn tabStops(&self) -> Id<NSArray<NSTextTab>>;

    #[cfg(all(feature = "AppKit_NSTextTab", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "setTabStops:")]
    pub unsafe fn setTabStops(&self, tab_stops: Option<&NSArray<NSTextTab>>);

    #[objc2::method(sel = "defaultTabInterval")]
    pub unsafe fn defaultTabInterval(&self) -> CGFloat;

    #[objc2::method(sel = "setDefaultTabInterval:")]
    pub unsafe fn setDefaultTabInterval(&self, default_tab_interval: CGFloat);

    #[objc2::method(sel = "allowsDefaultTighteningForTruncation")]
    pub unsafe fn allowsDefaultTighteningForTruncation(&self) -> bool;

    #[objc2::method(sel = "setAllowsDefaultTighteningForTruncation:")]
    pub unsafe fn setAllowsDefaultTighteningForTruncation(
        &self,
        allows_default_tightening_for_truncation: bool,
    );

    #[cfg(feature = "AppKit_NSTextTab")]
    #[objc2::method(sel = "addTabStop:")]
    pub unsafe fn addTabStop(&self, an_object: &NSTextTab);

    #[cfg(feature = "AppKit_NSTextTab")]
    #[objc2::method(sel = "removeTabStop:")]
    pub unsafe fn removeTabStop(&self, an_object: &NSTextTab);

    #[objc2::method(sel = "setParagraphStyle:")]
    pub unsafe fn setParagraphStyle(&self, obj: &NSParagraphStyle);

    #[objc2::method(sel = "tighteningFactorForTruncation")]
    pub unsafe fn tighteningFactorForTruncation(&self) -> c_float;

    #[objc2::method(sel = "setTighteningFactorForTruncation:")]
    pub unsafe fn setTighteningFactorForTruncation(
        &self,
        tightening_factor_for_truncation: c_float,
    );

    #[cfg(all(feature = "AppKit_NSTextBlock", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "textBlocks", managed = "Other")]
    pub unsafe fn textBlocks(&self) -> Id<NSArray<NSTextBlock>>;

    #[cfg(all(feature = "AppKit_NSTextBlock", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "setTextBlocks:")]
    pub unsafe fn setTextBlocks(&self, text_blocks: &NSArray<NSTextBlock>);

    #[cfg(all(feature = "AppKit_NSTextList", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "textLists", managed = "Other")]
    pub unsafe fn textLists(&self) -> Id<NSArray<NSTextList>>;

    #[cfg(all(feature = "AppKit_NSTextList", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "setTextLists:")]
    pub unsafe fn setTextLists(&self, text_lists: &NSArray<NSTextList>);

    #[objc2::method(sel = "headerLevel")]
    pub unsafe fn headerLevel(&self) -> NSInteger;

    #[objc2::method(sel = "setHeaderLevel:")]
    pub unsafe fn setHeaderLevel(&self, header_level: NSInteger);

    #[objc2::method(sel = "lineBreakStrategy")]
    pub unsafe fn lineBreakStrategy(&self) -> NSLineBreakStrategy;

    #[objc2::method(sel = "setLineBreakStrategy:")]
    pub unsafe fn setLineBreakStrategy(&self, line_break_strategy: NSLineBreakStrategy);
}

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSTextTabType {
    NSLeftTabStopType = 0,
    NSRightTabStopType = 1,
    NSCenterTabStopType = 2,
    NSDecimalTabStopType = 3,
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSTextTab")]
    pub type NSTextTab;

    #[objc2::method(sel = "initWithType:location:", managed = "Init")]
    pub unsafe fn initWithType_location(
        this: Option<Allocated<Self>>,
        r#type: NSTextTabType,
        loc: CGFloat,
    ) -> Id<Self>;

    #[objc2::method(sel = "tabStopType")]
    pub unsafe fn tabStopType(&self) -> NSTextTabType;
}
