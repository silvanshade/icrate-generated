//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSPathStyle {
    NSPathStyleStandard = 0,
    NSPathStylePopUp = 2,
    #[deprecated]
    NSPathStyleNavigationBar = 1,
}

#[objc2::interface(
    unsafe super = NSActionCell,
    unsafe inherits = [
        NSCell,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSPathCell")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSPathCell;
}

#[cfg(feature = "AppKit_NSPathCell")]
unsafe impl NSAccessibility for NSPathCell {}

#[cfg(feature = "AppKit_NSPathCell")]
unsafe impl NSAccessibilityElementProtocol for NSPathCell {}

#[cfg(feature = "AppKit_NSPathCell")]
unsafe impl NSCoding for NSPathCell {}

#[cfg(feature = "AppKit_NSPathCell")]
unsafe impl NSMenuItemValidation for NSPathCell {}

#[cfg(feature = "AppKit_NSPathCell")]
unsafe impl NSObjectProtocol for NSPathCell {}

#[cfg(feature = "AppKit_NSPathCell")]
unsafe impl NSOpenSavePanelDelegate for NSPathCell {}

#[cfg(feature = "AppKit_NSPathCell")]
unsafe impl NSUserInterfaceItemIdentification for NSPathCell {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSPathCell")]
    pub type NSPathCell;

    #[objc2::method(sel = "pathStyle")]
    pub unsafe fn pathStyle(&self) -> NSPathStyle;

    #[objc2::method(sel = "setPathStyle:")]
    pub unsafe fn setPathStyle(&self, path_style: NSPathStyle);

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "URL", managed = "Other")]
    pub unsafe fn URL(&self) -> Option<Id<NSURL>>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "setURL:")]
    pub unsafe fn setURL(&self, url: Option<&NSURL>);

    #[objc2::method(sel = "setObjectValue:")]
    pub unsafe fn setObjectValue(&self, obj: Option<&Object>);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "allowedTypes", managed = "Other")]
    pub unsafe fn allowedTypes(&self) -> Option<Id<NSArray<NSString>>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setAllowedTypes:")]
    pub unsafe fn setAllowedTypes(&self, allowed_types: Option<&NSArray<NSString>>);

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn NSPathCellDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(&self, delegate: Option<&ProtocolObject<dyn NSPathCellDelegate>>);

    #[objc2::method(sel = "pathComponentCellClass")]
    pub unsafe fn pathComponentCellClass() -> &'static Class;

    #[cfg(all(feature = "AppKit_NSPathComponentCell", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "pathComponentCells", managed = "Other")]
    pub unsafe fn pathComponentCells(&self) -> Id<NSArray<NSPathComponentCell>>;

    #[cfg(all(feature = "AppKit_NSPathComponentCell", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "setPathComponentCells:")]
    pub unsafe fn setPathComponentCells(&self, path_component_cells: &NSArray<NSPathComponentCell>);

    #[cfg(all(feature = "AppKit_NSPathComponentCell", feature = "AppKit_NSView"))]
    #[objc2::method(sel = "rectOfPathComponentCell:withFrame:inView:")]
    pub unsafe fn rectOfPathComponentCell_withFrame_inView(
        &self,
        cell: &NSPathComponentCell,
        frame: NSRect,
        view: &NSView,
    ) -> NSRect;

    #[cfg(all(feature = "AppKit_NSPathComponentCell", feature = "AppKit_NSView"))]
    #[objc2::method(sel = "pathComponentCellAtPoint:withFrame:inView:", managed = "Other")]
    pub unsafe fn pathComponentCellAtPoint_withFrame_inView(
        &self,
        point: NSPoint,
        frame: NSRect,
        view: &NSView,
    ) -> Option<Id<NSPathComponentCell>>;

    #[cfg(feature = "AppKit_NSPathComponentCell")]
    #[objc2::method(sel = "clickedPathComponentCell", managed = "Other")]
    pub unsafe fn clickedPathComponentCell(&self) -> Option<Id<NSPathComponentCell>>;

    #[cfg(all(feature = "AppKit_NSEvent", feature = "AppKit_NSView"))]
    #[objc2::method(sel = "mouseEntered:withFrame:inView:")]
    pub unsafe fn mouseEntered_withFrame_inView(
        &self,
        event: &NSEvent,
        frame: NSRect,
        view: &NSView,
    );

    #[cfg(all(feature = "AppKit_NSEvent", feature = "AppKit_NSView"))]
    #[objc2::method(sel = "mouseExited:withFrame:inView:")]
    pub unsafe fn mouseExited_withFrame_inView(
        &self,
        event: &NSEvent,
        frame: NSRect,
        view: &NSView,
    );

    #[objc2::method(sel = "doubleAction")]
    pub unsafe fn doubleAction(&self) -> Option<Sel>;

    #[objc2::method(sel = "setDoubleAction:")]
    pub unsafe fn setDoubleAction(&self, double_action: Option<Sel>);

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "backgroundColor", managed = "Other")]
    pub unsafe fn backgroundColor(&self) -> Option<Id<NSColor>>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "setBackgroundColor:")]
    pub unsafe fn setBackgroundColor(&self, background_color: Option<&NSColor>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "placeholderString", managed = "Other")]
    pub unsafe fn placeholderString(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setPlaceholderString:")]
    pub unsafe fn setPlaceholderString(&self, placeholder_string: Option<&NSString>);

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "placeholderAttributedString", managed = "Other")]
    pub unsafe fn placeholderAttributedString(&self) -> Option<Id<NSAttributedString>>;

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "setPlaceholderAttributedString:")]
    pub unsafe fn setPlaceholderAttributedString(
        &self,
        placeholder_attributed_string: Option<&NSAttributedString>,
    );
}

#[objc2::protocol]
pub unsafe trait NSPathCellDelegate: NSObjectProtocol {
    #[cfg(all(feature = "AppKit_NSOpenPanel", feature = "AppKit_NSPathCell"))]
    #[objc2::method(optional, sel = "pathCell:willDisplayOpenPanel:")]
    unsafe fn pathCell_willDisplayOpenPanel(
        &self,
        path_cell: &NSPathCell,
        open_panel: &NSOpenPanel,
    );

    #[cfg(all(feature = "AppKit_NSMenu", feature = "AppKit_NSPathCell"))]
    #[objc2::method(optional, sel = "pathCell:willPopUpMenu:")]
    unsafe fn pathCell_willPopUpMenu(&self, path_cell: &NSPathCell, menu: &NSMenu);
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSCell`
    #[cfg(feature = "AppKit_NSPathCell")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "AppKit_NSPathCell")]
    pub type NSPathCell;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initTextCell:", managed = "Init")]
    pub unsafe fn initTextCell(this: Option<Allocated<Self>>, string: &NSString) -> Id<Self>;

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "initImageCell:", managed = "Init")]
    pub unsafe fn initImageCell(this: Option<Allocated<Self>>, image: Option<&NSImage>)
        -> Id<Self>;
}
