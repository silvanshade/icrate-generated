//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::GameController::*;

typed_enum!(
    pub type GCHapticsLocality = NSString;
);

extern_static!(GCHapticsLocalityDefault: &'static GCHapticsLocality);

extern_static!(GCHapticsLocalityAll: &'static GCHapticsLocality);

extern_static!(GCHapticsLocalityHandles: &'static GCHapticsLocality);

extern_static!(GCHapticsLocalityLeftHandle: &'static GCHapticsLocality);

extern_static!(GCHapticsLocalityRightHandle: &'static GCHapticsLocality);

extern_static!(GCHapticsLocalityTriggers: &'static GCHapticsLocality);

extern_static!(GCHapticsLocalityLeftTrigger: &'static GCHapticsLocality);

extern_static!(GCHapticsLocalityRightTrigger: &'static GCHapticsLocality);

extern_static!(GCHapticDurationInfinite: c_float);

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "GameController_GCDeviceHaptics")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type GCDeviceHaptics;
}

#[cfg(feature = "GameController_GCDeviceHaptics")]
unsafe impl NSObjectProtocol for GCDeviceHaptics {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameController_GCDeviceHaptics")]
    pub type GCDeviceHaptics;

    #[cfg(feature = "Foundation_NSSet")]
    #[objc2::method(sel = "supportedLocalities", managed = "Other")]
    pub unsafe fn supportedLocalities(&self) -> Id<NSSet<GCHapticsLocality>>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(feature = "GameController_CHHapticEngine")]
    #[objc2::method(sel = "createEngineWithLocality:", managed = "Other")]
    pub unsafe fn createEngineWithLocality(
        &self,
        locality: &GCHapticsLocality,
    ) -> Option<Id<CHHapticEngine>>;
}
