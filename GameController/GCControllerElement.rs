//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::GameController::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum GCSystemGestureState {
    GCSystemGestureStateEnabled = 0,
    GCSystemGestureStateAlwaysReceive = 1,
    GCSystemGestureStateDisabled = 2,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "GameController_GCControllerElement")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type GCControllerElement;
}

#[cfg(feature = "GameController_GCControllerElement")]
unsafe impl NSObjectProtocol for GCControllerElement {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameController_GCControllerElement")]
    pub type GCControllerElement;

    #[objc2::method(sel = "collection", managed = "Other")]
    pub unsafe fn collection(&self) -> Option<Id<GCControllerElement>>;

    #[objc2::method(sel = "isAnalog")]
    pub unsafe fn isAnalog(&self) -> bool;

    #[objc2::method(sel = "isBoundToSystemGesture")]
    pub unsafe fn isBoundToSystemGesture(&self) -> bool;

    #[objc2::method(sel = "preferredSystemGestureState")]
    pub unsafe fn preferredSystemGestureState(&self) -> GCSystemGestureState;

    #[objc2::method(sel = "setPreferredSystemGestureState:")]
    pub unsafe fn setPreferredSystemGestureState(
        &self,
        preferred_system_gesture_state: GCSystemGestureState,
    );

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "sfSymbolsName", managed = "Other")]
    pub unsafe fn sfSymbolsName(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setSfSymbolsName:")]
    pub unsafe fn setSfSymbolsName(&self, sf_symbols_name: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "localizedName", managed = "Other")]
    pub unsafe fn localizedName(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setLocalizedName:")]
    pub unsafe fn setLocalizedName(&self, localized_name: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "unmappedSfSymbolsName", managed = "Other")]
    pub unsafe fn unmappedSfSymbolsName(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setUnmappedSfSymbolsName:")]
    pub unsafe fn setUnmappedSfSymbolsName(&self, unmapped_sf_symbols_name: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "unmappedLocalizedName", managed = "Other")]
    pub unsafe fn unmappedLocalizedName(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setUnmappedLocalizedName:")]
    pub unsafe fn setUnmappedLocalizedName(&self, unmapped_localized_name: Option<&NSString>);

    #[cfg(all(feature = "Foundation_NSSet", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "aliases", managed = "Other")]
    pub unsafe fn aliases(&self) -> Id<NSSet<NSString>>;
}
