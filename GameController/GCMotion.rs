//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::GameController::*;

extern_struct!(
    #[encoding_name("?")]
    pub struct GCAcceleration {
        pub x: c_double,
        pub y: c_double,
        pub z: c_double,
    }
);

extern_struct!(
    #[encoding_name("?")]
    pub struct GCRotationRate {
        pub x: c_double,
        pub y: c_double,
        pub z: c_double,
    }
);

extern_struct!(
    #[encoding_name("?")]
    pub struct GCEulerAngles {
        pub pitch: c_double,
        pub yaw: c_double,
        pub roll: c_double,
    }
);

extern_struct!(
    pub struct GCQuaternion {
        pub x: c_double,
        pub y: c_double,
        pub z: c_double,
        pub w: c_double,
    }
);

pub type GCMotionValueChangedHandler = *mut Block<(NonNull<GCMotion>,), ()>;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "GameController_GCMotion")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type GCMotion;
}

#[cfg(feature = "GameController_GCMotion")]
unsafe impl NSObjectProtocol for GCMotion {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameController_GCMotion")]
    pub type GCMotion;

    #[cfg(feature = "GameController_GCController")]
    #[objc2::method(sel = "controller", managed = "Other")]
    pub unsafe fn controller(&self) -> Option<Id<GCController>>;

    #[objc2::method(sel = "valueChangedHandler")]
    pub unsafe fn valueChangedHandler(&self) -> GCMotionValueChangedHandler;

    #[objc2::method(sel = "setValueChangedHandler:")]
    pub unsafe fn setValueChangedHandler(&self, value_changed_handler: GCMotionValueChangedHandler);

    #[objc2::method(sel = "sensorsRequireManualActivation")]
    pub unsafe fn sensorsRequireManualActivation(&self) -> bool;

    #[objc2::method(sel = "sensorsActive")]
    pub unsafe fn sensorsActive(&self) -> bool;

    #[objc2::method(sel = "setSensorsActive:")]
    pub unsafe fn setSensorsActive(&self, sensors_active: bool);

    #[objc2::method(sel = "hasGravityAndUserAcceleration")]
    pub unsafe fn hasGravityAndUserAcceleration(&self) -> bool;

    #[objc2::method(sel = "gravity")]
    pub unsafe fn gravity(&self) -> GCAcceleration;

    #[objc2::method(sel = "userAcceleration")]
    pub unsafe fn userAcceleration(&self) -> GCAcceleration;

    #[objc2::method(sel = "acceleration")]
    pub unsafe fn acceleration(&self) -> GCAcceleration;

    #[deprecated = "hasAttitudeAndRotationRate has been deprecated, use -hasAttitude and -hasRotationRate instead"]
    #[objc2::method(sel = "hasAttitudeAndRotationRate")]
    pub unsafe fn hasAttitudeAndRotationRate(&self) -> bool;

    #[objc2::method(sel = "hasAttitude")]
    pub unsafe fn hasAttitude(&self) -> bool;

    #[objc2::method(sel = "hasRotationRate")]
    pub unsafe fn hasRotationRate(&self) -> bool;

    #[objc2::method(sel = "attitude")]
    pub unsafe fn attitude(&self) -> GCQuaternion;

    #[objc2::method(sel = "rotationRate")]
    pub unsafe fn rotationRate(&self) -> GCRotationRate;

    #[objc2::method(sel = "setGravity:")]
    pub unsafe fn setGravity(&self, gravity: GCAcceleration);

    #[objc2::method(sel = "setUserAcceleration:")]
    pub unsafe fn setUserAcceleration(&self, user_acceleration: GCAcceleration);

    #[objc2::method(sel = "setAcceleration:")]
    pub unsafe fn setAcceleration(&self, acceleration: GCAcceleration);

    #[objc2::method(sel = "setAttitude:")]
    pub unsafe fn setAttitude(&self, attitude: GCQuaternion);

    #[objc2::method(sel = "setRotationRate:")]
    pub unsafe fn setRotationRate(&self, rotation_rate: GCRotationRate);

    #[objc2::method(sel = "setStateFromMotion:")]
    pub unsafe fn setStateFromMotion(&self, motion: &GCMotion);
}
