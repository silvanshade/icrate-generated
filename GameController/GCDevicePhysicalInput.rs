//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::GameController::*;

#[objc2::protocol]
pub unsafe trait GCDevicePhysicalInput: GCDevicePhysicalInputState {
    #[objc2::method(sel = "device", managed = "Other")]
    unsafe fn device(&self) -> Option<Id<ProtocolObject<dyn GCDevice>>>;

    #[objc2::method(sel = "elementValueDidChangeHandler")]
    unsafe fn elementValueDidChangeHandler(
        &self,
    ) -> *mut Block<
        (
            NonNull<ProtocolObject<dyn GCDevicePhysicalInput>>,
            NonNull<ProtocolObject<dyn GCPhysicalInputElement>>,
        ),
        (),
    >;

    #[objc2::method(sel = "setElementValueDidChangeHandler:")]
    unsafe fn setElementValueDidChangeHandler(
        &self,
        element_value_did_change_handler: Option<
            &Block<
                (
                    NonNull<ProtocolObject<dyn GCDevicePhysicalInput>>,
                    NonNull<ProtocolObject<dyn GCPhysicalInputElement>>,
                ),
                (),
            >,
        >,
    );

    #[objc2::method(sel = "capture", managed = "Other")]
    unsafe fn capture(&self) -> Id<ProtocolObject<dyn GCDevicePhysicalInputState>>;

    #[objc2::method(sel = "inputStateAvailableHandler")]
    unsafe fn inputStateAvailableHandler(
        &self,
    ) -> *mut Block<(NonNull<ProtocolObject<dyn GCDevicePhysicalInput>>,), ()>;

    #[objc2::method(sel = "setInputStateAvailableHandler:")]
    unsafe fn setInputStateAvailableHandler(
        &self,
        input_state_available_handler: Option<
            &Block<(NonNull<ProtocolObject<dyn GCDevicePhysicalInput>>,), ()>,
        >,
    );

    #[objc2::method(sel = "inputStateQueueDepth")]
    unsafe fn inputStateQueueDepth(&self) -> NSInteger;

    #[objc2::method(sel = "setInputStateQueueDepth:")]
    unsafe fn setInputStateQueueDepth(&self, input_state_queue_depth: NSInteger);

    #[objc2::method(sel = "nextInputState", managed = "Other")]
    unsafe fn nextInputState(&self) -> Option<Id<TodoProtocols>>;
}
