//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AuthenticationServices::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = ASAuthorizationOpenIDRequest,
    unsafe inherits = [
        ASAuthorizationRequest,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AuthenticationServices_ASAuthorizationSingleSignOnRequest")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type ASAuthorizationSingleSignOnRequest;
}

#[cfg(feature = "AuthenticationServices_ASAuthorizationSingleSignOnRequest")]
unsafe impl NSCoding for ASAuthorizationSingleSignOnRequest {}

#[cfg(feature = "AuthenticationServices_ASAuthorizationSingleSignOnRequest")]
unsafe impl NSObjectProtocol for ASAuthorizationSingleSignOnRequest {}

#[cfg(feature = "AuthenticationServices_ASAuthorizationSingleSignOnRequest")]
unsafe impl NSSecureCoding for ASAuthorizationSingleSignOnRequest {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AuthenticationServices_ASAuthorizationSingleSignOnRequest")]
    pub type ASAuthorizationSingleSignOnRequest;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSURLQueryItem"))]
    #[objc2::method(sel = "authorizationOptions", managed = "Other")]
    pub unsafe fn authorizationOptions(&self) -> Id<NSArray<NSURLQueryItem>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSURLQueryItem"))]
    #[objc2::method(sel = "setAuthorizationOptions:")]
    pub unsafe fn setAuthorizationOptions(&self, authorization_options: &NSArray<NSURLQueryItem>);

    #[objc2::method(sel = "isUserInterfaceEnabled")]
    pub unsafe fn isUserInterfaceEnabled(&self) -> bool;

    #[objc2::method(sel = "setUserInterfaceEnabled:")]
    pub unsafe fn setUserInterfaceEnabled(&self, user_interface_enabled: bool);
}
