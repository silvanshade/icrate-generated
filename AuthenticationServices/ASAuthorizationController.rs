//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AuthenticationServices::*;
use crate::Foundation::*;

#[objc2::protocol]
pub unsafe trait ASAuthorizationControllerDelegate: NSObjectProtocol {
    #[cfg(all(
        feature = "AuthenticationServices_ASAuthorization",
        feature = "AuthenticationServices_ASAuthorizationController"
    ))]
    #[objc2::method(
        optional,
        sel = "authorizationController:didCompleteWithAuthorization:"
    )]
    unsafe fn authorizationController_didCompleteWithAuthorization(
        &self,
        controller: &ASAuthorizationController,
        authorization: &ASAuthorization,
    );

    #[cfg(all(
        feature = "AuthenticationServices_ASAuthorizationController",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(optional, sel = "authorizationController:didCompleteWithError:")]
    unsafe fn authorizationController_didCompleteWithError(
        &self,
        controller: &ASAuthorizationController,
        error: &NSError,
    );

    #[cfg(feature = "AuthenticationServices_ASAuthorizationController")]
    #[objc2::method(optional, sel = "authorizationController:didCompleteWithCustomMethod:")]
    unsafe fn authorizationController_didCompleteWithCustomMethod(
        &self,
        controller: &ASAuthorizationController,
        method: &ASAuthorizationCustomMethod,
    );
}

#[objc2::protocol]
pub unsafe trait ASAuthorizationControllerPresentationContextProviding:
    NSObjectProtocol
{
    #[cfg(feature = "AuthenticationServices_ASAuthorizationController")]
    #[objc2::method(
        sel = "presentationAnchorForAuthorizationController:",
        managed = "Other"
    )]
    unsafe fn presentationAnchorForAuthorizationController(
        &self,
        controller: &ASAuthorizationController,
    ) -> Id<ASPresentationAnchor>;
}

#[ns_options]
#[underlying(NSUInteger)]
pub enum ASAuthorizationControllerRequestOptions {
    ASAuthorizationControllerRequestOptionPreferImmediatelyAvailableCredentials = 1 << 0,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AuthenticationServices_ASAuthorizationController")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type ASAuthorizationController;
}

#[cfg(feature = "AuthenticationServices_ASAuthorizationController")]
unsafe impl NSObjectProtocol for ASAuthorizationController {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AuthenticationServices_ASAuthorizationController")]
    pub type ASAuthorizationController;

    #[cfg(all(
        feature = "AuthenticationServices_ASAuthorizationRequest",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(sel = "authorizationRequests", managed = "Other")]
    pub unsafe fn authorizationRequests(&self) -> Id<NSArray<ASAuthorizationRequest>>;

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(
        &self,
    ) -> Option<Id<ProtocolObject<dyn ASAuthorizationControllerDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(
        &self,
        delegate: Option<&ProtocolObject<dyn ASAuthorizationControllerDelegate>>,
    );

    #[objc2::method(sel = "presentationContextProvider", managed = "Other")]
    pub unsafe fn presentationContextProvider(
        &self,
    ) -> Option<Id<ProtocolObject<dyn ASAuthorizationControllerPresentationContextProviding>>>;

    #[objc2::method(sel = "setPresentationContextProvider:")]
    pub unsafe fn setPresentationContextProvider(
        &self,
        presentation_context_provider: Option<
            &ProtocolObject<dyn ASAuthorizationControllerPresentationContextProviding>,
        >,
    );

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "customAuthorizationMethods", managed = "Other")]
    pub unsafe fn customAuthorizationMethods(&self) -> Id<NSArray<ASAuthorizationCustomMethod>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "setCustomAuthorizationMethods:")]
    pub unsafe fn setCustomAuthorizationMethods(
        &self,
        custom_authorization_methods: &NSArray<ASAuthorizationCustomMethod>,
    );

    #[cfg(all(
        feature = "AuthenticationServices_ASAuthorizationRequest",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(sel = "initWithAuthorizationRequests:", managed = "Init")]
    pub unsafe fn initWithAuthorizationRequests(
        this: Option<Allocated<Self>>,
        authorization_requests: &NSArray<ASAuthorizationRequest>,
    ) -> Id<Self>;

    #[objc2::method(sel = "performRequests")]
    pub unsafe fn performRequests(&self);

    #[objc2::method(sel = "performAutoFillAssistedRequests")]
    pub unsafe fn performAutoFillAssistedRequests(&self);

    #[objc2::method(sel = "performRequestsWithOptions:")]
    pub unsafe fn performRequestsWithOptions(
        &self,
        options: ASAuthorizationControllerRequestOptions,
    );

    #[objc2::method(sel = "cancel")]
    pub unsafe fn cancel(&self);

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;
}
