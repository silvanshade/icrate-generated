//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AuthenticationServices::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum ASAuthorizationProviderExtensionKeyType {
    ASAuthorizationProviderExtensionKeyTypeUserDeviceSigning = 1,
    ASAuthorizationProviderExtensionKeyTypeUserDeviceEncryption = 2,
    ASAuthorizationProviderExtensionKeyTypeUserSecureEnclaveKey = 3,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AuthenticationServices_ASAuthorizationProviderExtensionLoginManager")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type ASAuthorizationProviderExtensionLoginManager;
}

#[cfg(feature = "AuthenticationServices_ASAuthorizationProviderExtensionLoginManager")]
unsafe impl NSObjectProtocol for ASAuthorizationProviderExtensionLoginManager {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AuthenticationServices_ASAuthorizationProviderExtensionLoginManager")]
    pub type ASAuthorizationProviderExtensionLoginManager;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;

    #[objc2::method(sel = "isDeviceRegistered")]
    pub unsafe fn isDeviceRegistered(&self) -> bool;

    #[objc2::method(sel = "isUserRegistered")]
    pub unsafe fn isUserRegistered(&self) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "registrationToken", managed = "Other")]
    pub unsafe fn registrationToken(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "loginUserName", managed = "Other")]
    pub unsafe fn loginUserName(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setLoginUserName:")]
    pub unsafe fn setLoginUserName(&self, login_user_name: Option<&NSString>);

    #[cfg(feature = "Foundation_NSDictionary")]
    #[objc2::method(sel = "ssoTokens", managed = "Other")]
    pub unsafe fn ssoTokens(&self) -> Option<Id<NSDictionary>>;

    #[cfg(feature = "Foundation_NSDictionary")]
    #[objc2::method(sel = "setSsoTokens:")]
    pub unsafe fn setSsoTokens(&self, sso_tokens: Option<&NSDictionary>);

    #[cfg(feature = "AuthenticationServices_ASAuthorizationProviderExtensionLoginConfiguration")]
    #[objc2::method(sel = "loginConfiguration", managed = "Other")]
    pub unsafe fn loginConfiguration(
        &self,
    ) -> Option<Id<ASAuthorizationProviderExtensionLoginConfiguration>>;

    #[cfg(all(
        feature = "AuthenticationServices_ASAuthorizationProviderExtensionLoginConfiguration",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "saveLoginConfiguration:error:", throws)]
    pub unsafe fn saveLoginConfiguration_error(
        &self,
        login_configuration: &ASAuthorizationProviderExtensionLoginConfiguration,
    ) -> Result<(), Id<NSError>>;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "userNeedsReauthenticationWithCompletion:")]
    pub unsafe fn userNeedsReauthenticationWithCompletion(
        &self,
        completion: &Block<(*mut NSError,), ()>,
    );

    #[objc2::method(sel = "deviceRegistrationsNeedsRepair")]
    pub unsafe fn deviceRegistrationsNeedsRepair(&self);

    #[objc2::method(sel = "userRegistrationsNeedsRepair")]
    pub unsafe fn userRegistrationsNeedsRepair(&self);

    #[objc2::method(sel = "resetKeys")]
    pub unsafe fn resetKeys(&self);

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "presentRegistrationViewControllerWithCompletion:")]
    pub unsafe fn presentRegistrationViewControllerWithCompletion(
        &self,
        completion: &Block<(*mut NSError,), ()>,
    );
}
