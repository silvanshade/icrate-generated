//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AuthenticationServices::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AuthenticationServices_ASAuthorizationSingleSignOnCredential")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type ASAuthorizationSingleSignOnCredential;
}

#[cfg(feature = "AuthenticationServices_ASAuthorizationSingleSignOnCredential")]
unsafe impl ASAuthorizationCredential for ASAuthorizationSingleSignOnCredential {}

#[cfg(feature = "AuthenticationServices_ASAuthorizationSingleSignOnCredential")]
unsafe impl NSCoding for ASAuthorizationSingleSignOnCredential {}

#[cfg(feature = "AuthenticationServices_ASAuthorizationSingleSignOnCredential")]
unsafe impl NSObjectProtocol for ASAuthorizationSingleSignOnCredential {}

#[cfg(feature = "AuthenticationServices_ASAuthorizationSingleSignOnCredential")]
unsafe impl NSSecureCoding for ASAuthorizationSingleSignOnCredential {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AuthenticationServices_ASAuthorizationSingleSignOnCredential")]
    pub type ASAuthorizationSingleSignOnCredential;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "state", managed = "Other")]
    pub unsafe fn state(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "accessToken", managed = "Other")]
    pub unsafe fn accessToken(&self) -> Option<Id<NSData>>;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "identityToken", managed = "Other")]
    pub unsafe fn identityToken(&self) -> Option<Id<NSData>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "authorizedScopes", managed = "Other")]
    pub unsafe fn authorizedScopes(&self) -> Id<NSArray<ASAuthorizationScope>>;

    #[cfg(feature = "Foundation_NSHTTPURLResponse")]
    #[objc2::method(sel = "authenticatedResponse", managed = "Other")]
    pub unsafe fn authenticatedResponse(&self) -> Option<Id<NSHTTPURLResponse>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "privateKeys", managed = "Other")]
    pub unsafe fn privateKeys(&self) -> Id<NSArray>;

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;
}
