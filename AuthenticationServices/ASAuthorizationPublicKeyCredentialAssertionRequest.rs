//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AuthenticationServices::*;
use crate::Foundation::*;

#[objc2::protocol]
pub unsafe trait ASAuthorizationPublicKeyCredentialAssertionRequest:
    NSObjectProtocol + NSSecureCoding
{
    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "challenge", managed = "Other")]
    unsafe fn challenge(&self) -> Id<NSData>;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "setChallenge:")]
    unsafe fn setChallenge(&self, challenge: &NSData);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "relyingPartyIdentifier", managed = "Other")]
    unsafe fn relyingPartyIdentifier(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setRelyingPartyIdentifier:")]
    unsafe fn setRelyingPartyIdentifier(&self, relying_party_identifier: &NSString);

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "allowedCredentials", managed = "Other")]
    unsafe fn allowedCredentials(
        &self,
    ) -> Id<NSArray<ProtocolObject<dyn ASAuthorizationPublicKeyCredentialDescriptor>>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "setAllowedCredentials:")]
    unsafe fn setAllowedCredentials(
        &self,
        allowed_credentials: &NSArray<
            ProtocolObject<dyn ASAuthorizationPublicKeyCredentialDescriptor>,
        >,
    );

    #[objc2::method(sel = "userVerificationPreference", managed = "Other")]
    unsafe fn userVerificationPreference(
        &self,
    ) -> Id<ASAuthorizationPublicKeyCredentialUserVerificationPreference>;

    #[objc2::method(sel = "setUserVerificationPreference:")]
    unsafe fn setUserVerificationPreference(
        &self,
        user_verification_preference: &ASAuthorizationPublicKeyCredentialUserVerificationPreference,
    );
}
