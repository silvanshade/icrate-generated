//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AuthenticationServices::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AuthenticationServices_ASAuthorizationProviderExtensionKerberosMapping")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type ASAuthorizationProviderExtensionKerberosMapping;
}

#[cfg(feature = "AuthenticationServices_ASAuthorizationProviderExtensionKerberosMapping")]
unsafe impl NSObjectProtocol for ASAuthorizationProviderExtensionKerberosMapping {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AuthenticationServices_ASAuthorizationProviderExtensionKerberosMapping")]
    pub type ASAuthorizationProviderExtensionKerberosMapping;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "ticketKeyPath", managed = "Other")]
    pub unsafe fn ticketKeyPath(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setTicketKeyPath:")]
    pub unsafe fn setTicketKeyPath(&self, ticket_key_path: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "messageBufferKeyName", managed = "Other")]
    pub unsafe fn messageBufferKeyName(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setMessageBufferKeyName:")]
    pub unsafe fn setMessageBufferKeyName(&self, message_buffer_key_name: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "realmKeyName", managed = "Other")]
    pub unsafe fn realmKeyName(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setRealmKeyName:")]
    pub unsafe fn setRealmKeyName(&self, realm_key_name: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "serviceNameKeyName", managed = "Other")]
    pub unsafe fn serviceNameKeyName(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setServiceNameKeyName:")]
    pub unsafe fn setServiceNameKeyName(&self, service_name_key_name: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "clientNameKeyName", managed = "Other")]
    pub unsafe fn clientNameKeyName(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setClientNameKeyName:")]
    pub unsafe fn setClientNameKeyName(&self, client_name_key_name: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "encryptionKeyTypeKeyName", managed = "Other")]
    pub unsafe fn encryptionKeyTypeKeyName(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setEncryptionKeyTypeKeyName:")]
    pub unsafe fn setEncryptionKeyTypeKeyName(
        &self,
        encryption_key_type_key_name: Option<&NSString>,
    );

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "sessionKeyKeyName", managed = "Other")]
    pub unsafe fn sessionKeyKeyName(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setSessionKeyKeyName:")]
    pub unsafe fn setSessionKeyKeyName(&self, session_key_key_name: Option<&NSString>);
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AuthenticationServices_ASAuthorizationProviderExtensionLoginConfiguration")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type ASAuthorizationProviderExtensionLoginConfiguration;
}

#[cfg(feature = "AuthenticationServices_ASAuthorizationProviderExtensionLoginConfiguration")]
unsafe impl NSObjectProtocol for ASAuthorizationProviderExtensionLoginConfiguration {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AuthenticationServices_ASAuthorizationProviderExtensionLoginConfiguration")]
    pub type ASAuthorizationProviderExtensionLoginConfiguration;

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(all(feature = "Foundation_NSString", feature = "Foundation_NSURL"))]
    #[objc2::method(
        sel = "initWithClientID:issuer:tokenEndpointURL:jwksEndpointURL:audience:",
        managed = "Init"
    )]
    pub unsafe fn initWithClientID_issuer_tokenEndpointURL_jwksEndpointURL_audience(
        this: Option<Allocated<Self>>,
        client_id: &NSString,
        issuer: &NSString,
        token_endpoint_url: &NSURL,
        jwks_endpoint_url: &NSURL,
        audience: Option<&NSString>,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "Foundation_NSError",
        feature = "Foundation_NSString",
        feature = "Foundation_NSURL"
    ))]
    #[objc2::method(sel = "configurationWithOpenIDConfigurationURL:clientID:issuer:completion:")]
    pub unsafe fn configurationWithOpenIDConfigurationURL_clientID_issuer_completion(
        open_id_configuration_url: &NSURL,
        client_id: &NSString,
        issuer: Option<&NSString>,
        completion: &Block<
            (
                *mut ASAuthorizationProviderExtensionLoginConfiguration,
                *mut NSError,
            ),
            (),
        >,
    );

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "invalidCredentialPredicate", managed = "Other")]
    pub unsafe fn invalidCredentialPredicate(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setInvalidCredentialPredicate:")]
    pub unsafe fn setInvalidCredentialPredicate(
        &self,
        invalid_credential_predicate: Option<&NSString>,
    );

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "accountDisplayName", managed = "Other")]
    pub unsafe fn accountDisplayName(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setAccountDisplayName:")]
    pub unsafe fn setAccountDisplayName(&self, account_display_name: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "clientID", managed = "Other")]
    pub unsafe fn clientID(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "issuer", managed = "Other")]
    pub unsafe fn issuer(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "audience", managed = "Other")]
    pub unsafe fn audience(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setAudience:")]
    pub unsafe fn setAudience(&self, audience: &NSString);

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "tokenEndpointURL", managed = "Other")]
    pub unsafe fn tokenEndpointURL(&self) -> Id<NSURL>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "setTokenEndpointURL:")]
    pub unsafe fn setTokenEndpointURL(&self, token_endpoint_url: &NSURL);

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "jwksEndpointURL", managed = "Other")]
    pub unsafe fn jwksEndpointURL(&self) -> Id<NSURL>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "setJwksEndpointURL:")]
    pub unsafe fn setJwksEndpointURL(&self, jwks_endpoint_url: &NSURL);

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "nonceEndpointURL", managed = "Other")]
    pub unsafe fn nonceEndpointURL(&self) -> Id<NSURL>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "setNonceEndpointURL:")]
    pub unsafe fn setNonceEndpointURL(&self, nonce_endpoint_url: &NSURL);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "nonceResponseKeypath", managed = "Other")]
    pub unsafe fn nonceResponseKeypath(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setNonceResponseKeypath:")]
    pub unsafe fn setNonceResponseKeypath(&self, nonce_response_keypath: &NSString);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "serverNonceClaimName", managed = "Other")]
    pub unsafe fn serverNonceClaimName(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setServerNonceClaimName:")]
    pub unsafe fn setServerNonceClaimName(&self, server_nonce_claim_name: &NSString);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSURLQueryItem"))]
    #[objc2::method(sel = "customNonceRequestValues", managed = "Other")]
    pub unsafe fn customNonceRequestValues(&self) -> Id<NSArray<NSURLQueryItem>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSURLQueryItem"))]
    #[objc2::method(sel = "setCustomNonceRequestValues:")]
    pub unsafe fn setCustomNonceRequestValues(
        &self,
        custom_nonce_request_values: &NSArray<NSURLQueryItem>,
    );

    #[cfg(all(
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSError",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "setCustomAssertionRequestHeaderClaims:returningError:", throws)]
    pub unsafe fn setCustomAssertionRequestHeaderClaims_returningError(
        &self,
        claims: &NSDictionary<NSString, Object>,
    ) -> Result<(), Id<NSError>>;

    #[cfg(all(
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSError",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "setCustomAssertionRequestBodyClaims:returningError:", throws)]
    pub unsafe fn setCustomAssertionRequestBodyClaims_returningError(
        &self,
        claims: &NSDictionary<NSString, Object>,
    ) -> Result<(), Id<NSError>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "additionalScopes", managed = "Other")]
    pub unsafe fn additionalScopes(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setAdditionalScopes:")]
    pub unsafe fn setAdditionalScopes(&self, additional_scopes: &NSString);

    #[objc2::method(sel = "includePreviousRefreshTokenInLoginRequest")]
    pub unsafe fn includePreviousRefreshTokenInLoginRequest(&self) -> bool;

    #[objc2::method(sel = "setIncludePreviousRefreshTokenInLoginRequest:")]
    pub unsafe fn setIncludePreviousRefreshTokenInLoginRequest(
        &self,
        include_previous_refresh_token_in_login_request: bool,
    );

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "previousRefreshTokenClaimName", managed = "Other")]
    pub unsafe fn previousRefreshTokenClaimName(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setPreviousRefreshTokenClaimName:")]
    pub unsafe fn setPreviousRefreshTokenClaimName(
        &self,
        previous_refresh_token_claim_name: &NSString,
    );

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSURLQueryItem"))]
    #[objc2::method(sel = "customLoginRequestValues", managed = "Other")]
    pub unsafe fn customLoginRequestValues(&self) -> Id<NSArray<NSURLQueryItem>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSURLQueryItem"))]
    #[objc2::method(sel = "setCustomLoginRequestValues:")]
    pub unsafe fn setCustomLoginRequestValues(
        &self,
        custom_login_request_values: &NSArray<NSURLQueryItem>,
    );

    #[cfg(all(
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSError",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "setCustomLoginRequestHeaderClaims:returningError:", throws)]
    pub unsafe fn setCustomLoginRequestHeaderClaims_returningError(
        &self,
        claims: &NSDictionary<NSString, Object>,
    ) -> Result<(), Id<NSError>>;

    #[cfg(all(
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSError",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "setCustomLoginRequestBodyClaims:returningError:", throws)]
    pub unsafe fn setCustomLoginRequestBodyClaims_returningError(
        &self,
        claims: &NSDictionary<NSString, Object>,
    ) -> Result<(), Id<NSError>>;

    #[cfg(all(
        feature = "AuthenticationServices_ASAuthorizationProviderExtensionKerberosMapping",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(sel = "kerberosTicketMappings", managed = "Other")]
    pub unsafe fn kerberosTicketMappings(
        &self,
    ) -> Id<NSArray<ASAuthorizationProviderExtensionKerberosMapping>>;

    #[cfg(all(
        feature = "AuthenticationServices_ASAuthorizationProviderExtensionKerberosMapping",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(sel = "setKerberosTicketMappings:")]
    pub unsafe fn setKerberosTicketMappings(
        &self,
        kerberos_ticket_mappings: &NSArray<ASAuthorizationProviderExtensionKerberosMapping>,
    );
}
