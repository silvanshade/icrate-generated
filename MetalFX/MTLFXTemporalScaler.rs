//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Metal::*;
use crate::MetalFX::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "MetalFX_MTLFXTemporalScalerDescriptor")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLFXTemporalScalerDescriptor;
}

#[cfg(feature = "MetalFX_MTLFXTemporalScalerDescriptor")]
unsafe impl NSObjectProtocol for MTLFXTemporalScalerDescriptor {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MetalFX_MTLFXTemporalScalerDescriptor")]
    pub type MTLFXTemporalScalerDescriptor;

    #[objc2::method(sel = "colorTextureFormat")]
    pub unsafe fn colorTextureFormat(&self) -> MTLPixelFormat;

    #[objc2::method(sel = "setColorTextureFormat:")]
    pub unsafe fn setColorTextureFormat(&self, color_texture_format: MTLPixelFormat);

    #[objc2::method(sel = "depthTextureFormat")]
    pub unsafe fn depthTextureFormat(&self) -> MTLPixelFormat;

    #[objc2::method(sel = "setDepthTextureFormat:")]
    pub unsafe fn setDepthTextureFormat(&self, depth_texture_format: MTLPixelFormat);

    #[objc2::method(sel = "motionTextureFormat")]
    pub unsafe fn motionTextureFormat(&self) -> MTLPixelFormat;

    #[objc2::method(sel = "setMotionTextureFormat:")]
    pub unsafe fn setMotionTextureFormat(&self, motion_texture_format: MTLPixelFormat);

    #[objc2::method(sel = "outputTextureFormat")]
    pub unsafe fn outputTextureFormat(&self) -> MTLPixelFormat;

    #[objc2::method(sel = "setOutputTextureFormat:")]
    pub unsafe fn setOutputTextureFormat(&self, output_texture_format: MTLPixelFormat);

    #[objc2::method(sel = "inputWidth")]
    pub unsafe fn inputWidth(&self) -> NSUInteger;

    #[objc2::method(sel = "setInputWidth:")]
    pub unsafe fn setInputWidth(&self, input_width: NSUInteger);

    #[objc2::method(sel = "inputHeight")]
    pub unsafe fn inputHeight(&self) -> NSUInteger;

    #[objc2::method(sel = "setInputHeight:")]
    pub unsafe fn setInputHeight(&self, input_height: NSUInteger);

    #[objc2::method(sel = "outputWidth")]
    pub unsafe fn outputWidth(&self) -> NSUInteger;

    #[objc2::method(sel = "setOutputWidth:")]
    pub unsafe fn setOutputWidth(&self, output_width: NSUInteger);

    #[objc2::method(sel = "outputHeight")]
    pub unsafe fn outputHeight(&self) -> NSUInteger;

    #[objc2::method(sel = "setOutputHeight:")]
    pub unsafe fn setOutputHeight(&self, output_height: NSUInteger);

    #[objc2::method(sel = "isAutoExposureEnabled")]
    pub unsafe fn isAutoExposureEnabled(&self) -> bool;

    #[objc2::method(sel = "setAutoExposureEnabled:")]
    pub unsafe fn setAutoExposureEnabled(&self, auto_exposure_enabled: bool);

    #[objc2::method(sel = "isInputContentPropertiesEnabled")]
    pub unsafe fn isInputContentPropertiesEnabled(&self) -> bool;

    #[objc2::method(sel = "setInputContentPropertiesEnabled:")]
    pub unsafe fn setInputContentPropertiesEnabled(&self, input_content_properties_enabled: bool);

    #[objc2::method(sel = "inputContentMinScale")]
    pub unsafe fn inputContentMinScale(&self) -> c_float;

    #[objc2::method(sel = "setInputContentMinScale:")]
    pub unsafe fn setInputContentMinScale(&self, input_content_min_scale: c_float);

    #[objc2::method(sel = "inputContentMaxScale")]
    pub unsafe fn inputContentMaxScale(&self) -> c_float;

    #[objc2::method(sel = "setInputContentMaxScale:")]
    pub unsafe fn setInputContentMaxScale(&self, input_content_max_scale: c_float);

    #[objc2::method(sel = "newTemporalScalerWithDevice:", managed = "New")]
    pub unsafe fn newTemporalScalerWithDevice(
        &self,
        device: &ProtocolObject<dyn MTLDevice>,
    ) -> Option<Id<ProtocolObject<dyn MTLFXTemporalScaler>>>;

    #[objc2::method(sel = "supportsDevice:")]
    pub unsafe fn supportsDevice(device: &ProtocolObject<dyn MTLDevice>) -> bool;
}

#[objc2::protocol]
pub unsafe trait MTLFXTemporalScaler: NSObjectProtocol {
    #[objc2::method(sel = "colorTextureUsage")]
    unsafe fn colorTextureUsage(&self) -> MTLTextureUsage;

    #[objc2::method(sel = "depthTextureUsage")]
    unsafe fn depthTextureUsage(&self) -> MTLTextureUsage;

    #[objc2::method(sel = "motionTextureUsage")]
    unsafe fn motionTextureUsage(&self) -> MTLTextureUsage;

    #[objc2::method(sel = "outputTextureUsage")]
    unsafe fn outputTextureUsage(&self) -> MTLTextureUsage;

    #[objc2::method(sel = "inputContentWidth")]
    unsafe fn inputContentWidth(&self) -> NSUInteger;

    #[objc2::method(sel = "setInputContentWidth:")]
    unsafe fn setInputContentWidth(&self, input_content_width: NSUInteger);

    #[objc2::method(sel = "inputContentHeight")]
    unsafe fn inputContentHeight(&self) -> NSUInteger;

    #[objc2::method(sel = "setInputContentHeight:")]
    unsafe fn setInputContentHeight(&self, input_content_height: NSUInteger);

    #[objc2::method(sel = "colorTexture", managed = "Other")]
    unsafe fn colorTexture(&self) -> Option<Id<ProtocolObject<dyn MTLTexture>>>;

    #[objc2::method(sel = "setColorTexture:")]
    unsafe fn setColorTexture(&self, color_texture: Option<&ProtocolObject<dyn MTLTexture>>);

    #[objc2::method(sel = "depthTexture", managed = "Other")]
    unsafe fn depthTexture(&self) -> Option<Id<ProtocolObject<dyn MTLTexture>>>;

    #[objc2::method(sel = "setDepthTexture:")]
    unsafe fn setDepthTexture(&self, depth_texture: Option<&ProtocolObject<dyn MTLTexture>>);

    #[objc2::method(sel = "motionTexture", managed = "Other")]
    unsafe fn motionTexture(&self) -> Option<Id<ProtocolObject<dyn MTLTexture>>>;

    #[objc2::method(sel = "setMotionTexture:")]
    unsafe fn setMotionTexture(&self, motion_texture: Option<&ProtocolObject<dyn MTLTexture>>);

    #[objc2::method(sel = "outputTexture", managed = "Other")]
    unsafe fn outputTexture(&self) -> Option<Id<ProtocolObject<dyn MTLTexture>>>;

    #[objc2::method(sel = "setOutputTexture:")]
    unsafe fn setOutputTexture(&self, output_texture: Option<&ProtocolObject<dyn MTLTexture>>);

    #[objc2::method(sel = "exposureTexture", managed = "Other")]
    unsafe fn exposureTexture(&self) -> Option<Id<ProtocolObject<dyn MTLTexture>>>;

    #[objc2::method(sel = "setExposureTexture:")]
    unsafe fn setExposureTexture(&self, exposure_texture: Option<&ProtocolObject<dyn MTLTexture>>);

    #[objc2::method(sel = "preExposure")]
    unsafe fn preExposure(&self) -> c_float;

    #[objc2::method(sel = "setPreExposure:")]
    unsafe fn setPreExposure(&self, pre_exposure: c_float);

    #[objc2::method(sel = "jitterOffsetX")]
    unsafe fn jitterOffsetX(&self) -> c_float;

    #[objc2::method(sel = "setJitterOffsetX:")]
    unsafe fn setJitterOffsetX(&self, jitter_offset_x: c_float);

    #[objc2::method(sel = "jitterOffsetY")]
    unsafe fn jitterOffsetY(&self) -> c_float;

    #[objc2::method(sel = "setJitterOffsetY:")]
    unsafe fn setJitterOffsetY(&self, jitter_offset_y: c_float);

    #[objc2::method(sel = "motionVectorScaleX")]
    unsafe fn motionVectorScaleX(&self) -> c_float;

    #[objc2::method(sel = "setMotionVectorScaleX:")]
    unsafe fn setMotionVectorScaleX(&self, motion_vector_scale_x: c_float);

    #[objc2::method(sel = "motionVectorScaleY")]
    unsafe fn motionVectorScaleY(&self) -> c_float;

    #[objc2::method(sel = "setMotionVectorScaleY:")]
    unsafe fn setMotionVectorScaleY(&self, motion_vector_scale_y: c_float);

    #[objc2::method(sel = "reset")]
    unsafe fn reset(&self) -> bool;

    #[objc2::method(sel = "setReset:")]
    unsafe fn setReset(&self, reset: bool);

    #[objc2::method(sel = "isDepthReversed")]
    unsafe fn isDepthReversed(&self) -> bool;

    #[objc2::method(sel = "setDepthReversed:")]
    unsafe fn setDepthReversed(&self, depth_reversed: bool);

    #[objc2::method(sel = "colorTextureFormat")]
    unsafe fn colorTextureFormat(&self) -> MTLPixelFormat;

    #[objc2::method(sel = "depthTextureFormat")]
    unsafe fn depthTextureFormat(&self) -> MTLPixelFormat;

    #[objc2::method(sel = "motionTextureFormat")]
    unsafe fn motionTextureFormat(&self) -> MTLPixelFormat;

    #[objc2::method(sel = "outputTextureFormat")]
    unsafe fn outputTextureFormat(&self) -> MTLPixelFormat;

    #[objc2::method(sel = "inputWidth")]
    unsafe fn inputWidth(&self) -> NSUInteger;

    #[objc2::method(sel = "inputHeight")]
    unsafe fn inputHeight(&self) -> NSUInteger;

    #[objc2::method(sel = "outputWidth")]
    unsafe fn outputWidth(&self) -> NSUInteger;

    #[objc2::method(sel = "outputHeight")]
    unsafe fn outputHeight(&self) -> NSUInteger;

    #[objc2::method(sel = "inputContentMinScale")]
    unsafe fn inputContentMinScale(&self) -> c_float;

    #[objc2::method(sel = "inputContentMaxScale")]
    unsafe fn inputContentMaxScale(&self) -> c_float;

    #[objc2::method(sel = "fence", managed = "Other")]
    unsafe fn fence(&self) -> Option<Id<ProtocolObject<dyn MTLFence>>>;

    #[objc2::method(sel = "setFence:")]
    unsafe fn setFence(&self, fence: Option<&ProtocolObject<dyn MTLFence>>);

    #[objc2::method(sel = "encodeToCommandBuffer:")]
    unsafe fn encodeToCommandBuffer(&self, command_buffer: &ProtocolObject<dyn MTLCommandBuffer>);
}
