//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Metal::*;
use crate::MetalFX::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum MTLFXSpatialScalerColorProcessingMode {
    MTLFXSpatialScalerColorProcessingModePerceptual = 0,
    MTLFXSpatialScalerColorProcessingModeLinear = 1,
    MTLFXSpatialScalerColorProcessingModeHDR = 2,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "MetalFX_MTLFXSpatialScalerDescriptor")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLFXSpatialScalerDescriptor;
}

#[cfg(feature = "MetalFX_MTLFXSpatialScalerDescriptor")]
unsafe impl NSObjectProtocol for MTLFXSpatialScalerDescriptor {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MetalFX_MTLFXSpatialScalerDescriptor")]
    pub type MTLFXSpatialScalerDescriptor;

    #[objc2::method(sel = "colorTextureFormat")]
    pub unsafe fn colorTextureFormat(&self) -> MTLPixelFormat;

    #[objc2::method(sel = "setColorTextureFormat:")]
    pub unsafe fn setColorTextureFormat(&self, color_texture_format: MTLPixelFormat);

    #[objc2::method(sel = "outputTextureFormat")]
    pub unsafe fn outputTextureFormat(&self) -> MTLPixelFormat;

    #[objc2::method(sel = "setOutputTextureFormat:")]
    pub unsafe fn setOutputTextureFormat(&self, output_texture_format: MTLPixelFormat);

    #[objc2::method(sel = "inputWidth")]
    pub unsafe fn inputWidth(&self) -> NSUInteger;

    #[objc2::method(sel = "setInputWidth:")]
    pub unsafe fn setInputWidth(&self, input_width: NSUInteger);

    #[objc2::method(sel = "inputHeight")]
    pub unsafe fn inputHeight(&self) -> NSUInteger;

    #[objc2::method(sel = "setInputHeight:")]
    pub unsafe fn setInputHeight(&self, input_height: NSUInteger);

    #[objc2::method(sel = "outputWidth")]
    pub unsafe fn outputWidth(&self) -> NSUInteger;

    #[objc2::method(sel = "setOutputWidth:")]
    pub unsafe fn setOutputWidth(&self, output_width: NSUInteger);

    #[objc2::method(sel = "outputHeight")]
    pub unsafe fn outputHeight(&self) -> NSUInteger;

    #[objc2::method(sel = "setOutputHeight:")]
    pub unsafe fn setOutputHeight(&self, output_height: NSUInteger);

    #[objc2::method(sel = "colorProcessingMode")]
    pub unsafe fn colorProcessingMode(&self) -> MTLFXSpatialScalerColorProcessingMode;

    #[objc2::method(sel = "setColorProcessingMode:")]
    pub unsafe fn setColorProcessingMode(
        &self,
        color_processing_mode: MTLFXSpatialScalerColorProcessingMode,
    );

    #[objc2::method(sel = "newSpatialScalerWithDevice:", managed = "New")]
    pub unsafe fn newSpatialScalerWithDevice(
        &self,
        device: &ProtocolObject<dyn MTLDevice>,
    ) -> Option<Id<ProtocolObject<dyn MTLFXSpatialScaler>>>;

    #[objc2::method(sel = "supportsDevice:")]
    pub unsafe fn supportsDevice(device: &ProtocolObject<dyn MTLDevice>) -> bool;
}

#[objc2::protocol]
pub unsafe trait MTLFXSpatialScaler: NSObjectProtocol {
    #[objc2::method(sel = "colorTextureUsage")]
    unsafe fn colorTextureUsage(&self) -> MTLTextureUsage;

    #[objc2::method(sel = "outputTextureUsage")]
    unsafe fn outputTextureUsage(&self) -> MTLTextureUsage;

    #[objc2::method(sel = "inputContentWidth")]
    unsafe fn inputContentWidth(&self) -> NSUInteger;

    #[objc2::method(sel = "setInputContentWidth:")]
    unsafe fn setInputContentWidth(&self, input_content_width: NSUInteger);

    #[objc2::method(sel = "inputContentHeight")]
    unsafe fn inputContentHeight(&self) -> NSUInteger;

    #[objc2::method(sel = "setInputContentHeight:")]
    unsafe fn setInputContentHeight(&self, input_content_height: NSUInteger);

    #[objc2::method(sel = "colorTexture", managed = "Other")]
    unsafe fn colorTexture(&self) -> Option<Id<ProtocolObject<dyn MTLTexture>>>;

    #[objc2::method(sel = "setColorTexture:")]
    unsafe fn setColorTexture(&self, color_texture: Option<&ProtocolObject<dyn MTLTexture>>);

    #[objc2::method(sel = "outputTexture", managed = "Other")]
    unsafe fn outputTexture(&self) -> Option<Id<ProtocolObject<dyn MTLTexture>>>;

    #[objc2::method(sel = "setOutputTexture:")]
    unsafe fn setOutputTexture(&self, output_texture: Option<&ProtocolObject<dyn MTLTexture>>);

    #[objc2::method(sel = "colorTextureFormat")]
    unsafe fn colorTextureFormat(&self) -> MTLPixelFormat;

    #[objc2::method(sel = "outputTextureFormat")]
    unsafe fn outputTextureFormat(&self) -> MTLPixelFormat;

    #[objc2::method(sel = "inputWidth")]
    unsafe fn inputWidth(&self) -> NSUInteger;

    #[objc2::method(sel = "inputHeight")]
    unsafe fn inputHeight(&self) -> NSUInteger;

    #[objc2::method(sel = "outputWidth")]
    unsafe fn outputWidth(&self) -> NSUInteger;

    #[objc2::method(sel = "outputHeight")]
    unsafe fn outputHeight(&self) -> NSUInteger;

    #[objc2::method(sel = "colorProcessingMode")]
    unsafe fn colorProcessingMode(&self) -> MTLFXSpatialScalerColorProcessingMode;

    #[objc2::method(sel = "fence", managed = "Other")]
    unsafe fn fence(&self) -> Option<Id<ProtocolObject<dyn MTLFence>>>;

    #[objc2::method(sel = "setFence:")]
    unsafe fn setFence(&self, fence: Option<&ProtocolObject<dyn MTLFence>>);

    #[objc2::method(sel = "encodeToCommandBuffer:")]
    unsafe fn encodeToCommandBuffer(&self, command_buffer: &ProtocolObject<dyn MTLCommandBuffer>);
}
