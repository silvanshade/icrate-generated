//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::FileProvider::*;
use crate::Foundation::*;
use crate::UniformTypeIdentifiers::*;

#[objc2::protocol]
pub unsafe trait NSFileProviderServiceSource {
    #[objc2::method(sel = "serviceName", managed = "Other")]
    unsafe fn serviceName(&self) -> Id<NSFileProviderServiceName>;

    #[cfg(all(
        feature = "Foundation_NSError",
        feature = "Foundation_NSXPCListenerEndpoint"
    ))]
    #[objc2::method(sel = "makeListenerEndpointAndReturnError:", managed = "Other", throws)]
    unsafe fn makeListenerEndpointAndReturnError(
        &self,
    ) -> Result<Id<NSXPCListenerEndpoint>, Id<NSError>>;

    #[objc2::method(optional, sel = "isRestricted")]
    unsafe fn isRestricted(&self) -> bool;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "FileProvider_NSFileProviderExtension")]
    pub type NSFileProviderExtension;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSError"))]
    #[objc2::method(
        sel = "supportedServiceSourcesForItemIdentifier:error:",
        managed = "Other",
        throws
    )]
    pub unsafe fn supportedServiceSourcesForItemIdentifier_error(
        &self,
        item_identifier: &NSFileProviderItemIdentifier,
    ) -> Result<Id<NSArray<ProtocolObject<dyn NSFileProviderServiceSource>>>, Id<NSError>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "FileProvider_NSFileProviderManager")]
    pub type NSFileProviderManager;

    #[cfg(all(
        feature = "Foundation_NSError",
        feature = "Foundation_NSFileProviderService"
    ))]
    #[objc2::method(sel = "getServiceWithName:itemIdentifier:completionHandler:")]
    pub unsafe fn getServiceWithName_itemIdentifier_completionHandler(
        &self,
        service_name: &NSFileProviderServiceName,
        item_identifier: &NSFileProviderItemIdentifier,
        completion_handler: &Block<(*mut NSFileProviderService, *mut NSError), ()>,
    );
}
