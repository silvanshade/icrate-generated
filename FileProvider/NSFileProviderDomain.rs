//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::FileProvider::*;
use crate::Foundation::*;
use crate::UniformTypeIdentifiers::*;

typed_extensible_enum!(
    pub type NSFileProviderDomainIdentifier = NSString;
);

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "FileProvider_NSFileProviderDomainVersion")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSFileProviderDomainVersion;
}

#[cfg(feature = "FileProvider_NSFileProviderDomainVersion")]
unsafe impl NSCoding for NSFileProviderDomainVersion {}

#[cfg(feature = "FileProvider_NSFileProviderDomainVersion")]
unsafe impl NSObjectProtocol for NSFileProviderDomainVersion {}

#[cfg(feature = "FileProvider_NSFileProviderDomainVersion")]
unsafe impl NSSecureCoding for NSFileProviderDomainVersion {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "FileProvider_NSFileProviderDomainVersion")]
    pub type NSFileProviderDomainVersion;

    #[objc2::method(sel = "next", managed = "Other")]
    pub unsafe fn next(&self) -> Id<NSFileProviderDomainVersion>;

    #[objc2::method(sel = "compare:")]
    pub unsafe fn compare(&self, other_version: &NSFileProviderDomainVersion)
        -> NSComparisonResult;
}

#[ns_options]
#[underlying(NSUInteger)]
pub enum NSFileProviderDomainTestingModes {
    NSFileProviderDomainTestingModeAlwaysEnabled = 1 << 0,
    NSFileProviderDomainTestingModeInteractive = 1 << 1,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "FileProvider_NSFileProviderDomain")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSFileProviderDomain;
}

#[cfg(feature = "FileProvider_NSFileProviderDomain")]
unsafe impl NSObjectProtocol for NSFileProviderDomain {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "FileProvider_NSFileProviderDomain")]
    pub type NSFileProviderDomain;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(
        sel = "initWithIdentifier:displayName:pathRelativeToDocumentStorage:",
        managed = "Init"
    )]
    pub unsafe fn initWithIdentifier_displayName_pathRelativeToDocumentStorage(
        this: Option<Allocated<Self>>,
        identifier: &NSFileProviderDomainIdentifier,
        display_name: &NSString,
        path_relative_to_document_storage: &NSString,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithIdentifier:displayName:", managed = "Init")]
    pub unsafe fn initWithIdentifier_displayName(
        this: Option<Allocated<Self>>,
        identifier: &NSFileProviderDomainIdentifier,
        display_name: &NSString,
    ) -> Id<Self>;

    #[objc2::method(sel = "identifier", managed = "Other")]
    pub unsafe fn identifier(&self) -> Id<NSFileProviderDomainIdentifier>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "displayName", managed = "Other")]
    pub unsafe fn displayName(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "pathRelativeToDocumentStorage", managed = "Other")]
    pub unsafe fn pathRelativeToDocumentStorage(&self) -> Id<NSString>;

    #[objc2::method(sel = "isDisconnected")]
    pub unsafe fn isDisconnected(&self) -> bool;

    #[objc2::method(sel = "userEnabled")]
    pub unsafe fn userEnabled(&self) -> bool;

    #[objc2::method(sel = "isHidden")]
    pub unsafe fn isHidden(&self) -> bool;

    #[objc2::method(sel = "setHidden:")]
    pub unsafe fn setHidden(&self, hidden: bool);

    #[objc2::method(sel = "isReplicated")]
    pub unsafe fn isReplicated(&self) -> bool;

    #[objc2::method(sel = "testingModes")]
    pub unsafe fn testingModes(&self) -> NSFileProviderDomainTestingModes;

    #[objc2::method(sel = "setTestingModes:")]
    pub unsafe fn setTestingModes(&self, testing_modes: NSFileProviderDomainTestingModes);

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "backingStoreIdentity", managed = "Other")]
    pub unsafe fn backingStoreIdentity(&self) -> Option<Id<NSData>>;

    #[objc2::method(sel = "supportsSyncingTrash")]
    pub unsafe fn supportsSyncingTrash(&self) -> bool;

    #[objc2::method(sel = "setSupportsSyncingTrash:")]
    pub unsafe fn setSupportsSyncingTrash(&self, supports_syncing_trash: bool);
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "FileProvider_NSFileProviderExtension")]
    pub type NSFileProviderExtension;

    #[cfg(feature = "FileProvider_NSFileProviderDomain")]
    #[objc2::method(sel = "domain", managed = "Other")]
    pub unsafe fn domain(&self) -> Option<Id<NSFileProviderDomain>>;
}

extern_static!(NSFileProviderDomainDidChange: &'static NSNotificationName);
