//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::FileProvider::*;
use crate::Foundation::*;
use crate::UniformTypeIdentifiers::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "FileProvider_NSFileProviderExtension")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSFileProviderExtension;
}

#[cfg(feature = "FileProvider_NSFileProviderExtension")]
unsafe impl NSObjectProtocol for NSFileProviderExtension {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "FileProvider_NSFileProviderExtension")]
    pub type NSFileProviderExtension;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "itemForIdentifier:error:", managed = "Other", throws)]
    pub unsafe fn itemForIdentifier_error(
        &self,
        identifier: &NSFileProviderItemIdentifier,
    ) -> Result<Id<NSFileProviderItem>, Id<NSError>>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "URLForItemWithPersistentIdentifier:", managed = "Other")]
    pub unsafe fn URLForItemWithPersistentIdentifier(
        &self,
        identifier: &NSFileProviderItemIdentifier,
    ) -> Option<Id<NSURL>>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "persistentIdentifierForItemAtURL:", managed = "Other")]
    pub unsafe fn persistentIdentifierForItemAtURL(
        &self,
        url: &NSURL,
    ) -> Option<Id<NSFileProviderItemIdentifier>>;

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
    #[objc2::method(sel = "providePlaceholderAtURL:completionHandler:")]
    pub unsafe fn providePlaceholderAtURL_completionHandler(
        &self,
        url: &NSURL,
        completion_handler: &Block<(*mut NSError,), ()>,
    );

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
    #[objc2::method(sel = "startProvidingItemAtURL:completionHandler:")]
    pub unsafe fn startProvidingItemAtURL_completionHandler(
        &self,
        url: &NSURL,
        completion_handler: &Block<(*mut NSError,), ()>,
    );

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "stopProvidingItemAtURL:")]
    pub unsafe fn stopProvidingItemAtURL(&self, url: &NSURL);

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "itemChangedAtURL:")]
    pub unsafe fn itemChangedAtURL(&self, url: &NSURL);
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "FileProvider_NSFileProviderExtension")]
    pub type NSFileProviderExtension;

    #[cfg(all(
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSError",
        feature = "Foundation_NSURL"
    ))]
    #[deprecated = "Use the corresponding method on NSFileProviderManager instead"]
    #[objc2::method(sel = "writePlaceholderAtURL:withMetadata:error:", throws)]
    pub unsafe fn writePlaceholderAtURL_withMetadata_error(
        placeholder_url: &NSURL,
        metadata: &NSDictionary<NSURLResourceKey, Object>,
    ) -> Result<(), Id<NSError>>;

    #[cfg(feature = "Foundation_NSURL")]
    #[deprecated]
    #[objc2::method(sel = "placeholderURLForURL:", managed = "Other")]
    pub unsafe fn placeholderURLForURL(url: &NSURL) -> Id<NSURL>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "providerIdentifier", managed = "Other")]
    pub unsafe fn providerIdentifier(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSURL")]
    #[deprecated]
    #[objc2::method(sel = "documentStorageURL", managed = "Other")]
    pub unsafe fn documentStorageURL(&self) -> Id<NSURL>;
}
