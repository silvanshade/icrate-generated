//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::FileProvider::*;
use crate::Foundation::*;
use crate::UniformTypeIdentifiers::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSFileProviderTestingOperationType {
    NSFileProviderTestingOperationTypeIngestion = 0,
    NSFileProviderTestingOperationTypeLookup = 1,
    NSFileProviderTestingOperationTypeCreation = 2,
    NSFileProviderTestingOperationTypeModification = 3,
    NSFileProviderTestingOperationTypeDeletion = 4,
    NSFileProviderTestingOperationTypeContentFetch = 5,
    NSFileProviderTestingOperationTypeChildrenEnumeration = 6,
    NSFileProviderTestingOperationTypeCollisionResolution = 7,
}

#[objc2::protocol]
pub unsafe trait NSFileProviderTestingOperation: NSObjectProtocol {
    #[objc2::method(sel = "type")]
    unsafe fn r#type(&self) -> NSFileProviderTestingOperationType;

    #[objc2::method(sel = "asIngestion", managed = "Other")]
    unsafe fn asIngestion(&self) -> Option<Id<ProtocolObject<dyn NSFileProviderTestingIngestion>>>;

    #[objc2::method(sel = "asLookup", managed = "Other")]
    unsafe fn asLookup(&self) -> Option<Id<ProtocolObject<dyn NSFileProviderTestingLookup>>>;

    #[objc2::method(sel = "asCreation", managed = "Other")]
    unsafe fn asCreation(&self) -> Option<Id<ProtocolObject<dyn NSFileProviderTestingCreation>>>;

    #[objc2::method(sel = "asModification", managed = "Other")]
    unsafe fn asModification(
        &self,
    ) -> Option<Id<ProtocolObject<dyn NSFileProviderTestingModification>>>;

    #[objc2::method(sel = "asDeletion", managed = "Other")]
    unsafe fn asDeletion(&self) -> Option<Id<ProtocolObject<dyn NSFileProviderTestingDeletion>>>;

    #[objc2::method(sel = "asContentFetch", managed = "Other")]
    unsafe fn asContentFetch(
        &self,
    ) -> Option<Id<ProtocolObject<dyn NSFileProviderTestingContentFetch>>>;

    #[objc2::method(sel = "asChildrenEnumeration", managed = "Other")]
    unsafe fn asChildrenEnumeration(
        &self,
    ) -> Option<Id<ProtocolObject<dyn NSFileProviderTestingChildrenEnumeration>>>;

    #[objc2::method(sel = "asCollisionResolution", managed = "Other")]
    unsafe fn asCollisionResolution(
        &self,
    ) -> Option<Id<ProtocolObject<dyn NSFileProviderTestingCollisionResolution>>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "FileProvider_NSFileProviderManager")]
    pub type NSFileProviderManager;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSError"))]
    #[objc2::method(
        sel = "listAvailableTestingOperationsWithError:",
        managed = "Other",
        throws
    )]
    pub unsafe fn listAvailableTestingOperationsWithError(
        &self,
    ) -> Result<Id<NSArray<ProtocolObject<dyn NSFileProviderTestingOperation>>>, Id<NSError>>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "runTestingOperations:error:", managed = "Other", throws)]
    pub unsafe fn runTestingOperations_error(
        &self,
        operations: &NSArray<ProtocolObject<dyn NSFileProviderTestingOperation>>,
    ) -> Result<
        Id<NSDictionary<ProtocolObject<dyn NSFileProviderTestingOperation>, NSError>>,
        Id<NSError>,
    >;
}

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSFileProviderTestingOperationSide {
    NSFileProviderTestingOperationSideDisk = 0,
    NSFileProviderTestingOperationSideFileProvider = 1,
}

#[objc2::protocol]
pub unsafe trait NSFileProviderTestingIngestion: NSFileProviderTestingOperation {
    #[objc2::method(sel = "side")]
    unsafe fn side(&self) -> NSFileProviderTestingOperationSide;

    #[objc2::method(sel = "itemIdentifier", managed = "Other")]
    unsafe fn itemIdentifier(&self) -> Id<NSFileProviderItemIdentifier>;

    #[objc2::method(sel = "item", managed = "Other")]
    unsafe fn item(&self) -> Option<Id<NSFileProviderItem>>;
}

#[objc2::protocol]
pub unsafe trait NSFileProviderTestingLookup: NSFileProviderTestingOperation {
    #[objc2::method(sel = "side")]
    unsafe fn side(&self) -> NSFileProviderTestingOperationSide;

    #[objc2::method(sel = "itemIdentifier", managed = "Other")]
    unsafe fn itemIdentifier(&self) -> Id<NSFileProviderItemIdentifier>;
}

#[objc2::protocol]
pub unsafe trait NSFileProviderTestingCreation: NSFileProviderTestingOperation {
    #[objc2::method(sel = "targetSide")]
    unsafe fn targetSide(&self) -> NSFileProviderTestingOperationSide;

    #[objc2::method(sel = "sourceItem", managed = "Other")]
    unsafe fn sourceItem(&self) -> Id<NSFileProviderItem>;

    #[cfg(feature = "FileProvider_NSFileProviderDomainVersion")]
    #[objc2::method(sel = "domainVersion", managed = "Other")]
    unsafe fn domainVersion(&self) -> Option<Id<NSFileProviderDomainVersion>>;
}

#[objc2::protocol]
pub unsafe trait NSFileProviderTestingModification: NSFileProviderTestingOperation {
    #[objc2::method(sel = "targetSide")]
    unsafe fn targetSide(&self) -> NSFileProviderTestingOperationSide;

    #[objc2::method(sel = "sourceItem", managed = "Other")]
    unsafe fn sourceItem(&self) -> Id<NSFileProviderItem>;

    #[objc2::method(sel = "targetItemIdentifier", managed = "Other")]
    unsafe fn targetItemIdentifier(&self) -> Id<NSFileProviderItemIdentifier>;

    #[cfg(feature = "FileProvider_NSFileProviderItemVersion")]
    #[objc2::method(sel = "targetItemBaseVersion", managed = "Other")]
    unsafe fn targetItemBaseVersion(&self) -> Id<NSFileProviderItemVersion>;

    #[objc2::method(sel = "changedFields")]
    unsafe fn changedFields(&self) -> NSFileProviderItemFields;

    #[cfg(feature = "FileProvider_NSFileProviderDomainVersion")]
    #[objc2::method(sel = "domainVersion", managed = "Other")]
    unsafe fn domainVersion(&self) -> Option<Id<NSFileProviderDomainVersion>>;
}

#[objc2::protocol]
pub unsafe trait NSFileProviderTestingDeletion: NSFileProviderTestingOperation {
    #[objc2::method(sel = "targetSide")]
    unsafe fn targetSide(&self) -> NSFileProviderTestingOperationSide;

    #[objc2::method(sel = "sourceItemIdentifier", managed = "Other")]
    unsafe fn sourceItemIdentifier(&self) -> Id<NSFileProviderItemIdentifier>;

    #[objc2::method(sel = "targetItemIdentifier", managed = "Other")]
    unsafe fn targetItemIdentifier(&self) -> Id<NSFileProviderItemIdentifier>;

    #[cfg(feature = "FileProvider_NSFileProviderItemVersion")]
    #[objc2::method(sel = "targetItemBaseVersion", managed = "Other")]
    unsafe fn targetItemBaseVersion(&self) -> Id<NSFileProviderItemVersion>;

    #[cfg(feature = "FileProvider_NSFileProviderDomainVersion")]
    #[objc2::method(sel = "domainVersion", managed = "Other")]
    unsafe fn domainVersion(&self) -> Option<Id<NSFileProviderDomainVersion>>;
}

#[objc2::protocol]
pub unsafe trait NSFileProviderTestingContentFetch: NSFileProviderTestingOperation {
    #[objc2::method(sel = "side")]
    unsafe fn side(&self) -> NSFileProviderTestingOperationSide;

    #[objc2::method(sel = "itemIdentifier", managed = "Other")]
    unsafe fn itemIdentifier(&self) -> Id<NSFileProviderItemIdentifier>;
}

#[objc2::protocol]
pub unsafe trait NSFileProviderTestingChildrenEnumeration:
    NSFileProviderTestingOperation
{
    #[objc2::method(sel = "side")]
    unsafe fn side(&self) -> NSFileProviderTestingOperationSide;

    #[objc2::method(sel = "itemIdentifier", managed = "Other")]
    unsafe fn itemIdentifier(&self) -> Id<NSFileProviderItemIdentifier>;
}

#[objc2::protocol]
pub unsafe trait NSFileProviderTestingCollisionResolution:
    NSFileProviderTestingOperation
{
    #[objc2::method(sel = "side")]
    unsafe fn side(&self) -> NSFileProviderTestingOperationSide;

    #[objc2::method(sel = "renamedItem", managed = "Other")]
    unsafe fn renamedItem(&self) -> Id<NSFileProviderItem>;
}
