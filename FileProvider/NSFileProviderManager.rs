//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::FileProvider::*;
use crate::Foundation::*;
use crate::UniformTypeIdentifiers::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSFileProviderDomainRemovalMode {
    NSFileProviderDomainRemovalModeRemoveAll = 0,
    NSFileProviderDomainRemovalModePreserveDirtyUserData = 1,
    NSFileProviderDomainRemovalModePreserveDownloadedUserData = 2,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "FileProvider_NSFileProviderManager")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSFileProviderManager;
}

#[cfg(feature = "FileProvider_NSFileProviderManager")]
unsafe impl NSObjectProtocol for NSFileProviderManager {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "FileProvider_NSFileProviderManager")]
    pub type NSFileProviderManager;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "defaultManager", managed = "Other")]
    pub unsafe fn defaultManager() -> Id<NSFileProviderManager>;

    #[cfg(feature = "FileProvider_NSFileProviderDomain")]
    #[objc2::method(sel = "managerForDomain:", managed = "Other")]
    pub unsafe fn managerForDomain(domain: &NSFileProviderDomain) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "signalEnumeratorForContainerItemIdentifier:completionHandler:")]
    pub unsafe fn signalEnumeratorForContainerItemIdentifier_completionHandler(
        &self,
        container_item_identifier: &NSFileProviderItemIdentifier,
        completion: &Block<(*mut NSError,), ()>,
    );

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
    #[objc2::method(sel = "getUserVisibleURLForItemIdentifier:completionHandler:")]
    pub unsafe fn getUserVisibleURLForItemIdentifier_completionHandler(
        &self,
        item_identifier: &NSFileProviderItemIdentifier,
        completion_handler: &Block<(*mut NSURL, *mut NSError), ()>,
    );

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
    #[objc2::method(sel = "getIdentifierForUserVisibleFileAtURL:completionHandler:")]
    pub unsafe fn getIdentifierForUserVisibleFileAtURL_completionHandler(
        url: &NSURL,
        completion_handler: &Block<
            (
                *mut NSFileProviderItemIdentifier,
                *mut NSFileProviderDomainIdentifier,
                *mut NSError,
            ),
            (),
        >,
    );

    #[cfg(all(
        feature = "Foundation_NSError",
        feature = "Foundation_NSURLSessionTask"
    ))]
    #[objc2::method(sel = "registerURLSessionTask:forItemWithIdentifier:completionHandler:")]
    pub unsafe fn registerURLSessionTask_forItemWithIdentifier_completionHandler(
        &self,
        task: &NSURLSessionTask,
        identifier: &NSFileProviderItemIdentifier,
        completion: &Block<(*mut NSError,), ()>,
    );

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "providerIdentifier", managed = "Other")]
    pub unsafe fn providerIdentifier(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "documentStorageURL", managed = "Other")]
    pub unsafe fn documentStorageURL(&self) -> Id<NSURL>;

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
    #[objc2::method(sel = "temporaryDirectoryURLWithError:", managed = "Other", throws)]
    pub unsafe fn temporaryDirectoryURLWithError(&self) -> Result<Id<NSURL>, Id<NSError>>;

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
    #[objc2::method(sel = "writePlaceholderAtURL:withMetadata:error:", throws)]
    pub unsafe fn writePlaceholderAtURL_withMetadata_error(
        placeholder_url: &NSURL,
        metadata: &NSFileProviderItem,
    ) -> Result<(), Id<NSError>>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "placeholderURLForURL:", managed = "Other")]
    pub unsafe fn placeholderURLForURL(url: &NSURL) -> Id<NSURL>;

    #[cfg(all(
        feature = "FileProvider_NSFileProviderDomain",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "addDomain:completionHandler:")]
    pub unsafe fn addDomain_completionHandler(
        domain: &NSFileProviderDomain,
        completion_handler: &Block<(*mut NSError,), ()>,
    );

    #[cfg(all(
        feature = "FileProvider_NSFileProviderDomain",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "removeDomain:completionHandler:")]
    pub unsafe fn removeDomain_completionHandler(
        domain: &NSFileProviderDomain,
        completion_handler: &Block<(*mut NSError,), ()>,
    );

    #[cfg(all(
        feature = "FileProvider_NSFileProviderDomain",
        feature = "Foundation_NSError",
        feature = "Foundation_NSURL"
    ))]
    #[objc2::method(sel = "removeDomain:mode:completionHandler:")]
    pub unsafe fn removeDomain_mode_completionHandler(
        domain: &NSFileProviderDomain,
        mode: NSFileProviderDomainRemovalMode,
        completion_handler: &Block<(*mut NSURL, *mut NSError), ()>,
    );

    #[cfg(all(
        feature = "FileProvider_NSFileProviderDomain",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "getDomainsWithCompletionHandler:")]
    pub unsafe fn getDomainsWithCompletionHandler(
        completion_handler: &Block<(NonNull<NSArray<NSFileProviderDomain>>, *mut NSError), ()>,
    );

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "removeAllDomainsWithCompletionHandler:")]
    pub unsafe fn removeAllDomainsWithCompletionHandler(
        completion_handler: &Block<(*mut NSError,), ()>,
    );

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "signalErrorResolved:completionHandler:")]
    pub unsafe fn signalErrorResolved_completionHandler(
        &self,
        error: &NSError,
        completion_handler: &Block<(*mut NSError,), ()>,
    );

    #[cfg(feature = "Foundation_NSProgress")]
    #[objc2::method(sel = "globalProgressForKind:", managed = "Other")]
    pub unsafe fn globalProgressForKind(
        &self,
        kind: &NSProgressFileOperationKind,
    ) -> Id<NSProgress>;
}

extern_static!(NSFileProviderMaterializedSetDidChange: &'static NSNotificationName);

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "FileProvider_NSFileProviderManager")]
    pub type NSFileProviderManager;

    #[objc2::method(sel = "enumeratorForMaterializedItems", managed = "Other")]
    pub unsafe fn enumeratorForMaterializedItems(
        &self,
    ) -> Id<ProtocolObject<dyn NSFileProviderEnumerator>>;
}

extern_static!(NSFileProviderPendingSetDidChange: &'static NSNotificationName);

#[objc2::protocol]
pub unsafe trait NSFileProviderPendingSetEnumerator: NSFileProviderEnumerator {
    #[cfg(feature = "FileProvider_NSFileProviderDomainVersion")]
    #[objc2::method(sel = "domainVersion", managed = "Other")]
    unsafe fn domainVersion(&self) -> Option<Id<NSFileProviderDomainVersion>>;

    #[objc2::method(sel = "refreshInterval")]
    unsafe fn refreshInterval(&self) -> NSTimeInterval;

    #[objc2::method(sel = "isMaximumSizeReached")]
    unsafe fn isMaximumSizeReached(&self) -> bool;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "FileProvider_NSFileProviderManager")]
    pub type NSFileProviderManager;

    #[objc2::method(sel = "enumeratorForPendingItems", managed = "Other")]
    pub unsafe fn enumeratorForPendingItems(
        &self,
    ) -> Id<ProtocolObject<dyn NSFileProviderPendingSetEnumerator>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "FileProvider_NSFileProviderManager")]
    pub type NSFileProviderManager;

    #[cfg(all(
        feature = "FileProvider_NSFileProviderDomain",
        feature = "Foundation_NSError",
        feature = "Foundation_NSURL"
    ))]
    #[objc2::method(sel = "importDomain:fromDirectoryAtURL:completionHandler:")]
    pub unsafe fn importDomain_fromDirectoryAtURL_completionHandler(
        domain: &NSFileProviderDomain,
        url: &NSURL,
        completion_handler: &Block<(*mut NSError,), ()>,
    );

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "reimportItemsBelowItemWithIdentifier:completionHandler:")]
    pub unsafe fn reimportItemsBelowItemWithIdentifier_completionHandler(
        &self,
        item_identifier: &NSFileProviderItemIdentifier,
        completion_handler: &Block<(*mut NSError,), ()>,
    );

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(
        sel = "requestModificationOfFields:forItemWithIdentifier:options:completionHandler:"
    )]
    pub unsafe fn requestModificationOfFields_forItemWithIdentifier_options_completionHandler(
        &self,
        fields: NSFileProviderItemFields,
        item_identifier: &NSFileProviderItemIdentifier,
        options: NSFileProviderModifyItemOptions,
        completion_handler: &Block<(*mut NSError,), ()>,
    );
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "FileProvider_NSFileProviderManager")]
    pub type NSFileProviderManager;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "evictItemWithIdentifier:completionHandler:")]
    pub unsafe fn evictItemWithIdentifier_completionHandler(
        &self,
        item_identifier: &NSFileProviderItemIdentifier,
        completion_handler: &Block<(*mut NSError,), ()>,
    );
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "FileProvider_NSFileProviderManager")]
    pub type NSFileProviderManager;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "waitForChangesOnItemsBelowItemWithIdentifier:completionHandler:")]
    pub unsafe fn waitForChangesOnItemsBelowItemWithIdentifier_completionHandler(
        &self,
        item_identifier: &NSFileProviderItemIdentifier,
        completion_handler: &Block<(*mut NSError,), ()>,
    );
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "FileProvider_NSFileProviderManager")]
    pub type NSFileProviderManager;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "waitForStabilizationWithCompletionHandler:")]
    pub unsafe fn waitForStabilizationWithCompletionHandler(
        &self,
        completion_handler: &Block<(*mut NSError,), ()>,
    );
}

#[ns_options]
#[underlying(NSUInteger)]
pub enum NSFileProviderManagerDisconnectionOptions {
    NSFileProviderManagerDisconnectionOptionsTemporary = 1 << 0,
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "FileProvider_NSFileProviderManager")]
    pub type NSFileProviderManager;

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "disconnectWithReason:options:completionHandler:")]
    pub unsafe fn disconnectWithReason_options_completionHandler(
        &self,
        localized_reason: &NSString,
        options: NSFileProviderManagerDisconnectionOptions,
        completion_handler: &Block<(*mut NSError,), ()>,
    );

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "reconnectWithCompletionHandler:")]
    pub unsafe fn reconnectWithCompletionHandler(
        &self,
        completion_handler: &Block<(*mut NSError,), ()>,
    );
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "FileProvider_NSFileProviderManager")]
    pub type NSFileProviderManager;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "requestDownloadForItemWithIdentifier:requestedRange:completionHandler:")]
    pub unsafe fn requestDownloadForItemWithIdentifier_requestedRange_completionHandler(
        &self,
        item_identifier: &NSFileProviderItemIdentifier,
        range_to_materialize: NSRange,
        completion_handler: &Block<(*mut NSError,), ()>,
    );
}
