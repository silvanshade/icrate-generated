//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreFoundation::*;

pub type CFSetRetainCallBack =
    Option<unsafe extern "C" fn(CFAllocatorRef, *mut c_void) -> *mut c_void>;

pub type CFSetReleaseCallBack = Option<unsafe extern "C" fn(CFAllocatorRef, *mut c_void)>;

pub type CFSetCopyDescriptionCallBack = Option<unsafe extern "C" fn(*mut c_void) -> CFStringRef>;

pub type CFSetEqualCallBack = Option<unsafe extern "C" fn(*mut c_void, *mut c_void) -> Boolean>;

pub type CFSetHashCallBack = Option<unsafe extern "C" fn(*mut c_void) -> CFHashCode>;

extern_struct!(
    #[encoding_name("?")]
    pub struct CFSetCallBacks {
        pub version: CFIndex,
        pub retain: CFSetRetainCallBack,
        pub release: CFSetReleaseCallBack,
        pub copyDescription: CFSetCopyDescriptionCallBack,
        pub equal: CFSetEqualCallBack,
        pub hash: CFSetHashCallBack,
    }
);

extern_static!(kCFTypeSetCallBacks: CFSetCallBacks);

extern_static!(kCFCopyStringSetCallBacks: CFSetCallBacks);

pub type CFSetApplierFunction = Option<unsafe extern "C" fn(*mut c_void, *mut c_void)>;

pub type CFSetRef = *mut c_void;

pub type CFMutableSetRef = *mut c_void;

extern_fn!(
    pub unsafe fn CFSetGetTypeID() -> CFTypeID;
);

extern_fn!(
    pub unsafe fn CFSetCreate(
        allocator: CFAllocatorRef,
        values: *mut *mut c_void,
        num_values: CFIndex,
        call_backs: *mut CFSetCallBacks,
    ) -> CFSetRef;
);

extern_fn!(
    pub unsafe fn CFSetCreateCopy(allocator: CFAllocatorRef, the_set: CFSetRef) -> CFSetRef;
);

extern_fn!(
    pub unsafe fn CFSetCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        call_backs: *mut CFSetCallBacks,
    ) -> CFMutableSetRef;
);

extern_fn!(
    pub unsafe fn CFSetCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        the_set: CFSetRef,
    ) -> CFMutableSetRef;
);

extern_fn!(
    pub unsafe fn CFSetGetCount(the_set: CFSetRef) -> CFIndex;
);

extern_fn!(
    pub unsafe fn CFSetGetCountOfValue(the_set: CFSetRef, value: *mut c_void) -> CFIndex;
);

extern_fn!(
    pub unsafe fn CFSetContainsValue(the_set: CFSetRef, value: *mut c_void) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFSetGetValue(the_set: CFSetRef, value: *mut c_void) -> *mut c_void;
);

extern_fn!(
    pub unsafe fn CFSetGetValueIfPresent(
        the_set: CFSetRef,
        candidate: *mut c_void,
        value: *mut *mut c_void,
    ) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFSetGetValues(the_set: CFSetRef, values: *mut *mut c_void);
);

extern_fn!(
    pub unsafe fn CFSetApplyFunction(
        the_set: CFSetRef,
        applier: CFSetApplierFunction,
        context: *mut c_void,
    );
);

extern_fn!(
    pub unsafe fn CFSetAddValue(the_set: CFMutableSetRef, value: *mut c_void);
);

extern_fn!(
    pub unsafe fn CFSetReplaceValue(the_set: CFMutableSetRef, value: *mut c_void);
);

extern_fn!(
    pub unsafe fn CFSetSetValue(the_set: CFMutableSetRef, value: *mut c_void);
);

extern_fn!(
    pub unsafe fn CFSetRemoveValue(the_set: CFMutableSetRef, value: *mut c_void);
);

extern_fn!(
    pub unsafe fn CFSetRemoveAllValues(the_set: CFMutableSetRef);
);
