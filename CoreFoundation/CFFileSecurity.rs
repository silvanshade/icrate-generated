//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreFoundation::*;

pub type CFFileSecurityRef = *mut c_void;

extern_fn!(
    pub unsafe fn CFFileSecurityGetTypeID() -> CFTypeID;
);

extern_fn!(
    pub unsafe fn CFFileSecurityCreate(allocator: CFAllocatorRef) -> CFFileSecurityRef;
);

extern_fn!(
    pub unsafe fn CFFileSecurityCreateCopy(
        allocator: CFAllocatorRef,
        file_sec: CFFileSecurityRef,
    ) -> CFFileSecurityRef;
);

extern_fn!(
    pub unsafe fn CFFileSecurityCopyOwnerUUID(
        file_sec: CFFileSecurityRef,
        owner_uuid: *mut CFUUIDRef,
    ) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFFileSecuritySetOwnerUUID(
        file_sec: CFFileSecurityRef,
        owner_uuid: CFUUIDRef,
    ) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFFileSecurityCopyGroupUUID(
        file_sec: CFFileSecurityRef,
        group_uuid: *mut CFUUIDRef,
    ) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFFileSecuritySetGroupUUID(
        file_sec: CFFileSecurityRef,
        group_uuid: CFUUIDRef,
    ) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFFileSecurityGetOwner(file_sec: CFFileSecurityRef, owner: *mut uid_t)
        -> Boolean;
);

extern_fn!(
    pub unsafe fn CFFileSecuritySetOwner(file_sec: CFFileSecurityRef, owner: uid_t) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFFileSecurityGetGroup(file_sec: CFFileSecurityRef, group: *mut gid_t)
        -> Boolean;
);

extern_fn!(
    pub unsafe fn CFFileSecuritySetGroup(file_sec: CFFileSecurityRef, group: gid_t) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFFileSecurityGetMode(file_sec: CFFileSecurityRef, mode: *mut mode_t) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFFileSecuritySetMode(file_sec: CFFileSecurityRef, mode: mode_t) -> Boolean;
);

ns_options!(
    #[underlying(CFOptionFlags)]
    pub enum CFFileSecurityClearOptions {
        kCFFileSecurityClearOwner = 1 << 0,
        kCFFileSecurityClearGroup = 1 << 1,
        kCFFileSecurityClearMode = 1 << 2,
        kCFFileSecurityClearOwnerUUID = 1 << 3,
        kCFFileSecurityClearGroupUUID = 1 << 4,
        kCFFileSecurityClearAccessControlList = 1 << 5,
    }
);

extern_fn!(
    pub unsafe fn CFFileSecurityClearProperties(
        file_sec: CFFileSecurityRef,
        clear_property_mask: CFFileSecurityClearOptions,
    ) -> Boolean;
);
