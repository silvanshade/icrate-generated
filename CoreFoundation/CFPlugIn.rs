//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreFoundation::*;

extern_static!(kCFPlugInDynamicRegistrationKey: CFStringRef);

extern_static!(kCFPlugInDynamicRegisterFunctionKey: CFStringRef);

extern_static!(kCFPlugInUnloadFunctionKey: CFStringRef);

extern_static!(kCFPlugInFactoriesKey: CFStringRef);

extern_static!(kCFPlugInTypesKey: CFStringRef);

pub type CFPlugInDynamicRegisterFunction = Option<unsafe extern "C" fn(CFPlugInRef)>;

pub type CFPlugInUnloadFunction = Option<unsafe extern "C" fn(CFPlugInRef)>;

pub type CFPlugInFactoryFunction =
    Option<unsafe extern "C" fn(CFAllocatorRef, CFUUIDRef) -> *mut c_void>;

extern_fn!(
    pub unsafe fn CFPlugInGetTypeID() -> CFTypeID;
);

extern_fn!(
    pub unsafe fn CFPlugInCreate(allocator: CFAllocatorRef, plug_in_url: CFURLRef) -> CFPlugInRef;
);

extern_fn!(
    pub unsafe fn CFPlugInGetBundle(plug_in: CFPlugInRef) -> CFBundleRef;
);

extern_fn!(
    pub unsafe fn CFPlugInSetLoadOnDemand(plug_in: CFPlugInRef, flag: Boolean);
);

extern_fn!(
    pub unsafe fn CFPlugInIsLoadOnDemand(plug_in: CFPlugInRef) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFPlugInFindFactoriesForPlugInType(type_uuid: CFUUIDRef) -> CFArrayRef;
);

extern_fn!(
    pub unsafe fn CFPlugInFindFactoriesForPlugInTypeInPlugIn(
        type_uuid: CFUUIDRef,
        plug_in: CFPlugInRef,
    ) -> CFArrayRef;
);

extern_fn!(
    pub unsafe fn CFPlugInInstanceCreate(
        allocator: CFAllocatorRef,
        factory_uuid: CFUUIDRef,
        type_uuid: CFUUIDRef,
    ) -> *mut c_void;
);

extern_fn!(
    pub unsafe fn CFPlugInRegisterFactoryFunction(
        factory_uuid: CFUUIDRef,
        func: CFPlugInFactoryFunction,
    ) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFPlugInRegisterFactoryFunctionByName(
        factory_uuid: CFUUIDRef,
        plug_in: CFPlugInRef,
        function_name: CFStringRef,
    ) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFPlugInUnregisterFactory(factory_uuid: CFUUIDRef) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFPlugInRegisterPlugInType(
        factory_uuid: CFUUIDRef,
        type_uuid: CFUUIDRef,
    ) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFPlugInUnregisterPlugInType(
        factory_uuid: CFUUIDRef,
        type_uuid: CFUUIDRef,
    ) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFPlugInAddInstanceForFactory(factory_id: CFUUIDRef);
);

extern_fn!(
    pub unsafe fn CFPlugInRemoveInstanceForFactory(factory_id: CFUUIDRef);
);

pub type CFPlugInInstanceRef = *mut c_void;

pub type CFPlugInInstanceGetInterfaceFunction =
    Option<unsafe extern "C" fn(CFPlugInInstanceRef, CFStringRef, *mut *mut c_void) -> Boolean>;

pub type CFPlugInInstanceDeallocateInstanceDataFunction = Option<unsafe extern "C" fn(*mut c_void)>;

extern_fn!(
    pub unsafe fn CFPlugInInstanceGetInterfaceFunctionTable(
        instance: CFPlugInInstanceRef,
        interface_name: CFStringRef,
        ftbl: *mut *mut c_void,
    ) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFPlugInInstanceGetFactoryName(instance: CFPlugInInstanceRef) -> CFStringRef;
);

extern_fn!(
    pub unsafe fn CFPlugInInstanceGetInstanceData(instance: CFPlugInInstanceRef) -> *mut c_void;
);

extern_fn!(
    pub unsafe fn CFPlugInInstanceGetTypeID() -> CFTypeID;
);

extern_fn!(
    pub unsafe fn CFPlugInInstanceCreateWithInstanceDataSize(
        allocator: CFAllocatorRef,
        instance_data_size: CFIndex,
        deallocate_instance_function: CFPlugInInstanceDeallocateInstanceDataFunction,
        factory_name: CFStringRef,
        get_interface_function: CFPlugInInstanceGetInterfaceFunction,
    ) -> CFPlugInInstanceRef;
);
