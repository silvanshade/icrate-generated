//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreFoundation::*;

pub type CFSocketRef = *mut c_void;

ns_enum!(
    #[underlying(CFIndex)]
    pub enum CFSocketError {
        kCFSocketSuccess = 0,
        kCFSocketError = -1,
        kCFSocketTimeout = -2,
    }
);

extern_struct!(
    #[encoding_name("?")]
    pub struct CFSocketSignature {
        pub protocolFamily: i32,
        pub socketType: i32,
        pub protocol: i32,
        pub address: CFDataRef,
    }
);

ns_options!(
    #[underlying(CFOptionFlags)]
    pub enum CFSocketCallBackType {
        kCFSocketNoCallBack = 0,
        kCFSocketReadCallBack = 1,
        kCFSocketAcceptCallBack = 2,
        kCFSocketDataCallBack = 3,
        kCFSocketConnectCallBack = 4,
        kCFSocketWriteCallBack = 8,
    }
);

ns_enum!(
    #[underlying(CFOptionFlags)]
    pub enum __anonymous__ {
        kCFSocketAutomaticallyReenableReadCallBack = 1,
        kCFSocketAutomaticallyReenableAcceptCallBack = 2,
        kCFSocketAutomaticallyReenableDataCallBack = 3,
        kCFSocketAutomaticallyReenableWriteCallBack = 8,
        kCFSocketLeaveErrors = 64,
        kCFSocketCloseOnInvalidate = 128,
    }
);

pub type CFSocketCallBack = Option<
    unsafe extern "C" fn(CFSocketRef, CFSocketCallBackType, CFDataRef, *mut c_void, *mut c_void),
>;

extern_struct!(
    #[encoding_name("?")]
    pub struct CFSocketContext {
        pub version: CFIndex,
        pub info: *mut c_void,
        pub retain: Option<unsafe extern "C" fn(*mut c_void) -> *mut c_void>,
        pub release: Option<unsafe extern "C" fn(*mut c_void)>,
        pub copyDescription: Option<unsafe extern "C" fn(*mut c_void) -> CFStringRef>,
    }
);

pub type CFSocketNativeHandle = c_int;

extern_fn!(
    pub unsafe fn CFSocketGetTypeID() -> CFTypeID;
);

extern_fn!(
    pub unsafe fn CFSocketCreate(
        allocator: CFAllocatorRef,
        protocol_family: i32,
        socket_type: i32,
        protocol: i32,
        call_back_types: CFOptionFlags,
        callout: CFSocketCallBack,
        context: *mut CFSocketContext,
    ) -> CFSocketRef;
);

extern_fn!(
    pub unsafe fn CFSocketCreateWithNative(
        allocator: CFAllocatorRef,
        sock: CFSocketNativeHandle,
        call_back_types: CFOptionFlags,
        callout: CFSocketCallBack,
        context: *mut CFSocketContext,
    ) -> CFSocketRef;
);

extern_fn!(
    pub unsafe fn CFSocketCreateWithSocketSignature(
        allocator: CFAllocatorRef,
        signature: *mut CFSocketSignature,
        call_back_types: CFOptionFlags,
        callout: CFSocketCallBack,
        context: *mut CFSocketContext,
    ) -> CFSocketRef;
);

extern_fn!(
    pub unsafe fn CFSocketCreateConnectedToSocketSignature(
        allocator: CFAllocatorRef,
        signature: *mut CFSocketSignature,
        call_back_types: CFOptionFlags,
        callout: CFSocketCallBack,
        context: *mut CFSocketContext,
        timeout: CFTimeInterval,
    ) -> CFSocketRef;
);

extern_fn!(
    pub unsafe fn CFSocketSetAddress(s: CFSocketRef, address: CFDataRef) -> CFSocketError;
);

extern_fn!(
    pub unsafe fn CFSocketConnectToAddress(
        s: CFSocketRef,
        address: CFDataRef,
        timeout: CFTimeInterval,
    ) -> CFSocketError;
);

extern_fn!(
    pub unsafe fn CFSocketInvalidate(s: CFSocketRef);
);

extern_fn!(
    pub unsafe fn CFSocketIsValid(s: CFSocketRef) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFSocketCopyAddress(s: CFSocketRef) -> CFDataRef;
);

extern_fn!(
    pub unsafe fn CFSocketCopyPeerAddress(s: CFSocketRef) -> CFDataRef;
);

extern_fn!(
    pub unsafe fn CFSocketGetContext(s: CFSocketRef, context: *mut CFSocketContext);
);

extern_fn!(
    pub unsafe fn CFSocketGetNative(s: CFSocketRef) -> CFSocketNativeHandle;
);

extern_fn!(
    pub unsafe fn CFSocketCreateRunLoopSource(
        allocator: CFAllocatorRef,
        s: CFSocketRef,
        order: CFIndex,
    ) -> CFRunLoopSourceRef;
);

extern_fn!(
    pub unsafe fn CFSocketGetSocketFlags(s: CFSocketRef) -> CFOptionFlags;
);

extern_fn!(
    pub unsafe fn CFSocketSetSocketFlags(s: CFSocketRef, flags: CFOptionFlags);
);

extern_fn!(
    pub unsafe fn CFSocketDisableCallBacks(s: CFSocketRef, call_back_types: CFOptionFlags);
);

extern_fn!(
    pub unsafe fn CFSocketEnableCallBacks(s: CFSocketRef, call_back_types: CFOptionFlags);
);

extern_fn!(
    pub unsafe fn CFSocketSendData(
        s: CFSocketRef,
        address: CFDataRef,
        data: CFDataRef,
        timeout: CFTimeInterval,
    ) -> CFSocketError;
);

extern_fn!(
    pub unsafe fn CFSocketRegisterValue(
        name_server_signature: *mut CFSocketSignature,
        timeout: CFTimeInterval,
        name: CFStringRef,
        value: CFPropertyListRef,
    ) -> CFSocketError;
);

extern_fn!(
    pub unsafe fn CFSocketCopyRegisteredValue(
        name_server_signature: *mut CFSocketSignature,
        timeout: CFTimeInterval,
        name: CFStringRef,
        value: *mut CFPropertyListRef,
        name_server_address: *mut CFDataRef,
    ) -> CFSocketError;
);

extern_fn!(
    pub unsafe fn CFSocketRegisterSocketSignature(
        name_server_signature: *mut CFSocketSignature,
        timeout: CFTimeInterval,
        name: CFStringRef,
        signature: *mut CFSocketSignature,
    ) -> CFSocketError;
);

extern_fn!(
    pub unsafe fn CFSocketCopyRegisteredSocketSignature(
        name_server_signature: *mut CFSocketSignature,
        timeout: CFTimeInterval,
        name: CFStringRef,
        signature: *mut CFSocketSignature,
        name_server_address: *mut CFDataRef,
    ) -> CFSocketError;
);

extern_fn!(
    pub unsafe fn CFSocketUnregister(
        name_server_signature: *mut CFSocketSignature,
        timeout: CFTimeInterval,
        name: CFStringRef,
    ) -> CFSocketError;
);

extern_fn!(
    pub unsafe fn CFSocketSetDefaultNameRegistryPortNumber(port: u16);
);

extern_fn!(
    pub unsafe fn CFSocketGetDefaultNameRegistryPortNumber() -> u16;
);

extern_static!(kCFSocketCommandKey: CFStringRef);

extern_static!(kCFSocketNameKey: CFStringRef);

extern_static!(kCFSocketValueKey: CFStringRef);

extern_static!(kCFSocketResultKey: CFStringRef);

extern_static!(kCFSocketErrorKey: CFStringRef);

extern_static!(kCFSocketRegisterCommand: CFStringRef);

extern_static!(kCFSocketRetrieveCommand: CFStringRef);
