//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreFoundation::*;

pub type CFBundleRef = *mut c_void;

pub type CFPlugInRef = *mut c_void;

extern_static!(kCFBundleInfoDictionaryVersionKey: CFStringRef);

extern_static!(kCFBundleExecutableKey: CFStringRef);

extern_static!(kCFBundleIdentifierKey: CFStringRef);

extern_static!(kCFBundleVersionKey: CFStringRef);

extern_static!(kCFBundleDevelopmentRegionKey: CFStringRef);

extern_static!(kCFBundleNameKey: CFStringRef);

extern_static!(kCFBundleLocalizationsKey: CFStringRef);

extern_fn!(
    pub unsafe fn CFBundleGetMainBundle() -> CFBundleRef;
);

extern_fn!(
    pub unsafe fn CFBundleGetBundleWithIdentifier(bundle_id: CFStringRef) -> CFBundleRef;
);

extern_fn!(
    pub unsafe fn CFBundleGetAllBundles() -> CFArrayRef;
);

extern_fn!(
    pub unsafe fn CFBundleGetTypeID() -> CFTypeID;
);

extern_fn!(
    pub unsafe fn CFBundleCreate(allocator: CFAllocatorRef, bundle_url: CFURLRef) -> CFBundleRef;
);

extern_fn!(
    pub unsafe fn CFBundleCreateBundlesFromDirectory(
        allocator: CFAllocatorRef,
        directory_url: CFURLRef,
        bundle_type: CFStringRef,
    ) -> CFArrayRef;
);

extern_fn!(
    pub unsafe fn CFBundleCopyBundleURL(bundle: CFBundleRef) -> CFURLRef;
);

extern_fn!(
    pub unsafe fn CFBundleGetValueForInfoDictionaryKey(
        bundle: CFBundleRef,
        key: CFStringRef,
    ) -> CFTypeRef;
);

extern_fn!(
    pub unsafe fn CFBundleGetInfoDictionary(bundle: CFBundleRef) -> CFDictionaryRef;
);

extern_fn!(
    pub unsafe fn CFBundleGetLocalInfoDictionary(bundle: CFBundleRef) -> CFDictionaryRef;
);

extern_fn!(
    pub unsafe fn CFBundleGetPackageInfo(
        bundle: CFBundleRef,
        package_type: *mut u32,
        package_creator: *mut u32,
    );
);

extern_fn!(
    pub unsafe fn CFBundleGetIdentifier(bundle: CFBundleRef) -> CFStringRef;
);

extern_fn!(
    pub unsafe fn CFBundleGetVersionNumber(bundle: CFBundleRef) -> u32;
);

extern_fn!(
    pub unsafe fn CFBundleGetDevelopmentRegion(bundle: CFBundleRef) -> CFStringRef;
);

extern_fn!(
    pub unsafe fn CFBundleCopySupportFilesDirectoryURL(bundle: CFBundleRef) -> CFURLRef;
);

extern_fn!(
    pub unsafe fn CFBundleCopyResourcesDirectoryURL(bundle: CFBundleRef) -> CFURLRef;
);

extern_fn!(
    pub unsafe fn CFBundleCopyPrivateFrameworksURL(bundle: CFBundleRef) -> CFURLRef;
);

extern_fn!(
    pub unsafe fn CFBundleCopySharedFrameworksURL(bundle: CFBundleRef) -> CFURLRef;
);

extern_fn!(
    pub unsafe fn CFBundleCopySharedSupportURL(bundle: CFBundleRef) -> CFURLRef;
);

extern_fn!(
    pub unsafe fn CFBundleCopyBuiltInPlugInsURL(bundle: CFBundleRef) -> CFURLRef;
);

extern_fn!(
    pub unsafe fn CFBundleCopyInfoDictionaryInDirectory(bundle_url: CFURLRef) -> CFDictionaryRef;
);

extern_fn!(
    pub unsafe fn CFBundleGetPackageInfoInDirectory(
        url: CFURLRef,
        package_type: *mut u32,
        package_creator: *mut u32,
    ) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFBundleCopyResourceURL(
        bundle: CFBundleRef,
        resource_name: CFStringRef,
        resource_type: CFStringRef,
        sub_dir_name: CFStringRef,
    ) -> CFURLRef;
);

extern_fn!(
    pub unsafe fn CFBundleCopyResourceURLsOfType(
        bundle: CFBundleRef,
        resource_type: CFStringRef,
        sub_dir_name: CFStringRef,
    ) -> CFArrayRef;
);

extern_fn!(
    pub unsafe fn CFBundleCopyLocalizedString(
        bundle: CFBundleRef,
        key: CFStringRef,
        value: CFStringRef,
        table_name: CFStringRef,
    ) -> CFStringRef;
);

extern_fn!(
    pub unsafe fn CFBundleCopyResourceURLInDirectory(
        bundle_url: CFURLRef,
        resource_name: CFStringRef,
        resource_type: CFStringRef,
        sub_dir_name: CFStringRef,
    ) -> CFURLRef;
);

extern_fn!(
    pub unsafe fn CFBundleCopyResourceURLsOfTypeInDirectory(
        bundle_url: CFURLRef,
        resource_type: CFStringRef,
        sub_dir_name: CFStringRef,
    ) -> CFArrayRef;
);

extern_fn!(
    pub unsafe fn CFBundleCopyBundleLocalizations(bundle: CFBundleRef) -> CFArrayRef;
);

extern_fn!(
    pub unsafe fn CFBundleCopyPreferredLocalizationsFromArray(loc_array: CFArrayRef) -> CFArrayRef;
);

extern_fn!(
    pub unsafe fn CFBundleCopyLocalizationsForPreferences(
        loc_array: CFArrayRef,
        pref_array: CFArrayRef,
    ) -> CFArrayRef;
);

extern_fn!(
    pub unsafe fn CFBundleCopyResourceURLForLocalization(
        bundle: CFBundleRef,
        resource_name: CFStringRef,
        resource_type: CFStringRef,
        sub_dir_name: CFStringRef,
        localization_name: CFStringRef,
    ) -> CFURLRef;
);

extern_fn!(
    pub unsafe fn CFBundleCopyResourceURLsOfTypeForLocalization(
        bundle: CFBundleRef,
        resource_type: CFStringRef,
        sub_dir_name: CFStringRef,
        localization_name: CFStringRef,
    ) -> CFArrayRef;
);

extern_fn!(
    pub unsafe fn CFBundleCopyInfoDictionaryForURL(url: CFURLRef) -> CFDictionaryRef;
);

extern_fn!(
    pub unsafe fn CFBundleCopyLocalizationsForURL(url: CFURLRef) -> CFArrayRef;
);

extern_fn!(
    pub unsafe fn CFBundleCopyExecutableArchitecturesForURL(url: CFURLRef) -> CFArrayRef;
);

extern_fn!(
    pub unsafe fn CFBundleCopyExecutableURL(bundle: CFBundleRef) -> CFURLRef;
);

extern_enum!(
    #[underlying(c_uint)]
    pub enum __anonymous__ {
        kCFBundleExecutableArchitectureI386 = 0x00000007,
        kCFBundleExecutableArchitecturePPC = 0x00000012,
        kCFBundleExecutableArchitectureX86_64 = 0x01000007,
        kCFBundleExecutableArchitecturePPC64 = 0x01000012,
        kCFBundleExecutableArchitectureARM64 = 0x0100000c,
    }
);

extern_fn!(
    pub unsafe fn CFBundleCopyExecutableArchitectures(bundle: CFBundleRef) -> CFArrayRef;
);

extern_fn!(
    pub unsafe fn CFBundlePreflightExecutable(
        bundle: CFBundleRef,
        error: *mut CFErrorRef,
    ) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFBundleLoadExecutableAndReturnError(
        bundle: CFBundleRef,
        error: *mut CFErrorRef,
    ) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFBundleLoadExecutable(bundle: CFBundleRef) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFBundleIsExecutableLoaded(bundle: CFBundleRef) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFBundleUnloadExecutable(bundle: CFBundleRef);
);

extern_fn!(
    pub unsafe fn CFBundleGetFunctionPointerForName(
        bundle: CFBundleRef,
        function_name: CFStringRef,
    ) -> *mut c_void;
);

extern_fn!(
    pub unsafe fn CFBundleGetFunctionPointersForNames(
        bundle: CFBundleRef,
        function_names: CFArrayRef,
        ftbl: *mut *mut c_void,
    );
);

extern_fn!(
    pub unsafe fn CFBundleGetDataPointerForName(
        bundle: CFBundleRef,
        symbol_name: CFStringRef,
    ) -> *mut c_void;
);

extern_fn!(
    pub unsafe fn CFBundleGetDataPointersForNames(
        bundle: CFBundleRef,
        symbol_names: CFArrayRef,
        stbl: *mut *mut c_void,
    );
);

extern_fn!(
    pub unsafe fn CFBundleCopyAuxiliaryExecutableURL(
        bundle: CFBundleRef,
        executable_name: CFStringRef,
    ) -> CFURLRef;
);

extern_fn!(
    pub unsafe fn CFBundleIsExecutableLoadable(bundle: CFBundleRef) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFBundleIsExecutableLoadableForURL(url: CFURLRef) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFBundleIsArchitectureLoadable(arch: cpu_type_t) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFBundleGetPlugIn(bundle: CFBundleRef) -> CFPlugInRef;
);

pub type CFBundleRefNum = c_int;

extern_fn!(
    #[deprecated = "The Carbon Resource Manager is deprecated. This should only be used to access Resource Manager-style resources in old bundles."]
    pub unsafe fn CFBundleOpenBundleResourceMap(bundle: CFBundleRef) -> CFBundleRefNum;
);

extern_fn!(
    #[deprecated = "The Carbon Resource Manager is deprecated. This should only be used to access Resource Manager-style resources in old bundles."]
    pub unsafe fn CFBundleOpenBundleResourceFiles(
        bundle: CFBundleRef,
        ref_num: *mut CFBundleRefNum,
        localized_ref_num: *mut CFBundleRefNum,
    ) -> i32;
);

extern_fn!(
    #[deprecated = "The Carbon Resource Manager is deprecated. This should only be used to access Resource Manager-style resources in old bundles."]
    pub unsafe fn CFBundleCloseBundleResourceMap(bundle: CFBundleRef, ref_num: CFBundleRefNum);
);
