//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreFoundation::*;

ns_options!(
    #[underlying(CFOptionFlags)]
    pub enum CFPropertyListMutabilityOptions {
        kCFPropertyListImmutable = 0,
        kCFPropertyListMutableContainers = 1 << 0,
        kCFPropertyListMutableContainersAndLeaves = 1 << 1,
    }
);

extern_fn!(
    #[deprecated = "Use CFPropertyListCreateWithData instead."]
    pub unsafe fn CFPropertyListCreateFromXMLData(
        allocator: CFAllocatorRef,
        xml_data: CFDataRef,
        mutability_option: CFOptionFlags,
        error_string: *mut CFStringRef,
    ) -> CFPropertyListRef;
);

extern_fn!(
    #[deprecated = "Use CFPropertyListCreateData instead."]
    pub unsafe fn CFPropertyListCreateXMLData(
        allocator: CFAllocatorRef,
        property_list: CFPropertyListRef,
    ) -> CFDataRef;
);

extern_fn!(
    pub unsafe fn CFPropertyListCreateDeepCopy(
        allocator: CFAllocatorRef,
        property_list: CFPropertyListRef,
        mutability_option: CFOptionFlags,
    ) -> CFPropertyListRef;
);

ns_enum!(
    #[underlying(CFIndex)]
    pub enum CFPropertyListFormat {
        kCFPropertyListOpenStepFormat = 1,
        kCFPropertyListXMLFormat_v1_0 = 100,
        kCFPropertyListBinaryFormat_v1_0 = 200,
    }
);

extern_fn!(
    pub unsafe fn CFPropertyListIsValid(
        plist: CFPropertyListRef,
        format: CFPropertyListFormat,
    ) -> Boolean;
);

extern_fn!(
    #[deprecated = "Use CFPropertyListWrite instead."]
    pub unsafe fn CFPropertyListWriteToStream(
        property_list: CFPropertyListRef,
        stream: CFWriteStreamRef,
        format: CFPropertyListFormat,
        error_string: *mut CFStringRef,
    ) -> CFIndex;
);

extern_fn!(
    #[deprecated = "Use CFPropertyListCreateWithStream instead."]
    pub unsafe fn CFPropertyListCreateFromStream(
        allocator: CFAllocatorRef,
        stream: CFReadStreamRef,
        stream_length: CFIndex,
        mutability_option: CFOptionFlags,
        format: *mut CFPropertyListFormat,
        error_string: *mut CFStringRef,
    ) -> CFPropertyListRef;
);

ns_enum!(
    #[underlying(CFIndex)]
    pub enum __anonymous__ {
        kCFPropertyListReadCorruptError = 3840,
        kCFPropertyListReadUnknownVersionError = 3841,
        kCFPropertyListReadStreamError = 3842,
        kCFPropertyListWriteStreamError = 3851,
    }
);

extern_fn!(
    pub unsafe fn CFPropertyListCreateWithData(
        allocator: CFAllocatorRef,
        data: CFDataRef,
        options: CFOptionFlags,
        format: *mut CFPropertyListFormat,
        error: *mut CFErrorRef,
    ) -> CFPropertyListRef;
);

extern_fn!(
    pub unsafe fn CFPropertyListCreateWithStream(
        allocator: CFAllocatorRef,
        stream: CFReadStreamRef,
        stream_length: CFIndex,
        options: CFOptionFlags,
        format: *mut CFPropertyListFormat,
        error: *mut CFErrorRef,
    ) -> CFPropertyListRef;
);

extern_fn!(
    pub unsafe fn CFPropertyListWrite(
        property_list: CFPropertyListRef,
        stream: CFWriteStreamRef,
        format: CFPropertyListFormat,
        options: CFOptionFlags,
        error: *mut CFErrorRef,
    ) -> CFIndex;
);

extern_fn!(
    pub unsafe fn CFPropertyListCreateData(
        allocator: CFAllocatorRef,
        property_list: CFPropertyListRef,
        format: CFPropertyListFormat,
        options: CFOptionFlags,
        error: *mut CFErrorRef,
    ) -> CFDataRef;
);
