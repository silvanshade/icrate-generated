//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreFoundation::*;

extern_fn!(
    pub unsafe fn CFStringTokenizerCopyBestStringLanguage(
        string: CFStringRef,
        range: CFRange,
    ) -> CFStringRef;
);

pub type CFStringTokenizerRef = *mut c_void;

ns_enum!(
    #[underlying(CFOptionFlags)]
    pub enum __anonymous__ {
        kCFStringTokenizerUnitWord = 0,
        kCFStringTokenizerUnitSentence = 1,
        kCFStringTokenizerUnitParagraph = 2,
        kCFStringTokenizerUnitLineBreak = 3,
        kCFStringTokenizerUnitWordBoundary = 4,
        kCFStringTokenizerAttributeLatinTranscription = 1 << 16,
        kCFStringTokenizerAttributeLanguage = 1 << 17,
    }
);

ns_options!(
    #[underlying(CFOptionFlags)]
    pub enum CFStringTokenizerTokenType {
        kCFStringTokenizerTokenNone = 0,
        kCFStringTokenizerTokenNormal = 1 << 0,
        kCFStringTokenizerTokenHasSubTokensMask = 1 << 1,
        kCFStringTokenizerTokenHasDerivedSubTokensMask = 1 << 2,
        kCFStringTokenizerTokenHasHasNumbersMask = 1 << 3,
        kCFStringTokenizerTokenHasNonLettersMask = 1 << 4,
        kCFStringTokenizerTokenIsCJWordMask = 1 << 5,
    }
);

extern_fn!(
    pub unsafe fn CFStringTokenizerGetTypeID() -> CFTypeID;
);

extern_fn!(
    pub unsafe fn CFStringTokenizerCreate(
        alloc: CFAllocatorRef,
        string: CFStringRef,
        range: CFRange,
        options: CFOptionFlags,
        locale: CFLocaleRef,
    ) -> CFStringTokenizerRef;
);

extern_fn!(
    pub unsafe fn CFStringTokenizerSetString(
        tokenizer: CFStringTokenizerRef,
        string: CFStringRef,
        range: CFRange,
    );
);

extern_fn!(
    pub unsafe fn CFStringTokenizerGoToTokenAtIndex(
        tokenizer: CFStringTokenizerRef,
        index: CFIndex,
    ) -> CFStringTokenizerTokenType;
);

extern_fn!(
    pub unsafe fn CFStringTokenizerAdvanceToNextToken(
        tokenizer: CFStringTokenizerRef,
    ) -> CFStringTokenizerTokenType;
);

extern_fn!(
    pub unsafe fn CFStringTokenizerGetCurrentTokenRange(tokenizer: CFStringTokenizerRef)
        -> CFRange;
);

extern_fn!(
    pub unsafe fn CFStringTokenizerCopyCurrentTokenAttribute(
        tokenizer: CFStringTokenizerRef,
        attribute: CFOptionFlags,
    ) -> CFTypeRef;
);

extern_fn!(
    pub unsafe fn CFStringTokenizerGetCurrentSubTokens(
        tokenizer: CFStringTokenizerRef,
        ranges: *mut CFRange,
        max_range_length: CFIndex,
        derived_sub_tokens: CFMutableArrayRef,
    ) -> CFIndex;
);
