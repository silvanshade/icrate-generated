//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreFoundation::*;

pub type CFArrayRetainCallBack =
    Option<unsafe extern "C" fn(CFAllocatorRef, *mut c_void) -> *mut c_void>;

pub type CFArrayReleaseCallBack = Option<unsafe extern "C" fn(CFAllocatorRef, *mut c_void)>;

pub type CFArrayCopyDescriptionCallBack = Option<unsafe extern "C" fn(*mut c_void) -> CFStringRef>;

pub type CFArrayEqualCallBack = Option<unsafe extern "C" fn(*mut c_void, *mut c_void) -> Boolean>;

extern_struct!(
    #[encoding_name("?")]
    pub struct CFArrayCallBacks {
        pub version: CFIndex,
        pub retain: CFArrayRetainCallBack,
        pub release: CFArrayReleaseCallBack,
        pub copyDescription: CFArrayCopyDescriptionCallBack,
        pub equal: CFArrayEqualCallBack,
    }
);

extern_static!(kCFTypeArrayCallBacks: CFArrayCallBacks);

pub type CFArrayApplierFunction = Option<unsafe extern "C" fn(*mut c_void, *mut c_void)>;

pub type CFArrayRef = *mut c_void;

pub type CFMutableArrayRef = *mut c_void;

extern_fn!(
    pub unsafe fn CFArrayGetTypeID() -> CFTypeID;
);

extern_fn!(
    pub unsafe fn CFArrayCreate(
        allocator: CFAllocatorRef,
        values: *mut *mut c_void,
        num_values: CFIndex,
        call_backs: *mut CFArrayCallBacks,
    ) -> CFArrayRef;
);

extern_fn!(
    pub unsafe fn CFArrayCreateCopy(allocator: CFAllocatorRef, the_array: CFArrayRef)
        -> CFArrayRef;
);

extern_fn!(
    pub unsafe fn CFArrayCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        call_backs: *mut CFArrayCallBacks,
    ) -> CFMutableArrayRef;
);

extern_fn!(
    pub unsafe fn CFArrayCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        the_array: CFArrayRef,
    ) -> CFMutableArrayRef;
);

extern_fn!(
    pub unsafe fn CFArrayGetCount(the_array: CFArrayRef) -> CFIndex;
);

extern_fn!(
    pub unsafe fn CFArrayGetCountOfValue(
        the_array: CFArrayRef,
        range: CFRange,
        value: *mut c_void,
    ) -> CFIndex;
);

extern_fn!(
    pub unsafe fn CFArrayContainsValue(
        the_array: CFArrayRef,
        range: CFRange,
        value: *mut c_void,
    ) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFArrayGetValueAtIndex(the_array: CFArrayRef, idx: CFIndex) -> *mut c_void;
);

extern_fn!(
    pub unsafe fn CFArrayGetValues(the_array: CFArrayRef, range: CFRange, values: *mut *mut c_void);
);

extern_fn!(
    pub unsafe fn CFArrayApplyFunction(
        the_array: CFArrayRef,
        range: CFRange,
        applier: CFArrayApplierFunction,
        context: *mut c_void,
    );
);

extern_fn!(
    pub unsafe fn CFArrayGetFirstIndexOfValue(
        the_array: CFArrayRef,
        range: CFRange,
        value: *mut c_void,
    ) -> CFIndex;
);

extern_fn!(
    pub unsafe fn CFArrayGetLastIndexOfValue(
        the_array: CFArrayRef,
        range: CFRange,
        value: *mut c_void,
    ) -> CFIndex;
);

extern_fn!(
    pub unsafe fn CFArrayBSearchValues(
        the_array: CFArrayRef,
        range: CFRange,
        value: *mut c_void,
        comparator: CFComparatorFunction,
        context: *mut c_void,
    ) -> CFIndex;
);

extern_fn!(
    pub unsafe fn CFArrayAppendValue(the_array: CFMutableArrayRef, value: *mut c_void);
);

extern_fn!(
    pub unsafe fn CFArrayInsertValueAtIndex(
        the_array: CFMutableArrayRef,
        idx: CFIndex,
        value: *mut c_void,
    );
);

extern_fn!(
    pub unsafe fn CFArraySetValueAtIndex(
        the_array: CFMutableArrayRef,
        idx: CFIndex,
        value: *mut c_void,
    );
);

extern_fn!(
    pub unsafe fn CFArrayRemoveValueAtIndex(the_array: CFMutableArrayRef, idx: CFIndex);
);

extern_fn!(
    pub unsafe fn CFArrayRemoveAllValues(the_array: CFMutableArrayRef);
);

extern_fn!(
    pub unsafe fn CFArrayReplaceValues(
        the_array: CFMutableArrayRef,
        range: CFRange,
        new_values: *mut *mut c_void,
        new_count: CFIndex,
    );
);

extern_fn!(
    pub unsafe fn CFArrayExchangeValuesAtIndices(
        the_array: CFMutableArrayRef,
        idx1: CFIndex,
        idx2: CFIndex,
    );
);

extern_fn!(
    pub unsafe fn CFArraySortValues(
        the_array: CFMutableArrayRef,
        range: CFRange,
        comparator: CFComparatorFunction,
        context: *mut c_void,
    );
);

extern_fn!(
    pub unsafe fn CFArrayAppendArray(
        the_array: CFMutableArrayRef,
        other_array: CFArrayRef,
        other_range: CFRange,
    );
);
