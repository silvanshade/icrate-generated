//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreFoundation::*;

extern_struct!(
    #[encoding_name("?")]
    pub struct CFStreamError {
        pub domain: CFIndex,
        pub error: i32,
    }
);

pub type CFStreamPropertyKey = CFStringRef;

ns_enum!(
    #[underlying(CFIndex)]
    pub enum CFStreamStatus {
        kCFStreamStatusNotOpen = 0,
        kCFStreamStatusOpening = 1,
        kCFStreamStatusOpen = 2,
        kCFStreamStatusReading = 3,
        kCFStreamStatusWriting = 4,
        kCFStreamStatusAtEnd = 5,
        kCFStreamStatusClosed = 6,
        kCFStreamStatusError = 7,
    }
);

ns_options!(
    #[underlying(CFOptionFlags)]
    pub enum CFStreamEventType {
        kCFStreamEventNone = 0,
        kCFStreamEventOpenCompleted = 1,
        kCFStreamEventHasBytesAvailable = 2,
        kCFStreamEventCanAcceptBytes = 4,
        kCFStreamEventErrorOccurred = 8,
        kCFStreamEventEndEncountered = 16,
    }
);

extern_struct!(
    #[encoding_name("?")]
    pub struct CFStreamClientContext {
        pub version: CFIndex,
        pub info: *mut c_void,
        pub retain: Option<unsafe extern "C" fn(*mut c_void) -> *mut c_void>,
        pub release: Option<unsafe extern "C" fn(*mut c_void)>,
        pub copyDescription: Option<unsafe extern "C" fn(*mut c_void) -> CFStringRef>,
    }
);

pub type CFReadStreamRef = *mut c_void;

pub type CFWriteStreamRef = *mut c_void;

pub type CFReadStreamClientCallBack =
    Option<unsafe extern "C" fn(CFReadStreamRef, CFStreamEventType, *mut c_void)>;

pub type CFWriteStreamClientCallBack =
    Option<unsafe extern "C" fn(CFWriteStreamRef, CFStreamEventType, *mut c_void)>;

extern_fn!(
    pub unsafe fn CFReadStreamGetTypeID() -> CFTypeID;
);

extern_fn!(
    pub unsafe fn CFWriteStreamGetTypeID() -> CFTypeID;
);

extern_static!(kCFStreamPropertyDataWritten: CFStreamPropertyKey);

extern_fn!(
    pub unsafe fn CFReadStreamCreateWithBytesNoCopy(
        alloc: CFAllocatorRef,
        bytes: *mut u8,
        length: CFIndex,
        bytes_deallocator: CFAllocatorRef,
    ) -> CFReadStreamRef;
);

extern_fn!(
    pub unsafe fn CFWriteStreamCreateWithBuffer(
        alloc: CFAllocatorRef,
        buffer: *mut u8,
        buffer_capacity: CFIndex,
    ) -> CFWriteStreamRef;
);

extern_fn!(
    pub unsafe fn CFWriteStreamCreateWithAllocatedBuffers(
        alloc: CFAllocatorRef,
        buffer_allocator: CFAllocatorRef,
    ) -> CFWriteStreamRef;
);

extern_fn!(
    pub unsafe fn CFReadStreamCreateWithFile(
        alloc: CFAllocatorRef,
        file_url: CFURLRef,
    ) -> CFReadStreamRef;
);

extern_fn!(
    pub unsafe fn CFWriteStreamCreateWithFile(
        alloc: CFAllocatorRef,
        file_url: CFURLRef,
    ) -> CFWriteStreamRef;
);

extern_fn!(
    pub unsafe fn CFStreamCreateBoundPair(
        alloc: CFAllocatorRef,
        read_stream: *mut CFReadStreamRef,
        write_stream: *mut CFWriteStreamRef,
        transfer_buffer_size: CFIndex,
    );
);

extern_static!(kCFStreamPropertyAppendToFile: CFStreamPropertyKey);

extern_static!(kCFStreamPropertyFileCurrentOffset: CFStreamPropertyKey);

extern_static!(kCFStreamPropertySocketNativeHandle: CFStreamPropertyKey);

extern_static!(kCFStreamPropertySocketRemoteHostName: CFStreamPropertyKey);

extern_static!(kCFStreamPropertySocketRemotePortNumber: CFStreamPropertyKey);

extern_static!(kCFStreamErrorDomainSOCKS: c_int);

extern_static!(kCFStreamPropertySOCKSProxy: CFStringRef);

extern_static!(kCFStreamPropertySOCKSProxyHost: CFStringRef);

extern_static!(kCFStreamPropertySOCKSProxyPort: CFStringRef);

extern_static!(kCFStreamPropertySOCKSVersion: CFStringRef);

extern_static!(kCFStreamSocketSOCKSVersion4: CFStringRef);

extern_static!(kCFStreamSocketSOCKSVersion5: CFStringRef);

extern_static!(kCFStreamPropertySOCKSUser: CFStringRef);

extern_static!(kCFStreamPropertySOCKSPassword: CFStringRef);

extern_static!(kCFStreamErrorDomainSSL: c_int);

extern_static!(kCFStreamPropertySocketSecurityLevel: CFStringRef);

extern_static!(kCFStreamSocketSecurityLevelNone: CFStringRef);

extern_static!(kCFStreamSocketSecurityLevelSSLv2: CFStringRef);

extern_static!(kCFStreamSocketSecurityLevelSSLv3: CFStringRef);

extern_static!(kCFStreamSocketSecurityLevelTLSv1: CFStringRef);

extern_static!(kCFStreamSocketSecurityLevelNegotiatedSSL: CFStringRef);

extern_static!(kCFStreamPropertyShouldCloseNativeSocket: CFStringRef);

extern_fn!(
    #[deprecated = "Use nw_connection_t in Network framework instead"]
    pub unsafe fn CFStreamCreatePairWithSocket(
        alloc: CFAllocatorRef,
        sock: CFSocketNativeHandle,
        read_stream: *mut CFReadStreamRef,
        write_stream: *mut CFWriteStreamRef,
    );
);

extern_fn!(
    #[deprecated = "Use nw_connection_t in Network framework instead"]
    pub unsafe fn CFStreamCreatePairWithSocketToHost(
        alloc: CFAllocatorRef,
        host: CFStringRef,
        port: u32,
        read_stream: *mut CFReadStreamRef,
        write_stream: *mut CFWriteStreamRef,
    );
);

extern_fn!(
    #[deprecated = "Use nw_connection_t in Network framework instead"]
    pub unsafe fn CFStreamCreatePairWithPeerSocketSignature(
        alloc: CFAllocatorRef,
        signature: *mut CFSocketSignature,
        read_stream: *mut CFReadStreamRef,
        write_stream: *mut CFWriteStreamRef,
    );
);

extern_fn!(
    pub unsafe fn CFReadStreamGetStatus(stream: CFReadStreamRef) -> CFStreamStatus;
);

extern_fn!(
    pub unsafe fn CFWriteStreamGetStatus(stream: CFWriteStreamRef) -> CFStreamStatus;
);

extern_fn!(
    pub unsafe fn CFReadStreamCopyError(stream: CFReadStreamRef) -> CFErrorRef;
);

extern_fn!(
    pub unsafe fn CFWriteStreamCopyError(stream: CFWriteStreamRef) -> CFErrorRef;
);

extern_fn!(
    pub unsafe fn CFReadStreamOpen(stream: CFReadStreamRef) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFWriteStreamOpen(stream: CFWriteStreamRef) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFReadStreamClose(stream: CFReadStreamRef);
);

extern_fn!(
    pub unsafe fn CFWriteStreamClose(stream: CFWriteStreamRef);
);

extern_fn!(
    pub unsafe fn CFReadStreamHasBytesAvailable(stream: CFReadStreamRef) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFReadStreamRead(
        stream: CFReadStreamRef,
        buffer: *mut u8,
        buffer_length: CFIndex,
    ) -> CFIndex;
);

extern_fn!(
    pub unsafe fn CFReadStreamGetBuffer(
        stream: CFReadStreamRef,
        max_bytes_to_read: CFIndex,
        num_bytes_read: *mut CFIndex,
    ) -> *mut u8;
);

extern_fn!(
    pub unsafe fn CFWriteStreamCanAcceptBytes(stream: CFWriteStreamRef) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFWriteStreamWrite(
        stream: CFWriteStreamRef,
        buffer: *mut u8,
        buffer_length: CFIndex,
    ) -> CFIndex;
);

extern_fn!(
    pub unsafe fn CFReadStreamCopyProperty(
        stream: CFReadStreamRef,
        property_name: CFStreamPropertyKey,
    ) -> CFTypeRef;
);

extern_fn!(
    pub unsafe fn CFWriteStreamCopyProperty(
        stream: CFWriteStreamRef,
        property_name: CFStreamPropertyKey,
    ) -> CFTypeRef;
);

extern_fn!(
    pub unsafe fn CFReadStreamSetProperty(
        stream: CFReadStreamRef,
        property_name: CFStreamPropertyKey,
        property_value: CFTypeRef,
    ) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFWriteStreamSetProperty(
        stream: CFWriteStreamRef,
        property_name: CFStreamPropertyKey,
        property_value: CFTypeRef,
    ) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFReadStreamSetClient(
        stream: CFReadStreamRef,
        stream_events: CFOptionFlags,
        client_cb: CFReadStreamClientCallBack,
        client_context: *mut CFStreamClientContext,
    ) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFWriteStreamSetClient(
        stream: CFWriteStreamRef,
        stream_events: CFOptionFlags,
        client_cb: CFWriteStreamClientCallBack,
        client_context: *mut CFStreamClientContext,
    ) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFReadStreamScheduleWithRunLoop(
        stream: CFReadStreamRef,
        run_loop: CFRunLoopRef,
        run_loop_mode: CFRunLoopMode,
    );
);

extern_fn!(
    pub unsafe fn CFWriteStreamScheduleWithRunLoop(
        stream: CFWriteStreamRef,
        run_loop: CFRunLoopRef,
        run_loop_mode: CFRunLoopMode,
    );
);

extern_fn!(
    pub unsafe fn CFReadStreamUnscheduleFromRunLoop(
        stream: CFReadStreamRef,
        run_loop: CFRunLoopRef,
        run_loop_mode: CFRunLoopMode,
    );
);

extern_fn!(
    pub unsafe fn CFWriteStreamUnscheduleFromRunLoop(
        stream: CFWriteStreamRef,
        run_loop: CFRunLoopRef,
        run_loop_mode: CFRunLoopMode,
    );
);

ns_enum!(
    #[underlying(CFIndex)]
    pub enum CFStreamErrorDomain {
        kCFStreamErrorDomainCustom = -1,
        kCFStreamErrorDomainPOSIX = 1,
        kCFStreamErrorDomainMacOSStatus = 2,
    }
);

extern_fn!(
    pub unsafe fn CFReadStreamGetError(stream: CFReadStreamRef) -> CFStreamError;
);

extern_fn!(
    pub unsafe fn CFWriteStreamGetError(stream: CFWriteStreamRef) -> CFStreamError;
);
