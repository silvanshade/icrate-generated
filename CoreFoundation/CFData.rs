//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreFoundation::*;

pub type CFDataRef = *mut c_void;

pub type CFMutableDataRef = *mut c_void;

extern_fn!(
    pub unsafe fn CFDataGetTypeID() -> CFTypeID;
);

extern_fn!(
    pub unsafe fn CFDataCreate(
        allocator: CFAllocatorRef,
        bytes: *mut u8,
        length: CFIndex,
    ) -> CFDataRef;
);

extern_fn!(
    pub unsafe fn CFDataCreateWithBytesNoCopy(
        allocator: CFAllocatorRef,
        bytes: *mut u8,
        length: CFIndex,
        bytes_deallocator: CFAllocatorRef,
    ) -> CFDataRef;
);

extern_fn!(
    pub unsafe fn CFDataCreateCopy(allocator: CFAllocatorRef, the_data: CFDataRef) -> CFDataRef;
);

extern_fn!(
    pub unsafe fn CFDataCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
    ) -> CFMutableDataRef;
);

extern_fn!(
    pub unsafe fn CFDataCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        the_data: CFDataRef,
    ) -> CFMutableDataRef;
);

extern_fn!(
    pub unsafe fn CFDataGetLength(the_data: CFDataRef) -> CFIndex;
);

extern_fn!(
    pub unsafe fn CFDataGetBytePtr(the_data: CFDataRef) -> *mut u8;
);

extern_fn!(
    pub unsafe fn CFDataGetMutableBytePtr(the_data: CFMutableDataRef) -> *mut u8;
);

extern_fn!(
    pub unsafe fn CFDataGetBytes(the_data: CFDataRef, range: CFRange, buffer: *mut u8);
);

extern_fn!(
    pub unsafe fn CFDataSetLength(the_data: CFMutableDataRef, length: CFIndex);
);

extern_fn!(
    pub unsafe fn CFDataIncreaseLength(the_data: CFMutableDataRef, extra_length: CFIndex);
);

extern_fn!(
    pub unsafe fn CFDataAppendBytes(the_data: CFMutableDataRef, bytes: *mut u8, length: CFIndex);
);

extern_fn!(
    pub unsafe fn CFDataReplaceBytes(
        the_data: CFMutableDataRef,
        range: CFRange,
        new_bytes: *mut u8,
        new_length: CFIndex,
    );
);

extern_fn!(
    pub unsafe fn CFDataDeleteBytes(the_data: CFMutableDataRef, range: CFRange);
);

ns_options!(
    #[underlying(CFOptionFlags)]
    pub enum CFDataSearchFlags {
        kCFDataSearchBackwards = 1 << 0,
        kCFDataSearchAnchored = 1 << 1,
    }
);

extern_fn!(
    pub unsafe fn CFDataFind(
        the_data: CFDataRef,
        data_to_find: CFDataRef,
        search_range: CFRange,
        compare_options: CFDataSearchFlags,
    ) -> CFRange;
);
