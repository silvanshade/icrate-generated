//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreFoundation::*;

pub type CFLocaleIdentifier = CFStringRef;

pub type CFLocaleKey = CFStringRef;

pub type CFLocaleRef = *mut c_void;

extern_fn!(
    pub unsafe fn CFLocaleGetTypeID() -> CFTypeID;
);

extern_fn!(
    pub unsafe fn CFLocaleGetSystem() -> CFLocaleRef;
);

extern_fn!(
    pub unsafe fn CFLocaleCopyCurrent() -> CFLocaleRef;
);

extern_fn!(
    pub unsafe fn CFLocaleCopyAvailableLocaleIdentifiers() -> CFArrayRef;
);

extern_fn!(
    pub unsafe fn CFLocaleCopyISOLanguageCodes() -> CFArrayRef;
);

extern_fn!(
    pub unsafe fn CFLocaleCopyISOCountryCodes() -> CFArrayRef;
);

extern_fn!(
    pub unsafe fn CFLocaleCopyISOCurrencyCodes() -> CFArrayRef;
);

extern_fn!(
    pub unsafe fn CFLocaleCopyCommonISOCurrencyCodes() -> CFArrayRef;
);

extern_fn!(
    pub unsafe fn CFLocaleCopyPreferredLanguages() -> CFArrayRef;
);

extern_fn!(
    pub unsafe fn CFLocaleCreateCanonicalLanguageIdentifierFromString(
        allocator: CFAllocatorRef,
        locale_identifier: CFStringRef,
    ) -> CFLocaleIdentifier;
);

extern_fn!(
    pub unsafe fn CFLocaleCreateCanonicalLocaleIdentifierFromString(
        allocator: CFAllocatorRef,
        locale_identifier: CFStringRef,
    ) -> CFLocaleIdentifier;
);

extern_fn!(
    pub unsafe fn CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(
        allocator: CFAllocatorRef,
        lcode: LangCode,
        rcode: RegionCode,
    ) -> CFLocaleIdentifier;
);

extern_fn!(
    pub unsafe fn CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(
        allocator: CFAllocatorRef,
        lcid: u32,
    ) -> CFLocaleIdentifier;
);

extern_fn!(
    pub unsafe fn CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(
        locale_identifier: CFLocaleIdentifier,
    ) -> u32;
);

ns_enum!(
    #[underlying(CFIndex)]
    pub enum CFLocaleLanguageDirection {
        kCFLocaleLanguageDirectionUnknown = 0,
        kCFLocaleLanguageDirectionLeftToRight = 1,
        kCFLocaleLanguageDirectionRightToLeft = 2,
        kCFLocaleLanguageDirectionTopToBottom = 3,
        kCFLocaleLanguageDirectionBottomToTop = 4,
    }
);

extern_fn!(
    pub unsafe fn CFLocaleGetLanguageCharacterDirection(
        iso_lang_code: CFStringRef,
    ) -> CFLocaleLanguageDirection;
);

extern_fn!(
    pub unsafe fn CFLocaleGetLanguageLineDirection(
        iso_lang_code: CFStringRef,
    ) -> CFLocaleLanguageDirection;
);

extern_fn!(
    pub unsafe fn CFLocaleCreateComponentsFromLocaleIdentifier(
        allocator: CFAllocatorRef,
        locale_id: CFLocaleIdentifier,
    ) -> CFDictionaryRef;
);

extern_fn!(
    pub unsafe fn CFLocaleCreateLocaleIdentifierFromComponents(
        allocator: CFAllocatorRef,
        dictionary: CFDictionaryRef,
    ) -> CFLocaleIdentifier;
);

extern_fn!(
    pub unsafe fn CFLocaleCreate(
        allocator: CFAllocatorRef,
        locale_identifier: CFLocaleIdentifier,
    ) -> CFLocaleRef;
);

extern_fn!(
    pub unsafe fn CFLocaleCreateCopy(allocator: CFAllocatorRef, locale: CFLocaleRef)
        -> CFLocaleRef;
);

extern_fn!(
    pub unsafe fn CFLocaleGetIdentifier(locale: CFLocaleRef) -> CFLocaleIdentifier;
);

extern_fn!(
    pub unsafe fn CFLocaleGetValue(locale: CFLocaleRef, key: CFLocaleKey) -> CFTypeRef;
);

extern_fn!(
    pub unsafe fn CFLocaleCopyDisplayNameForPropertyValue(
        display_locale: CFLocaleRef,
        key: CFLocaleKey,
        value: CFStringRef,
    ) -> CFStringRef;
);

extern_static!(kCFLocaleCurrentLocaleDidChangeNotification: CFNotificationName);

extern_static!(kCFLocaleIdentifier: CFLocaleKey);

extern_static!(kCFLocaleLanguageCode: CFLocaleKey);

extern_static!(kCFLocaleCountryCode: CFLocaleKey);

extern_static!(kCFLocaleScriptCode: CFLocaleKey);

extern_static!(kCFLocaleVariantCode: CFLocaleKey);

extern_static!(kCFLocaleExemplarCharacterSet: CFLocaleKey);

extern_static!(kCFLocaleCalendarIdentifier: CFLocaleKey);

extern_static!(kCFLocaleCalendar: CFLocaleKey);

extern_static!(kCFLocaleCollationIdentifier: CFLocaleKey);

extern_static!(kCFLocaleUsesMetricSystem: CFLocaleKey);

extern_static!(kCFLocaleMeasurementSystem: CFLocaleKey);

extern_static!(kCFLocaleDecimalSeparator: CFLocaleKey);

extern_static!(kCFLocaleGroupingSeparator: CFLocaleKey);

extern_static!(kCFLocaleCurrencySymbol: CFLocaleKey);

extern_static!(kCFLocaleCurrencyCode: CFLocaleKey);

extern_static!(kCFLocaleCollatorIdentifier: CFLocaleKey);

extern_static!(kCFLocaleQuotationBeginDelimiterKey: CFLocaleKey);

extern_static!(kCFLocaleQuotationEndDelimiterKey: CFLocaleKey);

extern_static!(kCFLocaleAlternateQuotationBeginDelimiterKey: CFLocaleKey);

extern_static!(kCFLocaleAlternateQuotationEndDelimiterKey: CFLocaleKey);

pub type CFCalendarIdentifier = CFStringRef;

extern_static!(kCFGregorianCalendar: CFCalendarIdentifier);

extern_static!(kCFBuddhistCalendar: CFCalendarIdentifier);

extern_static!(kCFChineseCalendar: CFCalendarIdentifier);

extern_static!(kCFHebrewCalendar: CFCalendarIdentifier);

extern_static!(kCFIslamicCalendar: CFCalendarIdentifier);

extern_static!(kCFIslamicCivilCalendar: CFCalendarIdentifier);

extern_static!(kCFJapaneseCalendar: CFCalendarIdentifier);

extern_static!(kCFRepublicOfChinaCalendar: CFCalendarIdentifier);

extern_static!(kCFPersianCalendar: CFCalendarIdentifier);

extern_static!(kCFIndianCalendar: CFCalendarIdentifier);

extern_static!(kCFISO8601Calendar: CFCalendarIdentifier);

extern_static!(kCFIslamicTabularCalendar: CFCalendarIdentifier);

extern_static!(kCFIslamicUmmAlQuraCalendar: CFCalendarIdentifier);
