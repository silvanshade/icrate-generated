//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreFoundation::*;

extern_struct!(
    #[encoding_name("?")]
    pub struct CFBinaryHeapCompareContext {
        pub version: CFIndex,
        pub info: *mut c_void,
        pub retain: Option<unsafe extern "C" fn(*mut c_void) -> *mut c_void>,
        pub release: Option<unsafe extern "C" fn(*mut c_void)>,
        pub copyDescription: Option<unsafe extern "C" fn(*mut c_void) -> CFStringRef>,
    }
);

extern_struct!(
    #[encoding_name("?")]
    pub struct CFBinaryHeapCallBacks {
        pub version: CFIndex,
        pub retain: Option<unsafe extern "C" fn(CFAllocatorRef, *mut c_void) -> *mut c_void>,
        pub release: Option<unsafe extern "C" fn(CFAllocatorRef, *mut c_void)>,
        pub copyDescription: Option<unsafe extern "C" fn(*mut c_void) -> CFStringRef>,
        pub compare: Option<
            unsafe extern "C" fn(*mut c_void, *mut c_void, *mut c_void) -> CFComparisonResult,
        >,
    }
);

extern_static!(kCFStringBinaryHeapCallBacks: CFBinaryHeapCallBacks);

pub type CFBinaryHeapApplierFunction = Option<unsafe extern "C" fn(*mut c_void, *mut c_void)>;

pub type CFBinaryHeapRef = *mut c_void;

extern_fn!(
    pub unsafe fn CFBinaryHeapGetTypeID() -> CFTypeID;
);

extern_fn!(
    pub unsafe fn CFBinaryHeapCreate(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        call_backs: *mut CFBinaryHeapCallBacks,
        compare_context: *mut CFBinaryHeapCompareContext,
    ) -> CFBinaryHeapRef;
);

extern_fn!(
    pub unsafe fn CFBinaryHeapCreateCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        heap: CFBinaryHeapRef,
    ) -> CFBinaryHeapRef;
);

extern_fn!(
    pub unsafe fn CFBinaryHeapGetCount(heap: CFBinaryHeapRef) -> CFIndex;
);

extern_fn!(
    pub unsafe fn CFBinaryHeapGetCountOfValue(heap: CFBinaryHeapRef, value: *mut c_void)
        -> CFIndex;
);

extern_fn!(
    pub unsafe fn CFBinaryHeapContainsValue(heap: CFBinaryHeapRef, value: *mut c_void) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFBinaryHeapGetMinimum(heap: CFBinaryHeapRef) -> *mut c_void;
);

extern_fn!(
    pub unsafe fn CFBinaryHeapGetMinimumIfPresent(
        heap: CFBinaryHeapRef,
        value: *mut *mut c_void,
    ) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFBinaryHeapGetValues(heap: CFBinaryHeapRef, values: *mut *mut c_void);
);

extern_fn!(
    pub unsafe fn CFBinaryHeapApplyFunction(
        heap: CFBinaryHeapRef,
        applier: CFBinaryHeapApplierFunction,
        context: *mut c_void,
    );
);

extern_fn!(
    pub unsafe fn CFBinaryHeapAddValue(heap: CFBinaryHeapRef, value: *mut c_void);
);

extern_fn!(
    pub unsafe fn CFBinaryHeapRemoveMinimumValue(heap: CFBinaryHeapRef);
);

extern_fn!(
    pub unsafe fn CFBinaryHeapRemoveAllValues(heap: CFBinaryHeapRef);
);
