//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreFoundation::*;

extern_static!(kCFCoreFoundationVersionNumber: c_double);

pub type CFTypeID = c_ulong;

pub type CFOptionFlags = c_ulong;

pub type CFHashCode = c_ulong;

pub type CFStringRef = *mut c_void;

pub type CFMutableStringRef = *mut c_void;

ns_enum!(
    #[underlying(CFIndex)]
    pub enum CFComparisonResult {
        kCFCompareLessThan = -1,
        kCFCompareEqualTo = 0,
        kCFCompareGreaterThan = 1,
    }
);

pub type CFComparatorFunction =
    Option<unsafe extern "C" fn(*mut c_void, *mut c_void, *mut c_void) -> CFComparisonResult>;

extern_static!(kCFNotFound: CFIndex = -1);

extern_struct!(
    #[encoding_name("?")]
    pub struct CFRange {
        pub location: CFIndex,
        pub length: CFIndex,
    }
);

inline_fn!(
    pub unsafe fn CFRangeMake(loc: CFIndex, len: CFIndex) -> CFRange {
        todo!()
    }
);

extern_fn!(
    pub unsafe fn __CFRangeMake(loc: CFIndex, len: CFIndex) -> CFRange;
);

pub type CFNullRef = *mut c_void;

extern_fn!(
    pub unsafe fn CFNullGetTypeID() -> CFTypeID;
);

extern_static!(kCFNull: CFNullRef);

pub type CFAllocatorRef = *mut c_void;

extern_static!(kCFAllocatorDefault: CFAllocatorRef);

extern_static!(kCFAllocatorSystemDefault: CFAllocatorRef);

extern_static!(kCFAllocatorMalloc: CFAllocatorRef);

extern_static!(kCFAllocatorMallocZone: CFAllocatorRef);

extern_static!(kCFAllocatorNull: CFAllocatorRef);

extern_static!(kCFAllocatorUseContext: CFAllocatorRef);

pub type CFAllocatorRetainCallBack = Option<unsafe extern "C" fn(*mut c_void) -> *mut c_void>;

pub type CFAllocatorReleaseCallBack = Option<unsafe extern "C" fn(*mut c_void)>;

pub type CFAllocatorCopyDescriptionCallBack =
    Option<unsafe extern "C" fn(*mut c_void) -> CFStringRef>;

pub type CFAllocatorAllocateCallBack =
    Option<unsafe extern "C" fn(CFIndex, CFOptionFlags, *mut c_void) -> *mut c_void>;

pub type CFAllocatorReallocateCallBack =
    Option<unsafe extern "C" fn(*mut c_void, CFIndex, CFOptionFlags, *mut c_void) -> *mut c_void>;

pub type CFAllocatorDeallocateCallBack = Option<unsafe extern "C" fn(*mut c_void, *mut c_void)>;

pub type CFAllocatorPreferredSizeCallBack =
    Option<unsafe extern "C" fn(CFIndex, CFOptionFlags, *mut c_void) -> CFIndex>;

extern_struct!(
    #[encoding_name("?")]
    pub struct CFAllocatorContext {
        pub version: CFIndex,
        pub info: *mut c_void,
        pub retain: CFAllocatorRetainCallBack,
        pub release: CFAllocatorReleaseCallBack,
        pub copyDescription: CFAllocatorCopyDescriptionCallBack,
        pub allocate: CFAllocatorAllocateCallBack,
        pub reallocate: CFAllocatorReallocateCallBack,
        pub deallocate: CFAllocatorDeallocateCallBack,
        pub preferredSize: CFAllocatorPreferredSizeCallBack,
    }
);

extern_fn!(
    pub unsafe fn CFAllocatorGetTypeID() -> CFTypeID;
);

extern_fn!(
    pub unsafe fn CFAllocatorSetDefault(allocator: CFAllocatorRef);
);

extern_fn!(
    pub unsafe fn CFAllocatorGetDefault() -> CFAllocatorRef;
);

extern_fn!(
    pub unsafe fn CFAllocatorCreate(
        allocator: CFAllocatorRef,
        context: *mut CFAllocatorContext,
    ) -> CFAllocatorRef;
);

extern_fn!(
    pub unsafe fn CFAllocatorAllocate(
        allocator: CFAllocatorRef,
        size: CFIndex,
        hint: CFOptionFlags,
    ) -> *mut c_void;
);

extern_fn!(
    pub unsafe fn CFAllocatorReallocate(
        allocator: CFAllocatorRef,
        ptr: *mut c_void,
        newsize: CFIndex,
        hint: CFOptionFlags,
    ) -> *mut c_void;
);

extern_fn!(
    pub unsafe fn CFAllocatorDeallocate(allocator: CFAllocatorRef, ptr: *mut c_void);
);

extern_fn!(
    pub unsafe fn CFAllocatorGetPreferredSizeForSize(
        allocator: CFAllocatorRef,
        size: CFIndex,
        hint: CFOptionFlags,
    ) -> CFIndex;
);

extern_fn!(
    pub unsafe fn CFAllocatorGetContext(
        allocator: CFAllocatorRef,
        context: *mut CFAllocatorContext,
    );
);

extern_fn!(
    pub unsafe fn CFGetTypeID(cf: CFTypeRef) -> CFTypeID;
);

extern_fn!(
    pub unsafe fn CFCopyTypeIDDescription(type_id: CFTypeID) -> CFStringRef;
);

extern_fn!(
    pub unsafe fn CFRetain(cf: CFTypeRef) -> CFTypeRef;
);

extern_fn!(
    pub unsafe fn CFRelease(cf: CFTypeRef);
);

extern_fn!(
    pub unsafe fn CFGetRetainCount(cf: CFTypeRef) -> CFIndex;
);

extern_fn!(
    pub unsafe fn CFEqual(cf1: CFTypeRef, cf2: CFTypeRef) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFHash(cf: CFTypeRef) -> CFHashCode;
);

extern_fn!(
    pub unsafe fn CFCopyDescription(cf: CFTypeRef) -> CFStringRef;
);

extern_fn!(
    pub unsafe fn CFGetAllocator(cf: CFTypeRef) -> CFAllocatorRef;
);

extern_fn!(
    pub unsafe fn CFMakeCollectable(cf: CFTypeRef) -> CFTypeRef;
);
