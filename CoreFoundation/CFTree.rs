//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreFoundation::*;

pub type CFTreeRetainCallBack = Option<unsafe extern "C" fn(*mut c_void) -> *mut c_void>;

pub type CFTreeReleaseCallBack = Option<unsafe extern "C" fn(*mut c_void)>;

pub type CFTreeCopyDescriptionCallBack = Option<unsafe extern "C" fn(*mut c_void) -> CFStringRef>;

extern_struct!(
    #[encoding_name("?")]
    pub struct CFTreeContext {
        pub version: CFIndex,
        pub info: *mut c_void,
        pub retain: CFTreeRetainCallBack,
        pub release: CFTreeReleaseCallBack,
        pub copyDescription: CFTreeCopyDescriptionCallBack,
    }
);

pub type CFTreeApplierFunction = Option<unsafe extern "C" fn(*mut c_void, *mut c_void)>;

pub type CFTreeRef = *mut c_void;

extern_fn!(
    pub unsafe fn CFTreeGetTypeID() -> CFTypeID;
);

extern_fn!(
    pub unsafe fn CFTreeCreate(allocator: CFAllocatorRef, context: *mut CFTreeContext)
        -> CFTreeRef;
);

extern_fn!(
    pub unsafe fn CFTreeGetParent(tree: CFTreeRef) -> CFTreeRef;
);

extern_fn!(
    pub unsafe fn CFTreeGetNextSibling(tree: CFTreeRef) -> CFTreeRef;
);

extern_fn!(
    pub unsafe fn CFTreeGetFirstChild(tree: CFTreeRef) -> CFTreeRef;
);

extern_fn!(
    pub unsafe fn CFTreeGetContext(tree: CFTreeRef, context: *mut CFTreeContext);
);

extern_fn!(
    pub unsafe fn CFTreeGetChildCount(tree: CFTreeRef) -> CFIndex;
);

extern_fn!(
    pub unsafe fn CFTreeGetChildAtIndex(tree: CFTreeRef, idx: CFIndex) -> CFTreeRef;
);

extern_fn!(
    pub unsafe fn CFTreeGetChildren(tree: CFTreeRef, children: *mut CFTreeRef);
);

extern_fn!(
    pub unsafe fn CFTreeApplyFunctionToChildren(
        tree: CFTreeRef,
        applier: CFTreeApplierFunction,
        context: *mut c_void,
    );
);

extern_fn!(
    pub unsafe fn CFTreeFindRoot(tree: CFTreeRef) -> CFTreeRef;
);

extern_fn!(
    pub unsafe fn CFTreeSetContext(tree: CFTreeRef, context: *mut CFTreeContext);
);

extern_fn!(
    pub unsafe fn CFTreePrependChild(tree: CFTreeRef, new_child: CFTreeRef);
);

extern_fn!(
    pub unsafe fn CFTreeAppendChild(tree: CFTreeRef, new_child: CFTreeRef);
);

extern_fn!(
    pub unsafe fn CFTreeInsertSibling(tree: CFTreeRef, new_sibling: CFTreeRef);
);

extern_fn!(
    pub unsafe fn CFTreeRemove(tree: CFTreeRef);
);

extern_fn!(
    pub unsafe fn CFTreeRemoveAllChildren(tree: CFTreeRef);
);

extern_fn!(
    pub unsafe fn CFTreeSortChildren(
        tree: CFTreeRef,
        comparator: CFComparatorFunction,
        context: *mut c_void,
    );
);
