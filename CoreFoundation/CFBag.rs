//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreFoundation::*;

pub type CFBagRetainCallBack =
    Option<unsafe extern "C" fn(CFAllocatorRef, *mut c_void) -> *mut c_void>;

pub type CFBagReleaseCallBack = Option<unsafe extern "C" fn(CFAllocatorRef, *mut c_void)>;

pub type CFBagCopyDescriptionCallBack = Option<unsafe extern "C" fn(*mut c_void) -> CFStringRef>;

pub type CFBagEqualCallBack = Option<unsafe extern "C" fn(*mut c_void, *mut c_void) -> Boolean>;

pub type CFBagHashCallBack = Option<unsafe extern "C" fn(*mut c_void) -> CFHashCode>;

extern_struct!(
    #[encoding_name("?")]
    pub struct CFBagCallBacks {
        pub version: CFIndex,
        pub retain: CFBagRetainCallBack,
        pub release: CFBagReleaseCallBack,
        pub copyDescription: CFBagCopyDescriptionCallBack,
        pub equal: CFBagEqualCallBack,
        pub hash: CFBagHashCallBack,
    }
);

extern_static!(kCFTypeBagCallBacks: CFBagCallBacks);

extern_static!(kCFCopyStringBagCallBacks: CFBagCallBacks);

pub type CFBagApplierFunction = Option<unsafe extern "C" fn(*mut c_void, *mut c_void)>;

pub type CFBagRef = *mut c_void;

pub type CFMutableBagRef = *mut c_void;

extern_fn!(
    pub unsafe fn CFBagGetTypeID() -> CFTypeID;
);

extern_fn!(
    pub unsafe fn CFBagCreate(
        allocator: CFAllocatorRef,
        values: *mut *mut c_void,
        num_values: CFIndex,
        call_backs: *mut CFBagCallBacks,
    ) -> CFBagRef;
);

extern_fn!(
    pub unsafe fn CFBagCreateCopy(allocator: CFAllocatorRef, the_bag: CFBagRef) -> CFBagRef;
);

extern_fn!(
    pub unsafe fn CFBagCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        call_backs: *mut CFBagCallBacks,
    ) -> CFMutableBagRef;
);

extern_fn!(
    pub unsafe fn CFBagCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        the_bag: CFBagRef,
    ) -> CFMutableBagRef;
);

extern_fn!(
    pub unsafe fn CFBagGetCount(the_bag: CFBagRef) -> CFIndex;
);

extern_fn!(
    pub unsafe fn CFBagGetCountOfValue(the_bag: CFBagRef, value: *mut c_void) -> CFIndex;
);

extern_fn!(
    pub unsafe fn CFBagContainsValue(the_bag: CFBagRef, value: *mut c_void) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFBagGetValue(the_bag: CFBagRef, value: *mut c_void) -> *mut c_void;
);

extern_fn!(
    pub unsafe fn CFBagGetValueIfPresent(
        the_bag: CFBagRef,
        candidate: *mut c_void,
        value: *mut *mut c_void,
    ) -> Boolean;
);

extern_fn!(
    pub unsafe fn CFBagGetValues(the_bag: CFBagRef, values: *mut *mut c_void);
);

extern_fn!(
    pub unsafe fn CFBagApplyFunction(
        the_bag: CFBagRef,
        applier: CFBagApplierFunction,
        context: *mut c_void,
    );
);

extern_fn!(
    pub unsafe fn CFBagAddValue(the_bag: CFMutableBagRef, value: *mut c_void);
);

extern_fn!(
    pub unsafe fn CFBagReplaceValue(the_bag: CFMutableBagRef, value: *mut c_void);
);

extern_fn!(
    pub unsafe fn CFBagSetValue(the_bag: CFMutableBagRef, value: *mut c_void);
);

extern_fn!(
    pub unsafe fn CFBagRemoveValue(the_bag: CFMutableBagRef, value: *mut c_void);
);

extern_fn!(
    pub unsafe fn CFBagRemoveAllValues(the_bag: CFMutableBagRef);
);
