//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreFoundation::*;

pub type CFCalendarRef = *mut c_void;

extern_fn!(
    pub unsafe fn CFCalendarGetTypeID() -> CFTypeID;
);

extern_fn!(
    pub unsafe fn CFCalendarCopyCurrent() -> CFCalendarRef;
);

extern_fn!(
    pub unsafe fn CFCalendarCreateWithIdentifier(
        allocator: CFAllocatorRef,
        identifier: CFCalendarIdentifier,
    ) -> CFCalendarRef;
);

extern_fn!(
    pub unsafe fn CFCalendarGetIdentifier(calendar: CFCalendarRef) -> CFCalendarIdentifier;
);

extern_fn!(
    pub unsafe fn CFCalendarCopyLocale(calendar: CFCalendarRef) -> CFLocaleRef;
);

extern_fn!(
    pub unsafe fn CFCalendarSetLocale(calendar: CFCalendarRef, locale: CFLocaleRef);
);

extern_fn!(
    pub unsafe fn CFCalendarCopyTimeZone(calendar: CFCalendarRef) -> CFTimeZoneRef;
);

extern_fn!(
    pub unsafe fn CFCalendarSetTimeZone(calendar: CFCalendarRef, tz: CFTimeZoneRef);
);

extern_fn!(
    pub unsafe fn CFCalendarGetFirstWeekday(calendar: CFCalendarRef) -> CFIndex;
);

extern_fn!(
    pub unsafe fn CFCalendarSetFirstWeekday(calendar: CFCalendarRef, wkdy: CFIndex);
);

extern_fn!(
    pub unsafe fn CFCalendarGetMinimumDaysInFirstWeek(calendar: CFCalendarRef) -> CFIndex;
);

extern_fn!(
    pub unsafe fn CFCalendarSetMinimumDaysInFirstWeek(calendar: CFCalendarRef, mwd: CFIndex);
);

ns_options!(
    #[underlying(CFOptionFlags)]
    pub enum CFCalendarUnit {
        kCFCalendarUnitEra = 1 << 1,
        kCFCalendarUnitYear = 1 << 2,
        kCFCalendarUnitMonth = 1 << 3,
        kCFCalendarUnitDay = 1 << 4,
        kCFCalendarUnitHour = 1 << 5,
        kCFCalendarUnitMinute = 1 << 6,
        kCFCalendarUnitSecond = 1 << 7,
        #[deprecated = "Use kCFCalendarUnitWeekOfYear or kCFCalendarUnitWeekOfMonth instead"]
        kCFCalendarUnitWeek = 1 << 8,
        kCFCalendarUnitWeekday = 1 << 9,
        kCFCalendarUnitWeekdayOrdinal = 1 << 10,
        kCFCalendarUnitQuarter = 1 << 11,
        kCFCalendarUnitWeekOfMonth = 1 << 12,
        kCFCalendarUnitWeekOfYear = 1 << 13,
        kCFCalendarUnitYearForWeekOfYear = 1 << 14,
    }
);

extern_fn!(
    pub unsafe fn CFCalendarGetMinimumRangeOfUnit(
        calendar: CFCalendarRef,
        unit: CFCalendarUnit,
    ) -> CFRange;
);

extern_fn!(
    pub unsafe fn CFCalendarGetMaximumRangeOfUnit(
        calendar: CFCalendarRef,
        unit: CFCalendarUnit,
    ) -> CFRange;
);

extern_fn!(
    pub unsafe fn CFCalendarGetRangeOfUnit(
        calendar: CFCalendarRef,
        smaller_unit: CFCalendarUnit,
        bigger_unit: CFCalendarUnit,
        at: CFAbsoluteTime,
    ) -> CFRange;
);

extern_fn!(
    pub unsafe fn CFCalendarGetOrdinalityOfUnit(
        calendar: CFCalendarRef,
        smaller_unit: CFCalendarUnit,
        bigger_unit: CFCalendarUnit,
        at: CFAbsoluteTime,
    ) -> CFIndex;
);

extern_fn!(
    pub unsafe fn CFCalendarGetTimeRangeOfUnit(
        calendar: CFCalendarRef,
        unit: CFCalendarUnit,
        at: CFAbsoluteTime,
        startp: *mut CFAbsoluteTime,
        tip: *mut CFTimeInterval,
    ) -> Boolean;
);

ns_enum!(
    #[underlying(CFOptionFlags)]
    pub enum __anonymous__ {
        kCFCalendarComponentsWrap = 1 << 0,
    }
);
