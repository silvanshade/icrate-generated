//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreFoundation::*;

pub type CFUUIDRef = *mut c_void;

extern_struct!(
    #[encoding_name("?")]
    pub struct CFUUIDBytes {
        pub byte0: u8,
        pub byte1: u8,
        pub byte2: u8,
        pub byte3: u8,
        pub byte4: u8,
        pub byte5: u8,
        pub byte6: u8,
        pub byte7: u8,
        pub byte8: u8,
        pub byte9: u8,
        pub byte10: u8,
        pub byte11: u8,
        pub byte12: u8,
        pub byte13: u8,
        pub byte14: u8,
        pub byte15: u8,
    }
);

extern_fn!(
    pub unsafe fn CFUUIDGetTypeID() -> CFTypeID;
);

extern_fn!(
    pub unsafe fn CFUUIDCreate(alloc: CFAllocatorRef) -> CFUUIDRef;
);

extern_fn!(
    pub unsafe fn CFUUIDCreateWithBytes(
        alloc: CFAllocatorRef,
        byte0: u8,
        byte1: u8,
        byte2: u8,
        byte3: u8,
        byte4: u8,
        byte5: u8,
        byte6: u8,
        byte7: u8,
        byte8: u8,
        byte9: u8,
        byte10: u8,
        byte11: u8,
        byte12: u8,
        byte13: u8,
        byte14: u8,
        byte15: u8,
    ) -> CFUUIDRef;
);

extern_fn!(
    pub unsafe fn CFUUIDCreateFromString(alloc: CFAllocatorRef, uuid_str: CFStringRef)
        -> CFUUIDRef;
);

extern_fn!(
    pub unsafe fn CFUUIDCreateString(alloc: CFAllocatorRef, uuid: CFUUIDRef) -> CFStringRef;
);

extern_fn!(
    pub unsafe fn CFUUIDGetConstantUUIDWithBytes(
        alloc: CFAllocatorRef,
        byte0: u8,
        byte1: u8,
        byte2: u8,
        byte3: u8,
        byte4: u8,
        byte5: u8,
        byte6: u8,
        byte7: u8,
        byte8: u8,
        byte9: u8,
        byte10: u8,
        byte11: u8,
        byte12: u8,
        byte13: u8,
        byte14: u8,
        byte15: u8,
    ) -> CFUUIDRef;
);

extern_fn!(
    pub unsafe fn CFUUIDGetUUIDBytes(uuid: CFUUIDRef) -> CFUUIDBytes;
);

extern_fn!(
    pub unsafe fn CFUUIDCreateFromUUIDBytes(alloc: CFAllocatorRef, bytes: CFUUIDBytes)
        -> CFUUIDRef;
);
