//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;
use crate::Metal::*;

extern_static!(MTLBinaryArchiveDomain: &'static NSErrorDomain);

#[ns_enum]
#[underlying(NSUInteger)]
pub enum MTLBinaryArchiveError {
    MTLBinaryArchiveErrorNone = 0,
    MTLBinaryArchiveErrorInvalidFile = 1,
    MTLBinaryArchiveErrorUnexpectedElement = 2,
    MTLBinaryArchiveErrorCompilationFailure = 3,
    MTLBinaryArchiveErrorInternalError = 4,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLBinaryArchiveDescriptor")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLBinaryArchiveDescriptor;
}

#[cfg(feature = "Metal_MTLBinaryArchiveDescriptor")]
unsafe impl NSObjectProtocol for MTLBinaryArchiveDescriptor {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLBinaryArchiveDescriptor")]
    pub type MTLBinaryArchiveDescriptor;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "url", managed = "Other")]
    pub fn url(&self) -> Option<Id<NSURL>>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "setUrl:")]
    pub fn setUrl(&self, url: Option<&NSURL>);
}

#[objc2::protocol]
pub unsafe trait MTLBinaryArchive: NSObjectProtocol {
    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "label", managed = "Other")]
    fn label(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setLabel:")]
    fn setLabel(&self, label: Option<&NSString>);

    #[objc2::method(sel = "device", managed = "Other")]
    fn device(&self) -> Id<ProtocolObject<dyn MTLDevice>>;

    #[cfg(all(
        feature = "Foundation_NSError",
        feature = "Metal_MTLComputePipelineDescriptor"
    ))]
    #[objc2::method(sel = "addComputePipelineFunctionsWithDescriptor:error:", throws)]
    fn addComputePipelineFunctionsWithDescriptor_error(
        &self,
        descriptor: &MTLComputePipelineDescriptor,
    ) -> Result<(), Id<NSError>>;

    #[cfg(all(
        feature = "Foundation_NSError",
        feature = "Metal_MTLRenderPipelineDescriptor"
    ))]
    #[objc2::method(sel = "addRenderPipelineFunctionsWithDescriptor:error:", throws)]
    fn addRenderPipelineFunctionsWithDescriptor_error(
        &self,
        descriptor: &MTLRenderPipelineDescriptor,
    ) -> Result<(), Id<NSError>>;

    #[cfg(all(
        feature = "Foundation_NSError",
        feature = "Metal_MTLTileRenderPipelineDescriptor"
    ))]
    #[objc2::method(sel = "addTileRenderPipelineFunctionsWithDescriptor:error:", throws)]
    unsafe fn addTileRenderPipelineFunctionsWithDescriptor_error(
        &self,
        descriptor: &MTLTileRenderPipelineDescriptor,
    ) -> Result<(), Id<NSError>>;

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
    #[objc2::method(sel = "serializeToURL:error:", throws)]
    fn serializeToURL_error(&self, url: &NSURL) -> Result<(), Id<NSError>>;

    #[cfg(all(
        feature = "Foundation_NSError",
        feature = "Metal_MTLFunctionDescriptor"
    ))]
    #[objc2::method(sel = "addFunctionWithDescriptor:library:error:", throws)]
    unsafe fn addFunctionWithDescriptor_library_error(
        &self,
        descriptor: &MTLFunctionDescriptor,
        library: &ProtocolObject<dyn MTLLibrary>,
    ) -> Result<(), Id<NSError>>;
}
