//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;
use crate::Metal::*;

extern_static!(MTLDynamicLibraryDomain: &'static NSErrorDomain);

#[ns_enum]
#[underlying(NSUInteger)]
pub enum MTLDynamicLibraryError {
    MTLDynamicLibraryErrorNone = 0,
    MTLDynamicLibraryErrorInvalidFile = 1,
    MTLDynamicLibraryErrorCompilationFailure = 2,
    MTLDynamicLibraryErrorUnresolvedInstallName = 3,
    MTLDynamicLibraryErrorDependencyLoadFailure = 4,
    MTLDynamicLibraryErrorUnsupported = 5,
}

#[objc2::protocol]
pub unsafe trait MTLDynamicLibrary: NSObjectProtocol {
    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "label", managed = "Other")]
    fn label(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setLabel:")]
    fn setLabel(&self, label: Option<&NSString>);

    #[objc2::method(sel = "device", managed = "Other")]
    fn device(&self) -> Id<ProtocolObject<dyn MTLDevice>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "installName", managed = "Other")]
    fn installName(&self) -> Id<NSString>;

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
    #[objc2::method(sel = "serializeToURL:error:", throws)]
    fn serializeToURL_error(&self, url: &NSURL) -> Result<(), Id<NSError>>;
}
