//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;
use crate::Metal::*;

#[ns_enum]
#[underlying(NSUInteger)]
pub enum MTLPurgeableState {
    MTLPurgeableStateKeepCurrent = 1,
    MTLPurgeableStateNonVolatile = 2,
    MTLPurgeableStateVolatile = 3,
    MTLPurgeableStateEmpty = 4,
}

#[ns_enum]
#[underlying(NSUInteger)]
pub enum MTLCPUCacheMode {
    MTLCPUCacheModeDefaultCache = 0,
    MTLCPUCacheModeWriteCombined = 1,
}

#[ns_enum]
#[underlying(NSUInteger)]
pub enum MTLStorageMode {
    MTLStorageModeShared = 0,
    MTLStorageModeManaged = 1,
    MTLStorageModePrivate = 2,
    MTLStorageModeMemoryless = 3,
}

#[ns_enum]
#[underlying(NSUInteger)]
pub enum MTLHazardTrackingMode {
    MTLHazardTrackingModeDefault = 0,
    MTLHazardTrackingModeUntracked = 1,
    MTLHazardTrackingModeTracked = 2,
}

#[ns_options]
#[underlying(NSUInteger)]
pub enum MTLResourceOptions {
    MTLResourceCPUCacheModeDefaultCache =
        MTLCPUCacheModeDefaultCache << MTLResourceCPUCacheModeShift,
    MTLResourceCPUCacheModeWriteCombined =
        MTLCPUCacheModeWriteCombined << MTLResourceCPUCacheModeShift,
    MTLResourceStorageModeShared = MTLStorageModeShared << MTLResourceStorageModeShift,
    MTLResourceStorageModeManaged = MTLStorageModeManaged << MTLResourceStorageModeShift,
    MTLResourceStorageModePrivate = MTLStorageModePrivate << MTLResourceStorageModeShift,
    MTLResourceStorageModeMemoryless = MTLStorageModeMemoryless << MTLResourceStorageModeShift,
    MTLResourceHazardTrackingModeDefault =
        MTLHazardTrackingModeDefault << MTLResourceHazardTrackingModeShift,
    MTLResourceHazardTrackingModeUntracked =
        MTLHazardTrackingModeUntracked << MTLResourceHazardTrackingModeShift,
    MTLResourceHazardTrackingModeTracked =
        MTLHazardTrackingModeTracked << MTLResourceHazardTrackingModeShift,
    #[deprecated]
    MTLResourceOptionCPUCacheModeDefault = MTLResourceCPUCacheModeDefaultCache,
    #[deprecated]
    MTLResourceOptionCPUCacheModeWriteCombined = MTLResourceCPUCacheModeWriteCombined,
}

#[objc2::protocol]
pub unsafe trait MTLResource: NSObjectProtocol {
    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "label", managed = "Other")]
    fn label(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setLabel:")]
    fn setLabel(&self, label: Option<&NSString>);

    #[objc2::method(sel = "device", managed = "Other")]
    fn device(&self) -> Id<ProtocolObject<dyn MTLDevice>>;

    #[objc2::method(sel = "cpuCacheMode")]
    fn cpuCacheMode(&self) -> MTLCPUCacheMode;

    #[objc2::method(sel = "storageMode")]
    fn storageMode(&self) -> MTLStorageMode;

    #[objc2::method(sel = "hazardTrackingMode")]
    fn hazardTrackingMode(&self) -> MTLHazardTrackingMode;

    #[objc2::method(sel = "resourceOptions")]
    fn resourceOptions(&self) -> MTLResourceOptions;

    #[objc2::method(sel = "setPurgeableState:")]
    fn setPurgeableState(&self, state: MTLPurgeableState) -> MTLPurgeableState;

    #[objc2::method(sel = "heap", managed = "Other")]
    fn heap(&self) -> Option<Id<ProtocolObject<dyn MTLHeap>>>;

    #[objc2::method(sel = "heapOffset")]
    fn heapOffset(&self) -> NSUInteger;

    #[objc2::method(sel = "allocatedSize")]
    fn allocatedSize(&self) -> NSUInteger;

    #[objc2::method(sel = "makeAliasable")]
    unsafe fn makeAliasable(&self);

    #[objc2::method(sel = "isAliasable")]
    fn isAliasable(&self) -> bool;
}
