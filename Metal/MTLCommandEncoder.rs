//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;
use crate::Metal::*;

#[ns_options]
#[underlying(NSUInteger)]
pub enum MTLResourceUsage {
    MTLResourceUsageRead = 1 << 0,
    MTLResourceUsageWrite = 1 << 1,
    #[deprecated]
    MTLResourceUsageSample = 1 << 2,
}

#[ns_options]
#[underlying(NSUInteger)]
pub enum MTLBarrierScope {
    MTLBarrierScopeBuffers = 1 << 0,
    MTLBarrierScopeTextures = 1 << 1,
    MTLBarrierScopeRenderTargets = 1 << 2,
}

#[objc2::protocol]
pub unsafe trait MTLCommandEncoder: NSObjectProtocol {
    #[objc2::method(sel = "device", managed = "Other")]
    unsafe fn device(&self) -> Id<ProtocolObject<dyn MTLDevice>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "label", managed = "Other")]
    fn label(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setLabel:")]
    fn setLabel(&self, label: Option<&NSString>);

    #[objc2::method(sel = "endEncoding")]
    fn endEncoding(&self);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "insertDebugSignpost:")]
    fn insertDebugSignpost(&self, string: &NSString);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "pushDebugGroup:")]
    fn pushDebugGroup(&self, string: &NSString);

    #[objc2::method(sel = "popDebugGroup")]
    fn popDebugGroup(&self);
}
