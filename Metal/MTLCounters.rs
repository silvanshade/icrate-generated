//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;
use crate::Metal::*;

typed_enum!(
    pub type MTLCommonCounter = NSString;
);

extern_static!(MTLCommonCounterTimestamp: &'static MTLCommonCounter);

extern_static!(MTLCommonCounterTessellationInputPatches: &'static MTLCommonCounter);

extern_static!(MTLCommonCounterVertexInvocations: &'static MTLCommonCounter);

extern_static!(MTLCommonCounterPostTessellationVertexInvocations: &'static MTLCommonCounter);

extern_static!(MTLCommonCounterClipperInvocations: &'static MTLCommonCounter);

extern_static!(MTLCommonCounterClipperPrimitivesOut: &'static MTLCommonCounter);

extern_static!(MTLCommonCounterFragmentInvocations: &'static MTLCommonCounter);

extern_static!(MTLCommonCounterFragmentsPassed: &'static MTLCommonCounter);

extern_static!(MTLCommonCounterComputeKernelInvocations: &'static MTLCommonCounter);

extern_static!(MTLCommonCounterTotalCycles: &'static MTLCommonCounter);

extern_static!(MTLCommonCounterVertexCycles: &'static MTLCommonCounter);

extern_static!(MTLCommonCounterTessellationCycles: &'static MTLCommonCounter);

extern_static!(MTLCommonCounterPostTessellationVertexCycles: &'static MTLCommonCounter);

extern_static!(MTLCommonCounterFragmentCycles: &'static MTLCommonCounter);

extern_static!(MTLCommonCounterRenderTargetWriteCycles: &'static MTLCommonCounter);

typed_enum!(
    pub type MTLCommonCounterSet = NSString;
);

extern_static!(MTLCommonCounterSetTimestamp: &'static MTLCommonCounterSet);

extern_static!(MTLCommonCounterSetStageUtilization: &'static MTLCommonCounterSet);

extern_static!(MTLCommonCounterSetStatistic: &'static MTLCommonCounterSet);

extern_struct!(
    #[encoding_name("?")]
    pub struct MTLCounterResultTimestamp {
        pub timestamp: u64,
    }
);

extern_struct!(
    #[encoding_name("?")]
    pub struct MTLCounterResultStageUtilization {
        pub totalCycles: u64,
        pub vertexCycles: u64,
        pub tessellationCycles: u64,
        pub postTessellationVertexCycles: u64,
        pub fragmentCycles: u64,
        pub renderTargetCycles: u64,
    }
);

extern_struct!(
    #[encoding_name("?")]
    pub struct MTLCounterResultStatistic {
        pub tessellationInputPatches: u64,
        pub vertexInvocations: u64,
        pub postTessellationVertexInvocations: u64,
        pub clipperInvocations: u64,
        pub clipperPrimitivesOut: u64,
        pub fragmentInvocations: u64,
        pub fragmentsPassed: u64,
        pub computeKernelInvocations: u64,
    }
);

#[objc2::protocol]
pub unsafe trait MTLCounter: NSObjectProtocol {
    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "name", managed = "Other")]
    unsafe fn name(&self) -> Id<NSString>;
}

#[objc2::protocol]
pub unsafe trait MTLCounterSet: NSObjectProtocol {
    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "name", managed = "Other")]
    unsafe fn name(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "counters", managed = "Other")]
    unsafe fn counters(&self) -> Id<NSArray<ProtocolObject<dyn MTLCounter>>>;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLCounterSampleBufferDescriptor")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLCounterSampleBufferDescriptor;
}

#[cfg(feature = "Metal_MTLCounterSampleBufferDescriptor")]
unsafe impl NSObjectProtocol for MTLCounterSampleBufferDescriptor {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLCounterSampleBufferDescriptor")]
    pub type MTLCounterSampleBufferDescriptor;

    #[objc2::method(sel = "counterSet", managed = "Other")]
    pub unsafe fn counterSet(&self) -> Option<Id<ProtocolObject<dyn MTLCounterSet>>>;

    #[objc2::method(sel = "setCounterSet:")]
    pub unsafe fn setCounterSet(&self, counter_set: Option<&ProtocolObject<dyn MTLCounterSet>>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "label", managed = "Other")]
    pub unsafe fn label(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setLabel:")]
    pub unsafe fn setLabel(&self, label: &NSString);

    #[objc2::method(sel = "storageMode")]
    pub unsafe fn storageMode(&self) -> MTLStorageMode;

    #[objc2::method(sel = "setStorageMode:")]
    pub unsafe fn setStorageMode(&self, storage_mode: MTLStorageMode);

    #[objc2::method(sel = "sampleCount")]
    pub unsafe fn sampleCount(&self) -> NSUInteger;

    #[objc2::method(sel = "setSampleCount:")]
    pub unsafe fn setSampleCount(&self, sample_count: NSUInteger);
}

#[objc2::protocol]
pub unsafe trait MTLCounterSampleBuffer: NSObjectProtocol {
    #[objc2::method(sel = "device", managed = "Other")]
    unsafe fn device(&self) -> Id<ProtocolObject<dyn MTLDevice>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "label", managed = "Other")]
    unsafe fn label(&self) -> Id<NSString>;

    #[objc2::method(sel = "sampleCount")]
    unsafe fn sampleCount(&self) -> NSUInteger;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "resolveCounterRange:", managed = "Other")]
    unsafe fn resolveCounterRange(&self, range: NSRange) -> Option<Id<NSData>>;
}

extern_static!(MTLCounterErrorDomain: &'static NSErrorDomain);

#[ns_enum]
#[underlying(NSInteger)]
pub enum MTLCounterSampleBufferError {
    MTLCounterSampleBufferErrorOutOfMemory = 0,
    MTLCounterSampleBufferErrorInvalid = 1,
    MTLCounterSampleBufferErrorInternal = 2,
}
