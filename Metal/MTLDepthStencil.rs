//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;
use crate::Metal::*;

#[ns_enum]
#[underlying(NSUInteger)]
pub enum MTLCompareFunction {
    MTLCompareFunctionNever = 0,
    MTLCompareFunctionLess = 1,
    MTLCompareFunctionEqual = 2,
    MTLCompareFunctionLessEqual = 3,
    MTLCompareFunctionGreater = 4,
    MTLCompareFunctionNotEqual = 5,
    MTLCompareFunctionGreaterEqual = 6,
    MTLCompareFunctionAlways = 7,
}

#[ns_enum]
#[underlying(NSUInteger)]
pub enum MTLStencilOperation {
    MTLStencilOperationKeep = 0,
    MTLStencilOperationZero = 1,
    MTLStencilOperationReplace = 2,
    MTLStencilOperationIncrementClamp = 3,
    MTLStencilOperationDecrementClamp = 4,
    MTLStencilOperationInvert = 5,
    MTLStencilOperationIncrementWrap = 6,
    MTLStencilOperationDecrementWrap = 7,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLStencilDescriptor")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLStencilDescriptor;
}

#[cfg(feature = "Metal_MTLStencilDescriptor")]
unsafe impl NSObjectProtocol for MTLStencilDescriptor {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLStencilDescriptor")]
    pub type MTLStencilDescriptor;

    #[objc2::method(sel = "stencilCompareFunction")]
    pub fn stencilCompareFunction(&self) -> MTLCompareFunction;

    #[objc2::method(sel = "setStencilCompareFunction:")]
    pub fn setStencilCompareFunction(&self, stencil_compare_function: MTLCompareFunction);

    #[objc2::method(sel = "stencilFailureOperation")]
    pub fn stencilFailureOperation(&self) -> MTLStencilOperation;

    #[objc2::method(sel = "setStencilFailureOperation:")]
    pub fn setStencilFailureOperation(&self, stencil_failure_operation: MTLStencilOperation);

    #[objc2::method(sel = "depthFailureOperation")]
    pub fn depthFailureOperation(&self) -> MTLStencilOperation;

    #[objc2::method(sel = "setDepthFailureOperation:")]
    pub fn setDepthFailureOperation(&self, depth_failure_operation: MTLStencilOperation);

    #[objc2::method(sel = "depthStencilPassOperation")]
    pub fn depthStencilPassOperation(&self) -> MTLStencilOperation;

    #[objc2::method(sel = "setDepthStencilPassOperation:")]
    pub fn setDepthStencilPassOperation(&self, depth_stencil_pass_operation: MTLStencilOperation);

    #[objc2::method(sel = "readMask")]
    pub fn readMask(&self) -> u32;

    #[objc2::method(sel = "setReadMask:")]
    pub fn setReadMask(&self, read_mask: u32);

    #[objc2::method(sel = "writeMask")]
    pub fn writeMask(&self) -> u32;

    #[objc2::method(sel = "setWriteMask:")]
    pub fn setWriteMask(&self, write_mask: u32);
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLDepthStencilDescriptor")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLDepthStencilDescriptor;
}

#[cfg(feature = "Metal_MTLDepthStencilDescriptor")]
unsafe impl NSObjectProtocol for MTLDepthStencilDescriptor {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLDepthStencilDescriptor")]
    pub type MTLDepthStencilDescriptor;

    #[objc2::method(sel = "depthCompareFunction")]
    pub fn depthCompareFunction(&self) -> MTLCompareFunction;

    #[objc2::method(sel = "setDepthCompareFunction:")]
    pub fn setDepthCompareFunction(&self, depth_compare_function: MTLCompareFunction);

    #[objc2::method(sel = "isDepthWriteEnabled")]
    pub fn isDepthWriteEnabled(&self) -> bool;

    #[objc2::method(sel = "setDepthWriteEnabled:")]
    pub fn setDepthWriteEnabled(&self, depth_write_enabled: bool);

    #[cfg(feature = "Metal_MTLStencilDescriptor")]
    #[objc2::method(sel = "frontFaceStencil", managed = "Other")]
    pub fn frontFaceStencil(&self) -> Id<MTLStencilDescriptor>;

    #[cfg(feature = "Metal_MTLStencilDescriptor")]
    #[objc2::method(sel = "setFrontFaceStencil:")]
    pub fn setFrontFaceStencil(&self, front_face_stencil: Option<&MTLStencilDescriptor>);

    #[cfg(feature = "Metal_MTLStencilDescriptor")]
    #[objc2::method(sel = "backFaceStencil", managed = "Other")]
    pub fn backFaceStencil(&self) -> Id<MTLStencilDescriptor>;

    #[cfg(feature = "Metal_MTLStencilDescriptor")]
    #[objc2::method(sel = "setBackFaceStencil:")]
    pub fn setBackFaceStencil(&self, back_face_stencil: Option<&MTLStencilDescriptor>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "label", managed = "Other")]
    pub fn label(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setLabel:")]
    pub fn setLabel(&self, label: Option<&NSString>);
}

#[objc2::protocol]
pub unsafe trait MTLDepthStencilState: NSObjectProtocol {
    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "label", managed = "Other")]
    fn label(&self) -> Option<Id<NSString>>;

    #[objc2::method(sel = "device", managed = "Other")]
    fn device(&self) -> Id<ProtocolObject<dyn MTLDevice>>;
}
