//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;
use crate::Metal::*;

#[ns_enum]
#[underlying(NSUInteger)]
pub enum MTLBlendFactor {
    MTLBlendFactorZero = 0,
    MTLBlendFactorOne = 1,
    MTLBlendFactorSourceColor = 2,
    MTLBlendFactorOneMinusSourceColor = 3,
    MTLBlendFactorSourceAlpha = 4,
    MTLBlendFactorOneMinusSourceAlpha = 5,
    MTLBlendFactorDestinationColor = 6,
    MTLBlendFactorOneMinusDestinationColor = 7,
    MTLBlendFactorDestinationAlpha = 8,
    MTLBlendFactorOneMinusDestinationAlpha = 9,
    MTLBlendFactorSourceAlphaSaturated = 10,
    MTLBlendFactorBlendColor = 11,
    MTLBlendFactorOneMinusBlendColor = 12,
    MTLBlendFactorBlendAlpha = 13,
    MTLBlendFactorOneMinusBlendAlpha = 14,
    MTLBlendFactorSource1Color = 15,
    MTLBlendFactorOneMinusSource1Color = 16,
    MTLBlendFactorSource1Alpha = 17,
    MTLBlendFactorOneMinusSource1Alpha = 18,
}

#[ns_enum]
#[underlying(NSUInteger)]
pub enum MTLBlendOperation {
    MTLBlendOperationAdd = 0,
    MTLBlendOperationSubtract = 1,
    MTLBlendOperationReverseSubtract = 2,
    MTLBlendOperationMin = 3,
    MTLBlendOperationMax = 4,
}

#[ns_options]
#[underlying(NSUInteger)]
pub enum MTLColorWriteMask {
    MTLColorWriteMaskNone = 0,
    MTLColorWriteMaskRed = 0x1 << 3,
    MTLColorWriteMaskGreen = 0x1 << 2,
    MTLColorWriteMaskBlue = 0x1 << 1,
    MTLColorWriteMaskAlpha = 0x1 << 0,
    MTLColorWriteMaskAll = 0xf,
}

#[ns_enum]
#[underlying(NSUInteger)]
pub enum MTLPrimitiveTopologyClass {
    MTLPrimitiveTopologyClassUnspecified = 0,
    MTLPrimitiveTopologyClassPoint = 1,
    MTLPrimitiveTopologyClassLine = 2,
    MTLPrimitiveTopologyClassTriangle = 3,
}

#[ns_enum]
#[underlying(NSUInteger)]
pub enum MTLTessellationPartitionMode {
    MTLTessellationPartitionModePow2 = 0,
    MTLTessellationPartitionModeInteger = 1,
    MTLTessellationPartitionModeFractionalOdd = 2,
    MTLTessellationPartitionModeFractionalEven = 3,
}

#[ns_enum]
#[underlying(NSUInteger)]
pub enum MTLTessellationFactorStepFunction {
    MTLTessellationFactorStepFunctionConstant = 0,
    MTLTessellationFactorStepFunctionPerPatch = 1,
    MTLTessellationFactorStepFunctionPerInstance = 2,
    MTLTessellationFactorStepFunctionPerPatchAndPerInstance = 3,
}

#[ns_enum]
#[underlying(NSUInteger)]
pub enum MTLTessellationFactorFormat {
    MTLTessellationFactorFormatHalf = 0,
}

#[ns_enum]
#[underlying(NSUInteger)]
pub enum MTLTessellationControlPointIndexType {
    MTLTessellationControlPointIndexTypeNone = 0,
    MTLTessellationControlPointIndexTypeUInt16 = 1,
    MTLTessellationControlPointIndexTypeUInt32 = 2,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLRenderPipelineColorAttachmentDescriptor")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLRenderPipelineColorAttachmentDescriptor;
}

#[cfg(feature = "Metal_MTLRenderPipelineColorAttachmentDescriptor")]
unsafe impl NSObjectProtocol for MTLRenderPipelineColorAttachmentDescriptor {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLRenderPipelineColorAttachmentDescriptor")]
    pub type MTLRenderPipelineColorAttachmentDescriptor;

    #[objc2::method(sel = "pixelFormat")]
    pub fn pixelFormat(&self) -> MTLPixelFormat;

    #[objc2::method(sel = "setPixelFormat:")]
    pub fn setPixelFormat(&self, pixel_format: MTLPixelFormat);

    #[objc2::method(sel = "isBlendingEnabled")]
    pub fn isBlendingEnabled(&self) -> bool;

    #[objc2::method(sel = "setBlendingEnabled:")]
    pub fn setBlendingEnabled(&self, blending_enabled: bool);

    #[objc2::method(sel = "sourceRGBBlendFactor")]
    pub fn sourceRGBBlendFactor(&self) -> MTLBlendFactor;

    #[objc2::method(sel = "setSourceRGBBlendFactor:")]
    pub fn setSourceRGBBlendFactor(&self, source_rgb_blend_factor: MTLBlendFactor);

    #[objc2::method(sel = "destinationRGBBlendFactor")]
    pub fn destinationRGBBlendFactor(&self) -> MTLBlendFactor;

    #[objc2::method(sel = "setDestinationRGBBlendFactor:")]
    pub fn setDestinationRGBBlendFactor(&self, destination_rgb_blend_factor: MTLBlendFactor);

    #[objc2::method(sel = "rgbBlendOperation")]
    pub fn rgbBlendOperation(&self) -> MTLBlendOperation;

    #[objc2::method(sel = "setRgbBlendOperation:")]
    pub fn setRgbBlendOperation(&self, rgb_blend_operation: MTLBlendOperation);

    #[objc2::method(sel = "sourceAlphaBlendFactor")]
    pub fn sourceAlphaBlendFactor(&self) -> MTLBlendFactor;

    #[objc2::method(sel = "setSourceAlphaBlendFactor:")]
    pub fn setSourceAlphaBlendFactor(&self, source_alpha_blend_factor: MTLBlendFactor);

    #[objc2::method(sel = "destinationAlphaBlendFactor")]
    pub fn destinationAlphaBlendFactor(&self) -> MTLBlendFactor;

    #[objc2::method(sel = "setDestinationAlphaBlendFactor:")]
    pub fn setDestinationAlphaBlendFactor(&self, destination_alpha_blend_factor: MTLBlendFactor);

    #[objc2::method(sel = "alphaBlendOperation")]
    pub fn alphaBlendOperation(&self) -> MTLBlendOperation;

    #[objc2::method(sel = "setAlphaBlendOperation:")]
    pub fn setAlphaBlendOperation(&self, alpha_blend_operation: MTLBlendOperation);

    #[objc2::method(sel = "writeMask")]
    pub fn writeMask(&self) -> MTLColorWriteMask;

    #[objc2::method(sel = "setWriteMask:")]
    pub fn setWriteMask(&self, write_mask: MTLColorWriteMask);
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLRenderPipelineReflection")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLRenderPipelineReflection;
}

#[cfg(feature = "Metal_MTLRenderPipelineReflection")]
unsafe impl NSObjectProtocol for MTLRenderPipelineReflection {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLRenderPipelineReflection")]
    pub type MTLRenderPipelineReflection;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "vertexBindings", managed = "Other")]
    pub unsafe fn vertexBindings(&self) -> Id<NSArray<ProtocolObject<dyn MTLBinding>>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "fragmentBindings", managed = "Other")]
    pub unsafe fn fragmentBindings(&self) -> Id<NSArray<ProtocolObject<dyn MTLBinding>>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "tileBindings", managed = "Other")]
    pub unsafe fn tileBindings(&self) -> Id<NSArray<ProtocolObject<dyn MTLBinding>>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "objectBindings", managed = "Other")]
    pub unsafe fn objectBindings(&self) -> Id<NSArray<ProtocolObject<dyn MTLBinding>>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "meshBindings", managed = "Other")]
    pub unsafe fn meshBindings(&self) -> Id<NSArray<ProtocolObject<dyn MTLBinding>>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Metal_MTLArgument"))]
    #[deprecated]
    #[objc2::method(sel = "vertexArguments", managed = "Other")]
    pub fn vertexArguments(&self) -> Option<Id<NSArray<MTLArgument>>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Metal_MTLArgument"))]
    #[deprecated]
    #[objc2::method(sel = "fragmentArguments", managed = "Other")]
    pub fn fragmentArguments(&self) -> Option<Id<NSArray<MTLArgument>>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Metal_MTLArgument"))]
    #[deprecated]
    #[objc2::method(sel = "tileArguments", managed = "Other")]
    pub fn tileArguments(&self) -> Option<Id<NSArray<MTLArgument>>>;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLRenderPipelineDescriptor")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLRenderPipelineDescriptor;
}

#[cfg(feature = "Metal_MTLRenderPipelineDescriptor")]
unsafe impl NSObjectProtocol for MTLRenderPipelineDescriptor {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLRenderPipelineDescriptor")]
    pub type MTLRenderPipelineDescriptor;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "label", managed = "Other")]
    pub fn label(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setLabel:")]
    pub fn setLabel(&self, label: Option<&NSString>);

    #[objc2::method(sel = "vertexFunction", managed = "Other")]
    pub fn vertexFunction(&self) -> Option<Id<ProtocolObject<dyn MTLFunction>>>;

    #[objc2::method(sel = "setVertexFunction:")]
    pub fn setVertexFunction(&self, vertex_function: Option<&ProtocolObject<dyn MTLFunction>>);

    #[objc2::method(sel = "fragmentFunction", managed = "Other")]
    pub fn fragmentFunction(&self) -> Option<Id<ProtocolObject<dyn MTLFunction>>>;

    #[objc2::method(sel = "setFragmentFunction:")]
    pub fn setFragmentFunction(&self, fragment_function: Option<&ProtocolObject<dyn MTLFunction>>);

    #[cfg(feature = "Metal_MTLVertexDescriptor")]
    #[objc2::method(sel = "vertexDescriptor", managed = "Other")]
    pub fn vertexDescriptor(&self) -> Option<Id<MTLVertexDescriptor>>;

    #[cfg(feature = "Metal_MTLVertexDescriptor")]
    #[objc2::method(sel = "setVertexDescriptor:")]
    pub fn setVertexDescriptor(&self, vertex_descriptor: Option<&MTLVertexDescriptor>);

    #[deprecated]
    #[objc2::method(sel = "sampleCount")]
    pub fn sampleCount(&self) -> NSUInteger;

    #[deprecated]
    #[objc2::method(sel = "setSampleCount:")]
    pub fn setSampleCount(&self, sample_count: NSUInteger);

    #[objc2::method(sel = "rasterSampleCount")]
    pub fn rasterSampleCount(&self) -> NSUInteger;

    #[objc2::method(sel = "setRasterSampleCount:")]
    pub fn setRasterSampleCount(&self, raster_sample_count: NSUInteger);

    #[objc2::method(sel = "isAlphaToCoverageEnabled")]
    pub fn isAlphaToCoverageEnabled(&self) -> bool;

    #[objc2::method(sel = "setAlphaToCoverageEnabled:")]
    pub fn setAlphaToCoverageEnabled(&self, alpha_to_coverage_enabled: bool);

    #[objc2::method(sel = "isAlphaToOneEnabled")]
    pub fn isAlphaToOneEnabled(&self) -> bool;

    #[objc2::method(sel = "setAlphaToOneEnabled:")]
    pub fn setAlphaToOneEnabled(&self, alpha_to_one_enabled: bool);

    #[objc2::method(sel = "isRasterizationEnabled")]
    pub fn isRasterizationEnabled(&self) -> bool;

    #[objc2::method(sel = "setRasterizationEnabled:")]
    pub fn setRasterizationEnabled(&self, rasterization_enabled: bool);

    #[objc2::method(sel = "maxVertexAmplificationCount")]
    pub fn maxVertexAmplificationCount(&self) -> NSUInteger;

    #[objc2::method(sel = "setMaxVertexAmplificationCount:")]
    pub unsafe fn setMaxVertexAmplificationCount(&self, max_vertex_amplification_count: NSUInteger);

    #[cfg(feature = "Metal_MTLRenderPipelineColorAttachmentDescriptorArray")]
    #[objc2::method(sel = "colorAttachments", managed = "Other")]
    pub fn colorAttachments(&self) -> Id<MTLRenderPipelineColorAttachmentDescriptorArray>;

    #[objc2::method(sel = "depthAttachmentPixelFormat")]
    pub fn depthAttachmentPixelFormat(&self) -> MTLPixelFormat;

    #[objc2::method(sel = "setDepthAttachmentPixelFormat:")]
    pub fn setDepthAttachmentPixelFormat(&self, depth_attachment_pixel_format: MTLPixelFormat);

    #[objc2::method(sel = "stencilAttachmentPixelFormat")]
    pub fn stencilAttachmentPixelFormat(&self) -> MTLPixelFormat;

    #[objc2::method(sel = "setStencilAttachmentPixelFormat:")]
    pub fn setStencilAttachmentPixelFormat(&self, stencil_attachment_pixel_format: MTLPixelFormat);

    #[objc2::method(sel = "inputPrimitiveTopology")]
    pub fn inputPrimitiveTopology(&self) -> MTLPrimitiveTopologyClass;

    #[objc2::method(sel = "setInputPrimitiveTopology:")]
    pub unsafe fn setInputPrimitiveTopology(
        &self,
        input_primitive_topology: MTLPrimitiveTopologyClass,
    );

    #[objc2::method(sel = "tessellationPartitionMode")]
    pub fn tessellationPartitionMode(&self) -> MTLTessellationPartitionMode;

    #[objc2::method(sel = "setTessellationPartitionMode:")]
    pub unsafe fn setTessellationPartitionMode(
        &self,
        tessellation_partition_mode: MTLTessellationPartitionMode,
    );

    #[objc2::method(sel = "maxTessellationFactor")]
    pub fn maxTessellationFactor(&self) -> NSUInteger;

    #[objc2::method(sel = "setMaxTessellationFactor:")]
    pub unsafe fn setMaxTessellationFactor(&self, max_tessellation_factor: NSUInteger);

    #[objc2::method(sel = "isTessellationFactorScaleEnabled")]
    pub fn isTessellationFactorScaleEnabled(&self) -> bool;

    #[objc2::method(sel = "setTessellationFactorScaleEnabled:")]
    pub fn setTessellationFactorScaleEnabled(&self, tessellation_factor_scale_enabled: bool);

    #[objc2::method(sel = "tessellationFactorFormat")]
    pub fn tessellationFactorFormat(&self) -> MTLTessellationFactorFormat;

    #[objc2::method(sel = "setTessellationFactorFormat:")]
    pub fn setTessellationFactorFormat(
        &self,
        tessellation_factor_format: MTLTessellationFactorFormat,
    );

    #[objc2::method(sel = "tessellationControlPointIndexType")]
    pub fn tessellationControlPointIndexType(&self) -> MTLTessellationControlPointIndexType;

    #[objc2::method(sel = "setTessellationControlPointIndexType:")]
    pub unsafe fn setTessellationControlPointIndexType(
        &self,
        tessellation_control_point_index_type: MTLTessellationControlPointIndexType,
    );

    #[objc2::method(sel = "tessellationFactorStepFunction")]
    pub fn tessellationFactorStepFunction(&self) -> MTLTessellationFactorStepFunction;

    #[objc2::method(sel = "setTessellationFactorStepFunction:")]
    pub fn setTessellationFactorStepFunction(
        &self,
        tessellation_factor_step_function: MTLTessellationFactorStepFunction,
    );

    #[objc2::method(sel = "tessellationOutputWindingOrder")]
    pub fn tessellationOutputWindingOrder(&self) -> MTLWinding;

    #[objc2::method(sel = "setTessellationOutputWindingOrder:")]
    pub fn setTessellationOutputWindingOrder(&self, tessellation_output_winding_order: MTLWinding);

    #[cfg(feature = "Metal_MTLPipelineBufferDescriptorArray")]
    #[objc2::method(sel = "vertexBuffers", managed = "Other")]
    pub fn vertexBuffers(&self) -> Id<MTLPipelineBufferDescriptorArray>;

    #[cfg(feature = "Metal_MTLPipelineBufferDescriptorArray")]
    #[objc2::method(sel = "fragmentBuffers", managed = "Other")]
    pub fn fragmentBuffers(&self) -> Id<MTLPipelineBufferDescriptorArray>;

    #[objc2::method(sel = "supportIndirectCommandBuffers")]
    pub fn supportIndirectCommandBuffers(&self) -> bool;

    #[objc2::method(sel = "setSupportIndirectCommandBuffers:")]
    pub fn setSupportIndirectCommandBuffers(&self, support_indirect_command_buffers: bool);

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "binaryArchives", managed = "Other")]
    pub fn binaryArchives(&self) -> Option<Id<NSArray<ProtocolObject<dyn MTLBinaryArchive>>>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "setBinaryArchives:")]
    pub fn setBinaryArchives(
        &self,
        binary_archives: Option<&NSArray<ProtocolObject<dyn MTLBinaryArchive>>>,
    );

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "vertexPreloadedLibraries", managed = "Other")]
    pub fn vertexPreloadedLibraries(&self) -> Id<NSArray<ProtocolObject<dyn MTLDynamicLibrary>>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "setVertexPreloadedLibraries:")]
    pub fn setVertexPreloadedLibraries(
        &self,
        vertex_preloaded_libraries: &NSArray<ProtocolObject<dyn MTLDynamicLibrary>>,
    );

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "fragmentPreloadedLibraries", managed = "Other")]
    pub fn fragmentPreloadedLibraries(&self) -> Id<NSArray<ProtocolObject<dyn MTLDynamicLibrary>>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "setFragmentPreloadedLibraries:")]
    pub fn setFragmentPreloadedLibraries(
        &self,
        fragment_preloaded_libraries: &NSArray<ProtocolObject<dyn MTLDynamicLibrary>>,
    );

    #[cfg(feature = "Metal_MTLLinkedFunctions")]
    #[objc2::method(sel = "vertexLinkedFunctions", managed = "Other")]
    pub fn vertexLinkedFunctions(&self) -> Id<MTLLinkedFunctions>;

    #[cfg(feature = "Metal_MTLLinkedFunctions")]
    #[objc2::method(sel = "setVertexLinkedFunctions:")]
    pub fn setVertexLinkedFunctions(&self, vertex_linked_functions: Option<&MTLLinkedFunctions>);

    #[cfg(feature = "Metal_MTLLinkedFunctions")]
    #[objc2::method(sel = "fragmentLinkedFunctions", managed = "Other")]
    pub fn fragmentLinkedFunctions(&self) -> Id<MTLLinkedFunctions>;

    #[cfg(feature = "Metal_MTLLinkedFunctions")]
    #[objc2::method(sel = "setFragmentLinkedFunctions:")]
    pub fn setFragmentLinkedFunctions(
        &self,
        fragment_linked_functions: Option<&MTLLinkedFunctions>,
    );

    #[objc2::method(sel = "supportAddingVertexBinaryFunctions")]
    pub fn supportAddingVertexBinaryFunctions(&self) -> bool;

    #[objc2::method(sel = "setSupportAddingVertexBinaryFunctions:")]
    pub fn setSupportAddingVertexBinaryFunctions(
        &self,
        support_adding_vertex_binary_functions: bool,
    );

    #[objc2::method(sel = "supportAddingFragmentBinaryFunctions")]
    pub fn supportAddingFragmentBinaryFunctions(&self) -> bool;

    #[objc2::method(sel = "setSupportAddingFragmentBinaryFunctions:")]
    pub fn setSupportAddingFragmentBinaryFunctions(
        &self,
        support_adding_fragment_binary_functions: bool,
    );

    #[objc2::method(sel = "maxVertexCallStackDepth")]
    pub fn maxVertexCallStackDepth(&self) -> NSUInteger;

    #[objc2::method(sel = "setMaxVertexCallStackDepth:")]
    pub fn setMaxVertexCallStackDepth(&self, max_vertex_call_stack_depth: NSUInteger);

    #[objc2::method(sel = "maxFragmentCallStackDepth")]
    pub fn maxFragmentCallStackDepth(&self) -> NSUInteger;

    #[objc2::method(sel = "setMaxFragmentCallStackDepth:")]
    pub fn setMaxFragmentCallStackDepth(&self, max_fragment_call_stack_depth: NSUInteger);

    #[objc2::method(sel = "reset")]
    pub fn reset(&self);
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLRenderPipelineFunctionsDescriptor")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLRenderPipelineFunctionsDescriptor;
}

#[cfg(feature = "Metal_MTLRenderPipelineFunctionsDescriptor")]
unsafe impl NSObjectProtocol for MTLRenderPipelineFunctionsDescriptor {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLRenderPipelineFunctionsDescriptor")]
    pub type MTLRenderPipelineFunctionsDescriptor;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "vertexAdditionalBinaryFunctions", managed = "Other")]
    pub unsafe fn vertexAdditionalBinaryFunctions(
        &self,
    ) -> Option<Id<NSArray<ProtocolObject<dyn MTLFunction>>>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "setVertexAdditionalBinaryFunctions:")]
    pub unsafe fn setVertexAdditionalBinaryFunctions(
        &self,
        vertex_additional_binary_functions: Option<&NSArray<ProtocolObject<dyn MTLFunction>>>,
    );

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "fragmentAdditionalBinaryFunctions", managed = "Other")]
    pub unsafe fn fragmentAdditionalBinaryFunctions(
        &self,
    ) -> Option<Id<NSArray<ProtocolObject<dyn MTLFunction>>>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "setFragmentAdditionalBinaryFunctions:")]
    pub unsafe fn setFragmentAdditionalBinaryFunctions(
        &self,
        fragment_additional_binary_functions: Option<&NSArray<ProtocolObject<dyn MTLFunction>>>,
    );

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "tileAdditionalBinaryFunctions", managed = "Other")]
    pub unsafe fn tileAdditionalBinaryFunctions(
        &self,
    ) -> Option<Id<NSArray<ProtocolObject<dyn MTLFunction>>>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "setTileAdditionalBinaryFunctions:")]
    pub unsafe fn setTileAdditionalBinaryFunctions(
        &self,
        tile_additional_binary_functions: Option<&NSArray<ProtocolObject<dyn MTLFunction>>>,
    );
}

#[objc2::protocol]
pub unsafe trait MTLRenderPipelineState: NSObjectProtocol {
    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "label", managed = "Other")]
    unsafe fn label(&self) -> Option<Id<NSString>>;

    #[objc2::method(sel = "device", managed = "Other")]
    unsafe fn device(&self) -> Id<ProtocolObject<dyn MTLDevice>>;

    #[objc2::method(sel = "maxTotalThreadsPerThreadgroup")]
    unsafe fn maxTotalThreadsPerThreadgroup(&self) -> NSUInteger;

    #[objc2::method(sel = "threadgroupSizeMatchesTileSize")]
    unsafe fn threadgroupSizeMatchesTileSize(&self) -> bool;

    #[objc2::method(sel = "imageblockSampleLength")]
    unsafe fn imageblockSampleLength(&self) -> NSUInteger;

    #[objc2::method(sel = "imageblockMemoryLengthForDimensions:")]
    unsafe fn imageblockMemoryLengthForDimensions(
        &self,
        imageblock_dimensions: MTLSize,
    ) -> NSUInteger;

    #[objc2::method(sel = "supportIndirectCommandBuffers")]
    unsafe fn supportIndirectCommandBuffers(&self) -> bool;

    #[objc2::method(sel = "maxTotalThreadsPerObjectThreadgroup")]
    unsafe fn maxTotalThreadsPerObjectThreadgroup(&self) -> NSUInteger;

    #[objc2::method(sel = "maxTotalThreadsPerMeshThreadgroup")]
    unsafe fn maxTotalThreadsPerMeshThreadgroup(&self) -> NSUInteger;

    #[objc2::method(sel = "objectThreadExecutionWidth")]
    unsafe fn objectThreadExecutionWidth(&self) -> NSUInteger;

    #[objc2::method(sel = "meshThreadExecutionWidth")]
    unsafe fn meshThreadExecutionWidth(&self) -> NSUInteger;

    #[objc2::method(sel = "maxTotalThreadgroupsPerMeshGrid")]
    unsafe fn maxTotalThreadgroupsPerMeshGrid(&self) -> NSUInteger;

    #[objc2::method(sel = "gpuResourceID")]
    unsafe fn gpuResourceID(&self) -> MTLResourceID;

    #[objc2::method(sel = "functionHandleWithFunction:stage:", managed = "Other")]
    unsafe fn functionHandleWithFunction_stage(
        &self,
        function: &ProtocolObject<dyn MTLFunction>,
        stage: MTLRenderStages,
    ) -> Option<Id<ProtocolObject<dyn MTLFunctionHandle>>>;

    #[cfg(feature = "Metal_MTLVisibleFunctionTableDescriptor")]
    #[objc2::method(sel = "newVisibleFunctionTableWithDescriptor:stage:", managed = "New")]
    unsafe fn newVisibleFunctionTableWithDescriptor_stage(
        &self,
        descriptor: &MTLVisibleFunctionTableDescriptor,
        stage: MTLRenderStages,
    ) -> Option<Id<ProtocolObject<dyn MTLVisibleFunctionTable>>>;

    #[cfg(feature = "Metal_MTLIntersectionFunctionTableDescriptor")]
    #[objc2::method(
        sel = "newIntersectionFunctionTableWithDescriptor:stage:",
        managed = "New"
    )]
    unsafe fn newIntersectionFunctionTableWithDescriptor_stage(
        &self,
        descriptor: &MTLIntersectionFunctionTableDescriptor,
        stage: MTLRenderStages,
    ) -> Option<Id<ProtocolObject<dyn MTLIntersectionFunctionTable>>>;

    #[cfg(all(
        feature = "Foundation_NSError",
        feature = "Metal_MTLRenderPipelineFunctionsDescriptor"
    ))]
    #[objc2::method(
        sel = "newRenderPipelineStateWithAdditionalBinaryFunctions:error:",
        managed = "New",
        throws
    )]
    unsafe fn newRenderPipelineStateWithAdditionalBinaryFunctions_error(
        &self,
        additional_binary_functions: &MTLRenderPipelineFunctionsDescriptor,
    ) -> Result<Id<ProtocolObject<dyn MTLRenderPipelineState>>, Id<NSError>>;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLRenderPipelineColorAttachmentDescriptorArray")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLRenderPipelineColorAttachmentDescriptorArray;
}

#[cfg(feature = "Metal_MTLRenderPipelineColorAttachmentDescriptorArray")]
unsafe impl NSObjectProtocol for MTLRenderPipelineColorAttachmentDescriptorArray {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLRenderPipelineColorAttachmentDescriptorArray")]
    pub type MTLRenderPipelineColorAttachmentDescriptorArray;

    #[cfg(feature = "Metal_MTLRenderPipelineColorAttachmentDescriptor")]
    #[objc2::method(sel = "objectAtIndexedSubscript:", managed = "Other")]
    pub unsafe fn objectAtIndexedSubscript(
        &self,
        attachment_index: NSUInteger,
    ) -> Id<MTLRenderPipelineColorAttachmentDescriptor>;

    #[cfg(feature = "Metal_MTLRenderPipelineColorAttachmentDescriptor")]
    #[objc2::method(sel = "setObject:atIndexedSubscript:")]
    pub unsafe fn setObject_atIndexedSubscript(
        &self,
        attachment: Option<&MTLRenderPipelineColorAttachmentDescriptor>,
        attachment_index: NSUInteger,
    );
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLTileRenderPipelineColorAttachmentDescriptor")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLTileRenderPipelineColorAttachmentDescriptor;
}

#[cfg(feature = "Metal_MTLTileRenderPipelineColorAttachmentDescriptor")]
unsafe impl NSObjectProtocol for MTLTileRenderPipelineColorAttachmentDescriptor {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLTileRenderPipelineColorAttachmentDescriptor")]
    pub type MTLTileRenderPipelineColorAttachmentDescriptor;

    #[objc2::method(sel = "pixelFormat")]
    pub unsafe fn pixelFormat(&self) -> MTLPixelFormat;

    #[objc2::method(sel = "setPixelFormat:")]
    pub unsafe fn setPixelFormat(&self, pixel_format: MTLPixelFormat);
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLTileRenderPipelineColorAttachmentDescriptorArray")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLTileRenderPipelineColorAttachmentDescriptorArray;
}

#[cfg(feature = "Metal_MTLTileRenderPipelineColorAttachmentDescriptorArray")]
unsafe impl NSObjectProtocol for MTLTileRenderPipelineColorAttachmentDescriptorArray {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLTileRenderPipelineColorAttachmentDescriptorArray")]
    pub type MTLTileRenderPipelineColorAttachmentDescriptorArray;

    #[cfg(feature = "Metal_MTLTileRenderPipelineColorAttachmentDescriptor")]
    #[objc2::method(sel = "objectAtIndexedSubscript:", managed = "Other")]
    pub unsafe fn objectAtIndexedSubscript(
        &self,
        attachment_index: NSUInteger,
    ) -> Id<MTLTileRenderPipelineColorAttachmentDescriptor>;

    #[cfg(feature = "Metal_MTLTileRenderPipelineColorAttachmentDescriptor")]
    #[objc2::method(sel = "setObject:atIndexedSubscript:")]
    pub unsafe fn setObject_atIndexedSubscript(
        &self,
        attachment: &MTLTileRenderPipelineColorAttachmentDescriptor,
        attachment_index: NSUInteger,
    );
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLTileRenderPipelineDescriptor")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLTileRenderPipelineDescriptor;
}

#[cfg(feature = "Metal_MTLTileRenderPipelineDescriptor")]
unsafe impl NSObjectProtocol for MTLTileRenderPipelineDescriptor {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLTileRenderPipelineDescriptor")]
    pub type MTLTileRenderPipelineDescriptor;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "label", managed = "Other")]
    pub unsafe fn label(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setLabel:")]
    pub unsafe fn setLabel(&self, label: Option<&NSString>);

    #[objc2::method(sel = "tileFunction", managed = "Other")]
    pub unsafe fn tileFunction(&self) -> Id<ProtocolObject<dyn MTLFunction>>;

    #[objc2::method(sel = "setTileFunction:")]
    pub unsafe fn setTileFunction(&self, tile_function: &ProtocolObject<dyn MTLFunction>);

    #[objc2::method(sel = "rasterSampleCount")]
    pub unsafe fn rasterSampleCount(&self) -> NSUInteger;

    #[objc2::method(sel = "setRasterSampleCount:")]
    pub unsafe fn setRasterSampleCount(&self, raster_sample_count: NSUInteger);

    #[cfg(feature = "Metal_MTLTileRenderPipelineColorAttachmentDescriptorArray")]
    #[objc2::method(sel = "colorAttachments", managed = "Other")]
    pub unsafe fn colorAttachments(
        &self,
    ) -> Id<MTLTileRenderPipelineColorAttachmentDescriptorArray>;

    #[objc2::method(sel = "threadgroupSizeMatchesTileSize")]
    pub unsafe fn threadgroupSizeMatchesTileSize(&self) -> bool;

    #[objc2::method(sel = "setThreadgroupSizeMatchesTileSize:")]
    pub unsafe fn setThreadgroupSizeMatchesTileSize(
        &self,
        threadgroup_size_matches_tile_size: bool,
    );

    #[cfg(feature = "Metal_MTLPipelineBufferDescriptorArray")]
    #[objc2::method(sel = "tileBuffers", managed = "Other")]
    pub unsafe fn tileBuffers(&self) -> Id<MTLPipelineBufferDescriptorArray>;

    #[objc2::method(sel = "maxTotalThreadsPerThreadgroup")]
    pub unsafe fn maxTotalThreadsPerThreadgroup(&self) -> NSUInteger;

    #[objc2::method(sel = "setMaxTotalThreadsPerThreadgroup:")]
    pub unsafe fn setMaxTotalThreadsPerThreadgroup(
        &self,
        max_total_threads_per_threadgroup: NSUInteger,
    );

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "binaryArchives", managed = "Other")]
    pub unsafe fn binaryArchives(
        &self,
    ) -> Option<Id<NSArray<ProtocolObject<dyn MTLBinaryArchive>>>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "setBinaryArchives:")]
    pub unsafe fn setBinaryArchives(
        &self,
        binary_archives: Option<&NSArray<ProtocolObject<dyn MTLBinaryArchive>>>,
    );

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "preloadedLibraries", managed = "Other")]
    pub unsafe fn preloadedLibraries(&self) -> Id<NSArray<ProtocolObject<dyn MTLDynamicLibrary>>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "setPreloadedLibraries:")]
    pub unsafe fn setPreloadedLibraries(
        &self,
        preloaded_libraries: &NSArray<ProtocolObject<dyn MTLDynamicLibrary>>,
    );

    #[cfg(feature = "Metal_MTLLinkedFunctions")]
    #[objc2::method(sel = "linkedFunctions", managed = "Other")]
    pub unsafe fn linkedFunctions(&self) -> Id<MTLLinkedFunctions>;

    #[cfg(feature = "Metal_MTLLinkedFunctions")]
    #[objc2::method(sel = "setLinkedFunctions:")]
    pub unsafe fn setLinkedFunctions(&self, linked_functions: Option<&MTLLinkedFunctions>);

    #[objc2::method(sel = "supportAddingBinaryFunctions")]
    pub unsafe fn supportAddingBinaryFunctions(&self) -> bool;

    #[objc2::method(sel = "setSupportAddingBinaryFunctions:")]
    pub unsafe fn setSupportAddingBinaryFunctions(&self, support_adding_binary_functions: bool);

    #[objc2::method(sel = "maxCallStackDepth")]
    pub unsafe fn maxCallStackDepth(&self) -> NSUInteger;

    #[objc2::method(sel = "setMaxCallStackDepth:")]
    pub unsafe fn setMaxCallStackDepth(&self, max_call_stack_depth: NSUInteger);

    #[objc2::method(sel = "reset")]
    pub unsafe fn reset(&self);
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLMeshRenderPipelineDescriptor")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLMeshRenderPipelineDescriptor;
}

#[cfg(feature = "Metal_MTLMeshRenderPipelineDescriptor")]
unsafe impl NSObjectProtocol for MTLMeshRenderPipelineDescriptor {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLMeshRenderPipelineDescriptor")]
    pub type MTLMeshRenderPipelineDescriptor;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "label", managed = "Other")]
    pub unsafe fn label(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setLabel:")]
    pub unsafe fn setLabel(&self, label: Option<&NSString>);

    #[objc2::method(sel = "objectFunction", managed = "Other")]
    pub unsafe fn objectFunction(&self) -> Option<Id<ProtocolObject<dyn MTLFunction>>>;

    #[objc2::method(sel = "setObjectFunction:")]
    pub unsafe fn setObjectFunction(
        &self,
        object_function: Option<&ProtocolObject<dyn MTLFunction>>,
    );

    #[objc2::method(sel = "meshFunction", managed = "Other")]
    pub unsafe fn meshFunction(&self) -> Option<Id<ProtocolObject<dyn MTLFunction>>>;

    #[objc2::method(sel = "setMeshFunction:")]
    pub unsafe fn setMeshFunction(&self, mesh_function: Option<&ProtocolObject<dyn MTLFunction>>);

    #[objc2::method(sel = "fragmentFunction", managed = "Other")]
    pub unsafe fn fragmentFunction(&self) -> Option<Id<ProtocolObject<dyn MTLFunction>>>;

    #[objc2::method(sel = "setFragmentFunction:")]
    pub unsafe fn setFragmentFunction(
        &self,
        fragment_function: Option<&ProtocolObject<dyn MTLFunction>>,
    );

    #[objc2::method(sel = "maxTotalThreadsPerObjectThreadgroup")]
    pub unsafe fn maxTotalThreadsPerObjectThreadgroup(&self) -> NSUInteger;

    #[objc2::method(sel = "setMaxTotalThreadsPerObjectThreadgroup:")]
    pub unsafe fn setMaxTotalThreadsPerObjectThreadgroup(
        &self,
        max_total_threads_per_object_threadgroup: NSUInteger,
    );

    #[objc2::method(sel = "maxTotalThreadsPerMeshThreadgroup")]
    pub unsafe fn maxTotalThreadsPerMeshThreadgroup(&self) -> NSUInteger;

    #[objc2::method(sel = "setMaxTotalThreadsPerMeshThreadgroup:")]
    pub unsafe fn setMaxTotalThreadsPerMeshThreadgroup(
        &self,
        max_total_threads_per_mesh_threadgroup: NSUInteger,
    );

    #[objc2::method(sel = "objectThreadgroupSizeIsMultipleOfThreadExecutionWidth")]
    pub unsafe fn objectThreadgroupSizeIsMultipleOfThreadExecutionWidth(&self) -> bool;

    #[objc2::method(sel = "setObjectThreadgroupSizeIsMultipleOfThreadExecutionWidth:")]
    pub unsafe fn setObjectThreadgroupSizeIsMultipleOfThreadExecutionWidth(
        &self,
        object_threadgroup_size_is_multiple_of_thread_execution_width: bool,
    );

    #[objc2::method(sel = "meshThreadgroupSizeIsMultipleOfThreadExecutionWidth")]
    pub unsafe fn meshThreadgroupSizeIsMultipleOfThreadExecutionWidth(&self) -> bool;

    #[objc2::method(sel = "setMeshThreadgroupSizeIsMultipleOfThreadExecutionWidth:")]
    pub unsafe fn setMeshThreadgroupSizeIsMultipleOfThreadExecutionWidth(
        &self,
        mesh_threadgroup_size_is_multiple_of_thread_execution_width: bool,
    );

    #[objc2::method(sel = "payloadMemoryLength")]
    pub unsafe fn payloadMemoryLength(&self) -> NSUInteger;

    #[objc2::method(sel = "setPayloadMemoryLength:")]
    pub unsafe fn setPayloadMemoryLength(&self, payload_memory_length: NSUInteger);

    #[objc2::method(sel = "maxTotalThreadgroupsPerMeshGrid")]
    pub unsafe fn maxTotalThreadgroupsPerMeshGrid(&self) -> NSUInteger;

    #[objc2::method(sel = "setMaxTotalThreadgroupsPerMeshGrid:")]
    pub unsafe fn setMaxTotalThreadgroupsPerMeshGrid(
        &self,
        max_total_threadgroups_per_mesh_grid: NSUInteger,
    );

    #[cfg(feature = "Metal_MTLPipelineBufferDescriptorArray")]
    #[objc2::method(sel = "objectBuffers", managed = "Other")]
    pub unsafe fn objectBuffers(&self) -> Id<MTLPipelineBufferDescriptorArray>;

    #[cfg(feature = "Metal_MTLPipelineBufferDescriptorArray")]
    #[objc2::method(sel = "meshBuffers", managed = "Other")]
    pub unsafe fn meshBuffers(&self) -> Id<MTLPipelineBufferDescriptorArray>;

    #[cfg(feature = "Metal_MTLPipelineBufferDescriptorArray")]
    #[objc2::method(sel = "fragmentBuffers", managed = "Other")]
    pub unsafe fn fragmentBuffers(&self) -> Id<MTLPipelineBufferDescriptorArray>;

    #[objc2::method(sel = "rasterSampleCount")]
    pub unsafe fn rasterSampleCount(&self) -> NSUInteger;

    #[objc2::method(sel = "setRasterSampleCount:")]
    pub unsafe fn setRasterSampleCount(&self, raster_sample_count: NSUInteger);

    #[objc2::method(sel = "isAlphaToCoverageEnabled")]
    pub unsafe fn isAlphaToCoverageEnabled(&self) -> bool;

    #[objc2::method(sel = "setAlphaToCoverageEnabled:")]
    pub unsafe fn setAlphaToCoverageEnabled(&self, alpha_to_coverage_enabled: bool);

    #[objc2::method(sel = "isAlphaToOneEnabled")]
    pub unsafe fn isAlphaToOneEnabled(&self) -> bool;

    #[objc2::method(sel = "setAlphaToOneEnabled:")]
    pub unsafe fn setAlphaToOneEnabled(&self, alpha_to_one_enabled: bool);

    #[objc2::method(sel = "isRasterizationEnabled")]
    pub unsafe fn isRasterizationEnabled(&self) -> bool;

    #[objc2::method(sel = "setRasterizationEnabled:")]
    pub unsafe fn setRasterizationEnabled(&self, rasterization_enabled: bool);

    #[objc2::method(sel = "maxVertexAmplificationCount")]
    pub unsafe fn maxVertexAmplificationCount(&self) -> NSUInteger;

    #[objc2::method(sel = "setMaxVertexAmplificationCount:")]
    pub unsafe fn setMaxVertexAmplificationCount(&self, max_vertex_amplification_count: NSUInteger);

    #[cfg(feature = "Metal_MTLRenderPipelineColorAttachmentDescriptorArray")]
    #[objc2::method(sel = "colorAttachments", managed = "Other")]
    pub unsafe fn colorAttachments(&self) -> Id<MTLRenderPipelineColorAttachmentDescriptorArray>;

    #[objc2::method(sel = "depthAttachmentPixelFormat")]
    pub unsafe fn depthAttachmentPixelFormat(&self) -> MTLPixelFormat;

    #[objc2::method(sel = "setDepthAttachmentPixelFormat:")]
    pub unsafe fn setDepthAttachmentPixelFormat(
        &self,
        depth_attachment_pixel_format: MTLPixelFormat,
    );

    #[objc2::method(sel = "stencilAttachmentPixelFormat")]
    pub unsafe fn stencilAttachmentPixelFormat(&self) -> MTLPixelFormat;

    #[objc2::method(sel = "setStencilAttachmentPixelFormat:")]
    pub unsafe fn setStencilAttachmentPixelFormat(
        &self,
        stencil_attachment_pixel_format: MTLPixelFormat,
    );

    #[objc2::method(sel = "reset")]
    pub unsafe fn reset(&self);
}
