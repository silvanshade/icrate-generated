//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;
use crate::Metal::*;

extern_struct!(
    #[encoding_name("?")]
    pub struct MTLClearColor {
        pub red: c_double,
        pub green: c_double,
        pub blue: c_double,
        pub alpha: c_double,
    }
);

inline_fn!(
    pub unsafe fn MTLClearColorMake(
        red: c_double,
        green: c_double,
        blue: c_double,
        alpha: c_double,
    ) -> MTLClearColor {
        todo!()
    }
);

#[ns_enum]
#[underlying(NSUInteger)]
pub enum MTLLoadAction {
    MTLLoadActionDontCare = 0,
    MTLLoadActionLoad = 1,
    MTLLoadActionClear = 2,
}

#[ns_enum]
#[underlying(NSUInteger)]
pub enum MTLStoreAction {
    MTLStoreActionDontCare = 0,
    MTLStoreActionStore = 1,
    MTLStoreActionMultisampleResolve = 2,
    MTLStoreActionStoreAndMultisampleResolve = 3,
    MTLStoreActionUnknown = 4,
    MTLStoreActionCustomSampleDepthStore = 5,
}

#[ns_options]
#[underlying(NSUInteger)]
pub enum MTLStoreActionOptions {
    MTLStoreActionOptionNone = 0,
    MTLStoreActionOptionCustomSamplePositions = 1 << 0,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLRenderPassAttachmentDescriptor")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLRenderPassAttachmentDescriptor;
}

#[cfg(feature = "Metal_MTLRenderPassAttachmentDescriptor")]
unsafe impl NSObjectProtocol for MTLRenderPassAttachmentDescriptor {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLRenderPassAttachmentDescriptor")]
    pub type MTLRenderPassAttachmentDescriptor;

    #[objc2::method(sel = "texture", managed = "Other")]
    pub fn texture(&self) -> Option<Id<ProtocolObject<dyn MTLTexture>>>;

    #[objc2::method(sel = "setTexture:")]
    pub fn setTexture(&self, texture: Option<&ProtocolObject<dyn MTLTexture>>);

    #[objc2::method(sel = "level")]
    pub fn level(&self) -> NSUInteger;

    #[objc2::method(sel = "setLevel:")]
    pub fn setLevel(&self, level: NSUInteger);

    #[objc2::method(sel = "slice")]
    pub fn slice(&self) -> NSUInteger;

    #[objc2::method(sel = "setSlice:")]
    pub fn setSlice(&self, slice: NSUInteger);

    #[objc2::method(sel = "depthPlane")]
    pub fn depthPlane(&self) -> NSUInteger;

    #[objc2::method(sel = "setDepthPlane:")]
    pub fn setDepthPlane(&self, depth_plane: NSUInteger);

    #[objc2::method(sel = "resolveTexture", managed = "Other")]
    pub fn resolveTexture(&self) -> Option<Id<ProtocolObject<dyn MTLTexture>>>;

    #[objc2::method(sel = "setResolveTexture:")]
    pub fn setResolveTexture(&self, resolve_texture: Option<&ProtocolObject<dyn MTLTexture>>);

    #[objc2::method(sel = "resolveLevel")]
    pub fn resolveLevel(&self) -> NSUInteger;

    #[objc2::method(sel = "setResolveLevel:")]
    pub fn setResolveLevel(&self, resolve_level: NSUInteger);

    #[objc2::method(sel = "resolveSlice")]
    pub fn resolveSlice(&self) -> NSUInteger;

    #[objc2::method(sel = "setResolveSlice:")]
    pub fn setResolveSlice(&self, resolve_slice: NSUInteger);

    #[objc2::method(sel = "resolveDepthPlane")]
    pub fn resolveDepthPlane(&self) -> NSUInteger;

    #[objc2::method(sel = "setResolveDepthPlane:")]
    pub fn setResolveDepthPlane(&self, resolve_depth_plane: NSUInteger);

    #[objc2::method(sel = "loadAction")]
    pub fn loadAction(&self) -> MTLLoadAction;

    #[objc2::method(sel = "setLoadAction:")]
    pub fn setLoadAction(&self, load_action: MTLLoadAction);

    #[objc2::method(sel = "storeAction")]
    pub fn storeAction(&self) -> MTLStoreAction;

    #[objc2::method(sel = "setStoreAction:")]
    pub fn setStoreAction(&self, store_action: MTLStoreAction);

    #[objc2::method(sel = "storeActionOptions")]
    pub fn storeActionOptions(&self) -> MTLStoreActionOptions;

    #[objc2::method(sel = "setStoreActionOptions:")]
    pub fn setStoreActionOptions(&self, store_action_options: MTLStoreActionOptions);
}

#[objc2::interface(
    unsafe super = MTLRenderPassAttachmentDescriptor,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLRenderPassColorAttachmentDescriptor")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLRenderPassColorAttachmentDescriptor;
}

#[cfg(feature = "Metal_MTLRenderPassColorAttachmentDescriptor")]
unsafe impl NSObjectProtocol for MTLRenderPassColorAttachmentDescriptor {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLRenderPassColorAttachmentDescriptor")]
    pub type MTLRenderPassColorAttachmentDescriptor;

    #[objc2::method(sel = "clearColor")]
    pub fn clearColor(&self) -> MTLClearColor;

    #[objc2::method(sel = "setClearColor:")]
    pub fn setClearColor(&self, clear_color: MTLClearColor);
}

#[ns_enum]
#[underlying(NSUInteger)]
pub enum MTLMultisampleDepthResolveFilter {
    MTLMultisampleDepthResolveFilterSample0 = 0,
    MTLMultisampleDepthResolveFilterMin = 1,
    MTLMultisampleDepthResolveFilterMax = 2,
}

#[objc2::interface(
    unsafe super = MTLRenderPassAttachmentDescriptor,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLRenderPassDepthAttachmentDescriptor")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLRenderPassDepthAttachmentDescriptor;
}

#[cfg(feature = "Metal_MTLRenderPassDepthAttachmentDescriptor")]
unsafe impl NSObjectProtocol for MTLRenderPassDepthAttachmentDescriptor {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLRenderPassDepthAttachmentDescriptor")]
    pub type MTLRenderPassDepthAttachmentDescriptor;

    #[objc2::method(sel = "clearDepth")]
    pub fn clearDepth(&self) -> c_double;

    #[objc2::method(sel = "setClearDepth:")]
    pub fn setClearDepth(&self, clear_depth: c_double);

    #[objc2::method(sel = "depthResolveFilter")]
    pub fn depthResolveFilter(&self) -> MTLMultisampleDepthResolveFilter;

    #[objc2::method(sel = "setDepthResolveFilter:")]
    pub fn setDepthResolveFilter(&self, depth_resolve_filter: MTLMultisampleDepthResolveFilter);
}

#[ns_enum]
#[underlying(NSUInteger)]
pub enum MTLMultisampleStencilResolveFilter {
    MTLMultisampleStencilResolveFilterSample0 = 0,
    MTLMultisampleStencilResolveFilterDepthResolvedSample = 1,
}

#[objc2::interface(
    unsafe super = MTLRenderPassAttachmentDescriptor,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLRenderPassStencilAttachmentDescriptor")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLRenderPassStencilAttachmentDescriptor;
}

#[cfg(feature = "Metal_MTLRenderPassStencilAttachmentDescriptor")]
unsafe impl NSObjectProtocol for MTLRenderPassStencilAttachmentDescriptor {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLRenderPassStencilAttachmentDescriptor")]
    pub type MTLRenderPassStencilAttachmentDescriptor;

    #[objc2::method(sel = "clearStencil")]
    pub fn clearStencil(&self) -> u32;

    #[objc2::method(sel = "setClearStencil:")]
    pub fn setClearStencil(&self, clear_stencil: u32);

    #[objc2::method(sel = "stencilResolveFilter")]
    pub fn stencilResolveFilter(&self) -> MTLMultisampleStencilResolveFilter;

    #[objc2::method(sel = "setStencilResolveFilter:")]
    pub fn setStencilResolveFilter(
        &self,
        stencil_resolve_filter: MTLMultisampleStencilResolveFilter,
    );
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLRenderPassColorAttachmentDescriptorArray")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLRenderPassColorAttachmentDescriptorArray;
}

#[cfg(feature = "Metal_MTLRenderPassColorAttachmentDescriptorArray")]
unsafe impl NSObjectProtocol for MTLRenderPassColorAttachmentDescriptorArray {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLRenderPassColorAttachmentDescriptorArray")]
    pub type MTLRenderPassColorAttachmentDescriptorArray;

    #[cfg(feature = "Metal_MTLRenderPassColorAttachmentDescriptor")]
    #[objc2::method(sel = "objectAtIndexedSubscript:", managed = "Other")]
    pub unsafe fn objectAtIndexedSubscript(
        &self,
        attachment_index: NSUInteger,
    ) -> Id<MTLRenderPassColorAttachmentDescriptor>;

    #[cfg(feature = "Metal_MTLRenderPassColorAttachmentDescriptor")]
    #[objc2::method(sel = "setObject:atIndexedSubscript:")]
    pub unsafe fn setObject_atIndexedSubscript(
        &self,
        attachment: Option<&MTLRenderPassColorAttachmentDescriptor>,
        attachment_index: NSUInteger,
    );
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLRenderPassSampleBufferAttachmentDescriptor")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLRenderPassSampleBufferAttachmentDescriptor;
}

#[cfg(feature = "Metal_MTLRenderPassSampleBufferAttachmentDescriptor")]
unsafe impl NSObjectProtocol for MTLRenderPassSampleBufferAttachmentDescriptor {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLRenderPassSampleBufferAttachmentDescriptor")]
    pub type MTLRenderPassSampleBufferAttachmentDescriptor;

    #[objc2::method(sel = "sampleBuffer", managed = "Other")]
    pub fn sampleBuffer(&self) -> Option<Id<ProtocolObject<dyn MTLCounterSampleBuffer>>>;

    #[objc2::method(sel = "setSampleBuffer:")]
    pub fn setSampleBuffer(
        &self,
        sample_buffer: Option<&ProtocolObject<dyn MTLCounterSampleBuffer>>,
    );

    #[objc2::method(sel = "startOfVertexSampleIndex")]
    pub fn startOfVertexSampleIndex(&self) -> NSUInteger;

    #[objc2::method(sel = "setStartOfVertexSampleIndex:")]
    pub unsafe fn setStartOfVertexSampleIndex(&self, start_of_vertex_sample_index: NSUInteger);

    #[objc2::method(sel = "endOfVertexSampleIndex")]
    pub fn endOfVertexSampleIndex(&self) -> NSUInteger;

    #[objc2::method(sel = "setEndOfVertexSampleIndex:")]
    pub unsafe fn setEndOfVertexSampleIndex(&self, end_of_vertex_sample_index: NSUInteger);

    #[objc2::method(sel = "startOfFragmentSampleIndex")]
    pub fn startOfFragmentSampleIndex(&self) -> NSUInteger;

    #[objc2::method(sel = "setStartOfFragmentSampleIndex:")]
    pub unsafe fn setStartOfFragmentSampleIndex(&self, start_of_fragment_sample_index: NSUInteger);

    #[objc2::method(sel = "endOfFragmentSampleIndex")]
    pub fn endOfFragmentSampleIndex(&self) -> NSUInteger;

    #[objc2::method(sel = "setEndOfFragmentSampleIndex:")]
    pub unsafe fn setEndOfFragmentSampleIndex(&self, end_of_fragment_sample_index: NSUInteger);
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLRenderPassSampleBufferAttachmentDescriptorArray")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLRenderPassSampleBufferAttachmentDescriptorArray;
}

#[cfg(feature = "Metal_MTLRenderPassSampleBufferAttachmentDescriptorArray")]
unsafe impl NSObjectProtocol for MTLRenderPassSampleBufferAttachmentDescriptorArray {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLRenderPassSampleBufferAttachmentDescriptorArray")]
    pub type MTLRenderPassSampleBufferAttachmentDescriptorArray;

    #[cfg(feature = "Metal_MTLRenderPassSampleBufferAttachmentDescriptor")]
    #[objc2::method(sel = "objectAtIndexedSubscript:", managed = "Other")]
    pub unsafe fn objectAtIndexedSubscript(
        &self,
        attachment_index: NSUInteger,
    ) -> Id<MTLRenderPassSampleBufferAttachmentDescriptor>;

    #[cfg(feature = "Metal_MTLRenderPassSampleBufferAttachmentDescriptor")]
    #[objc2::method(sel = "setObject:atIndexedSubscript:")]
    pub unsafe fn setObject_atIndexedSubscript(
        &self,
        attachment: Option<&MTLRenderPassSampleBufferAttachmentDescriptor>,
        attachment_index: NSUInteger,
    );
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLRenderPassDescriptor")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLRenderPassDescriptor;
}

#[cfg(feature = "Metal_MTLRenderPassDescriptor")]
unsafe impl NSObjectProtocol for MTLRenderPassDescriptor {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLRenderPassDescriptor")]
    pub type MTLRenderPassDescriptor;

    #[objc2::method(sel = "renderPassDescriptor", managed = "Other")]
    pub fn renderPassDescriptor() -> Id<MTLRenderPassDescriptor>;

    #[cfg(feature = "Metal_MTLRenderPassColorAttachmentDescriptorArray")]
    #[objc2::method(sel = "colorAttachments", managed = "Other")]
    pub fn colorAttachments(&self) -> Id<MTLRenderPassColorAttachmentDescriptorArray>;

    #[cfg(feature = "Metal_MTLRenderPassDepthAttachmentDescriptor")]
    #[objc2::method(sel = "depthAttachment", managed = "Other")]
    pub fn depthAttachment(&self) -> Id<MTLRenderPassDepthAttachmentDescriptor>;

    #[cfg(feature = "Metal_MTLRenderPassDepthAttachmentDescriptor")]
    #[objc2::method(sel = "setDepthAttachment:")]
    pub fn setDepthAttachment(
        &self,
        depth_attachment: Option<&MTLRenderPassDepthAttachmentDescriptor>,
    );

    #[cfg(feature = "Metal_MTLRenderPassStencilAttachmentDescriptor")]
    #[objc2::method(sel = "stencilAttachment", managed = "Other")]
    pub fn stencilAttachment(&self) -> Id<MTLRenderPassStencilAttachmentDescriptor>;

    #[cfg(feature = "Metal_MTLRenderPassStencilAttachmentDescriptor")]
    #[objc2::method(sel = "setStencilAttachment:")]
    pub fn setStencilAttachment(
        &self,
        stencil_attachment: Option<&MTLRenderPassStencilAttachmentDescriptor>,
    );

    #[objc2::method(sel = "visibilityResultBuffer", managed = "Other")]
    pub fn visibilityResultBuffer(&self) -> Option<Id<ProtocolObject<dyn MTLBuffer>>>;

    #[objc2::method(sel = "setVisibilityResultBuffer:")]
    pub fn setVisibilityResultBuffer(
        &self,
        visibility_result_buffer: Option<&ProtocolObject<dyn MTLBuffer>>,
    );

    #[objc2::method(sel = "renderTargetArrayLength")]
    pub fn renderTargetArrayLength(&self) -> NSUInteger;

    #[objc2::method(sel = "setRenderTargetArrayLength:")]
    pub unsafe fn setRenderTargetArrayLength(&self, render_target_array_length: NSUInteger);

    #[objc2::method(sel = "imageblockSampleLength")]
    pub fn imageblockSampleLength(&self) -> NSUInteger;

    #[objc2::method(sel = "setImageblockSampleLength:")]
    pub unsafe fn setImageblockSampleLength(&self, imageblock_sample_length: NSUInteger);

    #[objc2::method(sel = "threadgroupMemoryLength")]
    pub fn threadgroupMemoryLength(&self) -> NSUInteger;

    #[objc2::method(sel = "setThreadgroupMemoryLength:")]
    pub unsafe fn setThreadgroupMemoryLength(&self, threadgroup_memory_length: NSUInteger);

    #[objc2::method(sel = "tileWidth")]
    pub fn tileWidth(&self) -> NSUInteger;

    #[objc2::method(sel = "setTileWidth:")]
    pub fn setTileWidth(&self, tile_width: NSUInteger);

    #[objc2::method(sel = "tileHeight")]
    pub fn tileHeight(&self) -> NSUInteger;

    #[objc2::method(sel = "setTileHeight:")]
    pub fn setTileHeight(&self, tile_height: NSUInteger);

    #[objc2::method(sel = "defaultRasterSampleCount")]
    pub fn defaultRasterSampleCount(&self) -> NSUInteger;

    #[objc2::method(sel = "setDefaultRasterSampleCount:")]
    pub fn setDefaultRasterSampleCount(&self, default_raster_sample_count: NSUInteger);

    #[objc2::method(sel = "renderTargetWidth")]
    pub fn renderTargetWidth(&self) -> NSUInteger;

    #[objc2::method(sel = "setRenderTargetWidth:")]
    pub fn setRenderTargetWidth(&self, render_target_width: NSUInteger);

    #[objc2::method(sel = "renderTargetHeight")]
    pub fn renderTargetHeight(&self) -> NSUInteger;

    #[objc2::method(sel = "setRenderTargetHeight:")]
    pub fn setRenderTargetHeight(&self, render_target_height: NSUInteger);

    #[objc2::method(sel = "setSamplePositions:count:")]
    pub unsafe fn setSamplePositions_count(
        &self,
        positions: *mut MTLSamplePosition,
        count: NSUInteger,
    );

    #[objc2::method(sel = "getSamplePositions:count:")]
    pub unsafe fn getSamplePositions_count(
        &self,
        positions: *mut MTLSamplePosition,
        count: NSUInteger,
    ) -> NSUInteger;

    #[objc2::method(sel = "rasterizationRateMap", managed = "Other")]
    pub fn rasterizationRateMap(&self) -> Option<Id<ProtocolObject<dyn MTLRasterizationRateMap>>>;

    #[objc2::method(sel = "setRasterizationRateMap:")]
    pub fn setRasterizationRateMap(
        &self,
        rasterization_rate_map: Option<&ProtocolObject<dyn MTLRasterizationRateMap>>,
    );

    #[cfg(feature = "Metal_MTLRenderPassSampleBufferAttachmentDescriptorArray")]
    #[objc2::method(sel = "sampleBufferAttachments", managed = "Other")]
    pub fn sampleBufferAttachments(&self)
        -> Id<MTLRenderPassSampleBufferAttachmentDescriptorArray>;
}

inline_fn!(
    pub unsafe fn MTLClearColorMake(
        red: c_double,
        green: c_double,
        blue: c_double,
        alpha: c_double,
    ) -> MTLClearColor {
        todo!()
    }
);
