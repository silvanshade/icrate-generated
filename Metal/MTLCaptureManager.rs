//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;
use crate::Metal::*;

extern_static!(MTLCaptureErrorDomain: &'static NSErrorDomain);

#[ns_enum]
#[underlying(NSInteger)]
pub enum MTLCaptureError {
    MTLCaptureErrorNotSupported = 1,
    MTLCaptureErrorAlreadyCapturing = 2,
    MTLCaptureErrorInvalidDescriptor = 3,
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum MTLCaptureDestination {
    MTLCaptureDestinationDeveloperTools = 1,
    MTLCaptureDestinationGPUTraceDocument = 2,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLCaptureDescriptor")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLCaptureDescriptor;
}

#[cfg(feature = "Metal_MTLCaptureDescriptor")]
unsafe impl NSObjectProtocol for MTLCaptureDescriptor {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLCaptureDescriptor")]
    pub type MTLCaptureDescriptor;

    #[objc2::method(sel = "captureObject", managed = "Other")]
    pub unsafe fn captureObject(&self) -> Option<Id<Object>>;

    #[objc2::method(sel = "setCaptureObject:")]
    pub unsafe fn setCaptureObject(&self, capture_object: Option<&Object>);

    #[objc2::method(sel = "destination")]
    pub fn destination(&self) -> MTLCaptureDestination;

    #[objc2::method(sel = "setDestination:")]
    pub fn setDestination(&self, destination: MTLCaptureDestination);

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "outputURL", managed = "Other")]
    pub fn outputURL(&self) -> Option<Id<NSURL>>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "setOutputURL:")]
    pub fn setOutputURL(&self, output_url: Option<&NSURL>);
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLCaptureManager")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLCaptureManager;
}

#[cfg(feature = "Metal_MTLCaptureManager")]
unsafe impl NSObjectProtocol for MTLCaptureManager {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLCaptureManager")]
    pub type MTLCaptureManager;

    #[objc2::method(sel = "sharedCaptureManager", managed = "Other")]
    pub unsafe fn sharedCaptureManager() -> Id<MTLCaptureManager>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "newCaptureScopeWithDevice:", managed = "New")]
    pub fn newCaptureScopeWithDevice(
        &self,
        device: &ProtocolObject<dyn MTLDevice>,
    ) -> Id<ProtocolObject<dyn MTLCaptureScope>>;

    #[objc2::method(sel = "newCaptureScopeWithCommandQueue:", managed = "New")]
    pub fn newCaptureScopeWithCommandQueue(
        &self,
        command_queue: &ProtocolObject<dyn MTLCommandQueue>,
    ) -> Id<ProtocolObject<dyn MTLCaptureScope>>;

    #[objc2::method(sel = "supportsDestination:")]
    pub fn supportsDestination(&self, destination: MTLCaptureDestination) -> bool;

    #[cfg(all(feature = "Foundation_NSError", feature = "Metal_MTLCaptureDescriptor"))]
    #[objc2::method(sel = "startCaptureWithDescriptor:error:", throws)]
    pub fn startCaptureWithDescriptor_error(
        &self,
        descriptor: &MTLCaptureDescriptor,
    ) -> Result<(), Id<NSError>>;

    #[deprecated = "Use startCaptureWithDescriptor:error: instead"]
    #[objc2::method(sel = "startCaptureWithDevice:")]
    pub fn startCaptureWithDevice(&self, device: &ProtocolObject<dyn MTLDevice>);

    #[deprecated = "Use startCaptureWithDescriptor:error: instead"]
    #[objc2::method(sel = "startCaptureWithCommandQueue:")]
    pub fn startCaptureWithCommandQueue(&self, command_queue: &ProtocolObject<dyn MTLCommandQueue>);

    #[deprecated = "Use startCaptureWithDescriptor:error: instead"]
    #[objc2::method(sel = "startCaptureWithScope:")]
    pub fn startCaptureWithScope(&self, capture_scope: &ProtocolObject<dyn MTLCaptureScope>);

    #[objc2::method(sel = "stopCapture")]
    pub fn stopCapture(&self);

    #[objc2::method(sel = "defaultCaptureScope", managed = "Other")]
    pub fn defaultCaptureScope(&self) -> Option<Id<ProtocolObject<dyn MTLCaptureScope>>>;

    #[objc2::method(sel = "setDefaultCaptureScope:")]
    pub fn setDefaultCaptureScope(
        &self,
        default_capture_scope: Option<&ProtocolObject<dyn MTLCaptureScope>>,
    );

    #[objc2::method(sel = "isCapturing")]
    pub fn isCapturing(&self) -> bool;
}
