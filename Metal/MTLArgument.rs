//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;
use crate::Metal::*;

#[ns_enum]
#[underlying(NSUInteger)]
pub enum MTLDataType {
    MTLDataTypeNone = 0,
    MTLDataTypeStruct = 1,
    MTLDataTypeArray = 2,
    MTLDataTypeFloat = 3,
    MTLDataTypeFloat2 = 4,
    MTLDataTypeFloat3 = 5,
    MTLDataTypeFloat4 = 6,
    MTLDataTypeFloat2x2 = 7,
    MTLDataTypeFloat2x3 = 8,
    MTLDataTypeFloat2x4 = 9,
    MTLDataTypeFloat3x2 = 10,
    MTLDataTypeFloat3x3 = 11,
    MTLDataTypeFloat3x4 = 12,
    MTLDataTypeFloat4x2 = 13,
    MTLDataTypeFloat4x3 = 14,
    MTLDataTypeFloat4x4 = 15,
    MTLDataTypeHalf = 16,
    MTLDataTypeHalf2 = 17,
    MTLDataTypeHalf3 = 18,
    MTLDataTypeHalf4 = 19,
    MTLDataTypeHalf2x2 = 20,
    MTLDataTypeHalf2x3 = 21,
    MTLDataTypeHalf2x4 = 22,
    MTLDataTypeHalf3x2 = 23,
    MTLDataTypeHalf3x3 = 24,
    MTLDataTypeHalf3x4 = 25,
    MTLDataTypeHalf4x2 = 26,
    MTLDataTypeHalf4x3 = 27,
    MTLDataTypeHalf4x4 = 28,
    MTLDataTypeInt = 29,
    MTLDataTypeInt2 = 30,
    MTLDataTypeInt3 = 31,
    MTLDataTypeInt4 = 32,
    MTLDataTypeUInt = 33,
    MTLDataTypeUInt2 = 34,
    MTLDataTypeUInt3 = 35,
    MTLDataTypeUInt4 = 36,
    MTLDataTypeShort = 37,
    MTLDataTypeShort2 = 38,
    MTLDataTypeShort3 = 39,
    MTLDataTypeShort4 = 40,
    MTLDataTypeUShort = 41,
    MTLDataTypeUShort2 = 42,
    MTLDataTypeUShort3 = 43,
    MTLDataTypeUShort4 = 44,
    MTLDataTypeChar = 45,
    MTLDataTypeChar2 = 46,
    MTLDataTypeChar3 = 47,
    MTLDataTypeChar4 = 48,
    MTLDataTypeUChar = 49,
    MTLDataTypeUChar2 = 50,
    MTLDataTypeUChar3 = 51,
    MTLDataTypeUChar4 = 52,
    MTLDataTypeBool = 53,
    MTLDataTypeBool2 = 54,
    MTLDataTypeBool3 = 55,
    MTLDataTypeBool4 = 56,
    MTLDataTypeTexture = 58,
    MTLDataTypeSampler = 59,
    MTLDataTypePointer = 60,
    MTLDataTypeR8Unorm = 62,
    MTLDataTypeR8Snorm = 63,
    MTLDataTypeR16Unorm = 64,
    MTLDataTypeR16Snorm = 65,
    MTLDataTypeRG8Unorm = 66,
    MTLDataTypeRG8Snorm = 67,
    MTLDataTypeRG16Unorm = 68,
    MTLDataTypeRG16Snorm = 69,
    MTLDataTypeRGBA8Unorm = 70,
    MTLDataTypeRGBA8Unorm_sRGB = 71,
    MTLDataTypeRGBA8Snorm = 72,
    MTLDataTypeRGBA16Unorm = 73,
    MTLDataTypeRGBA16Snorm = 74,
    MTLDataTypeRGB10A2Unorm = 75,
    MTLDataTypeRG11B10Float = 76,
    MTLDataTypeRGB9E5Float = 77,
    MTLDataTypeRenderPipeline = 78,
    MTLDataTypeComputePipeline = 79,
    MTLDataTypeIndirectCommandBuffer = 80,
    MTLDataTypeLong = 81,
    MTLDataTypeLong2 = 82,
    MTLDataTypeLong3 = 83,
    MTLDataTypeLong4 = 84,
    MTLDataTypeULong = 85,
    MTLDataTypeULong2 = 86,
    MTLDataTypeULong3 = 87,
    MTLDataTypeULong4 = 88,
    MTLDataTypeVisibleFunctionTable = 115,
    MTLDataTypeIntersectionFunctionTable = 116,
    MTLDataTypePrimitiveAccelerationStructure = 117,
    MTLDataTypeInstanceAccelerationStructure = 118,
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum MTLBindingType {
    MTLBindingTypeBuffer = 0,
    MTLBindingTypeThreadgroupMemory = 1,
    MTLBindingTypeTexture = 2,
    MTLBindingTypeSampler = 3,
    MTLBindingTypeImageblockData = 16,
    MTLBindingTypeImageblock = 17,
    MTLBindingTypeVisibleFunctionTable = 24,
    MTLBindingTypePrimitiveAccelerationStructure = 25,
    MTLBindingTypeInstanceAccelerationStructure = 26,
    MTLBindingTypeIntersectionFunctionTable = 27,
    MTLBindingTypeObjectPayload = 34,
}

#[ns_enum]
#[underlying(NSUInteger)]
#[deprecated]
pub enum MTLArgumentType {
    #[deprecated]
    MTLArgumentTypeBuffer = 0,
    #[deprecated]
    MTLArgumentTypeThreadgroupMemory = 1,
    #[deprecated]
    MTLArgumentTypeTexture = 2,
    #[deprecated]
    MTLArgumentTypeSampler = 3,
    MTLArgumentTypeImageblockData = 16,
    MTLArgumentTypeImageblock = 17,
    MTLArgumentTypeVisibleFunctionTable = 24,
    MTLArgumentTypePrimitiveAccelerationStructure = 25,
    MTLArgumentTypeInstanceAccelerationStructure = 26,
    MTLArgumentTypeIntersectionFunctionTable = 27,
}

#[ns_enum]
#[underlying(NSUInteger)]
pub enum MTLArgumentAccess {
    MTLArgumentAccessReadOnly = 0,
    MTLArgumentAccessReadWrite = 1,
    MTLArgumentAccessWriteOnly = 2,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLType")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLType;
}

#[cfg(feature = "Metal_MTLType")]
unsafe impl NSObjectProtocol for MTLType {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLType")]
    pub type MTLType;

    #[objc2::method(sel = "dataType")]
    pub unsafe fn dataType(&self) -> MTLDataType;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLStructMember")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLStructMember;
}

#[cfg(feature = "Metal_MTLStructMember")]
unsafe impl NSObjectProtocol for MTLStructMember {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLStructMember")]
    pub type MTLStructMember;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "name", managed = "Other")]
    pub fn name(&self) -> Id<NSString>;

    #[objc2::method(sel = "offset")]
    pub fn offset(&self) -> NSUInteger;

    #[objc2::method(sel = "dataType")]
    pub fn dataType(&self) -> MTLDataType;

    #[cfg(feature = "Metal_MTLStructType")]
    #[objc2::method(sel = "structType", managed = "Other")]
    pub fn structType(&self) -> Option<Id<MTLStructType>>;

    #[cfg(feature = "Metal_MTLArrayType")]
    #[objc2::method(sel = "arrayType", managed = "Other")]
    pub fn arrayType(&self) -> Option<Id<MTLArrayType>>;

    #[cfg(feature = "Metal_MTLTextureReferenceType")]
    #[objc2::method(sel = "textureReferenceType", managed = "Other")]
    pub unsafe fn textureReferenceType(&self) -> Option<Id<MTLTextureReferenceType>>;

    #[cfg(feature = "Metal_MTLPointerType")]
    #[objc2::method(sel = "pointerType", managed = "Other")]
    pub unsafe fn pointerType(&self) -> Option<Id<MTLPointerType>>;

    #[objc2::method(sel = "argumentIndex")]
    pub unsafe fn argumentIndex(&self) -> NSUInteger;
}

#[objc2::interface(
    unsafe super = MTLType,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLStructType")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLStructType;
}

#[cfg(feature = "Metal_MTLStructType")]
unsafe impl NSObjectProtocol for MTLStructType {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLStructType")]
    pub type MTLStructType;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Metal_MTLStructMember"))]
    #[objc2::method(sel = "members", managed = "Other")]
    pub fn members(&self) -> Id<NSArray<MTLStructMember>>;

    #[cfg(all(feature = "Foundation_NSString", feature = "Metal_MTLStructMember"))]
    #[objc2::method(sel = "memberByName:", managed = "Other")]
    pub fn memberByName(&self, name: &NSString) -> Option<Id<MTLStructMember>>;
}

#[objc2::interface(
    unsafe super = MTLType,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLArrayType")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLArrayType;
}

#[cfg(feature = "Metal_MTLArrayType")]
unsafe impl NSObjectProtocol for MTLArrayType {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLArrayType")]
    pub type MTLArrayType;

    #[objc2::method(sel = "elementType")]
    pub fn elementType(&self) -> MTLDataType;

    #[objc2::method(sel = "arrayLength")]
    pub fn arrayLength(&self) -> NSUInteger;

    #[objc2::method(sel = "stride")]
    pub fn stride(&self) -> NSUInteger;

    #[objc2::method(sel = "argumentIndexStride")]
    pub unsafe fn argumentIndexStride(&self) -> NSUInteger;

    #[cfg(feature = "Metal_MTLStructType")]
    #[objc2::method(sel = "elementStructType", managed = "Other")]
    pub fn elementStructType(&self) -> Option<Id<MTLStructType>>;

    #[objc2::method(sel = "elementArrayType", managed = "Other")]
    pub fn elementArrayType(&self) -> Option<Id<MTLArrayType>>;

    #[cfg(feature = "Metal_MTLTextureReferenceType")]
    #[objc2::method(sel = "elementTextureReferenceType", managed = "Other")]
    pub unsafe fn elementTextureReferenceType(&self) -> Option<Id<MTLTextureReferenceType>>;

    #[cfg(feature = "Metal_MTLPointerType")]
    #[objc2::method(sel = "elementPointerType", managed = "Other")]
    pub unsafe fn elementPointerType(&self) -> Option<Id<MTLPointerType>>;
}

#[objc2::interface(
    unsafe super = MTLType,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLPointerType")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLPointerType;
}

#[cfg(feature = "Metal_MTLPointerType")]
unsafe impl NSObjectProtocol for MTLPointerType {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLPointerType")]
    pub type MTLPointerType;

    #[objc2::method(sel = "elementType")]
    pub unsafe fn elementType(&self) -> MTLDataType;

    #[objc2::method(sel = "access")]
    pub unsafe fn access(&self) -> MTLArgumentAccess;

    #[objc2::method(sel = "alignment")]
    pub unsafe fn alignment(&self) -> NSUInteger;

    #[objc2::method(sel = "dataSize")]
    pub unsafe fn dataSize(&self) -> NSUInteger;

    #[objc2::method(sel = "elementIsArgumentBuffer")]
    pub unsafe fn elementIsArgumentBuffer(&self) -> bool;

    #[cfg(feature = "Metal_MTLStructType")]
    #[objc2::method(sel = "elementStructType", managed = "Other")]
    pub unsafe fn elementStructType(&self) -> Option<Id<MTLStructType>>;

    #[cfg(feature = "Metal_MTLArrayType")]
    #[objc2::method(sel = "elementArrayType", managed = "Other")]
    pub unsafe fn elementArrayType(&self) -> Option<Id<MTLArrayType>>;
}

#[objc2::interface(
    unsafe super = MTLType,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLTextureReferenceType")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLTextureReferenceType;
}

#[cfg(feature = "Metal_MTLTextureReferenceType")]
unsafe impl NSObjectProtocol for MTLTextureReferenceType {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLTextureReferenceType")]
    pub type MTLTextureReferenceType;

    #[objc2::method(sel = "textureDataType")]
    pub unsafe fn textureDataType(&self) -> MTLDataType;

    #[objc2::method(sel = "textureType")]
    pub unsafe fn textureType(&self) -> MTLTextureType;

    #[objc2::method(sel = "access")]
    pub unsafe fn access(&self) -> MTLArgumentAccess;

    #[objc2::method(sel = "isDepthTexture")]
    pub unsafe fn isDepthTexture(&self) -> bool;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[deprecated]
    #[cfg(feature = "Metal_MTLArgument")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLArgument;
}

#[cfg(feature = "Metal_MTLArgument")]
unsafe impl NSObjectProtocol for MTLArgument {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLArgument")]
    #[deprecated]
    pub type MTLArgument;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "name", managed = "Other")]
    pub fn name(&self) -> Id<NSString>;

    #[objc2::method(sel = "type")]
    pub unsafe fn r#type(&self) -> MTLArgumentType;

    #[objc2::method(sel = "access")]
    pub fn access(&self) -> MTLArgumentAccess;

    #[objc2::method(sel = "index")]
    pub fn index(&self) -> NSUInteger;

    #[objc2::method(sel = "isActive")]
    pub fn isActive(&self) -> bool;

    #[objc2::method(sel = "bufferAlignment")]
    pub fn bufferAlignment(&self) -> NSUInteger;

    #[objc2::method(sel = "bufferDataSize")]
    pub fn bufferDataSize(&self) -> NSUInteger;

    #[objc2::method(sel = "bufferDataType")]
    pub fn bufferDataType(&self) -> MTLDataType;

    #[cfg(feature = "Metal_MTLStructType")]
    #[objc2::method(sel = "bufferStructType", managed = "Other")]
    pub fn bufferStructType(&self) -> Option<Id<MTLStructType>>;

    #[cfg(feature = "Metal_MTLPointerType")]
    #[objc2::method(sel = "bufferPointerType", managed = "Other")]
    pub unsafe fn bufferPointerType(&self) -> Option<Id<MTLPointerType>>;

    #[objc2::method(sel = "threadgroupMemoryAlignment")]
    pub fn threadgroupMemoryAlignment(&self) -> NSUInteger;

    #[objc2::method(sel = "threadgroupMemoryDataSize")]
    pub fn threadgroupMemoryDataSize(&self) -> NSUInteger;

    #[objc2::method(sel = "textureType")]
    pub fn textureType(&self) -> MTLTextureType;

    #[objc2::method(sel = "textureDataType")]
    pub fn textureDataType(&self) -> MTLDataType;

    #[objc2::method(sel = "isDepthTexture")]
    pub unsafe fn isDepthTexture(&self) -> bool;

    #[objc2::method(sel = "arrayLength")]
    pub unsafe fn arrayLength(&self) -> NSUInteger;
}

#[objc2::protocol]
pub unsafe trait MTLBinding: NSObjectProtocol {
    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "name", managed = "Other")]
    unsafe fn name(&self) -> Id<NSString>;

    #[objc2::method(sel = "type")]
    unsafe fn r#type(&self) -> MTLBindingType;

    #[objc2::method(sel = "access")]
    unsafe fn access(&self) -> MTLArgumentAccess;

    #[objc2::method(sel = "index")]
    unsafe fn index(&self) -> NSUInteger;

    #[objc2::method(sel = "isUsed")]
    unsafe fn isUsed(&self) -> bool;

    #[objc2::method(sel = "isArgument")]
    unsafe fn isArgument(&self) -> bool;
}

#[objc2::protocol]
pub unsafe trait MTLBufferBinding: MTLBinding {
    #[objc2::method(sel = "bufferAlignment")]
    unsafe fn bufferAlignment(&self) -> NSUInteger;

    #[objc2::method(sel = "bufferDataSize")]
    unsafe fn bufferDataSize(&self) -> NSUInteger;

    #[objc2::method(sel = "bufferDataType")]
    unsafe fn bufferDataType(&self) -> MTLDataType;

    #[cfg(feature = "Metal_MTLStructType")]
    #[objc2::method(sel = "bufferStructType", managed = "Other")]
    unsafe fn bufferStructType(&self) -> Option<Id<MTLStructType>>;

    #[cfg(feature = "Metal_MTLPointerType")]
    #[objc2::method(sel = "bufferPointerType", managed = "Other")]
    unsafe fn bufferPointerType(&self) -> Option<Id<MTLPointerType>>;
}

#[objc2::protocol]
pub unsafe trait MTLThreadgroupBinding: MTLBinding {
    #[objc2::method(sel = "threadgroupMemoryAlignment")]
    unsafe fn threadgroupMemoryAlignment(&self) -> NSUInteger;

    #[objc2::method(sel = "threadgroupMemoryDataSize")]
    unsafe fn threadgroupMemoryDataSize(&self) -> NSUInteger;
}

#[objc2::protocol]
pub unsafe trait MTLTextureBinding: MTLBinding {
    #[objc2::method(sel = "textureType")]
    unsafe fn textureType(&self) -> MTLTextureType;

    #[objc2::method(sel = "textureDataType")]
    unsafe fn textureDataType(&self) -> MTLDataType;

    #[objc2::method(sel = "isDepthTexture")]
    unsafe fn isDepthTexture(&self) -> bool;

    #[objc2::method(sel = "arrayLength")]
    unsafe fn arrayLength(&self) -> NSUInteger;
}

#[objc2::protocol]
pub unsafe trait MTLObjectPayloadBinding: MTLBinding {
    #[objc2::method(sel = "objectPayloadAlignment")]
    unsafe fn objectPayloadAlignment(&self) -> NSUInteger;

    #[objc2::method(sel = "objectPayloadDataSize")]
    unsafe fn objectPayloadDataSize(&self) -> NSUInteger;
}
