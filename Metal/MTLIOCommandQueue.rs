//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;
use crate::Metal::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum MTLIOPriority {
    MTLIOPriorityHigh = 0,
    MTLIOPriorityNormal = 1,
    MTLIOPriorityLow = 2,
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum MTLIOCommandQueueType {
    MTLIOCommandQueueTypeConcurrent = 0,
    MTLIOCommandQueueTypeSerial = 1,
}

extern_static!(MTLIOErrorDomain: &'static NSErrorDomain);

#[ns_error_enum]
#[underlying(NSInteger)]
pub enum MTLIOError {
    MTLIOErrorURLInvalid = 1,
    MTLIOErrorInternal = 2,
}

#[objc2::protocol]
pub unsafe trait MTLIOCommandQueue: NSObjectProtocol {
    #[objc2::method(sel = "enqueueBarrier")]
    unsafe fn enqueueBarrier(&self);

    #[objc2::method(sel = "commandBuffer", managed = "Other")]
    unsafe fn commandBuffer(&self) -> Id<ProtocolObject<dyn MTLIOCommandBuffer>>;

    #[objc2::method(sel = "commandBufferWithUnretainedReferences", managed = "Other")]
    unsafe fn commandBufferWithUnretainedReferences(
        &self,
    ) -> Id<ProtocolObject<dyn MTLIOCommandBuffer>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "label", managed = "Other")]
    unsafe fn label(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setLabel:")]
    unsafe fn setLabel(&self, label: Option<&NSString>);
}

#[objc2::protocol]
pub unsafe trait MTLIOScratchBuffer: NSObjectProtocol {
    #[objc2::method(sel = "buffer", managed = "Other")]
    unsafe fn buffer(&self) -> Id<ProtocolObject<dyn MTLBuffer>>;
}

#[objc2::protocol]
pub unsafe trait MTLIOScratchBufferAllocator: NSObjectProtocol {
    #[objc2::method(sel = "newScratchBufferWithMinimumSize:", managed = "New")]
    unsafe fn newScratchBufferWithMinimumSize(
        &self,
        minimum_size: NSUInteger,
    ) -> Option<Id<ProtocolObject<dyn MTLIOScratchBuffer>>>;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLIOCommandQueueDescriptor")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLIOCommandQueueDescriptor;
}

#[cfg(feature = "Metal_MTLIOCommandQueueDescriptor")]
unsafe impl NSObjectProtocol for MTLIOCommandQueueDescriptor {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLIOCommandQueueDescriptor")]
    pub type MTLIOCommandQueueDescriptor;

    #[objc2::method(sel = "maxCommandBufferCount")]
    pub unsafe fn maxCommandBufferCount(&self) -> NSUInteger;

    #[objc2::method(sel = "setMaxCommandBufferCount:")]
    pub unsafe fn setMaxCommandBufferCount(&self, max_command_buffer_count: NSUInteger);

    #[objc2::method(sel = "priority")]
    pub unsafe fn priority(&self) -> MTLIOPriority;

    #[objc2::method(sel = "setPriority:")]
    pub unsafe fn setPriority(&self, priority: MTLIOPriority);

    #[objc2::method(sel = "type")]
    pub unsafe fn r#type(&self) -> MTLIOCommandQueueType;

    #[objc2::method(sel = "setType:")]
    pub unsafe fn setType(&self, r#type: MTLIOCommandQueueType);

    #[objc2::method(sel = "maxCommandsInFlight")]
    pub unsafe fn maxCommandsInFlight(&self) -> NSUInteger;

    #[objc2::method(sel = "setMaxCommandsInFlight:")]
    pub unsafe fn setMaxCommandsInFlight(&self, max_commands_in_flight: NSUInteger);

    #[objc2::method(sel = "scratchBufferAllocator", managed = "Other")]
    pub unsafe fn scratchBufferAllocator(
        &self,
    ) -> Option<Id<ProtocolObject<dyn MTLIOScratchBufferAllocator>>>;

    #[objc2::method(sel = "setScratchBufferAllocator:")]
    pub unsafe fn setScratchBufferAllocator(
        &self,
        scratch_buffer_allocator: Option<&ProtocolObject<dyn MTLIOScratchBufferAllocator>>,
    );
}

#[objc2::protocol]
pub unsafe trait MTLIOFileHandle: NSObjectProtocol {
    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "label", managed = "Other")]
    unsafe fn label(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setLabel:")]
    unsafe fn setLabel(&self, label: Option<&NSString>);
}
