//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;
use crate::Metal::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLLinkedFunctions")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLLinkedFunctions;
}

#[cfg(feature = "Metal_MTLLinkedFunctions")]
unsafe impl NSObjectProtocol for MTLLinkedFunctions {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLLinkedFunctions")]
    pub type MTLLinkedFunctions;

    #[objc2::method(sel = "linkedFunctions", managed = "Other")]
    pub fn linkedFunctions() -> Id<MTLLinkedFunctions>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "functions", managed = "Other")]
    pub fn functions(&self) -> Option<Id<NSArray<ProtocolObject<dyn MTLFunction>>>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "setFunctions:")]
    pub fn setFunctions(&self, functions: Option<&NSArray<ProtocolObject<dyn MTLFunction>>>);

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "binaryFunctions", managed = "Other")]
    pub fn binaryFunctions(&self) -> Option<Id<NSArray<ProtocolObject<dyn MTLFunction>>>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "setBinaryFunctions:")]
    pub fn setBinaryFunctions(
        &self,
        binary_functions: Option<&NSArray<ProtocolObject<dyn MTLFunction>>>,
    );

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "groups", managed = "Other")]
    pub fn groups(
        &self,
    ) -> Option<Id<NSDictionary<NSString, NSArray<ProtocolObject<dyn MTLFunction>>>>>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "setGroups:")]
    pub fn setGroups(
        &self,
        groups: Option<&NSDictionary<NSString, NSArray<ProtocolObject<dyn MTLFunction>>>>,
    );

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "privateFunctions", managed = "Other")]
    pub fn privateFunctions(&self) -> Option<Id<NSArray<ProtocolObject<dyn MTLFunction>>>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "setPrivateFunctions:")]
    pub fn setPrivateFunctions(
        &self,
        private_functions: Option<&NSArray<ProtocolObject<dyn MTLFunction>>>,
    );
}
