//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;
use crate::Metal::*;

#[objc2::protocol]
pub unsafe trait MTLFunctionStitchingAttribute: NSObjectProtocol {}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLFunctionStitchingAttributeAlwaysInline")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLFunctionStitchingAttributeAlwaysInline;
}

#[cfg(feature = "Metal_MTLFunctionStitchingAttributeAlwaysInline")]
unsafe impl MTLFunctionStitchingAttribute for MTLFunctionStitchingAttributeAlwaysInline {}

#[cfg(feature = "Metal_MTLFunctionStitchingAttributeAlwaysInline")]
unsafe impl NSObjectProtocol for MTLFunctionStitchingAttributeAlwaysInline {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLFunctionStitchingAttributeAlwaysInline")]
    pub type MTLFunctionStitchingAttributeAlwaysInline;
}

#[objc2::protocol]
pub unsafe trait MTLFunctionStitchingNode: NSObjectProtocol {}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLFunctionStitchingInputNode")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLFunctionStitchingInputNode;
}

#[cfg(feature = "Metal_MTLFunctionStitchingInputNode")]
unsafe impl MTLFunctionStitchingNode for MTLFunctionStitchingInputNode {}

#[cfg(feature = "Metal_MTLFunctionStitchingInputNode")]
unsafe impl NSObjectProtocol for MTLFunctionStitchingInputNode {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLFunctionStitchingInputNode")]
    pub type MTLFunctionStitchingInputNode;

    #[objc2::method(sel = "argumentIndex")]
    pub unsafe fn argumentIndex(&self) -> NSUInteger;

    #[objc2::method(sel = "setArgumentIndex:")]
    pub unsafe fn setArgumentIndex(&self, argument_index: NSUInteger);

    #[objc2::method(sel = "initWithArgumentIndex:", managed = "Init")]
    pub unsafe fn initWithArgumentIndex(
        this: Option<Allocated<Self>>,
        argument: NSUInteger,
    ) -> Id<Self>;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLFunctionStitchingFunctionNode")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLFunctionStitchingFunctionNode;
}

#[cfg(feature = "Metal_MTLFunctionStitchingFunctionNode")]
unsafe impl MTLFunctionStitchingNode for MTLFunctionStitchingFunctionNode {}

#[cfg(feature = "Metal_MTLFunctionStitchingFunctionNode")]
unsafe impl NSObjectProtocol for MTLFunctionStitchingFunctionNode {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLFunctionStitchingFunctionNode")]
    pub type MTLFunctionStitchingFunctionNode;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "name", managed = "Other")]
    pub unsafe fn name(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setName:")]
    pub unsafe fn setName(&self, name: &NSString);

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "arguments", managed = "Other")]
    pub unsafe fn arguments(&self) -> Id<NSArray<ProtocolObject<dyn MTLFunctionStitchingNode>>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "setArguments:")]
    pub unsafe fn setArguments(
        &self,
        arguments: &NSArray<ProtocolObject<dyn MTLFunctionStitchingNode>>,
    );

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "controlDependencies", managed = "Other")]
    pub unsafe fn controlDependencies(&self) -> Id<NSArray<MTLFunctionStitchingFunctionNode>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "setControlDependencies:")]
    pub unsafe fn setControlDependencies(
        &self,
        control_dependencies: &NSArray<MTLFunctionStitchingFunctionNode>,
    );

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "initWithName:arguments:controlDependencies:", managed = "Init")]
    pub unsafe fn initWithName_arguments_controlDependencies(
        this: Option<Allocated<Self>>,
        name: &NSString,
        arguments: &NSArray<ProtocolObject<dyn MTLFunctionStitchingNode>>,
        control_dependencies: &NSArray<MTLFunctionStitchingFunctionNode>,
    ) -> Id<Self>;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLFunctionStitchingGraph")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLFunctionStitchingGraph;
}

#[cfg(feature = "Metal_MTLFunctionStitchingGraph")]
unsafe impl NSObjectProtocol for MTLFunctionStitchingGraph {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLFunctionStitchingGraph")]
    pub type MTLFunctionStitchingGraph;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "functionName", managed = "Other")]
    pub unsafe fn functionName(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setFunctionName:")]
    pub unsafe fn setFunctionName(&self, function_name: &NSString);

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Metal_MTLFunctionStitchingFunctionNode"
    ))]
    #[objc2::method(sel = "nodes", managed = "Other")]
    pub unsafe fn nodes(&self) -> Id<NSArray<MTLFunctionStitchingFunctionNode>>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Metal_MTLFunctionStitchingFunctionNode"
    ))]
    #[objc2::method(sel = "setNodes:")]
    pub unsafe fn setNodes(&self, nodes: &NSArray<MTLFunctionStitchingFunctionNode>);

    #[cfg(feature = "Metal_MTLFunctionStitchingFunctionNode")]
    #[objc2::method(sel = "outputNode", managed = "Other")]
    pub unsafe fn outputNode(&self) -> Option<Id<MTLFunctionStitchingFunctionNode>>;

    #[cfg(feature = "Metal_MTLFunctionStitchingFunctionNode")]
    #[objc2::method(sel = "setOutputNode:")]
    pub unsafe fn setOutputNode(&self, output_node: Option<&MTLFunctionStitchingFunctionNode>);

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "attributes", managed = "Other")]
    pub unsafe fn attributes(
        &self,
    ) -> Id<NSArray<ProtocolObject<dyn MTLFunctionStitchingAttribute>>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "setAttributes:")]
    pub unsafe fn setAttributes(
        &self,
        attributes: &NSArray<ProtocolObject<dyn MTLFunctionStitchingAttribute>>,
    );

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSString",
        feature = "Metal_MTLFunctionStitchingFunctionNode"
    ))]
    #[objc2::method(
        sel = "initWithFunctionName:nodes:outputNode:attributes:",
        managed = "Init"
    )]
    pub unsafe fn initWithFunctionName_nodes_outputNode_attributes(
        this: Option<Allocated<Self>>,
        function_name: &NSString,
        nodes: &NSArray<MTLFunctionStitchingFunctionNode>,
        output_node: Option<&MTLFunctionStitchingFunctionNode>,
        attributes: &NSArray<ProtocolObject<dyn MTLFunctionStitchingAttribute>>,
    ) -> Id<Self>;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLStitchedLibraryDescriptor")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MTLStitchedLibraryDescriptor;
}

#[cfg(feature = "Metal_MTLStitchedLibraryDescriptor")]
unsafe impl NSObjectProtocol for MTLStitchedLibraryDescriptor {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Metal_MTLStitchedLibraryDescriptor")]
    pub type MTLStitchedLibraryDescriptor;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Metal_MTLFunctionStitchingGraph"
    ))]
    #[objc2::method(sel = "functionGraphs", managed = "Other")]
    pub unsafe fn functionGraphs(&self) -> Id<NSArray<MTLFunctionStitchingGraph>>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Metal_MTLFunctionStitchingGraph"
    ))]
    #[objc2::method(sel = "setFunctionGraphs:")]
    pub unsafe fn setFunctionGraphs(&self, function_graphs: &NSArray<MTLFunctionStitchingGraph>);

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "functions", managed = "Other")]
    pub unsafe fn functions(&self) -> Id<NSArray<ProtocolObject<dyn MTLFunction>>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "setFunctions:")]
    pub unsafe fn setFunctions(&self, functions: &NSArray<ProtocolObject<dyn MTLFunction>>);
}
