//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;
use crate::Metal::*;

#[ns_enum]
#[underlying(NSUInteger)]
pub enum MTLFunctionLogType {
    MTLFunctionLogTypeValidation = 0,
}

#[objc2::protocol]
pub unsafe trait MTLLogContainer: NSFastEnumeration {}

#[objc2::protocol]
pub unsafe trait MTLFunctionLogDebugLocation: NSObjectProtocol {
    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "functionName", managed = "Other")]
    unsafe fn functionName(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "URL", managed = "Other")]
    unsafe fn URL(&self) -> Option<Id<NSURL>>;

    #[objc2::method(sel = "line")]
    unsafe fn line(&self) -> NSUInteger;

    #[objc2::method(sel = "column")]
    unsafe fn column(&self) -> NSUInteger;
}

#[objc2::protocol]
pub unsafe trait MTLFunctionLog: NSObjectProtocol {
    #[objc2::method(sel = "type")]
    unsafe fn r#type(&self) -> MTLFunctionLogType;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "encoderLabel", managed = "Other")]
    unsafe fn encoderLabel(&self) -> Option<Id<NSString>>;

    #[objc2::method(sel = "function", managed = "Other")]
    unsafe fn function(&self) -> Option<Id<ProtocolObject<dyn MTLFunction>>>;

    #[objc2::method(sel = "debugLocation", managed = "Other")]
    unsafe fn debugLocation(&self) -> Option<Id<ProtocolObject<dyn MTLFunctionLogDebugLocation>>>;
}
