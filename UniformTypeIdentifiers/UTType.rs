//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;
use crate::UniformTypeIdentifiers::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "UniformTypeIdentifiers_UTType")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type UTType;
}

#[cfg(feature = "UniformTypeIdentifiers_UTType")]
unsafe impl NSCoding for UTType {}

#[cfg(feature = "UniformTypeIdentifiers_UTType")]
unsafe impl NSObjectProtocol for UTType {}

#[cfg(feature = "UniformTypeIdentifiers_UTType")]
unsafe impl NSSecureCoding for UTType {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "UniformTypeIdentifiers_UTType")]
    pub type UTType;

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "typeWithIdentifier:", managed = "Other")]
    pub unsafe fn typeWithIdentifier(identifier: &NSString) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "typeWithFilenameExtension:", managed = "Other")]
    pub unsafe fn typeWithFilenameExtension(filename_extension: &NSString) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "typeWithFilenameExtension:conformingToType:", managed = "Other")]
    pub unsafe fn typeWithFilenameExtension_conformingToType(
        filename_extension: &NSString,
        supertype: &UTType,
    ) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "typeWithMIMEType:", managed = "Other")]
    pub unsafe fn typeWithMIMEType(mime_type: &NSString) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "typeWithMIMEType:conformingToType:", managed = "Other")]
    pub unsafe fn typeWithMIMEType_conformingToType(
        mime_type: &NSString,
        supertype: &UTType,
    ) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "identifier", managed = "Other")]
    pub unsafe fn identifier(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "preferredFilenameExtension", managed = "Other")]
    pub unsafe fn preferredFilenameExtension(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "preferredMIMEType", managed = "Other")]
    pub unsafe fn preferredMIMEType(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "localizedDescription", managed = "Other")]
    pub unsafe fn localizedDescription(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSNumber")]
    #[objc2::method(sel = "version", managed = "Other")]
    pub unsafe fn version(&self) -> Option<Id<NSNumber>>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "referenceURL", managed = "Other")]
    pub unsafe fn referenceURL(&self) -> Option<Id<NSURL>>;

    #[objc2::method(sel = "isDynamic")]
    pub unsafe fn isDynamic(&self) -> bool;

    #[objc2::method(sel = "isDeclared")]
    pub unsafe fn isDeclared(&self) -> bool;

    #[objc2::method(sel = "isPublicType")]
    pub unsafe fn isPublicType(&self) -> bool;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "UniformTypeIdentifiers_UTType")]
    pub type UTType;

    #[objc2::method(sel = "conformsToType:")]
    pub unsafe fn conformsToType(&self, r#type: &UTType) -> bool;

    #[objc2::method(sel = "isSupertypeOfType:")]
    pub unsafe fn isSupertypeOfType(&self, r#type: &UTType) -> bool;

    #[objc2::method(sel = "isSubtypeOfType:")]
    pub unsafe fn isSubtypeOfType(&self, r#type: &UTType) -> bool;

    #[cfg(feature = "Foundation_NSSet")]
    #[objc2::method(sel = "supertypes", managed = "Other")]
    pub unsafe fn supertypes(&self) -> Id<NSSet<UTType>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "UniformTypeIdentifiers_UTType")]
    pub type UTType;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "typeWithTag:tagClass:conformingToType:", managed = "Other")]
    pub unsafe fn typeWithTag_tagClass_conformingToType(
        tag: &NSString,
        tag_class: &NSString,
        supertype: Option<&UTType>,
    ) -> Option<Id<Self>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "typesWithTag:tagClass:conformingToType:", managed = "Other")]
    pub unsafe fn typesWithTag_tagClass_conformingToType(
        tag: &NSString,
        tag_class: &NSString,
        supertype: Option<&UTType>,
    ) -> Id<NSArray<UTType>>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "tags", managed = "Other")]
    pub unsafe fn tags(&self) -> Id<NSDictionary<NSString, NSArray<NSString>>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "UniformTypeIdentifiers_UTType")]
    pub type UTType;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "exportedTypeWithIdentifier:", managed = "Other")]
    pub unsafe fn exportedTypeWithIdentifier(identifier: &NSString) -> Id<UTType>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(
        sel = "exportedTypeWithIdentifier:conformingToType:",
        managed = "Other"
    )]
    pub unsafe fn exportedTypeWithIdentifier_conformingToType(
        identifier: &NSString,
        parent_type: &UTType,
    ) -> Id<UTType>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "importedTypeWithIdentifier:", managed = "Other")]
    pub unsafe fn importedTypeWithIdentifier(identifier: &NSString) -> Id<UTType>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(
        sel = "importedTypeWithIdentifier:conformingToType:",
        managed = "Other"
    )]
    pub unsafe fn importedTypeWithIdentifier_conformingToType(
        identifier: &NSString,
        parent_type: &UTType,
    ) -> Id<UTType>;
}
