//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Automator::*;
use crate::Foundation::*;
use crate::OSAKit::*;

#[ns_enum]
#[underlying(NSUInteger)]
pub enum AMLogLevel {
    AMLogLevelDebug = 0,
    AMLogLevelInfo = 1,
    AMLogLevelWarn = 2,
    AMLogLevelError = 3,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Automator_AMAction")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type AMAction;
}

#[cfg(feature = "Automator_AMAction")]
unsafe impl NSObjectProtocol for AMAction {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Automator_AMAction")]
    pub type AMAction;

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "initWithDefinition:fromArchive:", managed = "Init")]
    pub unsafe fn initWithDefinition_fromArchive(
        this: Option<Allocated<Self>>,
        dict: Option<&NSDictionary<NSString, Object>>,
        archived: bool,
    ) -> Option<Id<Self>>;

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
    #[objc2::method(sel = "initWithContentsOfURL:error:", managed = "Init", throws)]
    pub unsafe fn initWithContentsOfURL_error(
        this: Option<Allocated<Self>>,
        file_url: &NSURL,
    ) -> Result<Id<Self>, Id<NSError>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "name", managed = "Other")]
    pub unsafe fn name(&self) -> Id<NSString>;

    #[objc2::method(sel = "ignoresInput")]
    pub unsafe fn ignoresInput(&self) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "selectedInputType", managed = "Other")]
    pub unsafe fn selectedInputType(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setSelectedInputType:")]
    pub unsafe fn setSelectedInputType(&self, selected_input_type: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "selectedOutputType", managed = "Other")]
    pub unsafe fn selectedOutputType(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setSelectedOutputType:")]
    pub unsafe fn setSelectedOutputType(&self, selected_output_type: Option<&NSString>);

    #[objc2::method(sel = "progressValue")]
    pub unsafe fn progressValue(&self) -> CGFloat;

    #[objc2::method(sel = "setProgressValue:")]
    pub unsafe fn setProgressValue(&self, progress_value: CGFloat);

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[deprecated]
    #[objc2::method(sel = "runWithInput:fromAction:error:", managed = "Other")]
    pub unsafe fn runWithInput_fromAction_error(
        &self,
        input: Option<&Object>,
        an_action: Option<&AMAction>,
        error_info: Option<&mut Option<Id<NSDictionary<NSString, Object>>>>,
    ) -> Option<Id<Object>>;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "runWithInput:error:", managed = "Other", throws)]
    pub unsafe fn runWithInput_error(
        &self,
        input: Option<&Object>,
    ) -> Result<Id<Object>, Id<NSError>>;

    #[objc2::method(sel = "runAsynchronouslyWithInput:")]
    pub unsafe fn runAsynchronouslyWithInput(&self, input: Option<&Object>);

    #[objc2::method(sel = "willFinishRunning")]
    pub unsafe fn willFinishRunning(&self);

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[deprecated]
    #[objc2::method(sel = "didFinishRunningWithError:")]
    pub unsafe fn didFinishRunningWithError(
        &self,
        error_info: Option<&NSDictionary<NSString, Object>>,
    );

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "finishRunningWithError:")]
    pub unsafe fn finishRunningWithError(&self, error: Option<&NSError>);

    #[objc2::method(sel = "output", managed = "Other")]
    pub unsafe fn output(&self) -> Option<Id<Object>>;

    #[objc2::method(sel = "setOutput:")]
    pub unsafe fn setOutput(&self, output: Option<&Object>);

    #[objc2::method(sel = "stop")]
    pub unsafe fn stop(&self);

    #[objc2::method(sel = "reset")]
    pub unsafe fn reset(&self);

    #[cfg(all(
        feature = "Foundation_NSMutableDictionary",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "writeToDictionary:")]
    pub unsafe fn writeToDictionary(&self, dictionary: &NSMutableDictionary<NSString, Object>);

    #[objc2::method(sel = "opened")]
    pub unsafe fn opened(&self);

    #[objc2::method(sel = "activated")]
    pub unsafe fn activated(&self);

    #[objc2::method(sel = "closed")]
    pub unsafe fn closed(&self);

    #[objc2::method(sel = "updateParameters")]
    pub unsafe fn updateParameters(&self);

    #[objc2::method(sel = "parametersUpdated")]
    pub unsafe fn parametersUpdated(&self);

    #[objc2::method(sel = "isStopped")]
    pub unsafe fn isStopped(&self) -> bool;
}
