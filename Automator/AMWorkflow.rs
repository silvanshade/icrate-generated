//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Automator::*;
use crate::Foundation::*;
use crate::OSAKit::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Automator_AMWorkflow")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type AMWorkflow;
}

#[cfg(feature = "Automator_AMWorkflow")]
unsafe impl NSObjectProtocol for AMWorkflow {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Automator_AMWorkflow")]
    pub type AMWorkflow;

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
    #[objc2::method(sel = "runWorkflowAtURL:withInput:error:", managed = "Other", throws)]
    pub unsafe fn runWorkflowAtURL_withInput_error(
        file_url: &NSURL,
        input: Option<&Object>,
    ) -> Result<Id<Object>, Id<NSError>>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
    #[objc2::method(sel = "initWithContentsOfURL:error:", managed = "Init", throws)]
    pub unsafe fn initWithContentsOfURL_error(
        this: Option<Allocated<Self>>,
        file_url: &NSURL,
    ) -> Result<Id<Self>, Id<NSError>>;

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
    #[objc2::method(sel = "writeToURL:error:", throws)]
    pub unsafe fn writeToURL_error(&self, file_url: &NSURL) -> Result<(), Id<NSError>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setValue:forVariableWithName:")]
    pub unsafe fn setValue_forVariableWithName(
        &self,
        value: Option<&Object>,
        variable_name: &NSString,
    ) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "valueForVariableWithName:", managed = "Other")]
    pub unsafe fn valueForVariableWithName(&self, variable_name: &NSString) -> Option<Id<Object>>;

    #[cfg(feature = "Automator_AMAction")]
    #[objc2::method(sel = "addAction:")]
    pub unsafe fn addAction(&self, action: &AMAction);

    #[cfg(feature = "Automator_AMAction")]
    #[objc2::method(sel = "removeAction:")]
    pub unsafe fn removeAction(&self, action: &AMAction);

    #[cfg(feature = "Automator_AMAction")]
    #[objc2::method(sel = "insertAction:atIndex:")]
    pub unsafe fn insertAction_atIndex(&self, action: &AMAction, index: NSUInteger);

    #[objc2::method(sel = "moveActionAtIndex:toIndex:")]
    pub unsafe fn moveActionAtIndex_toIndex(&self, start_index: NSUInteger, end_index: NSUInteger);

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "fileURL", managed = "Other")]
    pub unsafe fn fileURL(&self) -> Option<Id<NSURL>>;

    #[cfg(all(feature = "Automator_AMAction", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "actions", managed = "Other")]
    pub unsafe fn actions(&self) -> Id<NSArray<AMAction>>;

    #[objc2::method(sel = "input", managed = "Other")]
    pub unsafe fn input(&self) -> Option<Id<Object>>;

    #[objc2::method(sel = "setInput:")]
    pub unsafe fn setInput(&self, input: Option<&Object>);

    #[objc2::method(sel = "output", managed = "Other")]
    pub unsafe fn output(&self) -> Option<Id<Object>>;
}
