//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Automator::*;
use crate::Foundation::*;
use crate::OSAKit::*;

#[objc2::interface(
    unsafe super = NSController,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Automator_AMWorkflowController")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type AMWorkflowController;
}

#[cfg(feature = "Automator_AMWorkflowController")]
unsafe impl NSCoding for AMWorkflowController {}

#[cfg(feature = "Automator_AMWorkflowController")]
unsafe impl NSEditor for AMWorkflowController {}

#[cfg(feature = "Automator_AMWorkflowController")]
unsafe impl NSEditorRegistration for AMWorkflowController {}

#[cfg(feature = "Automator_AMWorkflowController")]
unsafe impl NSObjectProtocol for AMWorkflowController {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Automator_AMWorkflowController")]
    pub type AMWorkflowController;

    #[cfg(feature = "Automator_AMWorkflow")]
    #[objc2::method(sel = "workflow", managed = "Other")]
    pub unsafe fn workflow(&self) -> Option<Id<AMWorkflow>>;

    #[cfg(feature = "Automator_AMWorkflow")]
    #[objc2::method(sel = "setWorkflow:")]
    pub unsafe fn setWorkflow(&self, workflow: Option<&AMWorkflow>);

    #[cfg(feature = "Automator_AMWorkflowView")]
    #[objc2::method(sel = "workflowView", managed = "Other")]
    pub unsafe fn workflowView(&self) -> Option<Id<AMWorkflowView>>;

    #[cfg(feature = "Automator_AMWorkflowView")]
    #[objc2::method(sel = "setWorkflowView:")]
    pub unsafe fn setWorkflowView(&self, workflow_view: Option<&AMWorkflowView>);

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn AMWorkflowControllerDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(
        &self,
        delegate: Option<&ProtocolObject<dyn AMWorkflowControllerDelegate>>,
    );

    #[objc2::method(sel = "canRun")]
    pub unsafe fn canRun(&self) -> bool;

    #[objc2::method(sel = "isRunning")]
    pub unsafe fn isRunning(&self) -> bool;

    #[objc2::method(sel = "isPaused")]
    pub unsafe fn isPaused(&self) -> bool;

    #[objc2::method(sel = "run:")]
    pub unsafe fn run(&self, sender: &Object);

    #[objc2::method(sel = "stop:")]
    pub unsafe fn stop(&self, sender: &Object);

    #[objc2::method(sel = "pause:")]
    pub unsafe fn pause(&self, sender: &Object);

    #[objc2::method(sel = "step:")]
    pub unsafe fn step(&self, sender: &Object);

    #[objc2::method(sel = "reset:")]
    pub unsafe fn reset(&self, sender: &Object);
}

#[objc2::protocol]
pub unsafe trait AMWorkflowControllerDelegate: NSObjectProtocol {
    #[cfg(feature = "Automator_AMWorkflowController")]
    #[objc2::method(optional, sel = "workflowControllerWillRun:")]
    unsafe fn workflowControllerWillRun(&self, controller: &AMWorkflowController);

    #[cfg(feature = "Automator_AMWorkflowController")]
    #[objc2::method(optional, sel = "workflowControllerWillStop:")]
    unsafe fn workflowControllerWillStop(&self, controller: &AMWorkflowController);

    #[cfg(feature = "Automator_AMWorkflowController")]
    #[objc2::method(optional, sel = "workflowControllerDidRun:")]
    unsafe fn workflowControllerDidRun(&self, controller: &AMWorkflowController);

    #[cfg(feature = "Automator_AMWorkflowController")]
    #[objc2::method(optional, sel = "workflowControllerDidStop:")]
    unsafe fn workflowControllerDidStop(&self, controller: &AMWorkflowController);

    #[cfg(all(
        feature = "Automator_AMAction",
        feature = "Automator_AMWorkflowController"
    ))]
    #[objc2::method(optional, sel = "workflowController:willRunAction:")]
    unsafe fn workflowController_willRunAction(
        &self,
        controller: &AMWorkflowController,
        action: &AMAction,
    );

    #[cfg(all(
        feature = "Automator_AMAction",
        feature = "Automator_AMWorkflowController"
    ))]
    #[objc2::method(optional, sel = "workflowController:didRunAction:")]
    unsafe fn workflowController_didRunAction(
        &self,
        controller: &AMWorkflowController,
        action: &AMAction,
    );

    #[cfg(all(
        feature = "Automator_AMWorkflowController",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(optional, sel = "workflowController:didError:")]
    unsafe fn workflowController_didError(
        &self,
        controller: &AMWorkflowController,
        error: &NSError,
    );
}
