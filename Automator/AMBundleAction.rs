//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Automator::*;
use crate::Foundation::*;
use crate::OSAKit::*;

#[objc2::interface(
    unsafe super = AMAction,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Automator_AMBundleAction")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type AMBundleAction;
}

#[cfg(feature = "Automator_AMBundleAction")]
unsafe impl NSCoding for AMBundleAction {}

#[cfg(feature = "Automator_AMBundleAction")]
unsafe impl NSObjectProtocol for AMBundleAction {}

#[cfg(feature = "Automator_AMBundleAction")]
unsafe impl NSSecureCoding for AMBundleAction {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Automator_AMBundleAction")]
    pub type AMBundleAction;

    #[objc2::method(sel = "awakeFromBundle")]
    pub unsafe fn awakeFromBundle(&self);

    #[objc2::method(sel = "hasView")]
    pub unsafe fn hasView(&self) -> bool;

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "view", managed = "Other")]
    pub unsafe fn view(&self) -> Option<Id<NSView>>;

    #[cfg(feature = "Foundation_NSBundle")]
    #[objc2::method(sel = "bundle", managed = "Other")]
    pub unsafe fn bundle(&self) -> Id<NSBundle>;

    #[cfg(all(
        feature = "Foundation_NSMutableDictionary",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "parameters", managed = "Other")]
    pub unsafe fn parameters(&self) -> Option<Id<NSMutableDictionary<NSString, Object>, Owned>>;

    #[cfg(all(
        feature = "Foundation_NSMutableDictionary",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "setParameters:")]
    pub unsafe fn setParameters(&self, parameters: Option<&NSMutableDictionary<NSString, Object>>);
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `AMAction`
    #[cfg(feature = "Automator_AMBundleAction")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Automator_AMBundleAction")]
    pub type AMBundleAction;

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "initWithDefinition:fromArchive:", managed = "Init")]
    pub unsafe fn initWithDefinition_fromArchive(
        this: Option<Allocated<Self>>,
        dict: Option<&NSDictionary<NSString, Object>>,
        archived: bool,
    ) -> Option<Id<Self>>;

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
    #[objc2::method(sel = "initWithContentsOfURL:error:", managed = "Init", throws)]
    pub unsafe fn initWithContentsOfURL_error(
        this: Option<Allocated<Self>>,
        file_url: &NSURL,
    ) -> Result<Id<Self>, Id<NSError>>;
}
