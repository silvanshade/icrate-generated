//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::DeviceCheck::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "DeviceCheck_DCAppAttestService")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type DCAppAttestService;
}

#[cfg(feature = "DeviceCheck_DCAppAttestService")]
unsafe impl NSObjectProtocol for DCAppAttestService {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "DeviceCheck_DCAppAttestService")]
    pub type DCAppAttestService;

    #[objc2::method(sel = "sharedService", managed = "Other")]
    pub unsafe fn sharedService() -> Id<DCAppAttestService>;

    #[objc2::method(sel = "isSupported")]
    pub unsafe fn isSupported(&self) -> bool;

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "generateKeyWithCompletionHandler:")]
    pub unsafe fn generateKeyWithCompletionHandler(
        &self,
        completion_handler: &Block<(*mut NSString, *mut NSError), ()>,
    );

    #[cfg(all(
        feature = "Foundation_NSData",
        feature = "Foundation_NSError",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "attestKey:clientDataHash:completionHandler:")]
    pub unsafe fn attestKey_clientDataHash_completionHandler(
        &self,
        key_id: &NSString,
        client_data_hash: &NSData,
        completion_handler: &Block<(*mut NSData, *mut NSError), ()>,
    );

    #[cfg(all(
        feature = "Foundation_NSData",
        feature = "Foundation_NSError",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "generateAssertion:clientDataHash:completionHandler:")]
    pub unsafe fn generateAssertion_clientDataHash_completionHandler(
        &self,
        key_id: &NSString,
        client_data_hash: &NSData,
        completion_handler: &Block<(*mut NSData, *mut NSError), ()>,
    );
}
