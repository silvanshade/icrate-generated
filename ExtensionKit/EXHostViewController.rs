//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::ExtensionKit::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSViewController,
    unsafe inherits = [
        NSResponder,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "ExtensionKit_EXHostViewController")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type EXHostViewController;
}

#[cfg(feature = "ExtensionKit_EXHostViewController")]
unsafe impl NSCoding for EXHostViewController {}

#[cfg(feature = "ExtensionKit_EXHostViewController")]
unsafe impl NSEditor for EXHostViewController {}

#[cfg(feature = "ExtensionKit_EXHostViewController")]
unsafe impl NSObjectProtocol for EXHostViewController {}

#[cfg(feature = "ExtensionKit_EXHostViewController")]
unsafe impl NSSeguePerforming for EXHostViewController {}

#[cfg(feature = "ExtensionKit_EXHostViewController")]
unsafe impl NSUserInterfaceItemIdentification for EXHostViewController {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "ExtensionKit_EXHostViewController")]
    pub type EXHostViewController;

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn EXHostViewControllerDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(
        &self,
        delegate: Option<&ProtocolObject<dyn EXHostViewControllerDelegate>>,
    );

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "placeholderView", managed = "Other")]
    pub unsafe fn placeholderView(&self) -> Id<NSView>;

    #[cfg(feature = "AppKit_NSView")]
    #[objc2::method(sel = "setPlaceholderView:")]
    pub unsafe fn setPlaceholderView(&self, placeholder_view: &NSView);

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSXPCConnection"))]
    #[objc2::method(sel = "makeXPCConnectionWithError:", managed = "Other", throws)]
    pub unsafe fn makeXPCConnectionWithError(&self) -> Result<Id<NSXPCConnection>, Id<NSError>>;
}

#[objc2::protocol]
pub unsafe trait EXHostViewControllerDelegate: NSObjectProtocol {
    #[cfg(feature = "ExtensionKit_EXHostViewController")]
    #[objc2::method(optional, sel = "hostViewControllerDidActivate:")]
    unsafe fn hostViewControllerDidActivate(&self, view_controller: &EXHostViewController);

    #[cfg(all(
        feature = "ExtensionKit_EXHostViewController",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(optional, sel = "hostViewControllerWillDeactivate:error:")]
    unsafe fn hostViewControllerWillDeactivate_error(
        &self,
        view_controller: &EXHostViewController,
        error: Option<&NSError>,
    );
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSViewController`
    #[cfg(feature = "ExtensionKit_EXHostViewController")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "ExtensionKit_EXHostViewController")]
    pub type EXHostViewController;

    #[cfg(feature = "Foundation_NSBundle")]
    #[objc2::method(sel = "initWithNibName:bundle:", managed = "Init")]
    pub unsafe fn initWithNibName_bundle(
        this: Option<Allocated<Self>>,
        nib_name_or_nil: Option<&NSNibName>,
        nib_bundle_or_nil: Option<&NSBundle>,
    ) -> Id<Self>;
}
