//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::WebKit::*;

#[objc2::interface(
    unsafe super = DOMHTMLElement,
    unsafe inherits = [
        DOMElement,
        DOMNode,
        DOMObject,
        WebScriptObject,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[deprecated]
    #[cfg(feature = "WebKit_DOMHTMLScriptElement")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type DOMHTMLScriptElement;
}

#[cfg(feature = "WebKit_DOMHTMLScriptElement")]
unsafe impl DOMEventTarget for DOMHTMLScriptElement {}

#[cfg(feature = "WebKit_DOMHTMLScriptElement")]
unsafe impl NSObjectProtocol for DOMHTMLScriptElement {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "WebKit_DOMHTMLScriptElement")]
    #[deprecated]
    pub type DOMHTMLScriptElement;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "text", managed = "Other")]
    pub unsafe fn text(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setText:")]
    pub unsafe fn setText(&self, text: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "htmlFor", managed = "Other")]
    pub unsafe fn htmlFor(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setHtmlFor:")]
    pub unsafe fn setHtmlFor(&self, html_for: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "event", managed = "Other")]
    pub unsafe fn event(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setEvent:")]
    pub unsafe fn setEvent(&self, event: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "charset", managed = "Other")]
    pub unsafe fn charset(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setCharset:")]
    pub unsafe fn setCharset(&self, charset: Option<&NSString>);

    #[objc2::method(sel = "defer")]
    pub unsafe fn defer(&self) -> bool;

    #[objc2::method(sel = "setDefer:")]
    pub unsafe fn setDefer(&self, defer: bool);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "src", managed = "Other")]
    pub unsafe fn src(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setSrc:")]
    pub unsafe fn setSrc(&self, src: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "type", managed = "Other")]
    pub unsafe fn r#type(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setType:")]
    pub unsafe fn setType(&self, r#type: Option<&NSString>);
}
