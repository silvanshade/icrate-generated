//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::WebKit::*;

extern_static!(WebElementDOMNodeKey: Option<&'static NSString>);

extern_static!(WebElementFrameKey: Option<&'static NSString>);

extern_static!(WebElementImageAltStringKey: Option<&'static NSString>);

extern_static!(WebElementImageKey: Option<&'static NSString>);

extern_static!(WebElementImageRectKey: Option<&'static NSString>);

extern_static!(WebElementImageURLKey: Option<&'static NSString>);

extern_static!(WebElementIsSelectedKey: Option<&'static NSString>);

extern_static!(WebElementLinkURLKey: Option<&'static NSString>);

extern_static!(WebElementLinkTargetFrameKey: Option<&'static NSString>);

extern_static!(WebElementLinkTitleKey: Option<&'static NSString>);

extern_static!(WebElementLinkLabelKey: Option<&'static NSString>);

extern_static!(WebViewProgressStartedNotification: Option<&'static NSString>);

extern_static!(WebViewProgressEstimateChangedNotification: Option<&'static NSString>);

extern_static!(WebViewProgressFinishedNotification: Option<&'static NSString>);

#[objc2::interface(
    unsafe super = NSView,
    unsafe inherits = [
        NSResponder,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[deprecated = "No longer supported; please adopt WKWebView."]
    #[cfg(feature = "WebKit_WebView")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type WebView;
}

#[cfg(feature = "WebKit_WebView")]
unsafe impl NSAccessibility for WebView {}

#[cfg(feature = "WebKit_WebView")]
unsafe impl NSAccessibilityElementProtocol for WebView {}

#[cfg(feature = "WebKit_WebView")]
unsafe impl NSAnimatablePropertyContainer for WebView {}

#[cfg(feature = "WebKit_WebView")]
unsafe impl NSAppearanceCustomization for WebView {}

#[cfg(feature = "WebKit_WebView")]
unsafe impl NSCoding for WebView {}

#[cfg(feature = "WebKit_WebView")]
unsafe impl NSDraggingDestination for WebView {}

#[cfg(feature = "WebKit_WebView")]
unsafe impl NSObjectProtocol for WebView {}

#[cfg(feature = "WebKit_WebView")]
unsafe impl NSUserInterfaceItemIdentification for WebView {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "WebKit_WebView")]
    #[deprecated = "No longer supported; please adopt WKWebView."]
    pub type WebView;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "canShowMIMEType:")]
    pub unsafe fn canShowMIMEType(mime_type: Option<&NSString>) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "canShowMIMETypeAsHTML:")]
    pub unsafe fn canShowMIMETypeAsHTML(mime_type: Option<&NSString>) -> bool;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "MIMETypesShownAsHTML", managed = "Other")]
    pub unsafe fn MIMETypesShownAsHTML() -> Option<Id<NSArray>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "setMIMETypesShownAsHTML:")]
    pub unsafe fn setMIMETypesShownAsHTML(mime_types: Option<&NSArray>);

    #[cfg(all(feature = "AppKit_NSPasteboard", feature = "Foundation_NSURL"))]
    #[objc2::method(sel = "URLFromPasteboard:", managed = "Other")]
    pub unsafe fn URLFromPasteboard(pasteboard: Option<&NSPasteboard>) -> Option<Id<NSURL>>;

    #[cfg(all(feature = "AppKit_NSPasteboard", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "URLTitleFromPasteboard:", managed = "Other")]
    pub unsafe fn URLTitleFromPasteboard(pasteboard: Option<&NSPasteboard>)
        -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "registerURLSchemeAsLocal:")]
    pub unsafe fn registerURLSchemeAsLocal(scheme: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithFrame:frameName:groupName:", managed = "Init")]
    pub unsafe fn initWithFrame_frameName_groupName(
        this: Option<Allocated<Self>>,
        frame: NSRect,
        frame_name: Option<&NSString>,
        group_name: Option<&NSString>,
    ) -> Option<Id<Self>>;

    #[objc2::method(sel = "close")]
    pub unsafe fn close(&self);

    #[objc2::method(sel = "shouldCloseWithWindow")]
    pub unsafe fn shouldCloseWithWindow(&self) -> bool;

    #[objc2::method(sel = "setShouldCloseWithWindow:")]
    pub unsafe fn setShouldCloseWithWindow(&self, should_close_with_window: bool);

    #[objc2::method(sel = "UIDelegate", managed = "Other")]
    pub unsafe fn UIDelegate(&self) -> Option<Id<ProtocolObject<dyn WebUIDelegate>>>;

    #[objc2::method(sel = "setUIDelegate:")]
    pub unsafe fn setUIDelegate(&self, ui_delegate: Option<&ProtocolObject<dyn WebUIDelegate>>);

    #[objc2::method(sel = "resourceLoadDelegate", managed = "Other")]
    pub unsafe fn resourceLoadDelegate(
        &self,
    ) -> Option<Id<ProtocolObject<dyn WebResourceLoadDelegate>>>;

    #[objc2::method(sel = "setResourceLoadDelegate:")]
    pub unsafe fn setResourceLoadDelegate(
        &self,
        resource_load_delegate: Option<&ProtocolObject<dyn WebResourceLoadDelegate>>,
    );

    #[objc2::method(sel = "downloadDelegate", managed = "Other")]
    pub unsafe fn downloadDelegate(&self) -> Option<Id<ProtocolObject<dyn WebDownloadDelegate>>>;

    #[objc2::method(sel = "setDownloadDelegate:")]
    pub unsafe fn setDownloadDelegate(
        &self,
        download_delegate: Option<&ProtocolObject<dyn WebDownloadDelegate>>,
    );

    #[objc2::method(sel = "frameLoadDelegate", managed = "Other")]
    pub unsafe fn frameLoadDelegate(&self) -> Option<Id<ProtocolObject<dyn WebFrameLoadDelegate>>>;

    #[objc2::method(sel = "setFrameLoadDelegate:")]
    pub unsafe fn setFrameLoadDelegate(
        &self,
        frame_load_delegate: Option<&ProtocolObject<dyn WebFrameLoadDelegate>>,
    );

    #[objc2::method(sel = "policyDelegate", managed = "Other")]
    pub unsafe fn policyDelegate(&self) -> Option<Id<ProtocolObject<dyn WebPolicyDelegate>>>;

    #[objc2::method(sel = "setPolicyDelegate:")]
    pub unsafe fn setPolicyDelegate(
        &self,
        policy_delegate: Option<&ProtocolObject<dyn WebPolicyDelegate>>,
    );

    #[cfg(feature = "WebKit_WebFrame")]
    #[objc2::method(sel = "mainFrame", managed = "Other")]
    pub unsafe fn mainFrame(&self) -> Option<Id<WebFrame>>;

    #[cfg(feature = "WebKit_WebFrame")]
    #[objc2::method(sel = "selectedFrame", managed = "Other")]
    pub unsafe fn selectedFrame(&self) -> Option<Id<WebFrame>>;

    #[cfg(feature = "WebKit_WebBackForwardList")]
    #[objc2::method(sel = "backForwardList", managed = "Other")]
    pub unsafe fn backForwardList(&self) -> Option<Id<WebBackForwardList>>;

    #[objc2::method(sel = "setMaintainsBackForwardList:")]
    pub unsafe fn setMaintainsBackForwardList(&self, flag: bool);

    #[objc2::method(sel = "goBack")]
    pub unsafe fn goBack(&self) -> bool;

    #[objc2::method(sel = "goForward")]
    pub unsafe fn goForward(&self) -> bool;

    #[cfg(feature = "WebKit_WebHistoryItem")]
    #[objc2::method(sel = "goToBackForwardItem:")]
    pub unsafe fn goToBackForwardItem(&self, item: Option<&WebHistoryItem>) -> bool;

    #[objc2::method(sel = "textSizeMultiplier")]
    pub unsafe fn textSizeMultiplier(&self) -> c_float;

    #[objc2::method(sel = "setTextSizeMultiplier:")]
    pub unsafe fn setTextSizeMultiplier(&self, text_size_multiplier: c_float);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "applicationNameForUserAgent", managed = "Other")]
    pub unsafe fn applicationNameForUserAgent(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setApplicationNameForUserAgent:")]
    pub unsafe fn setApplicationNameForUserAgent(
        &self,
        application_name_for_user_agent: Option<&NSString>,
    );

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "customUserAgent", managed = "Other")]
    pub unsafe fn customUserAgent(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setCustomUserAgent:")]
    pub unsafe fn setCustomUserAgent(&self, custom_user_agent: Option<&NSString>);

    #[cfg(all(feature = "Foundation_NSString", feature = "Foundation_NSURL"))]
    #[objc2::method(sel = "userAgentForURL:", managed = "Other")]
    pub unsafe fn userAgentForURL(&self, url: Option<&NSURL>) -> Option<Id<NSString>>;

    #[objc2::method(sel = "supportsTextEncoding")]
    pub unsafe fn supportsTextEncoding(&self) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "customTextEncodingName", managed = "Other")]
    pub unsafe fn customTextEncodingName(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setCustomTextEncodingName:")]
    pub unsafe fn setCustomTextEncodingName(&self, custom_text_encoding_name: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "mediaStyle", managed = "Other")]
    pub unsafe fn mediaStyle(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setMediaStyle:")]
    pub unsafe fn setMediaStyle(&self, media_style: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "stringByEvaluatingJavaScriptFromString:", managed = "Other")]
    pub unsafe fn stringByEvaluatingJavaScriptFromString(
        &self,
        script: Option<&NSString>,
    ) -> Option<Id<NSString>>;

    #[cfg(feature = "WebKit_WebScriptObject")]
    #[objc2::method(sel = "windowScriptObject", managed = "Other")]
    pub unsafe fn windowScriptObject(&self) -> Option<Id<WebScriptObject>>;

    #[cfg(feature = "WebKit_WebPreferences")]
    #[objc2::method(sel = "preferences", managed = "Other")]
    pub unsafe fn preferences(&self) -> Option<Id<WebPreferences>>;

    #[cfg(feature = "WebKit_WebPreferences")]
    #[objc2::method(sel = "setPreferences:")]
    pub unsafe fn setPreferences(&self, preferences: Option<&WebPreferences>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "preferencesIdentifier", managed = "Other")]
    pub unsafe fn preferencesIdentifier(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setPreferencesIdentifier:")]
    pub unsafe fn setPreferencesIdentifier(&self, preferences_identifier: Option<&NSString>);

    #[cfg(feature = "AppKit_NSWindow")]
    #[objc2::method(sel = "hostWindow", managed = "Other")]
    pub unsafe fn hostWindow(&self) -> Option<Id<NSWindow>>;

    #[cfg(feature = "AppKit_NSWindow")]
    #[objc2::method(sel = "setHostWindow:")]
    pub unsafe fn setHostWindow(&self, host_window: Option<&NSWindow>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "searchFor:direction:caseSensitive:wrap:")]
    pub unsafe fn searchFor_direction_caseSensitive_wrap(
        &self,
        string: Option<&NSString>,
        forward: bool,
        case_flag: bool,
        wrap_flag: bool,
    ) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "registerViewClass:representationClass:forMIMEType:")]
    pub unsafe fn registerViewClass_representationClass_forMIMEType(
        view_class: Option<&Class>,
        representation_class: Option<&Class>,
        mime_type: Option<&NSString>,
    );

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "groupName", managed = "Other")]
    pub unsafe fn groupName(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setGroupName:")]
    pub unsafe fn setGroupName(&self, group_name: Option<&NSString>);

    #[objc2::method(sel = "estimatedProgress")]
    pub unsafe fn estimatedProgress(&self) -> c_double;

    #[objc2::method(sel = "isLoading")]
    pub unsafe fn isLoading(&self) -> bool;

    #[cfg(feature = "Foundation_NSDictionary")]
    #[objc2::method(sel = "elementAtPoint:", managed = "Other")]
    pub unsafe fn elementAtPoint(&self, point: NSPoint) -> Option<Id<NSDictionary>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "pasteboardTypesForSelection", managed = "Other")]
    pub unsafe fn pasteboardTypesForSelection(&self) -> Id<NSArray>;

    #[cfg(all(feature = "AppKit_NSPasteboard", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "writeSelectionWithPasteboardTypes:toPasteboard:")]
    pub unsafe fn writeSelectionWithPasteboardTypes_toPasteboard(
        &self,
        types: Option<&NSArray>,
        pasteboard: Option<&NSPasteboard>,
    );

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSDictionary"))]
    #[objc2::method(sel = "pasteboardTypesForElement:", managed = "Other")]
    pub unsafe fn pasteboardTypesForElement(
        &self,
        element: Option<&NSDictionary>,
    ) -> Option<Id<NSArray>>;

    #[cfg(all(
        feature = "AppKit_NSPasteboard",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSDictionary"
    ))]
    #[objc2::method(sel = "writeElement:withPasteboardTypes:toPasteboard:")]
    pub unsafe fn writeElement_withPasteboardTypes_toPasteboard(
        &self,
        element: Option<&NSDictionary>,
        types: Option<&NSArray>,
        pasteboard: Option<&NSPasteboard>,
    );

    #[objc2::method(sel = "moveDragCaretToPoint:")]
    pub unsafe fn moveDragCaretToPoint(&self, point: NSPoint);

    #[objc2::method(sel = "removeDragCaret")]
    pub unsafe fn removeDragCaret(&self);

    #[objc2::method(sel = "drawsBackground")]
    pub unsafe fn drawsBackground(&self) -> bool;

    #[objc2::method(sel = "setDrawsBackground:")]
    pub unsafe fn setDrawsBackground(&self, draws_background: bool);

    #[objc2::method(sel = "shouldUpdateWhileOffscreen")]
    pub unsafe fn shouldUpdateWhileOffscreen(&self) -> bool;

    #[objc2::method(sel = "setShouldUpdateWhileOffscreen:")]
    pub unsafe fn setShouldUpdateWhileOffscreen(&self, should_update_while_offscreen: bool);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "mainFrameURL", managed = "Other")]
    pub unsafe fn mainFrameURL(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setMainFrameURL:")]
    pub unsafe fn setMainFrameURL(&self, main_frame_url: Option<&NSString>);

    #[cfg(feature = "WebKit_DOMDocument")]
    #[objc2::method(sel = "mainFrameDocument", managed = "Other")]
    pub unsafe fn mainFrameDocument(&self) -> Option<Id<DOMDocument>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "mainFrameTitle", managed = "Other")]
    pub unsafe fn mainFrameTitle(&self) -> Id<NSString>;

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "mainFrameIcon", managed = "Other")]
    pub unsafe fn mainFrameIcon(&self) -> Option<Id<NSImage>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "WebKit_WebView")]
    pub type WebView;

    #[objc2::method(sel = "takeStringURLFrom:")]
    pub unsafe fn takeStringURLFrom(&self, sender: Option<&Object>);

    #[objc2::method(sel = "stopLoading:")]
    pub unsafe fn stopLoading(&self, sender: Option<&Object>);

    #[objc2::method(sel = "reload:")]
    pub unsafe fn reload(&self, sender: Option<&Object>);

    #[objc2::method(sel = "reloadFromOrigin:")]
    pub unsafe fn reloadFromOrigin(&self, sender: Option<&Object>);

    #[objc2::method(sel = "canGoBack")]
    pub unsafe fn canGoBack(&self) -> bool;

    #[objc2::method(sel = "goBack:")]
    pub unsafe fn goBack_(&self, sender: Option<&Object>);

    #[objc2::method(sel = "canGoForward")]
    pub unsafe fn canGoForward(&self) -> bool;

    #[objc2::method(sel = "goForward:")]
    pub unsafe fn goForward_(&self, sender: Option<&Object>);

    #[objc2::method(sel = "canMakeTextLarger")]
    pub unsafe fn canMakeTextLarger(&self) -> bool;

    #[objc2::method(sel = "makeTextLarger:")]
    pub unsafe fn makeTextLarger(&self, sender: Option<&Object>);

    #[objc2::method(sel = "canMakeTextSmaller")]
    pub unsafe fn canMakeTextSmaller(&self) -> bool;

    #[objc2::method(sel = "makeTextSmaller:")]
    pub unsafe fn makeTextSmaller(&self, sender: Option<&Object>);

    #[objc2::method(sel = "canMakeTextStandardSize")]
    pub unsafe fn canMakeTextStandardSize(&self) -> bool;

    #[objc2::method(sel = "makeTextStandardSize:")]
    pub unsafe fn makeTextStandardSize(&self, sender: Option<&Object>);

    #[objc2::method(sel = "toggleContinuousSpellChecking:")]
    pub unsafe fn toggleContinuousSpellChecking(&self, sender: Option<&Object>);

    #[objc2::method(sel = "toggleSmartInsertDelete:")]
    pub unsafe fn toggleSmartInsertDelete(&self, sender: Option<&Object>);
}

#[cfg(feature = "WebKit_WebView")]
unsafe impl NSUserInterfaceValidations for WebView {}

extern_static!(WebViewDidBeginEditingNotification: Option<&'static NSString>);

extern_static!(WebViewDidChangeNotification: Option<&'static NSString>);

extern_static!(WebViewDidEndEditingNotification: Option<&'static NSString>);

extern_static!(WebViewDidChangeTypingStyleNotification: Option<&'static NSString>);

extern_static!(WebViewDidChangeSelectionNotification: Option<&'static NSString>);

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "WebKit_WebView")]
    pub type WebView;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "WebKit_DOMCSSStyleDeclaration",
        feature = "WebKit_DOMElement"
    ))]
    #[objc2::method(sel = "computedStyleForElement:pseudoElement:", managed = "Other")]
    pub unsafe fn computedStyleForElement_pseudoElement(
        &self,
        element: Option<&DOMElement>,
        pseudo_element: Option<&NSString>,
    ) -> Option<Id<DOMCSSStyleDeclaration>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "WebKit_WebView")]
    pub type WebView;

    #[cfg(feature = "WebKit_DOMRange")]
    #[objc2::method(sel = "editableDOMRangeForPoint:", managed = "Other")]
    pub unsafe fn editableDOMRangeForPoint(&self, point: NSPoint) -> Option<Id<DOMRange>>;

    #[cfg(feature = "WebKit_DOMRange")]
    #[objc2::method(sel = "setSelectedDOMRange:affinity:")]
    pub unsafe fn setSelectedDOMRange_affinity(
        &self,
        range: Option<&DOMRange>,
        selection_affinity: NSSelectionAffinity,
    );

    #[cfg(feature = "WebKit_DOMRange")]
    #[objc2::method(sel = "selectedDOMRange", managed = "Other")]
    pub unsafe fn selectedDOMRange(&self) -> Option<Id<DOMRange>>;

    #[objc2::method(sel = "selectionAffinity")]
    pub unsafe fn selectionAffinity(&self) -> NSSelectionAffinity;

    #[objc2::method(sel = "maintainsInactiveSelection")]
    pub unsafe fn maintainsInactiveSelection(&self) -> bool;

    #[objc2::method(sel = "isEditable")]
    pub unsafe fn isEditable(&self) -> bool;

    #[objc2::method(sel = "setEditable:")]
    pub unsafe fn setEditable(&self, editable: bool);

    #[cfg(feature = "WebKit_DOMCSSStyleDeclaration")]
    #[objc2::method(sel = "typingStyle", managed = "Other")]
    pub unsafe fn typingStyle(&self) -> Option<Id<DOMCSSStyleDeclaration>>;

    #[cfg(feature = "WebKit_DOMCSSStyleDeclaration")]
    #[objc2::method(sel = "setTypingStyle:")]
    pub unsafe fn setTypingStyle(&self, typing_style: Option<&DOMCSSStyleDeclaration>);

    #[objc2::method(sel = "smartInsertDeleteEnabled")]
    pub unsafe fn smartInsertDeleteEnabled(&self) -> bool;

    #[objc2::method(sel = "setSmartInsertDeleteEnabled:")]
    pub unsafe fn setSmartInsertDeleteEnabled(&self, smart_insert_delete_enabled: bool);

    #[objc2::method(sel = "isContinuousSpellCheckingEnabled")]
    pub unsafe fn isContinuousSpellCheckingEnabled(&self) -> bool;

    #[objc2::method(sel = "setContinuousSpellCheckingEnabled:")]
    pub unsafe fn setContinuousSpellCheckingEnabled(&self, continuous_spell_checking_enabled: bool);

    #[objc2::method(sel = "spellCheckerDocumentTag")]
    pub unsafe fn spellCheckerDocumentTag(&self) -> NSInteger;

    #[cfg(feature = "Foundation_NSUndoManager")]
    #[objc2::method(sel = "undoManager", managed = "Other")]
    pub unsafe fn undoManager(&self) -> Option<Id<NSUndoManager>>;

    #[objc2::method(sel = "editingDelegate", managed = "Other")]
    pub unsafe fn editingDelegate(&self) -> Option<Id<ProtocolObject<dyn WebEditingDelegate>>>;

    #[objc2::method(sel = "setEditingDelegate:")]
    pub unsafe fn setEditingDelegate(
        &self,
        editing_delegate: Option<&ProtocolObject<dyn WebEditingDelegate>>,
    );

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "WebKit_DOMCSSStyleDeclaration"
    ))]
    #[objc2::method(sel = "styleDeclarationWithText:", managed = "Other")]
    pub unsafe fn styleDeclarationWithText(
        &self,
        text: Option<&NSString>,
    ) -> Option<Id<DOMCSSStyleDeclaration>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "WebKit_WebView")]
    pub type WebView;

    #[cfg(feature = "WebKit_DOMNode")]
    #[objc2::method(sel = "replaceSelectionWithNode:")]
    pub unsafe fn replaceSelectionWithNode(&self, node: Option<&DOMNode>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "replaceSelectionWithText:")]
    pub unsafe fn replaceSelectionWithText(&self, text: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "replaceSelectionWithMarkupString:")]
    pub unsafe fn replaceSelectionWithMarkupString(&self, markup_string: Option<&NSString>);

    #[cfg(feature = "WebKit_WebArchive")]
    #[objc2::method(sel = "replaceSelectionWithArchive:")]
    pub unsafe fn replaceSelectionWithArchive(&self, archive: Option<&WebArchive>);

    #[objc2::method(sel = "deleteSelection")]
    pub unsafe fn deleteSelection(&self);

    #[cfg(feature = "WebKit_DOMCSSStyleDeclaration")]
    #[objc2::method(sel = "applyStyle:")]
    pub unsafe fn applyStyle(&self, style: Option<&DOMCSSStyleDeclaration>);
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "WebKit_WebView")]
    pub type WebView;

    #[objc2::method(sel = "copy:")]
    pub unsafe fn copy(&self, sender: Option<&Object>);

    #[objc2::method(sel = "cut:")]
    pub unsafe fn cut(&self, sender: Option<&Object>);

    #[objc2::method(sel = "paste:")]
    pub unsafe fn paste(&self, sender: Option<&Object>);

    #[objc2::method(sel = "copyFont:")]
    pub unsafe fn copyFont(&self, sender: Option<&Object>);

    #[objc2::method(sel = "pasteFont:")]
    pub unsafe fn pasteFont(&self, sender: Option<&Object>);

    #[objc2::method(sel = "delete:")]
    pub unsafe fn delete(&self, sender: Option<&Object>);

    #[objc2::method(sel = "pasteAsPlainText:")]
    pub unsafe fn pasteAsPlainText(&self, sender: Option<&Object>);

    #[objc2::method(sel = "pasteAsRichText:")]
    pub unsafe fn pasteAsRichText(&self, sender: Option<&Object>);

    #[objc2::method(sel = "changeFont:")]
    pub unsafe fn changeFont(&self, sender: Option<&Object>);

    #[objc2::method(sel = "changeAttributes:")]
    pub unsafe fn changeAttributes(&self, sender: Option<&Object>);

    #[objc2::method(sel = "changeDocumentBackgroundColor:")]
    pub unsafe fn changeDocumentBackgroundColor(&self, sender: Option<&Object>);

    #[objc2::method(sel = "changeColor:")]
    pub unsafe fn changeColor(&self, sender: Option<&Object>);

    #[objc2::method(sel = "alignCenter:")]
    pub unsafe fn alignCenter(&self, sender: Option<&Object>);

    #[objc2::method(sel = "alignJustified:")]
    pub unsafe fn alignJustified(&self, sender: Option<&Object>);

    #[objc2::method(sel = "alignLeft:")]
    pub unsafe fn alignLeft(&self, sender: Option<&Object>);

    #[objc2::method(sel = "alignRight:")]
    pub unsafe fn alignRight(&self, sender: Option<&Object>);

    #[objc2::method(sel = "checkSpelling:")]
    pub unsafe fn checkSpelling(&self, sender: Option<&Object>);

    #[objc2::method(sel = "showGuessPanel:")]
    pub unsafe fn showGuessPanel(&self, sender: Option<&Object>);

    #[objc2::method(sel = "performFindPanelAction:")]
    pub unsafe fn performFindPanelAction(&self, sender: Option<&Object>);

    #[objc2::method(sel = "startSpeaking:")]
    pub unsafe fn startSpeaking(&self, sender: Option<&Object>);

    #[objc2::method(sel = "stopSpeaking:")]
    pub unsafe fn stopSpeaking(&self, sender: Option<&Object>);

    #[objc2::method(sel = "moveToBeginningOfSentence:")]
    pub unsafe fn moveToBeginningOfSentence(&self, sender: Option<&Object>);

    #[objc2::method(sel = "moveToBeginningOfSentenceAndModifySelection:")]
    pub unsafe fn moveToBeginningOfSentenceAndModifySelection(&self, sender: Option<&Object>);

    #[objc2::method(sel = "moveToEndOfSentence:")]
    pub unsafe fn moveToEndOfSentence(&self, sender: Option<&Object>);

    #[objc2::method(sel = "moveToEndOfSentenceAndModifySelection:")]
    pub unsafe fn moveToEndOfSentenceAndModifySelection(&self, sender: Option<&Object>);

    #[objc2::method(sel = "selectSentence:")]
    pub unsafe fn selectSentence(&self, sender: Option<&Object>);

    #[objc2::method(sel = "overWrite:")]
    pub unsafe fn overWrite(&self, sender: Option<&Object>);
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSView`
    #[cfg(feature = "WebKit_WebView")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "WebKit_WebView")]
    pub type WebView;

    #[objc2::method(sel = "initWithFrame:", managed = "Init")]
    pub unsafe fn initWithFrame(this: Option<Allocated<Self>>, frame_rect: NSRect) -> Id<Self>;
}
