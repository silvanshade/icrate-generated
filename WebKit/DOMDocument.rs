//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::WebKit::*;

#[objc2::interface(
    unsafe super = DOMNode,
    unsafe inherits = [
        DOMObject,
        WebScriptObject,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[deprecated]
    #[cfg(feature = "WebKit_DOMDocument")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type DOMDocument;
}

#[cfg(feature = "WebKit_DOMDocument")]
unsafe impl DOMEventTarget for DOMDocument {}

#[cfg(feature = "WebKit_DOMDocument")]
unsafe impl NSObjectProtocol for DOMDocument {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "WebKit_DOMDocument")]
    #[deprecated]
    pub type DOMDocument;

    #[cfg(feature = "WebKit_DOMDocumentType")]
    #[objc2::method(sel = "doctype", managed = "Other")]
    pub unsafe fn doctype(&self) -> Option<Id<DOMDocumentType>>;

    #[cfg(feature = "WebKit_DOMImplementation")]
    #[objc2::method(sel = "implementation", managed = "Other")]
    pub unsafe fn implementation(&self) -> Option<Id<DOMImplementation>>;

    #[cfg(feature = "WebKit_DOMElement")]
    #[objc2::method(sel = "documentElement", managed = "Other")]
    pub unsafe fn documentElement(&self) -> Option<Id<DOMElement>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "inputEncoding", managed = "Other")]
    pub unsafe fn inputEncoding(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "xmlEncoding", managed = "Other")]
    pub unsafe fn xmlEncoding(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "xmlVersion", managed = "Other")]
    pub unsafe fn xmlVersion(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setXmlVersion:")]
    pub unsafe fn setXmlVersion(&self, xml_version: Option<&NSString>);

    #[objc2::method(sel = "xmlStandalone")]
    pub unsafe fn xmlStandalone(&self) -> bool;

    #[objc2::method(sel = "setXmlStandalone:")]
    pub unsafe fn setXmlStandalone(&self, xml_standalone: bool);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "documentURI", managed = "Other")]
    pub unsafe fn documentURI(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setDocumentURI:")]
    pub unsafe fn setDocumentURI(&self, document_uri: Option<&NSString>);

    #[cfg(feature = "WebKit_DOMAbstractView")]
    #[objc2::method(sel = "defaultView", managed = "Other")]
    pub unsafe fn defaultView(&self) -> Option<Id<DOMAbstractView>>;

    #[cfg(feature = "WebKit_DOMStyleSheetList")]
    #[objc2::method(sel = "styleSheets", managed = "Other")]
    pub unsafe fn styleSheets(&self) -> Option<Id<DOMStyleSheetList>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "title", managed = "Other")]
    pub unsafe fn title(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setTitle:")]
    pub unsafe fn setTitle(&self, title: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "referrer", managed = "Other")]
    pub unsafe fn referrer(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "domain", managed = "Other")]
    pub unsafe fn domain(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "URL", managed = "Other")]
    pub unsafe fn URL(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "cookie", managed = "Other")]
    pub unsafe fn cookie(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setCookie:")]
    pub unsafe fn setCookie(&self, cookie: Option<&NSString>);

    #[cfg(feature = "WebKit_DOMHTMLElement")]
    #[objc2::method(sel = "body", managed = "Other")]
    pub unsafe fn body(&self) -> Option<Id<DOMHTMLElement>>;

    #[cfg(feature = "WebKit_DOMHTMLElement")]
    #[objc2::method(sel = "setBody:")]
    pub unsafe fn setBody(&self, body: Option<&DOMHTMLElement>);

    #[cfg(feature = "WebKit_DOMHTMLCollection")]
    #[objc2::method(sel = "images", managed = "Other")]
    pub unsafe fn images(&self) -> Option<Id<DOMHTMLCollection>>;

    #[cfg(feature = "WebKit_DOMHTMLCollection")]
    #[objc2::method(sel = "applets", managed = "Other")]
    pub unsafe fn applets(&self) -> Option<Id<DOMHTMLCollection>>;

    #[cfg(feature = "WebKit_DOMHTMLCollection")]
    #[objc2::method(sel = "links", managed = "Other")]
    pub unsafe fn links(&self) -> Option<Id<DOMHTMLCollection>>;

    #[cfg(feature = "WebKit_DOMHTMLCollection")]
    #[objc2::method(sel = "forms", managed = "Other")]
    pub unsafe fn forms(&self) -> Option<Id<DOMHTMLCollection>>;

    #[cfg(feature = "WebKit_DOMHTMLCollection")]
    #[objc2::method(sel = "anchors", managed = "Other")]
    pub unsafe fn anchors(&self) -> Option<Id<DOMHTMLCollection>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "lastModified", managed = "Other")]
    pub unsafe fn lastModified(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "charset", managed = "Other")]
    pub unsafe fn charset(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setCharset:")]
    pub unsafe fn setCharset(&self, charset: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "defaultCharset", managed = "Other")]
    pub unsafe fn defaultCharset(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "readyState", managed = "Other")]
    pub unsafe fn readyState(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "characterSet", managed = "Other")]
    pub unsafe fn characterSet(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "preferredStylesheetSet", managed = "Other")]
    pub unsafe fn preferredStylesheetSet(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "selectedStylesheetSet", managed = "Other")]
    pub unsafe fn selectedStylesheetSet(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setSelectedStylesheetSet:")]
    pub unsafe fn setSelectedStylesheetSet(&self, selected_stylesheet_set: Option<&NSString>);

    #[cfg(feature = "WebKit_DOMElement")]
    #[objc2::method(sel = "activeElement", managed = "Other")]
    pub unsafe fn activeElement(&self) -> Option<Id<DOMElement>>;

    #[cfg(all(feature = "Foundation_NSString", feature = "WebKit_DOMElement"))]
    #[objc2::method(sel = "createElement:", managed = "Other")]
    pub unsafe fn createElement(&self, tag_name: Option<&NSString>) -> Option<Id<DOMElement>>;

    #[cfg(feature = "WebKit_DOMDocumentFragment")]
    #[objc2::method(sel = "createDocumentFragment", managed = "Other")]
    pub unsafe fn createDocumentFragment(&self) -> Option<Id<DOMDocumentFragment>>;

    #[cfg(all(feature = "Foundation_NSString", feature = "WebKit_DOMText"))]
    #[objc2::method(sel = "createTextNode:", managed = "Other")]
    pub unsafe fn createTextNode(&self, data: Option<&NSString>) -> Option<Id<DOMText>>;

    #[cfg(all(feature = "Foundation_NSString", feature = "WebKit_DOMComment"))]
    #[objc2::method(sel = "createComment:", managed = "Other")]
    pub unsafe fn createComment(&self, data: Option<&NSString>) -> Option<Id<DOMComment>>;

    #[cfg(all(feature = "Foundation_NSString", feature = "WebKit_DOMCDATASection"))]
    #[objc2::method(sel = "createCDATASection:", managed = "Other")]
    pub unsafe fn createCDATASection(&self, data: Option<&NSString>)
        -> Option<Id<DOMCDATASection>>;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "WebKit_DOMProcessingInstruction"
    ))]
    #[objc2::method(sel = "createProcessingInstruction:data:", managed = "Other")]
    pub unsafe fn createProcessingInstruction_data(
        &self,
        target: Option<&NSString>,
        data: Option<&NSString>,
    ) -> Option<Id<DOMProcessingInstruction>>;

    #[cfg(all(feature = "Foundation_NSString", feature = "WebKit_DOMAttr"))]
    #[objc2::method(sel = "createAttribute:", managed = "Other")]
    pub unsafe fn createAttribute(&self, name: Option<&NSString>) -> Option<Id<DOMAttr>>;

    #[cfg(all(feature = "Foundation_NSString", feature = "WebKit_DOMEntityReference"))]
    #[objc2::method(sel = "createEntityReference:", managed = "Other")]
    pub unsafe fn createEntityReference(
        &self,
        name: Option<&NSString>,
    ) -> Option<Id<DOMEntityReference>>;

    #[cfg(all(feature = "Foundation_NSString", feature = "WebKit_DOMNodeList"))]
    #[objc2::method(sel = "getElementsByTagName:", managed = "Other")]
    pub unsafe fn getElementsByTagName(
        &self,
        tagname: Option<&NSString>,
    ) -> Option<Id<DOMNodeList>>;

    #[objc2::method(sel = "importNode:deep:", managed = "Other")]
    pub unsafe fn importNode_deep(
        &self,
        imported_node: Option<&DOMNode>,
        deep: bool,
    ) -> Option<Id<DOMNode>>;

    #[cfg(all(feature = "Foundation_NSString", feature = "WebKit_DOMElement"))]
    #[objc2::method(sel = "createElementNS:qualifiedName:", managed = "Other")]
    pub unsafe fn createElementNS_qualifiedName(
        &self,
        namespace_uri: Option<&NSString>,
        qualified_name: Option<&NSString>,
    ) -> Option<Id<DOMElement>>;

    #[cfg(all(feature = "Foundation_NSString", feature = "WebKit_DOMAttr"))]
    #[objc2::method(sel = "createAttributeNS:qualifiedName:", managed = "Other")]
    pub unsafe fn createAttributeNS_qualifiedName(
        &self,
        namespace_uri: Option<&NSString>,
        qualified_name: Option<&NSString>,
    ) -> Option<Id<DOMAttr>>;

    #[cfg(all(feature = "Foundation_NSString", feature = "WebKit_DOMNodeList"))]
    #[objc2::method(sel = "getElementsByTagNameNS:localName:", managed = "Other")]
    pub unsafe fn getElementsByTagNameNS_localName(
        &self,
        namespace_uri: Option<&NSString>,
        local_name: Option<&NSString>,
    ) -> Option<Id<DOMNodeList>>;

    #[objc2::method(sel = "adoptNode:", managed = "Other")]
    pub unsafe fn adoptNode(&self, source: Option<&DOMNode>) -> Option<Id<DOMNode>>;

    #[cfg(all(feature = "Foundation_NSString", feature = "WebKit_DOMEvent"))]
    #[objc2::method(sel = "createEvent:", managed = "Other")]
    pub unsafe fn createEvent(&self, event_type: Option<&NSString>) -> Option<Id<DOMEvent>>;

    #[cfg(feature = "WebKit_DOMRange")]
    #[objc2::method(sel = "createRange", managed = "Other")]
    pub unsafe fn createRange(&self) -> Option<Id<DOMRange>>;

    #[cfg(feature = "WebKit_DOMNodeIterator")]
    #[objc2::method(
        sel = "createNodeIterator:whatToShow:filter:expandEntityReferences:",
        managed = "Other"
    )]
    pub unsafe fn createNodeIterator_whatToShow_filter_expandEntityReferences(
        &self,
        root: Option<&DOMNode>,
        what_to_show: c_uint,
        filter: Option<&ProtocolObject<dyn DOMNodeFilter>>,
        expand_entity_references: bool,
    ) -> Option<Id<DOMNodeIterator>>;

    #[cfg(feature = "WebKit_DOMTreeWalker")]
    #[objc2::method(
        sel = "createTreeWalker:whatToShow:filter:expandEntityReferences:",
        managed = "Other"
    )]
    pub unsafe fn createTreeWalker_whatToShow_filter_expandEntityReferences(
        &self,
        root: Option<&DOMNode>,
        what_to_show: c_uint,
        filter: Option<&ProtocolObject<dyn DOMNodeFilter>>,
        expand_entity_references: bool,
    ) -> Option<Id<DOMTreeWalker>>;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "WebKit_DOMCSSStyleDeclaration",
        feature = "WebKit_DOMElement"
    ))]
    #[objc2::method(sel = "getOverrideStyle:pseudoElement:", managed = "Other")]
    pub unsafe fn getOverrideStyle_pseudoElement(
        &self,
        element: Option<&DOMElement>,
        pseudo_element: Option<&NSString>,
    ) -> Option<Id<DOMCSSStyleDeclaration>>;

    #[cfg(all(feature = "Foundation_NSString", feature = "WebKit_DOMXPathExpression"))]
    #[objc2::method(sel = "createExpression:resolver:", managed = "Other")]
    pub unsafe fn createExpression_resolver(
        &self,
        expression: Option<&NSString>,
        resolver: Option<&ProtocolObject<dyn DOMXPathNSResolver>>,
    ) -> Option<Id<DOMXPathExpression>>;

    #[objc2::method(sel = "createNSResolver:", managed = "Other")]
    pub unsafe fn createNSResolver(
        &self,
        node_resolver: Option<&DOMNode>,
    ) -> Option<Id<ProtocolObject<dyn DOMXPathNSResolver>>>;

    #[cfg(all(feature = "Foundation_NSString", feature = "WebKit_DOMXPathResult"))]
    #[objc2::method(
        sel = "evaluate:contextNode:resolver:type:inResult:",
        managed = "Other"
    )]
    pub unsafe fn evaluate_contextNode_resolver_type_inResult(
        &self,
        expression: Option<&NSString>,
        context_node: Option<&DOMNode>,
        resolver: Option<&ProtocolObject<dyn DOMXPathNSResolver>>,
        r#type: c_ushort,
        in_result: Option<&DOMXPathResult>,
    ) -> Option<Id<DOMXPathResult>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "execCommand:userInterface:value:")]
    pub unsafe fn execCommand_userInterface_value(
        &self,
        command: Option<&NSString>,
        user_interface: bool,
        value: Option<&NSString>,
    ) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "execCommand:userInterface:")]
    pub unsafe fn execCommand_userInterface(
        &self,
        command: Option<&NSString>,
        user_interface: bool,
    ) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "execCommand:")]
    pub unsafe fn execCommand(&self, command: Option<&NSString>) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "queryCommandEnabled:")]
    pub unsafe fn queryCommandEnabled(&self, command: Option<&NSString>) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "queryCommandIndeterm:")]
    pub unsafe fn queryCommandIndeterm(&self, command: Option<&NSString>) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "queryCommandState:")]
    pub unsafe fn queryCommandState(&self, command: Option<&NSString>) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "queryCommandSupported:")]
    pub unsafe fn queryCommandSupported(&self, command: Option<&NSString>) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "queryCommandValue:", managed = "Other")]
    pub unsafe fn queryCommandValue(&self, command: Option<&NSString>) -> Option<Id<NSString>>;

    #[cfg(all(feature = "Foundation_NSString", feature = "WebKit_DOMNodeList"))]
    #[objc2::method(sel = "getElementsByName:", managed = "Other")]
    pub unsafe fn getElementsByName(
        &self,
        element_name: Option<&NSString>,
    ) -> Option<Id<DOMNodeList>>;

    #[cfg(feature = "WebKit_DOMElement")]
    #[objc2::method(sel = "elementFromPoint:y:", managed = "Other")]
    pub unsafe fn elementFromPoint_y(&self, x: c_int, y: c_int) -> Option<Id<DOMElement>>;

    #[cfg(feature = "WebKit_DOMCSSStyleDeclaration")]
    #[objc2::method(sel = "createCSSStyleDeclaration", managed = "Other")]
    pub unsafe fn createCSSStyleDeclaration(&self) -> Option<Id<DOMCSSStyleDeclaration>>;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "WebKit_DOMCSSStyleDeclaration",
        feature = "WebKit_DOMElement"
    ))]
    #[objc2::method(sel = "getComputedStyle:pseudoElement:", managed = "Other")]
    pub unsafe fn getComputedStyle_pseudoElement(
        &self,
        element: Option<&DOMElement>,
        pseudo_element: Option<&NSString>,
    ) -> Option<Id<DOMCSSStyleDeclaration>>;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "WebKit_DOMCSSRuleList",
        feature = "WebKit_DOMElement"
    ))]
    #[objc2::method(sel = "getMatchedCSSRules:pseudoElement:", managed = "Other")]
    pub unsafe fn getMatchedCSSRules_pseudoElement(
        &self,
        element: Option<&DOMElement>,
        pseudo_element: Option<&NSString>,
    ) -> Option<Id<DOMCSSRuleList>>;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "WebKit_DOMCSSRuleList",
        feature = "WebKit_DOMElement"
    ))]
    #[objc2::method(
        sel = "getMatchedCSSRules:pseudoElement:authorOnly:",
        managed = "Other"
    )]
    pub unsafe fn getMatchedCSSRules_pseudoElement_authorOnly(
        &self,
        element: Option<&DOMElement>,
        pseudo_element: Option<&NSString>,
        author_only: bool,
    ) -> Option<Id<DOMCSSRuleList>>;

    #[cfg(all(feature = "Foundation_NSString", feature = "WebKit_DOMNodeList"))]
    #[objc2::method(sel = "getElementsByClassName:", managed = "Other")]
    pub unsafe fn getElementsByClassName(
        &self,
        class_names: Option<&NSString>,
    ) -> Option<Id<DOMNodeList>>;

    #[objc2::method(sel = "hasFocus")]
    pub unsafe fn hasFocus(&self) -> bool;

    #[objc2::method(sel = "webkitCancelFullScreen")]
    pub unsafe fn webkitCancelFullScreen(&self);

    #[cfg(all(feature = "Foundation_NSString", feature = "WebKit_DOMElement"))]
    #[objc2::method(sel = "getElementById:", managed = "Other")]
    pub unsafe fn getElementById(&self, element_id: Option<&NSString>) -> Option<Id<DOMElement>>;

    #[cfg(all(feature = "Foundation_NSString", feature = "WebKit_DOMElement"))]
    #[objc2::method(sel = "querySelector:", managed = "Other")]
    pub unsafe fn querySelector(&self, selectors: Option<&NSString>) -> Option<Id<DOMElement>>;

    #[cfg(all(feature = "Foundation_NSString", feature = "WebKit_DOMNodeList"))]
    #[objc2::method(sel = "querySelectorAll:", managed = "Other")]
    pub unsafe fn querySelectorAll(&self, selectors: Option<&NSString>) -> Option<Id<DOMNodeList>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "WebKit_DOMDocument")]
    pub type DOMDocument;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "WebKit_DOMProcessingInstruction"
    ))]
    #[deprecated]
    #[objc2::method(sel = "createProcessingInstruction::", managed = "Other")]
    pub unsafe fn createProcessingInstruction(
        &self,
        target: Option<&NSString>,
        data: Option<&NSString>,
    ) -> Option<Id<DOMProcessingInstruction>>;

    #[cfg(feature = "WebKit_DOMNode")]
    #[deprecated]
    #[objc2::method(sel = "importNode::", managed = "Other")]
    pub unsafe fn importNode(
        &self,
        imported_node: Option<&DOMNode>,
        deep: bool,
    ) -> Option<Id<DOMNode>>;

    #[cfg(all(feature = "Foundation_NSString", feature = "WebKit_DOMElement"))]
    #[deprecated]
    #[objc2::method(sel = "createElementNS::", managed = "Other")]
    pub unsafe fn createElementNS(
        &self,
        namespace_uri: Option<&NSString>,
        qualified_name: Option<&NSString>,
    ) -> Option<Id<DOMElement>>;

    #[cfg(all(feature = "Foundation_NSString", feature = "WebKit_DOMAttr"))]
    #[deprecated]
    #[objc2::method(sel = "createAttributeNS::", managed = "Other")]
    pub unsafe fn createAttributeNS(
        &self,
        namespace_uri: Option<&NSString>,
        qualified_name: Option<&NSString>,
    ) -> Option<Id<DOMAttr>>;

    #[cfg(all(feature = "Foundation_NSString", feature = "WebKit_DOMNodeList"))]
    #[deprecated]
    #[objc2::method(sel = "getElementsByTagNameNS::", managed = "Other")]
    pub unsafe fn getElementsByTagNameNS(
        &self,
        namespace_uri: Option<&NSString>,
        local_name: Option<&NSString>,
    ) -> Option<Id<DOMNodeList>>;

    #[cfg(all(feature = "WebKit_DOMNode", feature = "WebKit_DOMNodeIterator"))]
    #[deprecated]
    #[objc2::method(sel = "createNodeIterator::::", managed = "Other")]
    pub unsafe fn createNodeIterator(
        &self,
        root: Option<&DOMNode>,
        what_to_show: c_uint,
        filter: Option<&ProtocolObject<dyn DOMNodeFilter>>,
        expand_entity_references: bool,
    ) -> Option<Id<DOMNodeIterator>>;

    #[cfg(all(feature = "WebKit_DOMNode", feature = "WebKit_DOMTreeWalker"))]
    #[deprecated]
    #[objc2::method(sel = "createTreeWalker::::", managed = "Other")]
    pub unsafe fn createTreeWalker(
        &self,
        root: Option<&DOMNode>,
        what_to_show: c_uint,
        filter: Option<&ProtocolObject<dyn DOMNodeFilter>>,
        expand_entity_references: bool,
    ) -> Option<Id<DOMTreeWalker>>;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "WebKit_DOMCSSStyleDeclaration",
        feature = "WebKit_DOMElement"
    ))]
    #[deprecated]
    #[objc2::method(sel = "getOverrideStyle::", managed = "Other")]
    pub unsafe fn getOverrideStyle(
        &self,
        element: Option<&DOMElement>,
        pseudo_element: Option<&NSString>,
    ) -> Option<Id<DOMCSSStyleDeclaration>>;

    #[cfg(all(feature = "Foundation_NSString", feature = "WebKit_DOMXPathExpression"))]
    #[deprecated]
    #[objc2::method(sel = "createExpression::", managed = "Other")]
    pub unsafe fn createExpression(
        &self,
        expression: Option<&NSString>,
        resolver: Option<&ProtocolObject<dyn DOMXPathNSResolver>>,
    ) -> Option<Id<DOMXPathExpression>>;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "WebKit_DOMNode",
        feature = "WebKit_DOMXPathResult"
    ))]
    #[deprecated]
    #[objc2::method(sel = "evaluate:::::", managed = "Other")]
    pub unsafe fn evaluate(
        &self,
        expression: Option<&NSString>,
        context_node: Option<&DOMNode>,
        resolver: Option<&ProtocolObject<dyn DOMXPathNSResolver>>,
        r#type: c_ushort,
        in_result: Option<&DOMXPathResult>,
    ) -> Option<Id<DOMXPathResult>>;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "WebKit_DOMCSSStyleDeclaration",
        feature = "WebKit_DOMElement"
    ))]
    #[deprecated]
    #[objc2::method(sel = "getComputedStyle::", managed = "Other")]
    pub unsafe fn getComputedStyle(
        &self,
        element: Option<&DOMElement>,
        pseudo_element: Option<&NSString>,
    ) -> Option<Id<DOMCSSStyleDeclaration>>;
}
