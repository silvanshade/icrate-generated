//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::WebKit::*;

#[objc2::interface(
    unsafe super = DOMHTMLElement,
    unsafe inherits = [
        DOMElement,
        DOMNode,
        DOMObject,
        WebScriptObject,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[deprecated]
    #[cfg(feature = "WebKit_DOMHTMLInputElement")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type DOMHTMLInputElement;
}

#[cfg(feature = "WebKit_DOMHTMLInputElement")]
unsafe impl DOMEventTarget for DOMHTMLInputElement {}

#[cfg(feature = "WebKit_DOMHTMLInputElement")]
unsafe impl NSObjectProtocol for DOMHTMLInputElement {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "WebKit_DOMHTMLInputElement")]
    #[deprecated]
    pub type DOMHTMLInputElement;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "accept", managed = "Other")]
    pub unsafe fn accept(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setAccept:")]
    pub unsafe fn setAccept(&self, accept: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "alt", managed = "Other")]
    pub unsafe fn alt(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setAlt:")]
    pub unsafe fn setAlt(&self, alt: Option<&NSString>);

    #[objc2::method(sel = "autofocus")]
    pub unsafe fn autofocus(&self) -> bool;

    #[objc2::method(sel = "setAutofocus:")]
    pub unsafe fn setAutofocus(&self, autofocus: bool);

    #[objc2::method(sel = "defaultChecked")]
    pub unsafe fn defaultChecked(&self) -> bool;

    #[objc2::method(sel = "setDefaultChecked:")]
    pub unsafe fn setDefaultChecked(&self, default_checked: bool);

    #[objc2::method(sel = "checked")]
    pub unsafe fn checked(&self) -> bool;

    #[objc2::method(sel = "setChecked:")]
    pub unsafe fn setChecked(&self, checked: bool);

    #[objc2::method(sel = "disabled")]
    pub unsafe fn disabled(&self) -> bool;

    #[objc2::method(sel = "setDisabled:")]
    pub unsafe fn setDisabled(&self, disabled: bool);

    #[cfg(feature = "WebKit_DOMHTMLFormElement")]
    #[objc2::method(sel = "form", managed = "Other")]
    pub unsafe fn form(&self) -> Option<Id<DOMHTMLFormElement>>;

    #[cfg(feature = "WebKit_DOMFileList")]
    #[objc2::method(sel = "files", managed = "Other")]
    pub unsafe fn files(&self) -> Option<Id<DOMFileList>>;

    #[cfg(feature = "WebKit_DOMFileList")]
    #[objc2::method(sel = "setFiles:")]
    pub unsafe fn setFiles(&self, files: Option<&DOMFileList>);

    #[objc2::method(sel = "indeterminate")]
    pub unsafe fn indeterminate(&self) -> bool;

    #[objc2::method(sel = "setIndeterminate:")]
    pub unsafe fn setIndeterminate(&self, indeterminate: bool);

    #[objc2::method(sel = "maxLength")]
    pub unsafe fn maxLength(&self) -> c_int;

    #[objc2::method(sel = "setMaxLength:")]
    pub unsafe fn setMaxLength(&self, max_length: c_int);

    #[objc2::method(sel = "multiple")]
    pub unsafe fn multiple(&self) -> bool;

    #[objc2::method(sel = "setMultiple:")]
    pub unsafe fn setMultiple(&self, multiple: bool);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "name", managed = "Other")]
    pub unsafe fn name(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setName:")]
    pub unsafe fn setName(&self, name: Option<&NSString>);

    #[objc2::method(sel = "readOnly")]
    pub unsafe fn readOnly(&self) -> bool;

    #[objc2::method(sel = "setReadOnly:")]
    pub unsafe fn setReadOnly(&self, read_only: bool);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "size", managed = "Other")]
    pub unsafe fn size(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setSize:")]
    pub unsafe fn setSize(&self, size: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "src", managed = "Other")]
    pub unsafe fn src(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setSrc:")]
    pub unsafe fn setSrc(&self, src: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "type", managed = "Other")]
    pub unsafe fn r#type(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setType:")]
    pub unsafe fn setType(&self, r#type: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "defaultValue", managed = "Other")]
    pub unsafe fn defaultValue(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setDefaultValue:")]
    pub unsafe fn setDefaultValue(&self, default_value: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "value", managed = "Other")]
    pub unsafe fn value(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setValue:")]
    pub unsafe fn setValue(&self, value: Option<&NSString>);

    #[objc2::method(sel = "willValidate")]
    pub unsafe fn willValidate(&self) -> bool;

    #[objc2::method(sel = "selectionStart")]
    pub unsafe fn selectionStart(&self) -> c_int;

    #[objc2::method(sel = "setSelectionStart:")]
    pub unsafe fn setSelectionStart(&self, selection_start: c_int);

    #[objc2::method(sel = "selectionEnd")]
    pub unsafe fn selectionEnd(&self) -> c_int;

    #[objc2::method(sel = "setSelectionEnd:")]
    pub unsafe fn setSelectionEnd(&self, selection_end: c_int);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "align", managed = "Other")]
    pub unsafe fn align(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setAlign:")]
    pub unsafe fn setAlign(&self, align: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "useMap", managed = "Other")]
    pub unsafe fn useMap(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setUseMap:")]
    pub unsafe fn setUseMap(&self, use_map: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "accessKey", managed = "Other")]
    pub unsafe fn accessKey(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "setAccessKey:")]
    pub unsafe fn setAccessKey(&self, access_key: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "altDisplayString", managed = "Other")]
    pub unsafe fn altDisplayString(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "absoluteImageURL", managed = "Other")]
    pub unsafe fn absoluteImageURL(&self) -> Id<NSURL>;

    #[objc2::method(sel = "select")]
    pub unsafe fn select(&self);

    #[objc2::method(sel = "setSelectionRange:end:")]
    pub unsafe fn setSelectionRange_end(&self, start: c_int, end: c_int);

    #[objc2::method(sel = "click")]
    pub unsafe fn click(&self);
}
