//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::WebKit::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum WKMediaPlaybackState {
    WKMediaPlaybackStateNone = 0,
    WKMediaPlaybackStatePlaying = 1,
    WKMediaPlaybackStatePaused = 2,
    WKMediaPlaybackStateSuspended = 3,
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum WKMediaCaptureState {
    WKMediaCaptureStateNone = 0,
    WKMediaCaptureStateActive = 1,
    WKMediaCaptureStateMuted = 2,
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum WKFullscreenState {
    WKFullscreenStateNotInFullscreen = 0,
    WKFullscreenStateEnteringFullscreen = 1,
    WKFullscreenStateInFullscreen = 2,
    WKFullscreenStateExitingFullscreen = 3,
}

#[objc2::interface(
    unsafe super = NSView,
    unsafe inherits = [
        NSResponder,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "WebKit_WKWebView")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type WKWebView;
}

#[cfg(feature = "WebKit_WKWebView")]
unsafe impl NSAccessibility for WKWebView {}

#[cfg(feature = "WebKit_WKWebView")]
unsafe impl NSAccessibilityElementProtocol for WKWebView {}

#[cfg(feature = "WebKit_WKWebView")]
unsafe impl NSAnimatablePropertyContainer for WKWebView {}

#[cfg(feature = "WebKit_WKWebView")]
unsafe impl NSAppearanceCustomization for WKWebView {}

#[cfg(feature = "WebKit_WKWebView")]
unsafe impl NSCoding for WKWebView {}

#[cfg(feature = "WebKit_WKWebView")]
unsafe impl NSDraggingDestination for WKWebView {}

#[cfg(feature = "WebKit_WKWebView")]
unsafe impl NSObjectProtocol for WKWebView {}

#[cfg(feature = "WebKit_WKWebView")]
unsafe impl NSUserInterfaceItemIdentification for WKWebView {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "WebKit_WKWebView")]
    pub type WKWebView;

    #[cfg(feature = "WebKit_WKWebViewConfiguration")]
    #[objc2::method(sel = "configuration", managed = "Other")]
    pub unsafe fn configuration(&self) -> Id<WKWebViewConfiguration>;

    #[objc2::method(sel = "navigationDelegate", managed = "Other")]
    pub unsafe fn navigationDelegate(&self)
        -> Option<Id<ProtocolObject<dyn WKNavigationDelegate>>>;

    #[objc2::method(sel = "setNavigationDelegate:")]
    pub unsafe fn setNavigationDelegate(
        &self,
        navigation_delegate: Option<&ProtocolObject<dyn WKNavigationDelegate>>,
    );

    #[objc2::method(sel = "UIDelegate", managed = "Other")]
    pub unsafe fn UIDelegate(&self) -> Option<Id<ProtocolObject<dyn WKUIDelegate>>>;

    #[objc2::method(sel = "setUIDelegate:")]
    pub unsafe fn setUIDelegate(&self, ui_delegate: Option<&ProtocolObject<dyn WKUIDelegate>>);

    #[cfg(feature = "WebKit_WKBackForwardList")]
    #[objc2::method(sel = "backForwardList", managed = "Other")]
    pub unsafe fn backForwardList(&self) -> Id<WKBackForwardList>;

    #[cfg(feature = "WebKit_WKWebViewConfiguration")]
    #[objc2::method(sel = "initWithFrame:configuration:", managed = "Init")]
    pub unsafe fn initWithFrame_configuration(
        this: Option<Allocated<Self>>,
        frame: CGRect,
        configuration: &WKWebViewConfiguration,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, coder: &NSCoder)
        -> Option<Id<Self>>;

    #[cfg(all(feature = "Foundation_NSURLRequest", feature = "WebKit_WKNavigation"))]
    #[objc2::method(sel = "loadRequest:", managed = "Other")]
    pub unsafe fn loadRequest(&self, request: &NSURLRequest) -> Option<Id<WKNavigation>>;

    #[cfg(all(feature = "Foundation_NSURL", feature = "WebKit_WKNavigation"))]
    #[objc2::method(sel = "loadFileURL:allowingReadAccessToURL:", managed = "Other")]
    pub unsafe fn loadFileURL_allowingReadAccessToURL(
        &self,
        url: &NSURL,
        read_access_url: &NSURL,
    ) -> Option<Id<WKNavigation>>;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "Foundation_NSURL",
        feature = "WebKit_WKNavigation"
    ))]
    #[objc2::method(sel = "loadHTMLString:baseURL:", managed = "Other")]
    pub unsafe fn loadHTMLString_baseURL(
        &self,
        string: &NSString,
        base_url: Option<&NSURL>,
    ) -> Option<Id<WKNavigation>>;

    #[cfg(all(
        feature = "Foundation_NSData",
        feature = "Foundation_NSString",
        feature = "Foundation_NSURL",
        feature = "WebKit_WKNavigation"
    ))]
    #[objc2::method(
        sel = "loadData:MIMEType:characterEncodingName:baseURL:",
        managed = "Other"
    )]
    pub unsafe fn loadData_MIMEType_characterEncodingName_baseURL(
        &self,
        data: &NSData,
        mime_type: &NSString,
        character_encoding_name: &NSString,
        base_url: &NSURL,
    ) -> Option<Id<WKNavigation>>;

    #[cfg(all(
        feature = "WebKit_WKBackForwardListItem",
        feature = "WebKit_WKNavigation"
    ))]
    #[objc2::method(sel = "goToBackForwardListItem:", managed = "Other")]
    pub unsafe fn goToBackForwardListItem(
        &self,
        item: &WKBackForwardListItem,
    ) -> Option<Id<WKNavigation>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "title", managed = "Other")]
    pub unsafe fn title(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "URL", managed = "Other")]
    pub unsafe fn URL(&self) -> Option<Id<NSURL>>;

    #[objc2::method(sel = "isLoading")]
    pub unsafe fn isLoading(&self) -> bool;

    #[objc2::method(sel = "estimatedProgress")]
    pub unsafe fn estimatedProgress(&self) -> c_double;

    #[objc2::method(sel = "hasOnlySecureContent")]
    pub unsafe fn hasOnlySecureContent(&self) -> bool;

    #[objc2::method(sel = "canGoBack")]
    pub unsafe fn canGoBack(&self) -> bool;

    #[objc2::method(sel = "canGoForward")]
    pub unsafe fn canGoForward(&self) -> bool;

    #[cfg(feature = "WebKit_WKNavigation")]
    #[objc2::method(sel = "goBack", managed = "Other")]
    pub unsafe fn goBack(&self) -> Option<Id<WKNavigation>>;

    #[cfg(feature = "WebKit_WKNavigation")]
    #[objc2::method(sel = "goForward", managed = "Other")]
    pub unsafe fn goForward(&self) -> Option<Id<WKNavigation>>;

    #[cfg(feature = "WebKit_WKNavigation")]
    #[objc2::method(sel = "reload", managed = "Other")]
    pub unsafe fn reload(&self) -> Option<Id<WKNavigation>>;

    #[cfg(feature = "WebKit_WKNavigation")]
    #[objc2::method(sel = "reloadFromOrigin", managed = "Other")]
    pub unsafe fn reloadFromOrigin(&self) -> Option<Id<WKNavigation>>;

    #[objc2::method(sel = "stopLoading")]
    pub unsafe fn stopLoading(&self);

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "evaluateJavaScript:completionHandler:")]
    pub unsafe fn evaluateJavaScript_completionHandler(
        &self,
        java_script_string: &NSString,
        completion_handler: Option<&Block<(*mut Object, *mut NSError), ()>>,
    );

    #[cfg(all(
        feature = "Foundation_NSError",
        feature = "Foundation_NSString",
        feature = "WebKit_WKContentWorld",
        feature = "WebKit_WKFrameInfo"
    ))]
    #[objc2::method(sel = "evaluateJavaScript:inFrame:inContentWorld:completionHandler:")]
    pub unsafe fn evaluateJavaScript_inFrame_inContentWorld_completionHandler(
        &self,
        java_script_string: &NSString,
        frame: Option<&WKFrameInfo>,
        content_world: &WKContentWorld,
        completion_handler: Option<&Block<(*mut Object, *mut NSError), ()>>,
    );

    #[cfg(all(
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSError",
        feature = "Foundation_NSString",
        feature = "WebKit_WKContentWorld",
        feature = "WebKit_WKFrameInfo"
    ))]
    #[objc2::method(
        sel = "callAsyncJavaScript:arguments:inFrame:inContentWorld:completionHandler:"
    )]
    pub unsafe fn callAsyncJavaScript_arguments_inFrame_inContentWorld_completionHandler(
        &self,
        function_body: &NSString,
        arguments: Option<&NSDictionary<NSString, Object>>,
        frame: Option<&WKFrameInfo>,
        content_world: &WKContentWorld,
        completion_handler: Option<&Block<(*mut Object, *mut NSError), ()>>,
    );

    #[objc2::method(sel = "closeAllMediaPresentationsWithCompletionHandler:")]
    pub unsafe fn closeAllMediaPresentationsWithCompletionHandler(
        &self,
        completion_handler: Option<&Block<(), ()>>,
    );

    #[deprecated]
    #[objc2::method(sel = "closeAllMediaPresentations")]
    pub unsafe fn closeAllMediaPresentations(&self);

    #[objc2::method(sel = "pauseAllMediaPlaybackWithCompletionHandler:")]
    pub unsafe fn pauseAllMediaPlaybackWithCompletionHandler(
        &self,
        completion_handler: Option<&Block<(), ()>>,
    );

    #[deprecated]
    #[objc2::method(sel = "pauseAllMediaPlayback:")]
    pub unsafe fn pauseAllMediaPlayback(&self, completion_handler: Option<&Block<(), ()>>);

    #[objc2::method(sel = "setAllMediaPlaybackSuspended:completionHandler:")]
    pub unsafe fn setAllMediaPlaybackSuspended_completionHandler(
        &self,
        suspended: bool,
        completion_handler: Option<&Block<(), ()>>,
    );

    #[deprecated]
    #[objc2::method(sel = "resumeAllMediaPlayback:")]
    pub unsafe fn resumeAllMediaPlayback(&self, completion_handler: Option<&Block<(), ()>>);

    #[deprecated]
    #[objc2::method(sel = "suspendAllMediaPlayback:")]
    pub unsafe fn suspendAllMediaPlayback(&self, completion_handler: Option<&Block<(), ()>>);

    #[objc2::method(sel = "requestMediaPlaybackStateWithCompletionHandler:")]
    pub unsafe fn requestMediaPlaybackStateWithCompletionHandler(
        &self,
        completion_handler: &Block<(WKMediaPlaybackState,), ()>,
    );

    #[deprecated]
    #[objc2::method(sel = "requestMediaPlaybackState:")]
    pub unsafe fn requestMediaPlaybackState(
        &self,
        completion_handler: &Block<(WKMediaPlaybackState,), ()>,
    );

    #[objc2::method(sel = "cameraCaptureState")]
    pub unsafe fn cameraCaptureState(&self) -> WKMediaCaptureState;

    #[objc2::method(sel = "microphoneCaptureState")]
    pub unsafe fn microphoneCaptureState(&self) -> WKMediaCaptureState;

    #[objc2::method(sel = "setCameraCaptureState:completionHandler:")]
    pub unsafe fn setCameraCaptureState_completionHandler(
        &self,
        state: WKMediaCaptureState,
        completion_handler: Option<&Block<(), ()>>,
    );

    #[objc2::method(sel = "setMicrophoneCaptureState:completionHandler:")]
    pub unsafe fn setMicrophoneCaptureState_completionHandler(
        &self,
        state: WKMediaCaptureState,
        completion_handler: Option<&Block<(), ()>>,
    );

    #[cfg(all(
        feature = "AppKit_NSImage",
        feature = "Foundation_NSError",
        feature = "WebKit_WKSnapshotConfiguration"
    ))]
    #[objc2::method(sel = "takeSnapshotWithConfiguration:completionHandler:")]
    pub unsafe fn takeSnapshotWithConfiguration_completionHandler(
        &self,
        snapshot_configuration: Option<&WKSnapshotConfiguration>,
        completion_handler: &Block<(*mut NSImage, *mut NSError), ()>,
    );

    #[cfg(all(
        feature = "Foundation_NSData",
        feature = "Foundation_NSError",
        feature = "WebKit_WKPDFConfiguration"
    ))]
    #[objc2::method(sel = "createPDFWithConfiguration:completionHandler:")]
    pub unsafe fn createPDFWithConfiguration_completionHandler(
        &self,
        pdf_configuration: Option<&WKPDFConfiguration>,
        completion_handler: &Block<(*mut NSData, *mut NSError), ()>,
    );

    #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "createWebArchiveDataWithCompletionHandler:")]
    pub unsafe fn createWebArchiveDataWithCompletionHandler(
        &self,
        completion_handler: &Block<(NonNull<NSData>, NonNull<NSError>), ()>,
    );

    #[objc2::method(sel = "allowsBackForwardNavigationGestures")]
    pub unsafe fn allowsBackForwardNavigationGestures(&self) -> bool;

    #[objc2::method(sel = "setAllowsBackForwardNavigationGestures:")]
    pub unsafe fn setAllowsBackForwardNavigationGestures(
        &self,
        allows_back_forward_navigation_gestures: bool,
    );

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "customUserAgent", managed = "Other")]
    pub unsafe fn customUserAgent(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setCustomUserAgent:")]
    pub unsafe fn setCustomUserAgent(&self, custom_user_agent: Option<&NSString>);

    #[objc2::method(sel = "allowsLinkPreview")]
    pub unsafe fn allowsLinkPreview(&self) -> bool;

    #[objc2::method(sel = "setAllowsLinkPreview:")]
    pub unsafe fn setAllowsLinkPreview(&self, allows_link_preview: bool);

    #[objc2::method(sel = "allowsMagnification")]
    pub unsafe fn allowsMagnification(&self) -> bool;

    #[objc2::method(sel = "setAllowsMagnification:")]
    pub unsafe fn setAllowsMagnification(&self, allows_magnification: bool);

    #[objc2::method(sel = "magnification")]
    pub unsafe fn magnification(&self) -> CGFloat;

    #[objc2::method(sel = "setMagnification:")]
    pub unsafe fn setMagnification(&self, magnification: CGFloat);

    #[objc2::method(sel = "setMagnification:centeredAtPoint:")]
    pub unsafe fn setMagnification_centeredAtPoint(&self, magnification: CGFloat, point: CGPoint);

    #[objc2::method(sel = "pageZoom")]
    pub unsafe fn pageZoom(&self) -> CGFloat;

    #[objc2::method(sel = "setPageZoom:")]
    pub unsafe fn setPageZoom(&self, page_zoom: CGFloat);

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "WebKit_WKFindConfiguration",
        feature = "WebKit_WKFindResult"
    ))]
    #[objc2::method(sel = "findString:withConfiguration:completionHandler:")]
    pub unsafe fn findString_withConfiguration_completionHandler(
        &self,
        string: &NSString,
        configuration: Option<&WKFindConfiguration>,
        completion_handler: &Block<(NonNull<WKFindResult>,), ()>,
    );

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "handlesURLScheme:")]
    pub unsafe fn handlesURLScheme(url_scheme: &NSString) -> bool;

    #[cfg(all(feature = "Foundation_NSURLRequest", feature = "WebKit_WKDownload"))]
    #[objc2::method(sel = "startDownloadUsingRequest:completionHandler:")]
    pub unsafe fn startDownloadUsingRequest_completionHandler(
        &self,
        request: &NSURLRequest,
        completion_handler: &Block<(NonNull<WKDownload>,), ()>,
    );

    #[cfg(all(feature = "Foundation_NSData", feature = "WebKit_WKDownload"))]
    #[objc2::method(sel = "resumeDownloadFromResumeData:completionHandler:")]
    pub unsafe fn resumeDownloadFromResumeData_completionHandler(
        &self,
        resume_data: &NSData,
        completion_handler: &Block<(NonNull<WKDownload>,), ()>,
    );

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "mediaType", managed = "Other")]
    pub unsafe fn mediaType(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setMediaType:")]
    pub unsafe fn setMediaType(&self, media_type: Option<&NSString>);

    #[objc2::method(sel = "interactionState", managed = "Other")]
    pub unsafe fn interactionState(&self) -> Option<Id<Object>>;

    #[objc2::method(sel = "setInteractionState:")]
    pub unsafe fn setInteractionState(&self, interaction_state: Option<&Object>);

    #[cfg(all(
        feature = "Foundation_NSData",
        feature = "Foundation_NSURLRequest",
        feature = "Foundation_NSURLResponse",
        feature = "WebKit_WKNavigation"
    ))]
    #[objc2::method(sel = "loadSimulatedRequest:response:responseData:", managed = "Other")]
    pub unsafe fn loadSimulatedRequest_response_responseData(
        &self,
        request: &NSURLRequest,
        response: &NSURLResponse,
        data: &NSData,
    ) -> Id<WKNavigation>;

    #[cfg(all(
        feature = "Foundation_NSData",
        feature = "Foundation_NSURLRequest",
        feature = "Foundation_NSURLResponse",
        feature = "WebKit_WKNavigation"
    ))]
    #[deprecated]
    #[objc2::method(
        sel = "loadSimulatedRequest:withResponse:responseData:",
        managed = "Other"
    )]
    pub unsafe fn loadSimulatedRequest_withResponse_responseData(
        &self,
        request: &NSURLRequest,
        response: &NSURLResponse,
        data: &NSData,
    ) -> Id<WKNavigation>;

    #[cfg(all(
        feature = "Foundation_NSURL",
        feature = "Foundation_NSURLRequest",
        feature = "WebKit_WKNavigation"
    ))]
    #[objc2::method(sel = "loadFileRequest:allowingReadAccessToURL:", managed = "Other")]
    pub unsafe fn loadFileRequest_allowingReadAccessToURL(
        &self,
        request: &NSURLRequest,
        read_access_url: &NSURL,
    ) -> Id<WKNavigation>;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "Foundation_NSURLRequest",
        feature = "WebKit_WKNavigation"
    ))]
    #[objc2::method(sel = "loadSimulatedRequest:responseHTMLString:", managed = "Other")]
    pub unsafe fn loadSimulatedRequest_responseHTMLString(
        &self,
        request: &NSURLRequest,
        string: &NSString,
    ) -> Id<WKNavigation>;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "Foundation_NSURLRequest",
        feature = "WebKit_WKNavigation"
    ))]
    #[deprecated]
    #[objc2::method(
        sel = "loadSimulatedRequest:withResponseHTMLString:",
        managed = "Other"
    )]
    pub unsafe fn loadSimulatedRequest_withResponseHTMLString(
        &self,
        request: &NSURLRequest,
        string: &NSString,
    ) -> Id<WKNavigation>;

    #[cfg(all(feature = "AppKit_NSPrintInfo", feature = "AppKit_NSPrintOperation"))]
    #[objc2::method(sel = "printOperationWithPrintInfo:", managed = "Other")]
    pub unsafe fn printOperationWithPrintInfo(
        &self,
        print_info: &NSPrintInfo,
    ) -> Id<NSPrintOperation>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "themeColor", managed = "Other")]
    pub unsafe fn themeColor(&self) -> Option<Id<NSColor>>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "underPageBackgroundColor", managed = "Other")]
    pub unsafe fn underPageBackgroundColor(&self) -> Id<NSColor>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "setUnderPageBackgroundColor:")]
    pub unsafe fn setUnderPageBackgroundColor(&self, under_page_background_color: Option<&NSColor>);

    #[objc2::method(sel = "fullscreenState")]
    pub unsafe fn fullscreenState(&self) -> WKFullscreenState;

    #[objc2::method(sel = "minimumViewportInset")]
    pub unsafe fn minimumViewportInset(&self) -> NSEdgeInsets;

    #[objc2::method(sel = "maximumViewportInset")]
    pub unsafe fn maximumViewportInset(&self) -> NSEdgeInsets;

    #[objc2::method(sel = "setMinimumViewportInset:maximumViewportInset:")]
    pub unsafe fn setMinimumViewportInset_maximumViewportInset(
        &self,
        minimum_viewport_inset: NSEdgeInsets,
        maximum_viewport_inset: NSEdgeInsets,
    );
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "WebKit_WKWebView")]
    pub type WKWebView;

    #[objc2::method(sel = "goBack:")]
    pub unsafe fn goBack_(&self, sender: Option<&Object>);

    #[objc2::method(sel = "goForward:")]
    pub unsafe fn goForward_(&self, sender: Option<&Object>);

    #[objc2::method(sel = "reload:")]
    pub unsafe fn reload_(&self, sender: Option<&Object>);

    #[objc2::method(sel = "reloadFromOrigin:")]
    pub unsafe fn reloadFromOrigin_(&self, sender: Option<&Object>);

    #[objc2::method(sel = "stopLoading:")]
    pub unsafe fn stopLoading_(&self, sender: Option<&Object>);
}

#[cfg(feature = "WebKit_WKWebView")]
unsafe impl NSUserInterfaceValidations for WKWebView {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "WebKit_WKWebView")]
    pub type WKWebView;
}

#[cfg(feature = "WebKit_WKWebView")]
unsafe impl NSTextFinderClient for WKWebView {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "WebKit_WKWebView")]
    pub type WKWebView;

    #[cfg(feature = "Foundation_NSArray")]
    #[deprecated]
    #[objc2::method(sel = "certificateChain", managed = "Other")]
    pub unsafe fn certificateChain(&self) -> Id<NSArray>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSView`
    #[cfg(feature = "WebKit_WKWebView")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "WebKit_WKWebView")]
    pub type WKWebView;

    #[objc2::method(sel = "initWithFrame:", managed = "Init")]
    pub unsafe fn initWithFrame(this: Option<Allocated<Self>>, frame_rect: NSRect) -> Id<Self>;
}
