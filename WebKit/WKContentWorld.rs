//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::WebKit::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "WebKit_WKContentWorld")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type WKContentWorld;
}

#[cfg(feature = "WebKit_WKContentWorld")]
unsafe impl NSObjectProtocol for WKContentWorld {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "WebKit_WKContentWorld")]
    pub type WKContentWorld;

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "pageWorld", managed = "Other")]
    pub unsafe fn pageWorld() -> Id<WKContentWorld>;

    #[objc2::method(sel = "defaultClientWorld", managed = "Other")]
    pub unsafe fn defaultClientWorld() -> Id<WKContentWorld>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "worldWithName:", managed = "Other")]
    pub unsafe fn worldWithName(name: &NSString) -> Id<WKContentWorld>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "name", managed = "Other")]
    pub unsafe fn name(&self) -> Option<Id<NSString>>;
}
