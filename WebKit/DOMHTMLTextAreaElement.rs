//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::WebKit::*;

#[objc2::interface(
    unsafe super = DOMHTMLElement,
    unsafe inherits = [
        DOMElement,
        DOMNode,
        DOMObject,
        WebScriptObject,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[deprecated]
    #[cfg(feature = "WebKit_DOMHTMLTextAreaElement")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type DOMHTMLTextAreaElement;
}

#[cfg(feature = "WebKit_DOMHTMLTextAreaElement")]
unsafe impl DOMEventTarget for DOMHTMLTextAreaElement {}

#[cfg(feature = "WebKit_DOMHTMLTextAreaElement")]
unsafe impl NSObjectProtocol for DOMHTMLTextAreaElement {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "WebKit_DOMHTMLTextAreaElement")]
    #[deprecated]
    pub type DOMHTMLTextAreaElement;

    #[objc2::method(sel = "autofocus")]
    pub unsafe fn autofocus(&self) -> bool;

    #[objc2::method(sel = "setAutofocus:")]
    pub unsafe fn setAutofocus(&self, autofocus: bool);

    #[objc2::method(sel = "disabled")]
    pub unsafe fn disabled(&self) -> bool;

    #[objc2::method(sel = "setDisabled:")]
    pub unsafe fn setDisabled(&self, disabled: bool);

    #[cfg(feature = "WebKit_DOMHTMLFormElement")]
    #[objc2::method(sel = "form", managed = "Other")]
    pub unsafe fn form(&self) -> Option<Id<DOMHTMLFormElement>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "name", managed = "Other")]
    pub unsafe fn name(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setName:")]
    pub unsafe fn setName(&self, name: Option<&NSString>);

    #[objc2::method(sel = "readOnly")]
    pub unsafe fn readOnly(&self) -> bool;

    #[objc2::method(sel = "setReadOnly:")]
    pub unsafe fn setReadOnly(&self, read_only: bool);

    #[objc2::method(sel = "rows")]
    pub unsafe fn rows(&self) -> c_int;

    #[objc2::method(sel = "setRows:")]
    pub unsafe fn setRows(&self, rows: c_int);

    #[objc2::method(sel = "cols")]
    pub unsafe fn cols(&self) -> c_int;

    #[objc2::method(sel = "setCols:")]
    pub unsafe fn setCols(&self, cols: c_int);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "type", managed = "Other")]
    pub unsafe fn r#type(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "defaultValue", managed = "Other")]
    pub unsafe fn defaultValue(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setDefaultValue:")]
    pub unsafe fn setDefaultValue(&self, default_value: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "value", managed = "Other")]
    pub unsafe fn value(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setValue:")]
    pub unsafe fn setValue(&self, value: Option<&NSString>);

    #[objc2::method(sel = "willValidate")]
    pub unsafe fn willValidate(&self) -> bool;

    #[objc2::method(sel = "selectionStart")]
    pub unsafe fn selectionStart(&self) -> c_int;

    #[objc2::method(sel = "setSelectionStart:")]
    pub unsafe fn setSelectionStart(&self, selection_start: c_int);

    #[objc2::method(sel = "selectionEnd")]
    pub unsafe fn selectionEnd(&self) -> c_int;

    #[objc2::method(sel = "setSelectionEnd:")]
    pub unsafe fn setSelectionEnd(&self, selection_end: c_int);

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "accessKey", managed = "Other")]
    pub unsafe fn accessKey(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "setAccessKey:")]
    pub unsafe fn setAccessKey(&self, access_key: Option<&NSString>);

    #[objc2::method(sel = "select")]
    pub unsafe fn select(&self);

    #[objc2::method(sel = "setSelectionRange:end:")]
    pub unsafe fn setSelectionRange_end(&self, start: c_int, end: c_int);
}
