//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::WebKit::*;

#[objc2::interface(
    unsafe super = DOMHTMLElement,
    unsafe inherits = [
        DOMElement,
        DOMNode,
        DOMObject,
        WebScriptObject,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[deprecated]
    #[cfg(feature = "WebKit_DOMHTMLObjectElement")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type DOMHTMLObjectElement;
}

#[cfg(feature = "WebKit_DOMHTMLObjectElement")]
unsafe impl DOMEventTarget for DOMHTMLObjectElement {}

#[cfg(feature = "WebKit_DOMHTMLObjectElement")]
unsafe impl NSObjectProtocol for DOMHTMLObjectElement {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "WebKit_DOMHTMLObjectElement")]
    #[deprecated]
    pub type DOMHTMLObjectElement;

    #[cfg(feature = "WebKit_DOMHTMLFormElement")]
    #[objc2::method(sel = "form", managed = "Other")]
    pub unsafe fn form(&self) -> Option<Id<DOMHTMLFormElement>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "code", managed = "Other")]
    pub unsafe fn code(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setCode:")]
    pub unsafe fn setCode(&self, code: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "align", managed = "Other")]
    pub unsafe fn align(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setAlign:")]
    pub unsafe fn setAlign(&self, align: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "archive", managed = "Other")]
    pub unsafe fn archive(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setArchive:")]
    pub unsafe fn setArchive(&self, archive: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "border", managed = "Other")]
    pub unsafe fn border(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setBorder:")]
    pub unsafe fn setBorder(&self, border: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "codeBase", managed = "Other")]
    pub unsafe fn codeBase(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setCodeBase:")]
    pub unsafe fn setCodeBase(&self, code_base: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "codeType", managed = "Other")]
    pub unsafe fn codeType(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setCodeType:")]
    pub unsafe fn setCodeType(&self, code_type: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "data", managed = "Other")]
    pub unsafe fn data(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setData:")]
    pub unsafe fn setData(&self, data: Option<&NSString>);

    #[objc2::method(sel = "declare")]
    pub unsafe fn declare(&self) -> bool;

    #[objc2::method(sel = "setDeclare:")]
    pub unsafe fn setDeclare(&self, declare: bool);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "height", managed = "Other")]
    pub unsafe fn height(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setHeight:")]
    pub unsafe fn setHeight(&self, height: Option<&NSString>);

    #[objc2::method(sel = "hspace")]
    pub unsafe fn hspace(&self) -> c_int;

    #[objc2::method(sel = "setHspace:")]
    pub unsafe fn setHspace(&self, hspace: c_int);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "name", managed = "Other")]
    pub unsafe fn name(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setName:")]
    pub unsafe fn setName(&self, name: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "standby", managed = "Other")]
    pub unsafe fn standby(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setStandby:")]
    pub unsafe fn setStandby(&self, standby: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "type", managed = "Other")]
    pub unsafe fn r#type(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setType:")]
    pub unsafe fn setType(&self, r#type: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "useMap", managed = "Other")]
    pub unsafe fn useMap(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setUseMap:")]
    pub unsafe fn setUseMap(&self, use_map: Option<&NSString>);

    #[objc2::method(sel = "vspace")]
    pub unsafe fn vspace(&self) -> c_int;

    #[objc2::method(sel = "setVspace:")]
    pub unsafe fn setVspace(&self, vspace: c_int);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "width", managed = "Other")]
    pub unsafe fn width(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setWidth:")]
    pub unsafe fn setWidth(&self, width: Option<&NSString>);

    #[cfg(feature = "WebKit_DOMDocument")]
    #[objc2::method(sel = "contentDocument", managed = "Other")]
    pub unsafe fn contentDocument(&self) -> Option<Id<DOMDocument>>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "absoluteImageURL", managed = "Other")]
    pub unsafe fn absoluteImageURL(&self) -> Id<NSURL>;
}
