//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::WebKit::*;

#[objc2::interface(
    unsafe super = DOMHTMLElement,
    unsafe inherits = [
        DOMElement,
        DOMNode,
        DOMObject,
        WebScriptObject,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[deprecated]
    #[cfg(feature = "WebKit_DOMHTMLFormElement")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type DOMHTMLFormElement;
}

#[cfg(feature = "WebKit_DOMHTMLFormElement")]
unsafe impl DOMEventTarget for DOMHTMLFormElement {}

#[cfg(feature = "WebKit_DOMHTMLFormElement")]
unsafe impl NSObjectProtocol for DOMHTMLFormElement {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "WebKit_DOMHTMLFormElement")]
    #[deprecated]
    pub type DOMHTMLFormElement;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "acceptCharset", managed = "Other")]
    pub unsafe fn acceptCharset(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setAcceptCharset:")]
    pub unsafe fn setAcceptCharset(&self, accept_charset: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "action", managed = "Other")]
    pub unsafe fn action(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setAction:")]
    pub unsafe fn setAction(&self, action: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "enctype", managed = "Other")]
    pub unsafe fn enctype(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setEnctype:")]
    pub unsafe fn setEnctype(&self, enctype: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "encoding", managed = "Other")]
    pub unsafe fn encoding(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setEncoding:")]
    pub unsafe fn setEncoding(&self, encoding: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "method", managed = "Other")]
    pub unsafe fn method(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setMethod:")]
    pub unsafe fn setMethod(&self, method: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "name", managed = "Other")]
    pub unsafe fn name(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setName:")]
    pub unsafe fn setName(&self, name: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "target", managed = "Other")]
    pub unsafe fn target(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setTarget:")]
    pub unsafe fn setTarget(&self, target: Option<&NSString>);

    #[cfg(feature = "WebKit_DOMHTMLCollection")]
    #[objc2::method(sel = "elements", managed = "Other")]
    pub unsafe fn elements(&self) -> Option<Id<DOMHTMLCollection>>;

    #[objc2::method(sel = "length")]
    pub unsafe fn length(&self) -> c_int;

    #[objc2::method(sel = "submit")]
    pub unsafe fn submit(&self);

    #[objc2::method(sel = "reset")]
    pub unsafe fn reset(&self);
}
