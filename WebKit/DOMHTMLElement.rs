//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::WebKit::*;

#[objc2::interface(
    unsafe super = DOMElement,
    unsafe inherits = [
        DOMNode,
        DOMObject,
        WebScriptObject,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[deprecated]
    #[cfg(feature = "WebKit_DOMHTMLElement")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type DOMHTMLElement;
}

#[cfg(feature = "WebKit_DOMHTMLElement")]
unsafe impl DOMEventTarget for DOMHTMLElement {}

#[cfg(feature = "WebKit_DOMHTMLElement")]
unsafe impl NSObjectProtocol for DOMHTMLElement {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "WebKit_DOMHTMLElement")]
    #[deprecated]
    pub type DOMHTMLElement;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "title", managed = "Other")]
    pub unsafe fn title(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setTitle:")]
    pub unsafe fn setTitle(&self, title: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "lang", managed = "Other")]
    pub unsafe fn lang(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setLang:")]
    pub unsafe fn setLang(&self, lang: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "dir", managed = "Other")]
    pub unsafe fn dir(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setDir:")]
    pub unsafe fn setDir(&self, dir: Option<&NSString>);

    #[objc2::method(sel = "tabIndex")]
    pub unsafe fn tabIndex(&self) -> c_int;

    #[objc2::method(sel = "setTabIndex:")]
    pub unsafe fn setTabIndex(&self, tab_index: c_int);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "accessKey", managed = "Other")]
    pub unsafe fn accessKey(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setAccessKey:")]
    pub unsafe fn setAccessKey(&self, access_key: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "innerText", managed = "Other")]
    pub unsafe fn innerText(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setInnerText:")]
    pub unsafe fn setInnerText(&self, inner_text: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "outerText", managed = "Other")]
    pub unsafe fn outerText(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setOuterText:")]
    pub unsafe fn setOuterText(&self, outer_text: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "contentEditable", managed = "Other")]
    pub unsafe fn contentEditable(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setContentEditable:")]
    pub unsafe fn setContentEditable(&self, content_editable: Option<&NSString>);

    #[objc2::method(sel = "isContentEditable")]
    pub unsafe fn isContentEditable(&self) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "idName", managed = "Other")]
    pub unsafe fn idName(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setIdName:")]
    pub unsafe fn setIdName(&self, id_name: Option<&NSString>);

    #[cfg(feature = "WebKit_DOMHTMLCollection")]
    #[objc2::method(sel = "children", managed = "Other")]
    pub unsafe fn children(&self) -> Option<Id<DOMHTMLCollection>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "titleDisplayString", managed = "Other")]
    pub unsafe fn titleDisplayString(&self) -> Id<NSString>;

    #[objc2::method(sel = "click")]
    pub unsafe fn click(&self);
}
