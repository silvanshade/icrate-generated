//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::WebKit::*;

#[objc2::interface(
    unsafe super = DOMHTMLElement,
    unsafe inherits = [
        DOMElement,
        DOMNode,
        DOMObject,
        WebScriptObject,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[deprecated]
    #[cfg(feature = "WebKit_DOMHTMLImageElement")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type DOMHTMLImageElement;
}

#[cfg(feature = "WebKit_DOMHTMLImageElement")]
unsafe impl DOMEventTarget for DOMHTMLImageElement {}

#[cfg(feature = "WebKit_DOMHTMLImageElement")]
unsafe impl NSObjectProtocol for DOMHTMLImageElement {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "WebKit_DOMHTMLImageElement")]
    #[deprecated]
    pub type DOMHTMLImageElement;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "name", managed = "Other")]
    pub unsafe fn name(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setName:")]
    pub unsafe fn setName(&self, name: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "align", managed = "Other")]
    pub unsafe fn align(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setAlign:")]
    pub unsafe fn setAlign(&self, align: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "alt", managed = "Other")]
    pub unsafe fn alt(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setAlt:")]
    pub unsafe fn setAlt(&self, alt: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "border", managed = "Other")]
    pub unsafe fn border(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setBorder:")]
    pub unsafe fn setBorder(&self, border: Option<&NSString>);

    #[objc2::method(sel = "height")]
    pub unsafe fn height(&self) -> c_int;

    #[objc2::method(sel = "setHeight:")]
    pub unsafe fn setHeight(&self, height: c_int);

    #[objc2::method(sel = "hspace")]
    pub unsafe fn hspace(&self) -> c_int;

    #[objc2::method(sel = "setHspace:")]
    pub unsafe fn setHspace(&self, hspace: c_int);

    #[objc2::method(sel = "isMap")]
    pub unsafe fn isMap(&self) -> bool;

    #[objc2::method(sel = "setIsMap:")]
    pub unsafe fn setIsMap(&self, is_map: bool);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "longDesc", managed = "Other")]
    pub unsafe fn longDesc(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setLongDesc:")]
    pub unsafe fn setLongDesc(&self, long_desc: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "src", managed = "Other")]
    pub unsafe fn src(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setSrc:")]
    pub unsafe fn setSrc(&self, src: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "useMap", managed = "Other")]
    pub unsafe fn useMap(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setUseMap:")]
    pub unsafe fn setUseMap(&self, use_map: Option<&NSString>);

    #[objc2::method(sel = "vspace")]
    pub unsafe fn vspace(&self) -> c_int;

    #[objc2::method(sel = "setVspace:")]
    pub unsafe fn setVspace(&self, vspace: c_int);

    #[objc2::method(sel = "width")]
    pub unsafe fn width(&self) -> c_int;

    #[objc2::method(sel = "setWidth:")]
    pub unsafe fn setWidth(&self, width: c_int);

    #[objc2::method(sel = "complete")]
    pub unsafe fn complete(&self) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "lowsrc", managed = "Other")]
    pub unsafe fn lowsrc(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setLowsrc:")]
    pub unsafe fn setLowsrc(&self, lowsrc: Option<&NSString>);

    #[objc2::method(sel = "naturalHeight")]
    pub unsafe fn naturalHeight(&self) -> c_int;

    #[objc2::method(sel = "naturalWidth")]
    pub unsafe fn naturalWidth(&self) -> c_int;

    #[objc2::method(sel = "x")]
    pub unsafe fn x(&self) -> c_int;

    #[objc2::method(sel = "y")]
    pub unsafe fn y(&self) -> c_int;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "altDisplayString", managed = "Other")]
    pub unsafe fn altDisplayString(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "absoluteImageURL", managed = "Other")]
    pub unsafe fn absoluteImageURL(&self) -> Id<NSURL>;
}
