//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::WebKit::*;

#[extern_enum]
#[underlying(c_uint)]
#[deprecated]
pub enum __anonymous__ {
    #[deprecated]
    DOM_START_TO_START = 0,
    #[deprecated]
    DOM_START_TO_END = 1,
    #[deprecated]
    DOM_END_TO_END = 2,
    #[deprecated]
    DOM_END_TO_START = 3,
    #[deprecated]
    DOM_NODE_BEFORE = 0,
    #[deprecated]
    DOM_NODE_AFTER = 1,
    #[deprecated]
    DOM_NODE_BEFORE_AND_AFTER = 2,
    #[deprecated]
    DOM_NODE_INSIDE = 3,
}

#[objc2::interface(
    unsafe super = DOMObject,
    unsafe inherits = [
        WebScriptObject,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[deprecated]
    #[cfg(feature = "WebKit_DOMRange")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type DOMRange;
}

#[cfg(feature = "WebKit_DOMRange")]
unsafe impl NSObjectProtocol for DOMRange {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "WebKit_DOMRange")]
    #[deprecated]
    pub type DOMRange;

    #[cfg(feature = "WebKit_DOMNode")]
    #[objc2::method(sel = "startContainer", managed = "Other")]
    pub unsafe fn startContainer(&self) -> Option<Id<DOMNode>>;

    #[objc2::method(sel = "startOffset")]
    pub unsafe fn startOffset(&self) -> c_int;

    #[cfg(feature = "WebKit_DOMNode")]
    #[objc2::method(sel = "endContainer", managed = "Other")]
    pub unsafe fn endContainer(&self) -> Option<Id<DOMNode>>;

    #[objc2::method(sel = "endOffset")]
    pub unsafe fn endOffset(&self) -> c_int;

    #[objc2::method(sel = "collapsed")]
    pub unsafe fn collapsed(&self) -> bool;

    #[cfg(feature = "WebKit_DOMNode")]
    #[objc2::method(sel = "commonAncestorContainer", managed = "Other")]
    pub unsafe fn commonAncestorContainer(&self) -> Option<Id<DOMNode>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "text", managed = "Other")]
    pub unsafe fn text(&self) -> Id<NSString>;

    #[cfg(feature = "WebKit_DOMNode")]
    #[objc2::method(sel = "setStart:offset:")]
    pub unsafe fn setStart_offset(&self, ref_node: Option<&DOMNode>, offset: c_int);

    #[cfg(feature = "WebKit_DOMNode")]
    #[objc2::method(sel = "setEnd:offset:")]
    pub unsafe fn setEnd_offset(&self, ref_node: Option<&DOMNode>, offset: c_int);

    #[cfg(feature = "WebKit_DOMNode")]
    #[objc2::method(sel = "setStartBefore:")]
    pub unsafe fn setStartBefore(&self, ref_node: Option<&DOMNode>);

    #[cfg(feature = "WebKit_DOMNode")]
    #[objc2::method(sel = "setStartAfter:")]
    pub unsafe fn setStartAfter(&self, ref_node: Option<&DOMNode>);

    #[cfg(feature = "WebKit_DOMNode")]
    #[objc2::method(sel = "setEndBefore:")]
    pub unsafe fn setEndBefore(&self, ref_node: Option<&DOMNode>);

    #[cfg(feature = "WebKit_DOMNode")]
    #[objc2::method(sel = "setEndAfter:")]
    pub unsafe fn setEndAfter(&self, ref_node: Option<&DOMNode>);

    #[objc2::method(sel = "collapse:")]
    pub unsafe fn collapse(&self, to_start: bool);

    #[cfg(feature = "WebKit_DOMNode")]
    #[objc2::method(sel = "selectNode:")]
    pub unsafe fn selectNode(&self, ref_node: Option<&DOMNode>);

    #[cfg(feature = "WebKit_DOMNode")]
    #[objc2::method(sel = "selectNodeContents:")]
    pub unsafe fn selectNodeContents(&self, ref_node: Option<&DOMNode>);

    #[objc2::method(sel = "compareBoundaryPoints:sourceRange:")]
    pub unsafe fn compareBoundaryPoints_sourceRange(
        &self,
        how: c_ushort,
        source_range: Option<&DOMRange>,
    ) -> c_short;

    #[objc2::method(sel = "deleteContents")]
    pub unsafe fn deleteContents(&self);

    #[cfg(feature = "WebKit_DOMDocumentFragment")]
    #[objc2::method(sel = "extractContents", managed = "Other")]
    pub unsafe fn extractContents(&self) -> Option<Id<DOMDocumentFragment>>;

    #[cfg(feature = "WebKit_DOMDocumentFragment")]
    #[objc2::method(sel = "cloneContents", managed = "Other")]
    pub unsafe fn cloneContents(&self) -> Option<Id<DOMDocumentFragment>>;

    #[cfg(feature = "WebKit_DOMNode")]
    #[objc2::method(sel = "insertNode:")]
    pub unsafe fn insertNode(&self, new_node: Option<&DOMNode>);

    #[cfg(feature = "WebKit_DOMNode")]
    #[objc2::method(sel = "surroundContents:")]
    pub unsafe fn surroundContents(&self, new_parent: Option<&DOMNode>);

    #[objc2::method(sel = "cloneRange", managed = "Other")]
    pub unsafe fn cloneRange(&self) -> Option<Id<DOMRange>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "toString", managed = "Other")]
    pub unsafe fn toString(&self) -> Option<Id<NSString>>;

    #[objc2::method(sel = "detach")]
    pub unsafe fn detach(&self);

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "WebKit_DOMDocumentFragment"
    ))]
    #[objc2::method(sel = "createContextualFragment:", managed = "Other")]
    pub unsafe fn createContextualFragment(
        &self,
        html: Option<&NSString>,
    ) -> Option<Id<DOMDocumentFragment>>;

    #[cfg(feature = "WebKit_DOMNode")]
    #[objc2::method(sel = "compareNode:")]
    pub unsafe fn compareNode(&self, ref_node: Option<&DOMNode>) -> c_short;

    #[cfg(feature = "WebKit_DOMNode")]
    #[objc2::method(sel = "intersectsNode:")]
    pub unsafe fn intersectsNode(&self, ref_node: Option<&DOMNode>) -> bool;

    #[cfg(feature = "WebKit_DOMNode")]
    #[objc2::method(sel = "comparePoint:offset:")]
    pub unsafe fn comparePoint_offset(&self, ref_node: Option<&DOMNode>, offset: c_int) -> c_short;

    #[cfg(feature = "WebKit_DOMNode")]
    #[objc2::method(sel = "isPointInRange:offset:")]
    pub unsafe fn isPointInRange_offset(&self, ref_node: Option<&DOMNode>, offset: c_int) -> bool;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "WebKit_DOMRange")]
    pub type DOMRange;

    #[cfg(feature = "WebKit_DOMNode")]
    #[deprecated]
    #[objc2::method(sel = "setStart::")]
    pub unsafe fn setStart(&self, ref_node: Option<&DOMNode>, offset: c_int);

    #[cfg(feature = "WebKit_DOMNode")]
    #[deprecated]
    #[objc2::method(sel = "setEnd::")]
    pub unsafe fn setEnd(&self, ref_node: Option<&DOMNode>, offset: c_int);

    #[deprecated]
    #[objc2::method(sel = "compareBoundaryPoints::")]
    pub unsafe fn compareBoundaryPoints(
        &self,
        how: c_ushort,
        source_range: Option<&DOMRange>,
    ) -> c_short;
}
