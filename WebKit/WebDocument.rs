//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::WebKit::*;

#[objc2::protocol]
#[deprecated]
pub unsafe trait WebDocumentView: NSObjectProtocol {
    #[cfg(feature = "WebKit_WebDataSource")]
    #[objc2::method(sel = "setDataSource:")]
    unsafe fn setDataSource(&self, data_source: Option<&WebDataSource>);

    #[cfg(feature = "WebKit_WebDataSource")]
    #[objc2::method(sel = "dataSourceUpdated:")]
    unsafe fn dataSourceUpdated(&self, data_source: Option<&WebDataSource>);

    #[objc2::method(sel = "setNeedsLayout:")]
    unsafe fn setNeedsLayout(&self, flag: bool);

    #[objc2::method(sel = "layout")]
    unsafe fn layout(&self);

    #[cfg(feature = "AppKit_NSWindow")]
    #[objc2::method(sel = "viewWillMoveToHostWindow:")]
    unsafe fn viewWillMoveToHostWindow(&self, host_window: Option<&NSWindow>);

    #[objc2::method(sel = "viewDidMoveToHostWindow")]
    unsafe fn viewDidMoveToHostWindow(&self);
}

#[objc2::protocol]
#[deprecated]
pub unsafe trait WebDocumentSearching: NSObjectProtocol {
    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "searchFor:direction:caseSensitive:wrap:")]
    unsafe fn searchFor_direction_caseSensitive_wrap(
        &self,
        string: Option<&NSString>,
        forward: bool,
        case_flag: bool,
        wrap_flag: bool,
    ) -> bool;
}

#[objc2::protocol]
#[deprecated]
pub unsafe trait WebDocumentText: NSObjectProtocol {
    #[objc2::method(sel = "supportsTextEncoding")]
    unsafe fn supportsTextEncoding(&self) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "string", managed = "Other")]
    unsafe fn string(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "attributedString", managed = "Other")]
    unsafe fn attributedString(&self) -> Option<Id<NSAttributedString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "selectedString", managed = "Other")]
    unsafe fn selectedString(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "selectedAttributedString", managed = "Other")]
    unsafe fn selectedAttributedString(&self) -> Option<Id<NSAttributedString>>;

    #[objc2::method(sel = "selectAll")]
    unsafe fn selectAll(&self);

    #[objc2::method(sel = "deselectAll")]
    unsafe fn deselectAll(&self);
}

#[objc2::protocol]
#[deprecated]
pub unsafe trait WebDocumentRepresentation: NSObjectProtocol {
    #[cfg(feature = "WebKit_WebDataSource")]
    #[objc2::method(sel = "setDataSource:")]
    unsafe fn setDataSource(&self, data_source: Option<&WebDataSource>);

    #[cfg(all(feature = "Foundation_NSData", feature = "WebKit_WebDataSource"))]
    #[objc2::method(sel = "receivedData:withDataSource:")]
    unsafe fn receivedData_withDataSource(
        &self,
        data: Option<&NSData>,
        data_source: Option<&WebDataSource>,
    );

    #[cfg(all(feature = "Foundation_NSError", feature = "WebKit_WebDataSource"))]
    #[objc2::method(sel = "receivedError:withDataSource:")]
    unsafe fn receivedError_withDataSource(
        &self,
        error: Option<&NSError>,
        data_source: Option<&WebDataSource>,
    );

    #[cfg(feature = "WebKit_WebDataSource")]
    #[objc2::method(sel = "finishedLoadingWithDataSource:")]
    unsafe fn finishedLoadingWithDataSource(&self, data_source: Option<&WebDataSource>);

    #[objc2::method(sel = "canProvideDocumentSource")]
    unsafe fn canProvideDocumentSource(&self) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "documentSource", managed = "Other")]
    unsafe fn documentSource(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "title", managed = "Other")]
    unsafe fn title(&self) -> Option<Id<NSString>>;
}
