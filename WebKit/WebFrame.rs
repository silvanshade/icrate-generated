//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::WebKit::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[deprecated]
    #[cfg(feature = "WebKit_WebFrame")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type WebFrame;
}

#[cfg(feature = "WebKit_WebFrame")]
unsafe impl NSObjectProtocol for WebFrame {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "WebKit_WebFrame")]
    #[deprecated]
    pub type WebFrame;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "WebKit_WebFrameView",
        feature = "WebKit_WebView"
    ))]
    #[objc2::method(sel = "initWithName:webFrameView:webView:", managed = "Init")]
    pub unsafe fn initWithName_webFrameView_webView(
        this: Option<Allocated<Self>>,
        name: Option<&NSString>,
        view: Option<&WebFrameView>,
        web_view: Option<&WebView>,
    ) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "name", managed = "Other")]
    pub unsafe fn name(&self) -> Id<NSString>;

    #[cfg(feature = "WebKit_WebView")]
    #[objc2::method(sel = "webView", managed = "Other")]
    pub unsafe fn webView(&self) -> Option<Id<WebView>>;

    #[cfg(feature = "WebKit_WebFrameView")]
    #[objc2::method(sel = "frameView", managed = "Other")]
    pub unsafe fn frameView(&self) -> Option<Id<WebFrameView>>;

    #[cfg(feature = "WebKit_DOMDocument")]
    #[objc2::method(sel = "DOMDocument", managed = "Other")]
    pub unsafe fn DOMDocument(&self) -> Option<Id<DOMDocument>>;

    #[cfg(feature = "WebKit_DOMHTMLElement")]
    #[objc2::method(sel = "frameElement", managed = "Other")]
    pub unsafe fn frameElement(&self) -> Option<Id<DOMHTMLElement>>;

    #[cfg(feature = "Foundation_NSURLRequest")]
    #[objc2::method(sel = "loadRequest:")]
    pub unsafe fn loadRequest(&self, request: Option<&NSURLRequest>);

    #[cfg(all(
        feature = "Foundation_NSData",
        feature = "Foundation_NSString",
        feature = "Foundation_NSURL"
    ))]
    #[objc2::method(sel = "loadData:MIMEType:textEncodingName:baseURL:")]
    pub unsafe fn loadData_MIMEType_textEncodingName_baseURL(
        &self,
        data: Option<&NSData>,
        mime_type: Option<&NSString>,
        encoding_name: Option<&NSString>,
        url: Option<&NSURL>,
    );

    #[cfg(all(feature = "Foundation_NSString", feature = "Foundation_NSURL"))]
    #[objc2::method(sel = "loadHTMLString:baseURL:")]
    pub unsafe fn loadHTMLString_baseURL(&self, string: Option<&NSString>, url: Option<&NSURL>);

    #[cfg(all(feature = "Foundation_NSString", feature = "Foundation_NSURL"))]
    #[objc2::method(sel = "loadAlternateHTMLString:baseURL:forUnreachableURL:")]
    pub unsafe fn loadAlternateHTMLString_baseURL_forUnreachableURL(
        &self,
        string: Option<&NSString>,
        base_url: Option<&NSURL>,
        unreachable_url: Option<&NSURL>,
    );

    #[cfg(feature = "WebKit_WebArchive")]
    #[objc2::method(sel = "loadArchive:")]
    pub unsafe fn loadArchive(&self, archive: Option<&WebArchive>);

    #[cfg(feature = "WebKit_WebDataSource")]
    #[objc2::method(sel = "dataSource", managed = "Other")]
    pub unsafe fn dataSource(&self) -> Option<Id<WebDataSource>>;

    #[cfg(feature = "WebKit_WebDataSource")]
    #[objc2::method(sel = "provisionalDataSource", managed = "Other")]
    pub unsafe fn provisionalDataSource(&self) -> Option<Id<WebDataSource>>;

    #[objc2::method(sel = "stopLoading")]
    pub unsafe fn stopLoading(&self);

    #[objc2::method(sel = "reload")]
    pub unsafe fn reload(&self);

    #[objc2::method(sel = "reloadFromOrigin")]
    pub unsafe fn reloadFromOrigin(&self);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "findFrameNamed:", managed = "Other")]
    pub unsafe fn findFrameNamed(&self, name: Option<&NSString>) -> Option<Id<WebFrame>>;

    #[objc2::method(sel = "parentFrame", managed = "Other")]
    pub unsafe fn parentFrame(&self) -> Option<Id<WebFrame>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "childFrames", managed = "Other")]
    pub unsafe fn childFrames(&self) -> Id<NSArray>;

    #[cfg(feature = "WebKit_WebScriptObject")]
    #[objc2::method(sel = "windowObject", managed = "Other")]
    pub unsafe fn windowObject(&self) -> Option<Id<WebScriptObject>>;
}
