//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AutomaticAssessmentConfiguration::*;
use crate::Foundation::*;

#[ns_options]
#[underlying(NSUInteger)]
pub enum AEAutocorrectMode {
    AEAutocorrectModeNone = 0,
    AEAutocorrectModeSpelling = 1 << 0,
    AEAutocorrectModePunctuation = 1 << 1,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "AutomaticAssessmentConfiguration_AEAssessmentConfiguration")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type AEAssessmentConfiguration;
}

#[cfg(feature = "AutomaticAssessmentConfiguration_AEAssessmentConfiguration")]
unsafe impl NSObjectProtocol for AEAssessmentConfiguration {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "AutomaticAssessmentConfiguration_AEAssessmentConfiguration")]
    pub type AEAssessmentConfiguration;

    #[objc2::method(sel = "autocorrectMode")]
    pub unsafe fn autocorrectMode(&self) -> AEAutocorrectMode;

    #[objc2::method(sel = "setAutocorrectMode:")]
    pub unsafe fn setAutocorrectMode(&self, autocorrect_mode: AEAutocorrectMode);

    #[objc2::method(sel = "allowsSpellCheck")]
    pub unsafe fn allowsSpellCheck(&self) -> bool;

    #[objc2::method(sel = "setAllowsSpellCheck:")]
    pub unsafe fn setAllowsSpellCheck(&self, allows_spell_check: bool);

    #[objc2::method(sel = "allowsPredictiveKeyboard")]
    pub unsafe fn allowsPredictiveKeyboard(&self) -> bool;

    #[objc2::method(sel = "setAllowsPredictiveKeyboard:")]
    pub unsafe fn setAllowsPredictiveKeyboard(&self, allows_predictive_keyboard: bool);

    #[objc2::method(sel = "allowsKeyboardShortcuts")]
    pub unsafe fn allowsKeyboardShortcuts(&self) -> bool;

    #[objc2::method(sel = "setAllowsKeyboardShortcuts:")]
    pub unsafe fn setAllowsKeyboardShortcuts(&self, allows_keyboard_shortcuts: bool);

    #[objc2::method(sel = "allowsActivityContinuation")]
    pub unsafe fn allowsActivityContinuation(&self) -> bool;

    #[objc2::method(sel = "setAllowsActivityContinuation:")]
    pub unsafe fn setAllowsActivityContinuation(&self, allows_activity_continuation: bool);

    #[objc2::method(sel = "allowsDictation")]
    pub unsafe fn allowsDictation(&self) -> bool;

    #[objc2::method(sel = "setAllowsDictation:")]
    pub unsafe fn setAllowsDictation(&self, allows_dictation: bool);

    #[objc2::method(sel = "allowsAccessibilitySpeech")]
    pub unsafe fn allowsAccessibilitySpeech(&self) -> bool;

    #[objc2::method(sel = "setAllowsAccessibilitySpeech:")]
    pub unsafe fn setAllowsAccessibilitySpeech(&self, allows_accessibility_speech: bool);

    #[objc2::method(sel = "allowsPasswordAutoFill")]
    pub unsafe fn allowsPasswordAutoFill(&self) -> bool;

    #[objc2::method(sel = "setAllowsPasswordAutoFill:")]
    pub unsafe fn setAllowsPasswordAutoFill(&self, allows_password_auto_fill: bool);

    #[objc2::method(sel = "allowsContinuousPathKeyboard")]
    pub unsafe fn allowsContinuousPathKeyboard(&self) -> bool;

    #[objc2::method(sel = "setAllowsContinuousPathKeyboard:")]
    pub unsafe fn setAllowsContinuousPathKeyboard(&self, allows_continuous_path_keyboard: bool);

    #[cfg(feature = "AutomaticAssessmentConfiguration_AEAssessmentParticipantConfiguration")]
    #[objc2::method(sel = "mainParticipantConfiguration", managed = "Other")]
    pub unsafe fn mainParticipantConfiguration(&self) -> Id<AEAssessmentParticipantConfiguration>;

    #[cfg(all(
        feature = "AutomaticAssessmentConfiguration_AEAssessmentApplication",
        feature = "AutomaticAssessmentConfiguration_AEAssessmentParticipantConfiguration",
        feature = "Foundation_NSDictionary"
    ))]
    #[objc2::method(sel = "configurationsByApplication", managed = "Other")]
    pub unsafe fn configurationsByApplication(
        &self,
    ) -> Id<NSDictionary<AEAssessmentApplication, AEAssessmentParticipantConfiguration>>;

    #[cfg(all(
        feature = "AutomaticAssessmentConfiguration_AEAssessmentApplication",
        feature = "AutomaticAssessmentConfiguration_AEAssessmentParticipantConfiguration"
    ))]
    #[objc2::method(sel = "setConfiguration:forApplication:")]
    pub unsafe fn setConfiguration_forApplication(
        &self,
        configuration: &AEAssessmentParticipantConfiguration,
        application: &AEAssessmentApplication,
    );

    #[cfg(feature = "AutomaticAssessmentConfiguration_AEAssessmentApplication")]
    #[objc2::method(sel = "removeApplication:")]
    pub unsafe fn removeApplication(&self, application: &AEAssessmentApplication);
}
