//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::MediaPlayer::*;

#[ns_options]
#[underlying(NSUInteger)]
pub enum MPMediaType {
    MPMediaTypeMusic = 1 << 0,
    MPMediaTypePodcast = 1 << 1,
    MPMediaTypeAudioBook = 1 << 2,
    MPMediaTypeAudioITunesU = 1 << 3,
    MPMediaTypeAnyAudio = 0x00ff,
    MPMediaTypeMovie = 1 << 8,
    MPMediaTypeTVShow = 1 << 9,
    MPMediaTypeVideoPodcast = 1 << 10,
    MPMediaTypeMusicVideo = 1 << 11,
    MPMediaTypeVideoITunesU = 1 << 12,
    MPMediaTypeHomeVideo = 1 << 13,
    MPMediaTypeAnyVideo = 0xff00,
    MPMediaTypeAny = !0,
}

extern_static!(MPMediaItemPropertyPersistentID: &'static NSString);

extern_static!(MPMediaItemPropertyMediaType: &'static NSString);

extern_static!(MPMediaItemPropertyTitle: &'static NSString);

extern_static!(MPMediaItemPropertyAlbumTitle: &'static NSString);

extern_static!(MPMediaItemPropertyAlbumPersistentID: &'static NSString);

extern_static!(MPMediaItemPropertyArtist: &'static NSString);

extern_static!(MPMediaItemPropertyArtistPersistentID: &'static NSString);

extern_static!(MPMediaItemPropertyAlbumArtist: &'static NSString);

extern_static!(MPMediaItemPropertyAlbumArtistPersistentID: &'static NSString);

extern_static!(MPMediaItemPropertyGenre: &'static NSString);

extern_static!(MPMediaItemPropertyGenrePersistentID: &'static NSString);

extern_static!(MPMediaItemPropertyComposer: &'static NSString);

extern_static!(MPMediaItemPropertyComposerPersistentID: &'static NSString);

extern_static!(MPMediaItemPropertyPlaybackDuration: &'static NSString);

extern_static!(MPMediaItemPropertyAlbumTrackNumber: &'static NSString);

extern_static!(MPMediaItemPropertyAlbumTrackCount: &'static NSString);

extern_static!(MPMediaItemPropertyDiscNumber: &'static NSString);

extern_static!(MPMediaItemPropertyDiscCount: &'static NSString);

extern_static!(MPMediaItemPropertyArtwork: &'static NSString);

extern_static!(MPMediaItemPropertyIsExplicit: &'static NSString);

extern_static!(MPMediaItemPropertyLyrics: &'static NSString);

extern_static!(MPMediaItemPropertyIsCompilation: &'static NSString);

extern_static!(MPMediaItemPropertyReleaseDate: &'static NSString);

extern_static!(MPMediaItemPropertyBeatsPerMinute: &'static NSString);

extern_static!(MPMediaItemPropertyComments: &'static NSString);

extern_static!(MPMediaItemPropertyAssetURL: &'static NSString);

extern_static!(MPMediaItemPropertyIsCloudItem: &'static NSString);

extern_static!(MPMediaItemPropertyHasProtectedAsset: &'static NSString);

extern_static!(MPMediaItemPropertyPodcastTitle: &'static NSString);

extern_static!(MPMediaItemPropertyPodcastPersistentID: &'static NSString);

extern_static!(MPMediaItemPropertyPlayCount: &'static NSString);

extern_static!(MPMediaItemPropertySkipCount: &'static NSString);

extern_static!(MPMediaItemPropertyRating: &'static NSString);

extern_static!(MPMediaItemPropertyLastPlayedDate: &'static NSString);

extern_static!(MPMediaItemPropertyUserGrouping: &'static NSString);

extern_static!(MPMediaItemPropertyBookmarkTime: &'static NSString);

extern_static!(MPMediaItemPropertyDateAdded: &'static NSString);

extern_static!(MPMediaItemPropertyPlaybackStoreID: &'static NSString);

extern_static!(MPMediaItemPropertyIsPreorder: &'static NSString);

#[objc2::interface(
    unsafe super = MPMediaEntity,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "MediaPlayer_MPMediaItem")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MPMediaItem;
}

#[cfg(feature = "MediaPlayer_MPMediaItem")]
unsafe impl NSCoding for MPMediaItem {}

#[cfg(feature = "MediaPlayer_MPMediaItem")]
unsafe impl NSObjectProtocol for MPMediaItem {}

#[cfg(feature = "MediaPlayer_MPMediaItem")]
unsafe impl NSSecureCoding for MPMediaItem {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MediaPlayer_MPMediaItem")]
    pub type MPMediaItem;

    #[objc2::method(sel = "persistentID")]
    pub unsafe fn persistentID(&self) -> MPMediaEntityPersistentID;

    #[objc2::method(sel = "mediaType")]
    pub unsafe fn mediaType(&self) -> MPMediaType;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "title", managed = "Other")]
    pub unsafe fn title(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "albumTitle", managed = "Other")]
    pub unsafe fn albumTitle(&self) -> Option<Id<NSString>>;

    #[objc2::method(sel = "albumPersistentID")]
    pub unsafe fn albumPersistentID(&self) -> MPMediaEntityPersistentID;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "artist", managed = "Other")]
    pub unsafe fn artist(&self) -> Option<Id<NSString>>;

    #[objc2::method(sel = "artistPersistentID")]
    pub unsafe fn artistPersistentID(&self) -> MPMediaEntityPersistentID;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "albumArtist", managed = "Other")]
    pub unsafe fn albumArtist(&self) -> Option<Id<NSString>>;

    #[objc2::method(sel = "albumArtistPersistentID")]
    pub unsafe fn albumArtistPersistentID(&self) -> MPMediaEntityPersistentID;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "genre", managed = "Other")]
    pub unsafe fn genre(&self) -> Option<Id<NSString>>;

    #[objc2::method(sel = "genrePersistentID")]
    pub unsafe fn genrePersistentID(&self) -> MPMediaEntityPersistentID;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "composer", managed = "Other")]
    pub unsafe fn composer(&self) -> Option<Id<NSString>>;

    #[objc2::method(sel = "composerPersistentID")]
    pub unsafe fn composerPersistentID(&self) -> MPMediaEntityPersistentID;

    #[objc2::method(sel = "playbackDuration")]
    pub unsafe fn playbackDuration(&self) -> NSTimeInterval;

    #[objc2::method(sel = "albumTrackNumber")]
    pub unsafe fn albumTrackNumber(&self) -> NSUInteger;

    #[objc2::method(sel = "albumTrackCount")]
    pub unsafe fn albumTrackCount(&self) -> NSUInteger;

    #[objc2::method(sel = "discNumber")]
    pub unsafe fn discNumber(&self) -> NSUInteger;

    #[objc2::method(sel = "discCount")]
    pub unsafe fn discCount(&self) -> NSUInteger;

    #[cfg(feature = "MediaPlayer_MPMediaItemArtwork")]
    #[objc2::method(sel = "artwork", managed = "Other")]
    pub unsafe fn artwork(&self) -> Option<Id<MPMediaItemArtwork>>;

    #[objc2::method(sel = "isExplicitItem")]
    pub unsafe fn isExplicitItem(&self) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "lyrics", managed = "Other")]
    pub unsafe fn lyrics(&self) -> Option<Id<NSString>>;

    #[objc2::method(sel = "isCompilation")]
    pub unsafe fn isCompilation(&self) -> bool;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "releaseDate", managed = "Other")]
    pub unsafe fn releaseDate(&self) -> Option<Id<NSDate>>;

    #[objc2::method(sel = "beatsPerMinute")]
    pub unsafe fn beatsPerMinute(&self) -> NSUInteger;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "comments", managed = "Other")]
    pub unsafe fn comments(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "assetURL", managed = "Other")]
    pub unsafe fn assetURL(&self) -> Option<Id<NSURL>>;

    #[objc2::method(sel = "isCloudItem")]
    pub unsafe fn isCloudItem(&self) -> bool;

    #[objc2::method(sel = "hasProtectedAsset")]
    pub unsafe fn hasProtectedAsset(&self) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "podcastTitle", managed = "Other")]
    pub unsafe fn podcastTitle(&self) -> Option<Id<NSString>>;

    #[objc2::method(sel = "podcastPersistentID")]
    pub unsafe fn podcastPersistentID(&self) -> MPMediaEntityPersistentID;

    #[objc2::method(sel = "playCount")]
    pub unsafe fn playCount(&self) -> NSUInteger;

    #[objc2::method(sel = "skipCount")]
    pub unsafe fn skipCount(&self) -> NSUInteger;

    #[objc2::method(sel = "rating")]
    pub unsafe fn rating(&self) -> NSUInteger;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "lastPlayedDate", managed = "Other")]
    pub unsafe fn lastPlayedDate(&self) -> Option<Id<NSDate>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "userGrouping", managed = "Other")]
    pub unsafe fn userGrouping(&self) -> Option<Id<NSString>>;

    #[objc2::method(sel = "bookmarkTime")]
    pub unsafe fn bookmarkTime(&self) -> NSTimeInterval;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "dateAdded", managed = "Other")]
    pub unsafe fn dateAdded(&self) -> Id<NSDate>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "playbackStoreID", managed = "Other")]
    pub unsafe fn playbackStoreID(&self) -> Id<NSString>;

    #[objc2::method(sel = "isPreorder")]
    pub unsafe fn isPreorder(&self) -> bool;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "MediaPlayer_MPMediaItemArtwork")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MPMediaItemArtwork;
}

#[cfg(feature = "MediaPlayer_MPMediaItemArtwork")]
unsafe impl NSObjectProtocol for MPMediaItemArtwork {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MediaPlayer_MPMediaItemArtwork")]
    pub type MPMediaItemArtwork;

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "initWithBoundsSize:requestHandler:", managed = "Init")]
    pub unsafe fn initWithBoundsSize_requestHandler(
        this: Option<Allocated<Self>>,
        bounds_size: CGSize,
        request_handler: &Block<(CGSize,), NonNull<NSImage>>,
    ) -> Id<Self>;

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "imageWithSize:", managed = "Other")]
    pub unsafe fn imageWithSize(&self, size: CGSize) -> Option<Id<NSImage>>;

    #[objc2::method(sel = "bounds")]
    pub unsafe fn bounds(&self) -> CGRect;

    #[deprecated = "cropRect is no longer used"]
    #[objc2::method(sel = "imageCropRect")]
    pub unsafe fn imageCropRect(&self) -> CGRect;
}
