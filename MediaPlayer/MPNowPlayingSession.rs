//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::MediaPlayer::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "MediaPlayer_MPAdTimeRange")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MPAdTimeRange;
}

#[cfg(feature = "MediaPlayer_MPAdTimeRange")]
unsafe impl NSObjectProtocol for MPAdTimeRange {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MediaPlayer_MPAdTimeRange")]
    pub type MPAdTimeRange;

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "MediaPlayer_MPNowPlayingSession")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MPNowPlayingSession;
}

#[cfg(feature = "MediaPlayer_MPNowPlayingSession")]
unsafe impl NSObjectProtocol for MPNowPlayingSession {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MediaPlayer_MPNowPlayingSession")]
    pub type MPNowPlayingSession;

    #[cfg(all(feature = "AVFoundation_AVPlayer", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "initWithPlayers:", managed = "Init")]
    pub unsafe fn initWithPlayers(
        this: Option<Allocated<Self>>,
        players: &NSArray<AVPlayer>,
    ) -> Id<Self>;

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(all(feature = "AVFoundation_AVPlayer", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "players", managed = "Other")]
    pub unsafe fn players(&self) -> Id<NSArray<AVPlayer>>;

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn MPNowPlayingSessionDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(
        &self,
        delegate: Option<&ProtocolObject<dyn MPNowPlayingSessionDelegate>>,
    );

    #[objc2::method(sel = "automaticallyPublishesNowPlayingInfo")]
    pub unsafe fn automaticallyPublishesNowPlayingInfo(&self) -> bool;

    #[objc2::method(sel = "setAutomaticallyPublishesNowPlayingInfo:")]
    pub unsafe fn setAutomaticallyPublishesNowPlayingInfo(
        &self,
        automatically_publishes_now_playing_info: bool,
    );

    #[cfg(feature = "MediaPlayer_MPNowPlayingInfoCenter")]
    #[objc2::method(sel = "nowPlayingInfoCenter", managed = "Other")]
    pub unsafe fn nowPlayingInfoCenter(&self) -> Id<MPNowPlayingInfoCenter>;

    #[cfg(feature = "MediaPlayer_MPRemoteCommandCenter")]
    #[objc2::method(sel = "remoteCommandCenter", managed = "Other")]
    pub unsafe fn remoteCommandCenter(&self) -> Id<MPRemoteCommandCenter>;

    #[objc2::method(sel = "canBecomeActive")]
    pub unsafe fn canBecomeActive(&self) -> bool;

    #[objc2::method(sel = "isActive")]
    pub unsafe fn isActive(&self) -> bool;

    #[objc2::method(sel = "becomeActiveIfPossibleWithCompletion:")]
    pub unsafe fn becomeActiveIfPossibleWithCompletion(
        &self,
        completion: Option<&Block<(Bool,), ()>>,
    );

    #[cfg(feature = "AVFoundation_AVPlayer")]
    #[objc2::method(sel = "addPlayer:")]
    pub unsafe fn addPlayer(&self, player: &AVPlayer);

    #[cfg(feature = "AVFoundation_AVPlayer")]
    #[objc2::method(sel = "removePlayer:")]
    pub unsafe fn removePlayer(&self, player: &AVPlayer);
}

#[objc2::protocol]
pub unsafe trait MPNowPlayingSessionDelegate: NSObjectProtocol {
    #[cfg(feature = "MediaPlayer_MPNowPlayingSession")]
    #[objc2::method(optional, sel = "nowPlayingSessionDidChangeActive:")]
    unsafe fn nowPlayingSessionDidChangeActive(&self, now_playing_session: &MPNowPlayingSession);

    #[cfg(feature = "MediaPlayer_MPNowPlayingSession")]
    #[objc2::method(optional, sel = "nowPlayingSessionDidChangeCanBecomeActive:")]
    unsafe fn nowPlayingSessionDidChangeCanBecomeActive(
        &self,
        now_playing_session: &MPNowPlayingSession,
    );
}
