//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::MediaPlayer::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "MediaPlayer_MPContentItem")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MPContentItem;
}

#[cfg(feature = "MediaPlayer_MPContentItem")]
unsafe impl NSObjectProtocol for MPContentItem {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MediaPlayer_MPContentItem")]
    pub type MPContentItem;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithIdentifier:", managed = "Init")]
    pub unsafe fn initWithIdentifier(
        this: Option<Allocated<Self>>,
        identifier: &NSString,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "identifier", managed = "Other")]
    pub unsafe fn identifier(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "title", managed = "Other")]
    pub unsafe fn title(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setTitle:")]
    pub unsafe fn setTitle(&self, title: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "subtitle", managed = "Other")]
    pub unsafe fn subtitle(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setSubtitle:")]
    pub unsafe fn setSubtitle(&self, subtitle: Option<&NSString>);

    #[cfg(feature = "MediaPlayer_MPMediaItemArtwork")]
    #[objc2::method(sel = "artwork", managed = "Other")]
    pub unsafe fn artwork(&self) -> Option<Id<MPMediaItemArtwork>>;

    #[cfg(feature = "MediaPlayer_MPMediaItemArtwork")]
    #[objc2::method(sel = "setArtwork:")]
    pub unsafe fn setArtwork(&self, artwork: Option<&MPMediaItemArtwork>);

    #[objc2::method(sel = "playbackProgress")]
    pub unsafe fn playbackProgress(&self) -> c_float;

    #[objc2::method(sel = "setPlaybackProgress:")]
    pub unsafe fn setPlaybackProgress(&self, playback_progress: c_float);

    #[objc2::method(sel = "isStreamingContent")]
    pub unsafe fn isStreamingContent(&self) -> bool;

    #[objc2::method(sel = "setStreamingContent:")]
    pub unsafe fn setStreamingContent(&self, streaming_content: bool);

    #[objc2::method(sel = "isExplicitContent")]
    pub unsafe fn isExplicitContent(&self) -> bool;

    #[objc2::method(sel = "setExplicitContent:")]
    pub unsafe fn setExplicitContent(&self, explicit_content: bool);

    #[objc2::method(sel = "isContainer")]
    pub unsafe fn isContainer(&self) -> bool;

    #[objc2::method(sel = "setContainer:")]
    pub unsafe fn setContainer(&self, container: bool);

    #[objc2::method(sel = "isPlayable")]
    pub unsafe fn isPlayable(&self) -> bool;

    #[objc2::method(sel = "setPlayable:")]
    pub unsafe fn setPlayable(&self, playable: bool);
}
