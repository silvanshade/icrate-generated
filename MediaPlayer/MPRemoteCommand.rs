//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::MediaPlayer::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum MPRemoteCommandHandlerStatus {
    MPRemoteCommandHandlerStatusSuccess = 0,
    MPRemoteCommandHandlerStatusNoSuchContent = 100,
    MPRemoteCommandHandlerStatusNoActionableNowPlayingItem = 110,
    MPRemoteCommandHandlerStatusDeviceNotFound = 120,
    MPRemoteCommandHandlerStatusCommandFailed = 200,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "MediaPlayer_MPRemoteCommand")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MPRemoteCommand;
}

#[cfg(feature = "MediaPlayer_MPRemoteCommand")]
unsafe impl NSObjectProtocol for MPRemoteCommand {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MediaPlayer_MPRemoteCommand")]
    pub type MPRemoteCommand;

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "isEnabled")]
    pub unsafe fn isEnabled(&self) -> bool;

    #[objc2::method(sel = "setEnabled:")]
    pub unsafe fn setEnabled(&self, enabled: bool);

    #[objc2::method(sel = "addTarget:action:")]
    pub unsafe fn addTarget_action(&self, target: &Object, action: Sel);

    #[objc2::method(sel = "removeTarget:action:")]
    pub unsafe fn removeTarget_action(&self, target: &Object, action: Option<Sel>);

    #[objc2::method(sel = "removeTarget:")]
    pub unsafe fn removeTarget(&self, target: Option<&Object>);

    #[cfg(feature = "MediaPlayer_MPRemoteCommandEvent")]
    #[objc2::method(sel = "addTargetWithHandler:", managed = "Other")]
    pub unsafe fn addTargetWithHandler(
        &self,
        handler: &Block<(NonNull<MPRemoteCommandEvent>,), MPRemoteCommandHandlerStatus>,
    ) -> Id<Object>;
}

#[objc2::interface(
    unsafe super = MPRemoteCommand,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "MediaPlayer_MPSkipIntervalCommand")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MPSkipIntervalCommand;
}

#[cfg(feature = "MediaPlayer_MPSkipIntervalCommand")]
unsafe impl NSObjectProtocol for MPSkipIntervalCommand {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MediaPlayer_MPSkipIntervalCommand")]
    pub type MPSkipIntervalCommand;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
    #[objc2::method(sel = "preferredIntervals", managed = "Other")]
    pub unsafe fn preferredIntervals(&self) -> Id<NSArray<NSNumber>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
    #[objc2::method(sel = "setPreferredIntervals:")]
    pub unsafe fn setPreferredIntervals(&self, preferred_intervals: &NSArray<NSNumber>);
}

#[objc2::interface(
    unsafe super = MPRemoteCommand,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "MediaPlayer_MPFeedbackCommand")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MPFeedbackCommand;
}

#[cfg(feature = "MediaPlayer_MPFeedbackCommand")]
unsafe impl NSObjectProtocol for MPFeedbackCommand {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MediaPlayer_MPFeedbackCommand")]
    pub type MPFeedbackCommand;

    #[objc2::method(sel = "isActive")]
    pub unsafe fn isActive(&self) -> bool;

    #[objc2::method(sel = "setActive:")]
    pub unsafe fn setActive(&self, active: bool);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "localizedTitle", managed = "Other")]
    pub unsafe fn localizedTitle(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setLocalizedTitle:")]
    pub unsafe fn setLocalizedTitle(&self, localized_title: &NSString);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "localizedShortTitle", managed = "Other")]
    pub unsafe fn localizedShortTitle(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setLocalizedShortTitle:")]
    pub unsafe fn setLocalizedShortTitle(&self, localized_short_title: &NSString);
}

#[objc2::interface(
    unsafe super = MPRemoteCommand,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "MediaPlayer_MPRatingCommand")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MPRatingCommand;
}

#[cfg(feature = "MediaPlayer_MPRatingCommand")]
unsafe impl NSObjectProtocol for MPRatingCommand {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MediaPlayer_MPRatingCommand")]
    pub type MPRatingCommand;

    #[objc2::method(sel = "minimumRating")]
    pub unsafe fn minimumRating(&self) -> c_float;

    #[objc2::method(sel = "setMinimumRating:")]
    pub unsafe fn setMinimumRating(&self, minimum_rating: c_float);

    #[objc2::method(sel = "maximumRating")]
    pub unsafe fn maximumRating(&self) -> c_float;

    #[objc2::method(sel = "setMaximumRating:")]
    pub unsafe fn setMaximumRating(&self, maximum_rating: c_float);
}

#[objc2::interface(
    unsafe super = MPRemoteCommand,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "MediaPlayer_MPChangePlaybackRateCommand")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MPChangePlaybackRateCommand;
}

#[cfg(feature = "MediaPlayer_MPChangePlaybackRateCommand")]
unsafe impl NSObjectProtocol for MPChangePlaybackRateCommand {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MediaPlayer_MPChangePlaybackRateCommand")]
    pub type MPChangePlaybackRateCommand;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
    #[objc2::method(sel = "supportedPlaybackRates", managed = "Other")]
    pub unsafe fn supportedPlaybackRates(&self) -> Id<NSArray<NSNumber>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
    #[objc2::method(sel = "setSupportedPlaybackRates:")]
    pub unsafe fn setSupportedPlaybackRates(&self, supported_playback_rates: &NSArray<NSNumber>);
}

#[objc2::interface(
    unsafe super = MPRemoteCommand,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "MediaPlayer_MPChangePlaybackPositionCommand")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MPChangePlaybackPositionCommand;
}

#[cfg(feature = "MediaPlayer_MPChangePlaybackPositionCommand")]
unsafe impl NSObjectProtocol for MPChangePlaybackPositionCommand {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MediaPlayer_MPChangePlaybackPositionCommand")]
    pub type MPChangePlaybackPositionCommand;
}

#[objc2::interface(
    unsafe super = MPRemoteCommand,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "MediaPlayer_MPChangeShuffleModeCommand")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MPChangeShuffleModeCommand;
}

#[cfg(feature = "MediaPlayer_MPChangeShuffleModeCommand")]
unsafe impl NSObjectProtocol for MPChangeShuffleModeCommand {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MediaPlayer_MPChangeShuffleModeCommand")]
    pub type MPChangeShuffleModeCommand;

    #[objc2::method(sel = "currentShuffleType")]
    pub unsafe fn currentShuffleType(&self) -> MPShuffleType;

    #[objc2::method(sel = "setCurrentShuffleType:")]
    pub unsafe fn setCurrentShuffleType(&self, current_shuffle_type: MPShuffleType);
}

#[objc2::interface(
    unsafe super = MPRemoteCommand,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "MediaPlayer_MPChangeRepeatModeCommand")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MPChangeRepeatModeCommand;
}

#[cfg(feature = "MediaPlayer_MPChangeRepeatModeCommand")]
unsafe impl NSObjectProtocol for MPChangeRepeatModeCommand {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MediaPlayer_MPChangeRepeatModeCommand")]
    pub type MPChangeRepeatModeCommand;

    #[objc2::method(sel = "currentRepeatType")]
    pub unsafe fn currentRepeatType(&self) -> MPRepeatType;

    #[objc2::method(sel = "setCurrentRepeatType:")]
    pub unsafe fn setCurrentRepeatType(&self, current_repeat_type: MPRepeatType);
}
