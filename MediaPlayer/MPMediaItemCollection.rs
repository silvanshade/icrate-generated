//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::MediaPlayer::*;

#[objc2::interface(
    unsafe super = MPMediaEntity,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "MediaPlayer_MPMediaItemCollection")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MPMediaItemCollection;
}

#[cfg(feature = "MediaPlayer_MPMediaItemCollection")]
unsafe impl NSCoding for MPMediaItemCollection {}

#[cfg(feature = "MediaPlayer_MPMediaItemCollection")]
unsafe impl NSObjectProtocol for MPMediaItemCollection {}

#[cfg(feature = "MediaPlayer_MPMediaItemCollection")]
unsafe impl NSSecureCoding for MPMediaItemCollection {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MediaPlayer_MPMediaItemCollection")]
    pub type MPMediaItemCollection;

    #[cfg(all(feature = "Foundation_NSArray", feature = "MediaPlayer_MPMediaItem"))]
    #[objc2::method(sel = "collectionWithItems:", managed = "Other")]
    pub unsafe fn collectionWithItems(items: &NSArray<MPMediaItem>) -> Id<MPMediaItemCollection>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "MediaPlayer_MPMediaItem"))]
    #[objc2::method(sel = "initWithItems:", managed = "Init")]
    pub unsafe fn initWithItems(
        this: Option<Allocated<Self>>,
        items: &NSArray<MPMediaItem>,
    ) -> Id<Self>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "MediaPlayer_MPMediaItem"))]
    #[objc2::method(sel = "items", managed = "Other")]
    pub unsafe fn items(&self) -> Id<NSArray<MPMediaItem>>;

    #[cfg(feature = "MediaPlayer_MPMediaItem")]
    #[objc2::method(sel = "representativeItem", managed = "Other")]
    pub unsafe fn representativeItem(&self) -> Option<Id<MPMediaItem>>;

    #[objc2::method(sel = "count")]
    pub unsafe fn count(&self) -> NSUInteger;

    #[objc2::method(sel = "mediaTypes")]
    pub unsafe fn mediaTypes(&self) -> MPMediaType;
}
