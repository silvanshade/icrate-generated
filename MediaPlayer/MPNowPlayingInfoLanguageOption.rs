//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::MediaPlayer::*;

extern_static!(MPLanguageOptionCharacteristicIsMainProgramContent: &'static NSString);

extern_static!(MPLanguageOptionCharacteristicIsAuxiliaryContent: &'static NSString);

extern_static!(MPLanguageOptionCharacteristicContainsOnlyForcedSubtitles: &'static NSString);

extern_static!(MPLanguageOptionCharacteristicTranscribesSpokenDialog: &'static NSString);

extern_static!(MPLanguageOptionCharacteristicDescribesMusicAndSound: &'static NSString);

extern_static!(MPLanguageOptionCharacteristicEasyToRead: &'static NSString);

extern_static!(MPLanguageOptionCharacteristicDescribesVideo: &'static NSString);

extern_static!(MPLanguageOptionCharacteristicLanguageTranslation: &'static NSString);

extern_static!(MPLanguageOptionCharacteristicDubbedTranslation: &'static NSString);

extern_static!(MPLanguageOptionCharacteristicVoiceOverTranslation: &'static NSString);

#[ns_enum]
#[underlying(NSUInteger)]
pub enum MPNowPlayingInfoLanguageOptionType {
    MPNowPlayingInfoLanguageOptionTypeAudible = 0,
    MPNowPlayingInfoLanguageOptionTypeLegible = 1,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "MediaPlayer_MPNowPlayingInfoLanguageOption")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MPNowPlayingInfoLanguageOption;
}

#[cfg(feature = "MediaPlayer_MPNowPlayingInfoLanguageOption")]
unsafe impl NSObjectProtocol for MPNowPlayingInfoLanguageOption {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MediaPlayer_MPNowPlayingInfoLanguageOption")]
    pub type MPNowPlayingInfoLanguageOption;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(
        sel = "initWithType:languageTag:characteristics:displayName:identifier:",
        managed = "Init"
    )]
    pub unsafe fn initWithType_languageTag_characteristics_displayName_identifier(
        this: Option<Allocated<Self>>,
        language_option_type: MPNowPlayingInfoLanguageOptionType,
        language_tag: &NSString,
        language_option_characteristics: Option<&NSArray<NSString>>,
        display_name: &NSString,
        identifier: &NSString,
    ) -> Id<Self>;

    #[objc2::method(sel = "isAutomaticLegibleLanguageOption")]
    pub unsafe fn isAutomaticLegibleLanguageOption(&self) -> bool;

    #[objc2::method(sel = "isAutomaticAudibleLanguageOption")]
    pub unsafe fn isAutomaticAudibleLanguageOption(&self) -> bool;

    #[objc2::method(sel = "languageOptionType")]
    pub unsafe fn languageOptionType(&self) -> MPNowPlayingInfoLanguageOptionType;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "languageTag", managed = "Other")]
    pub unsafe fn languageTag(&self) -> Option<Id<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "languageOptionCharacteristics", managed = "Other")]
    pub unsafe fn languageOptionCharacteristics(&self) -> Option<Id<NSArray<NSString>>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "displayName", managed = "Other")]
    pub unsafe fn displayName(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "identifier", managed = "Other")]
    pub unsafe fn identifier(&self) -> Option<Id<NSString>>;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "MediaPlayer_MPNowPlayingInfoLanguageOptionGroup")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MPNowPlayingInfoLanguageOptionGroup;
}

#[cfg(feature = "MediaPlayer_MPNowPlayingInfoLanguageOptionGroup")]
unsafe impl NSObjectProtocol for MPNowPlayingInfoLanguageOptionGroup {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MediaPlayer_MPNowPlayingInfoLanguageOptionGroup")]
    pub type MPNowPlayingInfoLanguageOptionGroup;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "MediaPlayer_MPNowPlayingInfoLanguageOption"
    ))]
    #[objc2::method(
        sel = "initWithLanguageOptions:defaultLanguageOption:allowEmptySelection:",
        managed = "Init"
    )]
    pub unsafe fn initWithLanguageOptions_defaultLanguageOption_allowEmptySelection(
        this: Option<Allocated<Self>>,
        language_options: &NSArray<MPNowPlayingInfoLanguageOption>,
        default_language_option: Option<&MPNowPlayingInfoLanguageOption>,
        allow_empty_selection: bool,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "MediaPlayer_MPNowPlayingInfoLanguageOption"
    ))]
    #[objc2::method(sel = "languageOptions", managed = "Other")]
    pub unsafe fn languageOptions(&self) -> Id<NSArray<MPNowPlayingInfoLanguageOption>>;

    #[cfg(feature = "MediaPlayer_MPNowPlayingInfoLanguageOption")]
    #[objc2::method(sel = "defaultLanguageOption", managed = "Other")]
    pub unsafe fn defaultLanguageOption(&self) -> Option<Id<MPNowPlayingInfoLanguageOption>>;

    #[objc2::method(sel = "allowEmptySelection")]
    pub unsafe fn allowEmptySelection(&self) -> bool;
}
