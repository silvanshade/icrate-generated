//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;
use crate::SoundAnalysis::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "SoundAnalysis_SNClassifySoundRequest")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type SNClassifySoundRequest;
}

#[cfg(feature = "SoundAnalysis_SNClassifySoundRequest")]
unsafe impl NSObjectProtocol for SNClassifySoundRequest {}

#[cfg(feature = "SoundAnalysis_SNClassifySoundRequest")]
unsafe impl SNRequest for SNClassifySoundRequest {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "SoundAnalysis_SNClassifySoundRequest")]
    pub type SNClassifySoundRequest;

    #[objc2::method(sel = "overlapFactor")]
    pub unsafe fn overlapFactor(&self) -> c_double;

    #[objc2::method(sel = "setOverlapFactor:")]
    pub unsafe fn setOverlapFactor(&self, overlap_factor: c_double);

    #[cfg(feature = "SoundAnalysis_SNTimeDurationConstraint")]
    #[objc2::method(sel = "windowDurationConstraint", managed = "Other")]
    pub unsafe fn windowDurationConstraint(&self) -> Id<SNTimeDurationConstraint>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "knownClassifications", managed = "Other")]
    pub unsafe fn knownClassifications(&self) -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "CoreML_MLModel", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "initWithMLModel:error:", managed = "Init", throws)]
    pub unsafe fn initWithMLModel_error(
        this: Option<Allocated<Self>>,
        ml_model: &MLModel,
    ) -> Result<Id<Self>, Id<NSError>>;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "initWithClassifierIdentifier:error:", managed = "Init", throws)]
    pub unsafe fn initWithClassifierIdentifier_error(
        this: Option<Allocated<Self>>,
        classifier_identifier: &SNClassifierIdentifier,
    ) -> Result<Id<Self>, Id<NSError>>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;
}
