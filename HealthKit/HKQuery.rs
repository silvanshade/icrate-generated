//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreLocation::*;
use crate::Foundation::*;
use crate::HealthKit::*;
use crate::UniformTypeIdentifiers::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "HealthKit_HKQuery")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type HKQuery;
}

#[cfg(feature = "HealthKit_HKQuery")]
unsafe impl NSObjectProtocol for HKQuery {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "HealthKit_HKQuery")]
    pub type HKQuery;

    #[cfg(feature = "HealthKit_HKObjectType")]
    #[objc2::method(sel = "objectType", managed = "Other")]
    pub unsafe fn objectType(&self) -> Option<Id<HKObjectType>>;

    #[cfg(feature = "HealthKit_HKSampleType")]
    #[deprecated]
    #[objc2::method(sel = "sampleType", managed = "Other")]
    pub unsafe fn sampleType(&self) -> Option<Id<HKSampleType>>;

    #[cfg(feature = "Foundation_NSPredicate")]
    #[objc2::method(sel = "predicate", managed = "Other")]
    pub unsafe fn predicate(&self) -> Option<Id<NSPredicate>>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;
}

#[ns_options]
#[underlying(NSUInteger)]
pub enum HKQueryOptions {
    HKQueryOptionNone = 0,
    HKQueryOptionStrictStartDate = 1 << 0,
    HKQueryOptionStrictEndDate = 1 << 1,
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "HealthKit_HKQuery")]
    pub type HKQuery;

    #[cfg(all(feature = "Foundation_NSPredicate", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "predicateForObjectsWithMetadataKey:", managed = "Other")]
    pub unsafe fn predicateForObjectsWithMetadataKey(key: &NSString) -> Id<NSPredicate>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSPredicate",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        sel = "predicateForObjectsWithMetadataKey:allowedValues:",
        managed = "Other"
    )]
    pub unsafe fn predicateForObjectsWithMetadataKey_allowedValues(
        key: &NSString,
        allowed_values: &NSArray,
    ) -> Id<NSPredicate>;

    #[cfg(all(feature = "Foundation_NSPredicate", feature = "Foundation_NSString"))]
    #[objc2::method(
        sel = "predicateForObjectsWithMetadataKey:operatorType:value:",
        managed = "Other"
    )]
    pub unsafe fn predicateForObjectsWithMetadataKey_operatorType_value(
        key: &NSString,
        operator_type: NSPredicateOperatorType,
        value: &Object,
    ) -> Id<NSPredicate>;

    #[cfg(all(feature = "Foundation_NSPredicate", feature = "HealthKit_HKSource"))]
    #[objc2::method(sel = "predicateForObjectsFromSource:", managed = "Other")]
    pub unsafe fn predicateForObjectsFromSource(source: &HKSource) -> Id<NSPredicate>;

    #[cfg(all(
        feature = "Foundation_NSPredicate",
        feature = "Foundation_NSSet",
        feature = "HealthKit_HKSource"
    ))]
    #[objc2::method(sel = "predicateForObjectsFromSources:", managed = "Other")]
    pub unsafe fn predicateForObjectsFromSources(sources: &NSSet<HKSource>) -> Id<NSPredicate>;

    #[cfg(all(
        feature = "Foundation_NSPredicate",
        feature = "Foundation_NSSet",
        feature = "HealthKit_HKSourceRevision"
    ))]
    #[objc2::method(sel = "predicateForObjectsFromSourceRevisions:", managed = "Other")]
    pub unsafe fn predicateForObjectsFromSourceRevisions(
        source_revisions: &NSSet<HKSourceRevision>,
    ) -> Id<NSPredicate>;

    #[cfg(all(
        feature = "Foundation_NSPredicate",
        feature = "Foundation_NSSet",
        feature = "HealthKit_HKDevice"
    ))]
    #[objc2::method(sel = "predicateForObjectsFromDevices:", managed = "Other")]
    pub unsafe fn predicateForObjectsFromDevices(devices: &NSSet<HKDevice>) -> Id<NSPredicate>;

    #[cfg(all(
        feature = "Foundation_NSPredicate",
        feature = "Foundation_NSSet",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        sel = "predicateForObjectsWithDeviceProperty:allowedValues:",
        managed = "Other"
    )]
    pub unsafe fn predicateForObjectsWithDeviceProperty_allowedValues(
        key: &NSString,
        allowed_values: &NSSet<NSString>,
    ) -> Id<NSPredicate>;

    #[cfg(all(feature = "Foundation_NSPredicate", feature = "Foundation_NSUUID"))]
    #[objc2::method(sel = "predicateForObjectWithUUID:", managed = "Other")]
    pub unsafe fn predicateForObjectWithUUID(uuid: &NSUUID) -> Id<NSPredicate>;

    #[cfg(all(
        feature = "Foundation_NSPredicate",
        feature = "Foundation_NSSet",
        feature = "Foundation_NSUUID"
    ))]
    #[objc2::method(sel = "predicateForObjectsWithUUIDs:", managed = "Other")]
    pub unsafe fn predicateForObjectsWithUUIDs(uui_ds: &NSSet<NSUUID>) -> Id<NSPredicate>;

    #[cfg(feature = "Foundation_NSPredicate")]
    #[objc2::method(sel = "predicateForObjectsWithNoCorrelation", managed = "Other")]
    pub unsafe fn predicateForObjectsWithNoCorrelation() -> Id<NSPredicate>;

    #[cfg(all(feature = "Foundation_NSPredicate", feature = "HealthKit_HKWorkout"))]
    #[objc2::method(sel = "predicateForObjectsFromWorkout:", managed = "Other")]
    pub unsafe fn predicateForObjectsFromWorkout(workout: &HKWorkout) -> Id<NSPredicate>;

    #[cfg(all(
        feature = "Foundation_NSPredicate",
        feature = "HealthKit_HKElectrocardiogram"
    ))]
    #[objc2::method(
        sel = "predicateForObjectsAssociatedWithElectrocardiogram:",
        managed = "Other"
    )]
    pub unsafe fn predicateForObjectsAssociatedWithElectrocardiogram(
        electrocardiogram: &HKElectrocardiogram,
    ) -> Id<NSPredicate>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "HealthKit_HKQuery")]
    pub type HKQuery;

    #[cfg(all(feature = "Foundation_NSDate", feature = "Foundation_NSPredicate"))]
    #[objc2::method(
        sel = "predicateForSamplesWithStartDate:endDate:options:",
        managed = "Other"
    )]
    pub unsafe fn predicateForSamplesWithStartDate_endDate_options(
        start_date: Option<&NSDate>,
        end_date: Option<&NSDate>,
        options: HKQueryOptions,
    ) -> Id<NSPredicate>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "HealthKit_HKQuery")]
    pub type HKQuery;

    #[cfg(all(feature = "Foundation_NSPredicate", feature = "HealthKit_HKQuantity"))]
    #[objc2::method(
        sel = "predicateForQuantitySamplesWithOperatorType:quantity:",
        managed = "Other"
    )]
    pub unsafe fn predicateForQuantitySamplesWithOperatorType_quantity(
        operator_type: NSPredicateOperatorType,
        quantity: &HKQuantity,
    ) -> Id<NSPredicate>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "HealthKit_HKQuery")]
    pub type HKQuery;

    #[cfg(feature = "Foundation_NSPredicate")]
    #[objc2::method(
        sel = "predicateForCategorySamplesWithOperatorType:value:",
        managed = "Other"
    )]
    pub unsafe fn predicateForCategorySamplesWithOperatorType_value(
        operator_type: NSPredicateOperatorType,
        value: NSInteger,
    ) -> Id<NSPredicate>;

    #[cfg(all(
        feature = "Foundation_NSNumber",
        feature = "Foundation_NSPredicate",
        feature = "Foundation_NSSet"
    ))]
    #[objc2::method(sel = "predicateForCategorySamplesEqualToValues:", managed = "Other")]
    pub unsafe fn predicateForCategorySamplesEqualToValues(
        values: &NSSet<NSNumber>,
    ) -> Id<NSPredicate>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "HealthKit_HKQuery")]
    pub type HKQuery;

    #[cfg(feature = "Foundation_NSPredicate")]
    #[objc2::method(
        sel = "predicateForWorkoutsWithWorkoutActivityType:",
        managed = "Other"
    )]
    pub unsafe fn predicateForWorkoutsWithWorkoutActivityType(
        workout_activity_type: HKWorkoutActivityType,
    ) -> Id<NSPredicate>;

    #[cfg(feature = "Foundation_NSPredicate")]
    #[objc2::method(
        sel = "predicateForWorkoutsWithOperatorType:duration:",
        managed = "Other"
    )]
    pub unsafe fn predicateForWorkoutsWithOperatorType_duration(
        operator_type: NSPredicateOperatorType,
        duration: NSTimeInterval,
    ) -> Id<NSPredicate>;

    #[cfg(all(feature = "Foundation_NSPredicate", feature = "HealthKit_HKQuantity"))]
    #[deprecated = "Use predicateForWorkoutActivitiesWithOperatorType:quantityType:sumQuantity: passing the HKQuantityType for HKQuantityTypeIdentifierActiveEnergyBurned"]
    #[objc2::method(
        sel = "predicateForWorkoutsWithOperatorType:totalEnergyBurned:",
        managed = "Other"
    )]
    pub unsafe fn predicateForWorkoutsWithOperatorType_totalEnergyBurned(
        operator_type: NSPredicateOperatorType,
        total_energy_burned: &HKQuantity,
    ) -> Id<NSPredicate>;

    #[cfg(all(feature = "Foundation_NSPredicate", feature = "HealthKit_HKQuantity"))]
    #[deprecated = "Use predicateForWorkoutActivitiesWithOperatorType:quantityType:sumQuantity: passing the HKQuantityType for the desired distance type"]
    #[objc2::method(
        sel = "predicateForWorkoutsWithOperatorType:totalDistance:",
        managed = "Other"
    )]
    pub unsafe fn predicateForWorkoutsWithOperatorType_totalDistance(
        operator_type: NSPredicateOperatorType,
        total_distance: &HKQuantity,
    ) -> Id<NSPredicate>;

    #[cfg(all(feature = "Foundation_NSPredicate", feature = "HealthKit_HKQuantity"))]
    #[deprecated = "Use predicateForWorkoutActivitiesWithOperatorType:quantityType:sumQuantity:"]
    #[objc2::method(
        sel = "predicateForWorkoutsWithOperatorType:totalSwimmingStrokeCount:",
        managed = "Other"
    )]
    pub unsafe fn predicateForWorkoutsWithOperatorType_totalSwimmingStrokeCount(
        operator_type: NSPredicateOperatorType,
        total_swimming_stroke_count: &HKQuantity,
    ) -> Id<NSPredicate>;

    #[cfg(all(feature = "Foundation_NSPredicate", feature = "HealthKit_HKQuantity"))]
    #[deprecated = "Use predicateForWorkoutActivitiesWithOperatorType:quantityType:sumQuantity: passing the HKQuantityType for HKQuantityTypeIdentifierSwimmingStrokeCount"]
    #[objc2::method(
        sel = "predicateForWorkoutsWithOperatorType:totalFlightsClimbed:",
        managed = "Other"
    )]
    pub unsafe fn predicateForWorkoutsWithOperatorType_totalFlightsClimbed(
        operator_type: NSPredicateOperatorType,
        total_flights_climbed: &HKQuantity,
    ) -> Id<NSPredicate>;

    #[cfg(all(
        feature = "Foundation_NSPredicate",
        feature = "HealthKit_HKQuantity",
        feature = "HealthKit_HKQuantityType"
    ))]
    #[objc2::method(
        sel = "predicateForWorkoutsWithOperatorType:quantityType:sumQuantity:",
        managed = "Other"
    )]
    pub unsafe fn predicateForWorkoutsWithOperatorType_quantityType_sumQuantity(
        operator_type: NSPredicateOperatorType,
        quantity_type: &HKQuantityType,
        sum_quantity: &HKQuantity,
    ) -> Id<NSPredicate>;

    #[cfg(all(
        feature = "Foundation_NSPredicate",
        feature = "HealthKit_HKQuantity",
        feature = "HealthKit_HKQuantityType"
    ))]
    #[objc2::method(
        sel = "predicateForWorkoutsWithOperatorType:quantityType:minimumQuantity:",
        managed = "Other"
    )]
    pub unsafe fn predicateForWorkoutsWithOperatorType_quantityType_minimumQuantity(
        operator_type: NSPredicateOperatorType,
        quantity_type: &HKQuantityType,
        minimum_quantity: &HKQuantity,
    ) -> Id<NSPredicate>;

    #[cfg(all(
        feature = "Foundation_NSPredicate",
        feature = "HealthKit_HKQuantity",
        feature = "HealthKit_HKQuantityType"
    ))]
    #[objc2::method(
        sel = "predicateForWorkoutsWithOperatorType:quantityType:maximumQuantity:",
        managed = "Other"
    )]
    pub unsafe fn predicateForWorkoutsWithOperatorType_quantityType_maximumQuantity(
        operator_type: NSPredicateOperatorType,
        quantity_type: &HKQuantityType,
        maximum_quantity: &HKQuantity,
    ) -> Id<NSPredicate>;

    #[cfg(all(
        feature = "Foundation_NSPredicate",
        feature = "HealthKit_HKQuantity",
        feature = "HealthKit_HKQuantityType"
    ))]
    #[objc2::method(
        sel = "predicateForWorkoutsWithOperatorType:quantityType:averageQuantity:",
        managed = "Other"
    )]
    pub unsafe fn predicateForWorkoutsWithOperatorType_quantityType_averageQuantity(
        operator_type: NSPredicateOperatorType,
        quantity_type: &HKQuantityType,
        average_quantity: &HKQuantity,
    ) -> Id<NSPredicate>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "HealthKit_HKQuery")]
    pub type HKQuery;

    #[cfg(feature = "Foundation_NSPredicate")]
    #[objc2::method(
        sel = "predicateForWorkoutActivitiesWithWorkoutActivityType:",
        managed = "Other"
    )]
    pub unsafe fn predicateForWorkoutActivitiesWithWorkoutActivityType(
        workout_activity_type: HKWorkoutActivityType,
    ) -> Id<NSPredicate>;

    #[cfg(feature = "Foundation_NSPredicate")]
    #[objc2::method(
        sel = "predicateForWorkoutActivitiesWithOperatorType:duration:",
        managed = "Other"
    )]
    pub unsafe fn predicateForWorkoutActivitiesWithOperatorType_duration(
        operator_type: NSPredicateOperatorType,
        duration: NSTimeInterval,
    ) -> Id<NSPredicate>;

    #[cfg(all(feature = "Foundation_NSDate", feature = "Foundation_NSPredicate"))]
    #[objc2::method(
        sel = "predicateForWorkoutActivitiesWithStartDate:endDate:options:",
        managed = "Other"
    )]
    pub unsafe fn predicateForWorkoutActivitiesWithStartDate_endDate_options(
        start_date: Option<&NSDate>,
        end_date: Option<&NSDate>,
        options: HKQueryOptions,
    ) -> Id<NSPredicate>;

    #[cfg(all(
        feature = "Foundation_NSPredicate",
        feature = "HealthKit_HKQuantity",
        feature = "HealthKit_HKQuantityType"
    ))]
    #[objc2::method(
        sel = "predicateForWorkoutActivitiesWithOperatorType:quantityType:sumQuantity:",
        managed = "Other"
    )]
    pub unsafe fn predicateForWorkoutActivitiesWithOperatorType_quantityType_sumQuantity(
        operator_type: NSPredicateOperatorType,
        quantity_type: &HKQuantityType,
        sum_quantity: &HKQuantity,
    ) -> Id<NSPredicate>;

    #[cfg(all(
        feature = "Foundation_NSPredicate",
        feature = "HealthKit_HKQuantity",
        feature = "HealthKit_HKQuantityType"
    ))]
    #[objc2::method(
        sel = "predicateForWorkoutActivitiesWithOperatorType:quantityType:minimumQuantity:",
        managed = "Other"
    )]
    pub unsafe fn predicateForWorkoutActivitiesWithOperatorType_quantityType_minimumQuantity(
        operator_type: NSPredicateOperatorType,
        quantity_type: &HKQuantityType,
        minimum_quantity: &HKQuantity,
    ) -> Id<NSPredicate>;

    #[cfg(all(
        feature = "Foundation_NSPredicate",
        feature = "HealthKit_HKQuantity",
        feature = "HealthKit_HKQuantityType"
    ))]
    #[objc2::method(
        sel = "predicateForWorkoutActivitiesWithOperatorType:quantityType:maximumQuantity:",
        managed = "Other"
    )]
    pub unsafe fn predicateForWorkoutActivitiesWithOperatorType_quantityType_maximumQuantity(
        operator_type: NSPredicateOperatorType,
        quantity_type: &HKQuantityType,
        maximum_quantity: &HKQuantity,
    ) -> Id<NSPredicate>;

    #[cfg(all(
        feature = "Foundation_NSPredicate",
        feature = "HealthKit_HKQuantity",
        feature = "HealthKit_HKQuantityType"
    ))]
    #[objc2::method(
        sel = "predicateForWorkoutActivitiesWithOperatorType:quantityType:averageQuantity:",
        managed = "Other"
    )]
    pub unsafe fn predicateForWorkoutActivitiesWithOperatorType_quantityType_averageQuantity(
        operator_type: NSPredicateOperatorType,
        quantity_type: &HKQuantityType,
        average_quantity: &HKQuantity,
    ) -> Id<NSPredicate>;

    #[cfg(feature = "Foundation_NSPredicate")]
    #[objc2::method(sel = "predicateForWorkoutsWithActivityPredicate:", managed = "Other")]
    pub unsafe fn predicateForWorkoutsWithActivityPredicate(
        activity_predicate: &NSPredicate,
    ) -> Id<NSPredicate>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "HealthKit_HKQuery")]
    pub type HKQuery;

    #[cfg(all(
        feature = "Foundation_NSDateComponents",
        feature = "Foundation_NSPredicate"
    ))]
    #[objc2::method(
        sel = "predicateForActivitySummaryWithDateComponents:",
        managed = "Other"
    )]
    pub unsafe fn predicateForActivitySummaryWithDateComponents(
        date_components: &NSDateComponents,
    ) -> Id<NSPredicate>;

    #[cfg(all(
        feature = "Foundation_NSDateComponents",
        feature = "Foundation_NSPredicate"
    ))]
    #[objc2::method(
        sel = "predicateForActivitySummariesBetweenStartDateComponents:endDateComponents:",
        managed = "Other"
    )]
    pub unsafe fn predicateForActivitySummariesBetweenStartDateComponents_endDateComponents(
        start_date_components: &NSDateComponents,
        end_date_components: &NSDateComponents,
    ) -> Id<NSPredicate>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "HealthKit_HKQuery")]
    pub type HKQuery;

    #[cfg(feature = "Foundation_NSPredicate")]
    #[objc2::method(
        sel = "predicateForClinicalRecordsWithFHIRResourceType:",
        managed = "Other"
    )]
    pub unsafe fn predicateForClinicalRecordsWithFHIRResourceType(
        resource_type: &HKFHIRResourceType,
    ) -> Id<NSPredicate>;

    #[cfg(all(
        feature = "Foundation_NSPredicate",
        feature = "Foundation_NSString",
        feature = "HealthKit_HKSource"
    ))]
    #[objc2::method(
        sel = "predicateForClinicalRecordsFromSource:FHIRResourceType:identifier:",
        managed = "Other"
    )]
    pub unsafe fn predicateForClinicalRecordsFromSource_FHIRResourceType_identifier(
        source: &HKSource,
        resource_type: &HKFHIRResourceType,
        identifier: &NSString,
    ) -> Id<NSPredicate>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "HealthKit_HKQuery")]
    pub type HKQuery;

    #[cfg(feature = "Foundation_NSPredicate")]
    #[objc2::method(
        sel = "predicateForElectrocardiogramsWithClassification:",
        managed = "Other"
    )]
    pub unsafe fn predicateForElectrocardiogramsWithClassification(
        classification: HKElectrocardiogramClassification,
    ) -> Id<NSPredicate>;

    #[cfg(feature = "Foundation_NSPredicate")]
    #[objc2::method(
        sel = "predicateForElectrocardiogramsWithSymptomsStatus:",
        managed = "Other"
    )]
    pub unsafe fn predicateForElectrocardiogramsWithSymptomsStatus(
        symptoms_status: HKElectrocardiogramSymptomsStatus,
    ) -> Id<NSPredicate>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "HealthKit_HKQuery")]
    pub type HKQuery;

    #[cfg(all(
        feature = "Foundation_NSDateInterval",
        feature = "Foundation_NSPredicate"
    ))]
    #[objc2::method(
        sel = "predicateForVerifiableClinicalRecordsWithRelevantDateWithinDateInterval:",
        managed = "Other"
    )]
    pub unsafe fn predicateForVerifiableClinicalRecordsWithRelevantDateWithinDateInterval(
        date_interval: &NSDateInterval,
    ) -> Id<NSPredicate>;
}
