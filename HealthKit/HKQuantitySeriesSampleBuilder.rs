//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreLocation::*;
use crate::Foundation::*;
use crate::HealthKit::*;
use crate::UniformTypeIdentifiers::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "HealthKit_HKQuantitySeriesSampleBuilder")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type HKQuantitySeriesSampleBuilder;
}

#[cfg(feature = "HealthKit_HKQuantitySeriesSampleBuilder")]
unsafe impl NSObjectProtocol for HKQuantitySeriesSampleBuilder {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "HealthKit_HKQuantitySeriesSampleBuilder")]
    pub type HKQuantitySeriesSampleBuilder;

    #[cfg(all(
        feature = "Foundation_NSDate",
        feature = "HealthKit_HKDevice",
        feature = "HealthKit_HKHealthStore",
        feature = "HealthKit_HKQuantityType"
    ))]
    #[objc2::method(
        sel = "initWithHealthStore:quantityType:startDate:device:",
        managed = "Init"
    )]
    pub unsafe fn initWithHealthStore_quantityType_startDate_device(
        this: Option<Allocated<Self>>,
        health_store: &HKHealthStore,
        quantity_type: &HKQuantityType,
        start_date: &NSDate,
        device: Option<&HKDevice>,
    ) -> Id<Self>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(feature = "HealthKit_HKQuantityType")]
    #[objc2::method(sel = "quantityType", managed = "Other")]
    pub unsafe fn quantityType(&self) -> Id<HKQuantityType>;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "startDate", managed = "Other")]
    pub unsafe fn startDate(&self) -> Id<NSDate>;

    #[cfg(feature = "HealthKit_HKDevice")]
    #[objc2::method(sel = "device", managed = "Other")]
    pub unsafe fn device(&self) -> Option<Id<HKDevice>>;

    #[cfg(all(
        feature = "Foundation_NSDateInterval",
        feature = "Foundation_NSError",
        feature = "HealthKit_HKQuantity"
    ))]
    #[objc2::method(sel = "insertQuantity:dateInterval:error:", throws)]
    pub unsafe fn insertQuantity_dateInterval_error(
        &self,
        quantity: &HKQuantity,
        date_interval: &NSDateInterval,
    ) -> Result<(), Id<NSError>>;

    #[cfg(all(
        feature = "Foundation_NSDate",
        feature = "Foundation_NSError",
        feature = "HealthKit_HKQuantity"
    ))]
    #[objc2::method(sel = "insertQuantity:date:error:", throws)]
    pub unsafe fn insertQuantity_date_error(
        &self,
        quantity: &HKQuantity,
        date: &NSDate,
    ) -> Result<(), Id<NSError>>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSDate",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSError",
        feature = "Foundation_NSString",
        feature = "HealthKit_HKQuantitySample"
    ))]
    #[objc2::method(sel = "finishSeriesWithMetadata:endDate:completion:")]
    pub unsafe fn finishSeriesWithMetadata_endDate_completion(
        &self,
        metadata: Option<&NSDictionary<NSString, Object>>,
        end_date: Option<&NSDate>,
        completion: &Block<(*mut NSArray<HKQuantitySample>, *mut NSError), ()>,
    );

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSError",
        feature = "Foundation_NSString",
        feature = "HealthKit_HKQuantitySample"
    ))]
    #[objc2::method(sel = "finishSeriesWithMetadata:completion:")]
    pub unsafe fn finishSeriesWithMetadata_completion(
        &self,
        metadata: Option<&NSDictionary<NSString, Object>>,
        completion: &Block<(*mut NSArray<HKQuantitySample>, *mut NSError), ()>,
    );

    #[objc2::method(sel = "discard")]
    pub unsafe fn discard(&self);
}
