//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreLocation::*;
use crate::Foundation::*;
use crate::HealthKit::*;
use crate::UniformTypeIdentifiers::*;

#[ns_enum]
#[underlying(NSUInteger)]
pub enum HKWorkoutActivityType {
    HKWorkoutActivityTypeAmericanFootball = 1,
    HKWorkoutActivityTypeArchery = 2,
    HKWorkoutActivityTypeAustralianFootball = 3,
    HKWorkoutActivityTypeBadminton = 4,
    HKWorkoutActivityTypeBaseball = 5,
    HKWorkoutActivityTypeBasketball = 6,
    HKWorkoutActivityTypeBowling = 7,
    HKWorkoutActivityTypeBoxing = 8,
    HKWorkoutActivityTypeClimbing = 9,
    HKWorkoutActivityTypeCricket = 10,
    HKWorkoutActivityTypeCrossTraining = 11,
    HKWorkoutActivityTypeCurling = 12,
    HKWorkoutActivityTypeCycling = 13,
    #[deprecated = "Use HKWorkoutActivityTypeSocialDance or HKWorkoutActivityTypeCardioDance"]
    HKWorkoutActivityTypeDance = 14,
    #[deprecated = "Use HKWorkoutActivityTypeSocialDance, HKWorkoutActivityTypeCardioDance, HKWorkoutActivityTypeBarre or HKWorkoutActivityTypePilates"]
    HKWorkoutActivityTypeDanceInspiredTraining = 15,
    HKWorkoutActivityTypeElliptical = 16,
    HKWorkoutActivityTypeEquestrianSports = 17,
    HKWorkoutActivityTypeFencing = 18,
    HKWorkoutActivityTypeFishing = 19,
    HKWorkoutActivityTypeFunctionalStrengthTraining = 20,
    HKWorkoutActivityTypeGolf = 21,
    HKWorkoutActivityTypeGymnastics = 22,
    HKWorkoutActivityTypeHandball = 23,
    HKWorkoutActivityTypeHiking = 24,
    HKWorkoutActivityTypeHockey = 25,
    HKWorkoutActivityTypeHunting = 26,
    HKWorkoutActivityTypeLacrosse = 27,
    HKWorkoutActivityTypeMartialArts = 28,
    HKWorkoutActivityTypeMindAndBody = 29,
    #[deprecated = "Use HKWorkoutActivityTypeMixedCardio or HKWorkoutActivityTypeHighIntensityIntervalTraining"]
    HKWorkoutActivityTypeMixedMetabolicCardioTraining = 30,
    HKWorkoutActivityTypePaddleSports = 31,
    HKWorkoutActivityTypePlay = 32,
    HKWorkoutActivityTypePreparationAndRecovery = 33,
    HKWorkoutActivityTypeRacquetball = 34,
    HKWorkoutActivityTypeRowing = 35,
    HKWorkoutActivityTypeRugby = 36,
    HKWorkoutActivityTypeRunning = 37,
    HKWorkoutActivityTypeSailing = 38,
    HKWorkoutActivityTypeSkatingSports = 39,
    HKWorkoutActivityTypeSnowSports = 40,
    HKWorkoutActivityTypeSoccer = 41,
    HKWorkoutActivityTypeSoftball = 42,
    HKWorkoutActivityTypeSquash = 43,
    HKWorkoutActivityTypeStairClimbing = 44,
    HKWorkoutActivityTypeSurfingSports = 45,
    HKWorkoutActivityTypeSwimming = 46,
    HKWorkoutActivityTypeTableTennis = 47,
    HKWorkoutActivityTypeTennis = 48,
    HKWorkoutActivityTypeTrackAndField = 49,
    HKWorkoutActivityTypeTraditionalStrengthTraining = 50,
    HKWorkoutActivityTypeVolleyball = 51,
    HKWorkoutActivityTypeWalking = 52,
    HKWorkoutActivityTypeWaterFitness = 53,
    HKWorkoutActivityTypeWaterPolo = 54,
    HKWorkoutActivityTypeWaterSports = 55,
    HKWorkoutActivityTypeWrestling = 56,
    HKWorkoutActivityTypeYoga = 57,
    HKWorkoutActivityTypeBarre = 58,
    HKWorkoutActivityTypeCoreTraining = 59,
    HKWorkoutActivityTypeCrossCountrySkiing = 60,
    HKWorkoutActivityTypeDownhillSkiing = 61,
    HKWorkoutActivityTypeFlexibility = 62,
    HKWorkoutActivityTypeHighIntensityIntervalTraining = 63,
    HKWorkoutActivityTypeJumpRope = 64,
    HKWorkoutActivityTypeKickboxing = 65,
    HKWorkoutActivityTypePilates = 66,
    HKWorkoutActivityTypeSnowboarding = 67,
    HKWorkoutActivityTypeStairs = 68,
    HKWorkoutActivityTypeStepTraining = 69,
    HKWorkoutActivityTypeWheelchairWalkPace = 70,
    HKWorkoutActivityTypeWheelchairRunPace = 71,
    HKWorkoutActivityTypeTaiChi = 72,
    HKWorkoutActivityTypeMixedCardio = 73,
    HKWorkoutActivityTypeHandCycling = 74,
    HKWorkoutActivityTypeDiscSports = 75,
    HKWorkoutActivityTypeFitnessGaming = 76,
    HKWorkoutActivityTypeCardioDance = 77,
    HKWorkoutActivityTypeSocialDance = 78,
    HKWorkoutActivityTypePickleball = 79,
    HKWorkoutActivityTypeCooldown = 80,
    HKWorkoutActivityTypeSwimBikeRun = 82,
    HKWorkoutActivityTypeTransition = 83,
    HKWorkoutActivityTypeOther = 3000,
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum HKWorkoutEventType {
    HKWorkoutEventTypePause = 1,
    HKWorkoutEventTypeResume = 2,
    HKWorkoutEventTypeLap = 3,
    HKWorkoutEventTypeMarker = 4,
    HKWorkoutEventTypeMotionPaused = 5,
    HKWorkoutEventTypeMotionResumed = 6,
    HKWorkoutEventTypeSegment = 7,
    HKWorkoutEventTypePauseOrResumeRequest = 8,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "HealthKit_HKWorkoutEvent")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type HKWorkoutEvent;
}

#[cfg(feature = "HealthKit_HKWorkoutEvent")]
unsafe impl NSCoding for HKWorkoutEvent {}

#[cfg(feature = "HealthKit_HKWorkoutEvent")]
unsafe impl NSObjectProtocol for HKWorkoutEvent {}

#[cfg(feature = "HealthKit_HKWorkoutEvent")]
unsafe impl NSSecureCoding for HKWorkoutEvent {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "HealthKit_HKWorkoutEvent")]
    pub type HKWorkoutEvent;

    #[objc2::method(sel = "type")]
    pub unsafe fn r#type(&self) -> HKWorkoutEventType;

    #[cfg(feature = "Foundation_NSDate")]
    #[deprecated]
    #[objc2::method(sel = "date", managed = "Other")]
    pub unsafe fn date(&self) -> Id<NSDate>;

    #[cfg(feature = "Foundation_NSDateInterval")]
    #[objc2::method(sel = "dateInterval", managed = "Other")]
    pub unsafe fn dateInterval(&self) -> Id<NSDateInterval>;

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "metadata", managed = "Other")]
    pub unsafe fn metadata(&self) -> Option<Id<NSDictionary<NSString, Object>>>;

    #[cfg(feature = "Foundation_NSDate")]
    #[deprecated]
    #[objc2::method(sel = "workoutEventWithType:date:", managed = "Other")]
    pub unsafe fn workoutEventWithType_date(r#type: HKWorkoutEventType, date: &NSDate) -> Id<Self>;

    #[cfg(all(
        feature = "Foundation_NSDate",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSString"
    ))]
    #[deprecated]
    #[objc2::method(sel = "workoutEventWithType:date:metadata:", managed = "Other")]
    pub unsafe fn workoutEventWithType_date_metadata(
        r#type: HKWorkoutEventType,
        date: &NSDate,
        metadata: &NSDictionary<NSString, Object>,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "Foundation_NSDateInterval",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "workoutEventWithType:dateInterval:metadata:", managed = "Other")]
    pub unsafe fn workoutEventWithType_dateInterval_metadata(
        r#type: HKWorkoutEventType,
        date_interval: &NSDateInterval,
        metadata: Option<&NSDictionary<NSString, Object>>,
    ) -> Id<Self>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;
}

#[objc2::interface(
    unsafe super = HKSample,
    unsafe inherits = [
        HKObject,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "HealthKit_HKWorkout")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type HKWorkout;
}

#[cfg(feature = "HealthKit_HKWorkout")]
unsafe impl NSCoding for HKWorkout {}

#[cfg(feature = "HealthKit_HKWorkout")]
unsafe impl NSObjectProtocol for HKWorkout {}

#[cfg(feature = "HealthKit_HKWorkout")]
unsafe impl NSSecureCoding for HKWorkout {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "HealthKit_HKWorkout")]
    pub type HKWorkout;

    #[objc2::method(sel = "workoutActivityType")]
    pub unsafe fn workoutActivityType(&self) -> HKWorkoutActivityType;

    #[cfg(all(feature = "Foundation_NSArray", feature = "HealthKit_HKWorkoutEvent"))]
    #[objc2::method(sel = "workoutEvents", managed = "Other")]
    pub unsafe fn workoutEvents(&self) -> Option<Id<NSArray<HKWorkoutEvent>>>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "HealthKit_HKWorkoutActivity"
    ))]
    #[objc2::method(sel = "workoutActivities", managed = "Other")]
    pub unsafe fn workoutActivities(&self) -> Id<NSArray<HKWorkoutActivity>>;

    #[objc2::method(sel = "duration")]
    pub unsafe fn duration(&self) -> NSTimeInterval;

    #[cfg(feature = "HealthKit_HKQuantity")]
    #[deprecated = "Use statisticsForType: passing the HKQuantityType for HKQuantityTypeIdentifierActiveEnergyBurned"]
    #[objc2::method(sel = "totalEnergyBurned", managed = "Other")]
    pub unsafe fn totalEnergyBurned(&self) -> Option<Id<HKQuantity>>;

    #[cfg(feature = "HealthKit_HKQuantity")]
    #[deprecated = "Use statisticsForType: passing the HKQuantityType for the desired distance type"]
    #[objc2::method(sel = "totalDistance", managed = "Other")]
    pub unsafe fn totalDistance(&self) -> Option<Id<HKQuantity>>;

    #[cfg(feature = "HealthKit_HKQuantity")]
    #[deprecated = "Use statisticsForType: passing the HKQuantityType for HKQuantityTypeIdentifierSwimmingStrokeCount"]
    #[objc2::method(sel = "totalSwimmingStrokeCount", managed = "Other")]
    pub unsafe fn totalSwimmingStrokeCount(&self) -> Option<Id<HKQuantity>>;

    #[cfg(feature = "HealthKit_HKQuantity")]
    #[deprecated = "Use statisticsForType: passing the HKQuantityType for HKQuantityTypeIdentifierFlightClimbed"]
    #[objc2::method(sel = "totalFlightsClimbed", managed = "Other")]
    pub unsafe fn totalFlightsClimbed(&self) -> Option<Id<HKQuantity>>;

    #[cfg(all(
        feature = "Foundation_NSDictionary",
        feature = "HealthKit_HKQuantityType",
        feature = "HealthKit_HKStatistics"
    ))]
    #[objc2::method(sel = "allStatistics", managed = "Other")]
    pub unsafe fn allStatistics(&self) -> Id<NSDictionary<HKQuantityType, HKStatistics>>;

    #[cfg(all(
        feature = "HealthKit_HKQuantityType",
        feature = "HealthKit_HKStatistics"
    ))]
    #[objc2::method(sel = "statisticsForType:", managed = "Other")]
    pub unsafe fn statisticsForType(
        &self,
        quantity_type: &HKQuantityType,
    ) -> Option<Id<HKStatistics>>;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "workoutWithActivityType:startDate:endDate:", managed = "Other")]
    pub unsafe fn workoutWithActivityType_startDate_endDate(
        workout_activity_type: HKWorkoutActivityType,
        start_date: &NSDate,
        end_date: &NSDate,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSDate",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSString",
        feature = "HealthKit_HKQuantity",
        feature = "HealthKit_HKWorkoutEvent"
    ))]
    #[objc2::method(
        sel = "workoutWithActivityType:startDate:endDate:workoutEvents:totalEnergyBurned:totalDistance:metadata:",
        managed = "Other"
    )]
    pub unsafe fn workoutWithActivityType_startDate_endDate_workoutEvents_totalEnergyBurned_totalDistance_metadata(
        workout_activity_type: HKWorkoutActivityType,
        start_date: &NSDate,
        end_date: &NSDate,
        workout_events: Option<&NSArray<HKWorkoutEvent>>,
        total_energy_burned: Option<&HKQuantity>,
        total_distance: Option<&HKQuantity>,
        metadata: Option<&NSDictionary<NSString, Object>>,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSDate",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSString",
        feature = "HealthKit_HKDevice",
        feature = "HealthKit_HKQuantity",
        feature = "HealthKit_HKWorkoutEvent"
    ))]
    #[objc2::method(
        sel = "workoutWithActivityType:startDate:endDate:workoutEvents:totalEnergyBurned:totalDistance:device:metadata:",
        managed = "Other"
    )]
    pub unsafe fn workoutWithActivityType_startDate_endDate_workoutEvents_totalEnergyBurned_totalDistance_device_metadata(
        workout_activity_type: HKWorkoutActivityType,
        start_date: &NSDate,
        end_date: &NSDate,
        workout_events: Option<&NSArray<HKWorkoutEvent>>,
        total_energy_burned: Option<&HKQuantity>,
        total_distance: Option<&HKQuantity>,
        device: Option<&HKDevice>,
        metadata: Option<&NSDictionary<NSString, Object>>,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "Foundation_NSDate",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSString",
        feature = "HealthKit_HKQuantity"
    ))]
    #[objc2::method(
        sel = "workoutWithActivityType:startDate:endDate:duration:totalEnergyBurned:totalDistance:metadata:",
        managed = "Other"
    )]
    pub unsafe fn workoutWithActivityType_startDate_endDate_duration_totalEnergyBurned_totalDistance_metadata(
        workout_activity_type: HKWorkoutActivityType,
        start_date: &NSDate,
        end_date: &NSDate,
        duration: NSTimeInterval,
        total_energy_burned: Option<&HKQuantity>,
        total_distance: Option<&HKQuantity>,
        metadata: Option<&NSDictionary<NSString, Object>>,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "Foundation_NSDate",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSString",
        feature = "HealthKit_HKDevice",
        feature = "HealthKit_HKQuantity"
    ))]
    #[objc2::method(
        sel = "workoutWithActivityType:startDate:endDate:duration:totalEnergyBurned:totalDistance:device:metadata:",
        managed = "Other"
    )]
    pub unsafe fn workoutWithActivityType_startDate_endDate_duration_totalEnergyBurned_totalDistance_device_metadata(
        workout_activity_type: HKWorkoutActivityType,
        start_date: &NSDate,
        end_date: &NSDate,
        duration: NSTimeInterval,
        total_energy_burned: Option<&HKQuantity>,
        total_distance: Option<&HKQuantity>,
        device: Option<&HKDevice>,
        metadata: Option<&NSDictionary<NSString, Object>>,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSDate",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSString",
        feature = "HealthKit_HKDevice",
        feature = "HealthKit_HKQuantity",
        feature = "HealthKit_HKWorkoutEvent"
    ))]
    #[objc2::method(
        sel = "workoutWithActivityType:startDate:endDate:workoutEvents:totalEnergyBurned:totalDistance:totalSwimmingStrokeCount:device:metadata:",
        managed = "Other"
    )]
    pub unsafe fn workoutWithActivityType_startDate_endDate_workoutEvents_totalEnergyBurned_totalDistance_totalSwimmingStrokeCount_device_metadata(
        workout_activity_type: HKWorkoutActivityType,
        start_date: &NSDate,
        end_date: &NSDate,
        workout_events: Option<&NSArray<HKWorkoutEvent>>,
        total_energy_burned: Option<&HKQuantity>,
        total_distance: Option<&HKQuantity>,
        total_swimming_stroke_count: Option<&HKQuantity>,
        device: Option<&HKDevice>,
        metadata: Option<&NSDictionary<NSString, Object>>,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSDate",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSString",
        feature = "HealthKit_HKDevice",
        feature = "HealthKit_HKQuantity",
        feature = "HealthKit_HKWorkoutEvent"
    ))]
    #[objc2::method(
        sel = "workoutWithActivityType:startDate:endDate:workoutEvents:totalEnergyBurned:totalDistance:totalFlightsClimbed:device:metadata:",
        managed = "Other"
    )]
    pub unsafe fn workoutWithActivityType_startDate_endDate_workoutEvents_totalEnergyBurned_totalDistance_totalFlightsClimbed_device_metadata(
        workout_activity_type: HKWorkoutActivityType,
        start_date: &NSDate,
        end_date: &NSDate,
        workout_events: Option<&NSArray<HKWorkoutEvent>>,
        total_energy_burned: Option<&HKQuantity>,
        total_distance: Option<&HKQuantity>,
        total_flights_climbed: Option<&HKQuantity>,
        device: Option<&HKDevice>,
        metadata: Option<&NSDictionary<NSString, Object>>,
    ) -> Id<Self>;
}

extern_static!(HKPredicateKeyPathWorkoutDuration: &'static NSString);

extern_static!(HKPredicateKeyPathWorkoutTotalDistance: &'static NSString);

extern_static!(HKPredicateKeyPathWorkoutTotalEnergyBurned: &'static NSString);

extern_static!(HKPredicateKeyPathWorkoutType: &'static NSString);

extern_static!(HKPredicateKeyPathWorkoutTotalSwimmingStrokeCount: &'static NSString);

extern_static!(HKPredicateKeyPathWorkoutTotalFlightsClimbed: &'static NSString);

extern_static!(HKPredicateKeyPathWorkoutSumQuantity: &'static NSString);

extern_static!(HKPredicateKeyPathWorkoutMinimumQuantity: &'static NSString);

extern_static!(HKPredicateKeyPathWorkoutMaximumQuantity: &'static NSString);

extern_static!(HKPredicateKeyPathWorkoutAverageQuantity: &'static NSString);

extern_static!(HKPredicateKeyPathWorkoutActivity: &'static NSString);

extern_static!(HKWorkoutSortIdentifierDuration: &'static NSString);

extern_static!(HKWorkoutSortIdentifierTotalDistance: &'static NSString);

extern_static!(HKWorkoutSortIdentifierTotalEnergyBurned: &'static NSString);

extern_static!(HKWorkoutSortIdentifierTotalSwimmingStrokeCount: &'static NSString);

extern_static!(HKWorkoutSortIdentifierTotalFlightsClimbed: &'static NSString);
