//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CallKit::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum CXCallEndedReason {
    CXCallEndedReasonFailed = 1,
    CXCallEndedReasonRemoteEnded = 2,
    CXCallEndedReasonUnanswered = 3,
    CXCallEndedReasonAnsweredElsewhere = 4,
    CXCallEndedReasonDeclinedElsewhere = 5,
}

#[objc2::protocol]
pub unsafe trait CXProviderDelegate: NSObjectProtocol {
    #[cfg(feature = "CallKit_CXProvider")]
    #[objc2::method(sel = "providerDidReset:")]
    unsafe fn providerDidReset(&self, provider: &CXProvider);

    #[cfg(feature = "CallKit_CXProvider")]
    #[objc2::method(optional, sel = "providerDidBegin:")]
    unsafe fn providerDidBegin(&self, provider: &CXProvider);

    #[cfg(all(feature = "CallKit_CXProvider", feature = "CallKit_CXTransaction"))]
    #[objc2::method(optional, sel = "provider:executeTransaction:")]
    unsafe fn provider_executeTransaction(
        &self,
        provider: &CXProvider,
        transaction: &CXTransaction,
    ) -> bool;

    #[cfg(all(feature = "CallKit_CXProvider", feature = "CallKit_CXStartCallAction"))]
    #[objc2::method(optional, sel = "provider:performStartCallAction:")]
    unsafe fn provider_performStartCallAction(
        &self,
        provider: &CXProvider,
        action: &CXStartCallAction,
    );

    #[cfg(all(feature = "CallKit_CXAnswerCallAction", feature = "CallKit_CXProvider"))]
    #[objc2::method(optional, sel = "provider:performAnswerCallAction:")]
    unsafe fn provider_performAnswerCallAction(
        &self,
        provider: &CXProvider,
        action: &CXAnswerCallAction,
    );

    #[cfg(all(feature = "CallKit_CXEndCallAction", feature = "CallKit_CXProvider"))]
    #[objc2::method(optional, sel = "provider:performEndCallAction:")]
    unsafe fn provider_performEndCallAction(&self, provider: &CXProvider, action: &CXEndCallAction);

    #[cfg(all(
        feature = "CallKit_CXProvider",
        feature = "CallKit_CXSetHeldCallAction"
    ))]
    #[objc2::method(optional, sel = "provider:performSetHeldCallAction:")]
    unsafe fn provider_performSetHeldCallAction(
        &self,
        provider: &CXProvider,
        action: &CXSetHeldCallAction,
    );

    #[cfg(all(
        feature = "CallKit_CXProvider",
        feature = "CallKit_CXSetMutedCallAction"
    ))]
    #[objc2::method(optional, sel = "provider:performSetMutedCallAction:")]
    unsafe fn provider_performSetMutedCallAction(
        &self,
        provider: &CXProvider,
        action: &CXSetMutedCallAction,
    );

    #[cfg(all(
        feature = "CallKit_CXProvider",
        feature = "CallKit_CXSetGroupCallAction"
    ))]
    #[objc2::method(optional, sel = "provider:performSetGroupCallAction:")]
    unsafe fn provider_performSetGroupCallAction(
        &self,
        provider: &CXProvider,
        action: &CXSetGroupCallAction,
    );

    #[cfg(all(
        feature = "CallKit_CXPlayDTMFCallAction",
        feature = "CallKit_CXProvider"
    ))]
    #[objc2::method(optional, sel = "provider:performPlayDTMFCallAction:")]
    unsafe fn provider_performPlayDTMFCallAction(
        &self,
        provider: &CXProvider,
        action: &CXPlayDTMFCallAction,
    );

    #[cfg(all(feature = "CallKit_CXAction", feature = "CallKit_CXProvider"))]
    #[objc2::method(optional, sel = "provider:timedOutPerformingAction:")]
    unsafe fn provider_timedOutPerformingAction(&self, provider: &CXProvider, action: &CXAction);

    #[cfg(all(feature = "AVFAudio_AVAudioSession", feature = "CallKit_CXProvider"))]
    #[objc2::method(optional, sel = "provider:didActivateAudioSession:")]
    unsafe fn provider_didActivateAudioSession(
        &self,
        provider: &CXProvider,
        audio_session: &AVAudioSession,
    );

    #[cfg(all(feature = "AVFAudio_AVAudioSession", feature = "CallKit_CXProvider"))]
    #[objc2::method(optional, sel = "provider:didDeactivateAudioSession:")]
    unsafe fn provider_didDeactivateAudioSession(
        &self,
        provider: &CXProvider,
        audio_session: &AVAudioSession,
    );
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "CallKit_CXProvider")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type CXProvider;
}

#[cfg(feature = "CallKit_CXProvider")]
unsafe impl NSObjectProtocol for CXProvider {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "CallKit_CXProvider")]
    pub type CXProvider;

    #[cfg(feature = "CallKit_CXProviderConfiguration")]
    #[objc2::method(sel = "initWithConfiguration:", managed = "Init")]
    pub unsafe fn initWithConfiguration(
        this: Option<Allocated<Self>>,
        configuration: &CXProviderConfiguration,
    ) -> Id<Self>;

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(all(
        feature = "CallKit_CXCallUpdate",
        feature = "Foundation_NSError",
        feature = "Foundation_NSUUID"
    ))]
    #[objc2::method(sel = "reportNewIncomingCallWithUUID:update:completion:")]
    pub unsafe fn reportNewIncomingCallWithUUID_update_completion(
        &self,
        uuid: &NSUUID,
        update: &CXCallUpdate,
        completion: &Block<(*mut NSError,), ()>,
    );

    #[cfg(all(feature = "CallKit_CXCallUpdate", feature = "Foundation_NSUUID"))]
    #[objc2::method(sel = "reportCallWithUUID:updated:")]
    pub unsafe fn reportCallWithUUID_updated(&self, uuid: &NSUUID, update: &CXCallUpdate);

    #[cfg(all(feature = "Foundation_NSDate", feature = "Foundation_NSUUID"))]
    #[objc2::method(sel = "reportCallWithUUID:endedAtDate:reason:")]
    pub unsafe fn reportCallWithUUID_endedAtDate_reason(
        &self,
        uuid: &NSUUID,
        date_ended: Option<&NSDate>,
        ended_reason: CXCallEndedReason,
    );

    #[cfg(all(feature = "Foundation_NSDate", feature = "Foundation_NSUUID"))]
    #[objc2::method(sel = "reportOutgoingCallWithUUID:startedConnectingAtDate:")]
    pub unsafe fn reportOutgoingCallWithUUID_startedConnectingAtDate(
        &self,
        uuid: &NSUUID,
        date_started_connecting: Option<&NSDate>,
    );

    #[cfg(all(feature = "Foundation_NSDate", feature = "Foundation_NSUUID"))]
    #[objc2::method(sel = "reportOutgoingCallWithUUID:connectedAtDate:")]
    pub unsafe fn reportOutgoingCallWithUUID_connectedAtDate(
        &self,
        uuid: &NSUUID,
        date_connected: Option<&NSDate>,
    );

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "reportNewIncomingVoIPPushPayload:completion:")]
    pub unsafe fn reportNewIncomingVoIPPushPayload_completion(
        dictionary_payload: &NSDictionary,
        completion: Option<&Block<(*mut NSError,), ()>>,
    );

    #[cfg(feature = "CallKit_CXProviderConfiguration")]
    #[objc2::method(sel = "configuration", managed = "Other")]
    pub unsafe fn configuration(&self) -> Id<CXProviderConfiguration>;

    #[cfg(feature = "CallKit_CXProviderConfiguration")]
    #[objc2::method(sel = "setConfiguration:")]
    pub unsafe fn setConfiguration(&self, configuration: &CXProviderConfiguration);

    #[objc2::method(sel = "invalidate")]
    pub unsafe fn invalidate(&self);

    #[cfg(all(feature = "CallKit_CXTransaction", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "pendingTransactions", managed = "Other")]
    pub unsafe fn pendingTransactions(&self) -> Id<NSArray<CXTransaction>>;

    #[cfg(all(
        feature = "CallKit_CXCallAction",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSUUID"
    ))]
    #[objc2::method(sel = "pendingCallActionsOfClass:withCallUUID:", managed = "Other")]
    pub unsafe fn pendingCallActionsOfClass_withCallUUID(
        &self,
        call_action_class: &Class,
        call_uuid: &NSUUID,
    ) -> Id<NSArray<CXCallAction>>;
}
