//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CallKit::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "CallKit_CXCallUpdate")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type CXCallUpdate;
}

#[cfg(feature = "CallKit_CXCallUpdate")]
unsafe impl NSObjectProtocol for CXCallUpdate {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "CallKit_CXCallUpdate")]
    pub type CXCallUpdate;

    #[cfg(feature = "CallKit_CXHandle")]
    #[objc2::method(sel = "remoteHandle", managed = "Other")]
    pub unsafe fn remoteHandle(&self) -> Option<Id<CXHandle>>;

    #[cfg(feature = "CallKit_CXHandle")]
    #[objc2::method(sel = "setRemoteHandle:")]
    pub unsafe fn setRemoteHandle(&self, remote_handle: Option<&CXHandle>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "localizedCallerName", managed = "Other")]
    pub unsafe fn localizedCallerName(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setLocalizedCallerName:")]
    pub unsafe fn setLocalizedCallerName(&self, localized_caller_name: Option<&NSString>);

    #[objc2::method(sel = "supportsHolding")]
    pub unsafe fn supportsHolding(&self) -> bool;

    #[objc2::method(sel = "setSupportsHolding:")]
    pub unsafe fn setSupportsHolding(&self, supports_holding: bool);

    #[objc2::method(sel = "supportsGrouping")]
    pub unsafe fn supportsGrouping(&self) -> bool;

    #[objc2::method(sel = "setSupportsGrouping:")]
    pub unsafe fn setSupportsGrouping(&self, supports_grouping: bool);

    #[objc2::method(sel = "supportsUngrouping")]
    pub unsafe fn supportsUngrouping(&self) -> bool;

    #[objc2::method(sel = "setSupportsUngrouping:")]
    pub unsafe fn setSupportsUngrouping(&self, supports_ungrouping: bool);

    #[objc2::method(sel = "supportsDTMF")]
    pub unsafe fn supportsDTMF(&self) -> bool;

    #[objc2::method(sel = "setSupportsDTMF:")]
    pub unsafe fn setSupportsDTMF(&self, supports_dtmf: bool);

    #[objc2::method(sel = "hasVideo")]
    pub unsafe fn hasVideo(&self) -> bool;

    #[objc2::method(sel = "setHasVideo:")]
    pub unsafe fn setHasVideo(&self, has_video: bool);
}
