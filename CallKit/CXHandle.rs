//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CallKit::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum CXHandleType {
    CXHandleTypeGeneric = 1,
    CXHandleTypePhoneNumber = 2,
    CXHandleTypeEmailAddress = 3,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "CallKit_CXHandle")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type CXHandle;
}

#[cfg(feature = "CallKit_CXHandle")]
unsafe impl NSCoding for CXHandle {}

#[cfg(feature = "CallKit_CXHandle")]
unsafe impl NSObjectProtocol for CXHandle {}

#[cfg(feature = "CallKit_CXHandle")]
unsafe impl NSSecureCoding for CXHandle {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "CallKit_CXHandle")]
    pub type CXHandle;

    #[objc2::method(sel = "type")]
    pub unsafe fn r#type(&self) -> CXHandleType;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "value", managed = "Other")]
    pub unsafe fn value(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithType:value:", managed = "Init")]
    pub unsafe fn initWithType_value(
        this: Option<Allocated<Self>>,
        r#type: CXHandleType,
        value: &NSString,
    ) -> Id<Self>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "isEqualToHandle:")]
    pub unsafe fn isEqualToHandle(&self, handle: &CXHandle) -> bool;
}
