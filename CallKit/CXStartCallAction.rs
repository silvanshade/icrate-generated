//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CallKit::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = CXCallAction,
    unsafe inherits = [
        CXAction,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "CallKit_CXStartCallAction")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type CXStartCallAction;
}

#[cfg(feature = "CallKit_CXStartCallAction")]
unsafe impl NSCoding for CXStartCallAction {}

#[cfg(feature = "CallKit_CXStartCallAction")]
unsafe impl NSObjectProtocol for CXStartCallAction {}

#[cfg(feature = "CallKit_CXStartCallAction")]
unsafe impl NSSecureCoding for CXStartCallAction {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "CallKit_CXStartCallAction")]
    pub type CXStartCallAction;

    #[cfg(all(feature = "CallKit_CXHandle", feature = "Foundation_NSUUID"))]
    #[objc2::method(sel = "initWithCallUUID:handle:", managed = "Init")]
    pub unsafe fn initWithCallUUID_handle(
        this: Option<Allocated<Self>>,
        call_uuid: &NSUUID,
        handle: &CXHandle,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(
        this: Option<Allocated<Self>>,
        a_decoder: &NSCoder,
    ) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSUUID")]
    #[objc2::method(sel = "initWithCallUUID:", managed = "Init")]
    pub unsafe fn initWithCallUUID(this: Option<Allocated<Self>>, call_uuid: &NSUUID) -> Id<Self>;

    #[cfg(feature = "CallKit_CXHandle")]
    #[objc2::method(sel = "handle", managed = "Other")]
    pub unsafe fn handle(&self) -> Id<CXHandle>;

    #[cfg(feature = "CallKit_CXHandle")]
    #[objc2::method(sel = "setHandle:")]
    pub unsafe fn setHandle(&self, handle: &CXHandle);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "contactIdentifier", managed = "Other")]
    pub unsafe fn contactIdentifier(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setContactIdentifier:")]
    pub unsafe fn setContactIdentifier(&self, contact_identifier: Option<&NSString>);

    #[objc2::method(sel = "isVideo")]
    pub unsafe fn isVideo(&self) -> bool;

    #[objc2::method(sel = "setVideo:")]
    pub unsafe fn setVideo(&self, video: bool);

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "fulfillWithDateStarted:")]
    pub unsafe fn fulfillWithDateStarted(&self, date_started: &NSDate);
}
