//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CallKit::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum CXCallDirectoryEnabledStatus {
    CXCallDirectoryEnabledStatusUnknown = 0,
    CXCallDirectoryEnabledStatusDisabled = 1,
    CXCallDirectoryEnabledStatusEnabled = 2,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "CallKit_CXCallDirectoryManager")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type CXCallDirectoryManager;
}

#[cfg(feature = "CallKit_CXCallDirectoryManager")]
unsafe impl NSObjectProtocol for CXCallDirectoryManager {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "CallKit_CXCallDirectoryManager")]
    pub type CXCallDirectoryManager;

    #[objc2::method(sel = "sharedInstance", managed = "Other")]
    pub unsafe fn sharedInstance() -> Id<CXCallDirectoryManager>;

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "reloadExtensionWithIdentifier:completionHandler:")]
    pub unsafe fn reloadExtensionWithIdentifier_completionHandler(
        &self,
        identifier: &NSString,
        completion: Option<&Block<(*mut NSError,), ()>>,
    );

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "getEnabledStatusForExtensionWithIdentifier:completionHandler:")]
    pub unsafe fn getEnabledStatusForExtensionWithIdentifier_completionHandler(
        &self,
        identifier: &NSString,
        completion: &Block<(CXCallDirectoryEnabledStatus, *mut NSError), ()>,
    );

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "openSettingsWithCompletionHandler:")]
    pub unsafe fn openSettingsWithCompletionHandler(
        &self,
        completion: Option<&Block<(*mut NSError,), ()>>,
    );
}
