//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Accessibility::*;
use crate::Foundation::*;

#[objc2::protocol]
pub unsafe trait AXChart: NSObjectProtocol {
    #[cfg(feature = "Accessibility_AXChartDescriptor")]
    #[objc2::method(sel = "accessibilityChartDescriptor", managed = "Other")]
    unsafe fn accessibilityChartDescriptor(&self) -> Option<Id<AXChartDescriptor>>;

    #[cfg(feature = "Accessibility_AXChartDescriptor")]
    #[objc2::method(sel = "setAccessibilityChartDescriptor:")]
    unsafe fn setAccessibilityChartDescriptor(
        &self,
        accessibility_chart_descriptor: Option<&AXChartDescriptor>,
    );
}

#[objc2::protocol]
pub unsafe trait AXDataAxisDescriptor {
    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "title", managed = "Other")]
    unsafe fn title(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setTitle:")]
    unsafe fn setTitle(&self, title: &NSString);

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "attributedTitle", managed = "Other")]
    unsafe fn attributedTitle(&self) -> Id<NSAttributedString>;

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "setAttributedTitle:")]
    unsafe fn setAttributedTitle(&self, attributed_title: &NSAttributedString);
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum AXNumericDataAxisDescriptorScale {
    AXScaleTypeLinear = 0,
    AXScaleTypeLog10 = 1,
    AXScaleTypeLn = 2,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Accessibility_AXNumericDataAxisDescriptor")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type AXNumericDataAxisDescriptor;
}

#[cfg(feature = "Accessibility_AXNumericDataAxisDescriptor")]
unsafe impl AXDataAxisDescriptor for AXNumericDataAxisDescriptor {}

#[cfg(feature = "Accessibility_AXNumericDataAxisDescriptor")]
unsafe impl NSObjectProtocol for AXNumericDataAxisDescriptor {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Accessibility_AXNumericDataAxisDescriptor")]
    pub type AXNumericDataAxisDescriptor;

    #[objc2::method(sel = "scaleType")]
    pub unsafe fn scaleType(&self) -> AXNumericDataAxisDescriptorScale;

    #[objc2::method(sel = "setScaleType:")]
    pub unsafe fn setScaleType(&self, scale_type: AXNumericDataAxisDescriptorScale);

    #[objc2::method(sel = "lowerBound")]
    pub unsafe fn lowerBound(&self) -> c_double;

    #[objc2::method(sel = "setLowerBound:")]
    pub unsafe fn setLowerBound(&self, lower_bound: c_double);

    #[objc2::method(sel = "upperBound")]
    pub unsafe fn upperBound(&self) -> c_double;

    #[objc2::method(sel = "setUpperBound:")]
    pub unsafe fn setUpperBound(&self, upper_bound: c_double);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "valueDescriptionProvider")]
    pub unsafe fn valueDescriptionProvider(&self)
        -> NonNull<Block<(c_double,), NonNull<NSString>>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setValueDescriptionProvider:")]
    pub unsafe fn setValueDescriptionProvider(
        &self,
        value_description_provider: &Block<(c_double,), NonNull<NSString>>,
    );

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
    #[objc2::method(sel = "gridlinePositions", managed = "Other")]
    pub unsafe fn gridlinePositions(&self) -> Id<NSArray<NSNumber>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
    #[objc2::method(sel = "setGridlinePositions:")]
    pub unsafe fn setGridlinePositions(&self, gridline_positions: &NSArray<NSNumber>);

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSNumber",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        sel = "initWithTitle:lowerBound:upperBound:gridlinePositions:valueDescriptionProvider:",
        managed = "Init"
    )]
    pub unsafe fn initWithTitle_lowerBound_upperBound_gridlinePositions_valueDescriptionProvider(
        this: Option<Allocated<Self>>,
        title: &NSString,
        lowerbound: c_double,
        upper_bound: c_double,
        gridline_positions: Option<&NSArray<NSNumber>>,
        value_description_provider: &Block<(c_double,), NonNull<NSString>>,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSNumber",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        sel = "initWithAttributedTitle:lowerBound:upperBound:gridlinePositions:valueDescriptionProvider:",
        managed = "Init"
    )]
    pub unsafe fn initWithAttributedTitle_lowerBound_upperBound_gridlinePositions_valueDescriptionProvider(
        this: Option<Allocated<Self>>,
        attributed_title: &NSAttributedString,
        lowerbound: c_double,
        upper_bound: c_double,
        gridline_positions: Option<&NSArray<NSNumber>>,
        value_description_provider: &Block<(c_double,), NonNull<NSString>>,
    ) -> Id<Self>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Accessibility_AXCategoricalDataAxisDescriptor")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type AXCategoricalDataAxisDescriptor;
}

#[cfg(feature = "Accessibility_AXCategoricalDataAxisDescriptor")]
unsafe impl AXDataAxisDescriptor for AXCategoricalDataAxisDescriptor {}

#[cfg(feature = "Accessibility_AXCategoricalDataAxisDescriptor")]
unsafe impl NSObjectProtocol for AXCategoricalDataAxisDescriptor {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Accessibility_AXCategoricalDataAxisDescriptor")]
    pub type AXCategoricalDataAxisDescriptor;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "categoryOrder", managed = "Other")]
    pub unsafe fn categoryOrder(&self) -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setCategoryOrder:")]
    pub unsafe fn setCategoryOrder(&self, category_order: &NSArray<NSString>);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "initWithTitle:categoryOrder:", managed = "Init")]
    pub unsafe fn initWithTitle_categoryOrder(
        this: Option<Allocated<Self>>,
        title: &NSString,
        category_order: &NSArray<NSString>,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "initWithAttributedTitle:categoryOrder:", managed = "Init")]
    pub unsafe fn initWithAttributedTitle_categoryOrder(
        this: Option<Allocated<Self>>,
        attributed_title: &NSAttributedString,
        category_order: &NSArray<NSString>,
    ) -> Id<Self>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Accessibility_AXDataPointValue")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type AXDataPointValue;
}

#[cfg(feature = "Accessibility_AXDataPointValue")]
unsafe impl NSObjectProtocol for AXDataPointValue {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Accessibility_AXDataPointValue")]
    pub type AXDataPointValue;

    #[objc2::method(sel = "number")]
    pub unsafe fn number(&self) -> c_double;

    #[objc2::method(sel = "setNumber:")]
    pub unsafe fn setNumber(&self, number: c_double);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "category", managed = "Other")]
    pub unsafe fn category(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setCategory:")]
    pub unsafe fn setCategory(&self, category: &NSString);

    #[objc2::method(sel = "valueWithNumber:", managed = "Other")]
    pub unsafe fn valueWithNumber(number: c_double) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "valueWithCategory:", managed = "Other")]
    pub unsafe fn valueWithCategory(category: &NSString) -> Id<Self>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Accessibility_AXDataPoint")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type AXDataPoint;
}

#[cfg(feature = "Accessibility_AXDataPoint")]
unsafe impl NSObjectProtocol for AXDataPoint {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Accessibility_AXDataPoint")]
    pub type AXDataPoint;

    #[cfg(feature = "Accessibility_AXDataPointValue")]
    #[objc2::method(sel = "xValue", managed = "Other")]
    pub unsafe fn xValue(&self) -> Id<AXDataPointValue>;

    #[cfg(feature = "Accessibility_AXDataPointValue")]
    #[objc2::method(sel = "setXValue:")]
    pub unsafe fn setXValue(&self, x_value: &AXDataPointValue);

    #[cfg(feature = "Accessibility_AXDataPointValue")]
    #[objc2::method(sel = "yValue", managed = "Other")]
    pub unsafe fn yValue(&self) -> Option<Id<AXDataPointValue>>;

    #[cfg(feature = "Accessibility_AXDataPointValue")]
    #[objc2::method(sel = "setYValue:")]
    pub unsafe fn setYValue(&self, y_value: Option<&AXDataPointValue>);

    #[cfg(all(
        feature = "Accessibility_AXDataPointValue",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(sel = "additionalValues", managed = "Other")]
    pub unsafe fn additionalValues(&self) -> Id<NSArray<AXDataPointValue>>;

    #[cfg(all(
        feature = "Accessibility_AXDataPointValue",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(sel = "setAdditionalValues:")]
    pub unsafe fn setAdditionalValues(&self, additional_values: &NSArray<AXDataPointValue>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "label", managed = "Other")]
    pub unsafe fn label(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setLabel:")]
    pub unsafe fn setLabel(&self, label: Option<&NSString>);

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "attributedLabel", managed = "Other")]
    pub unsafe fn attributedLabel(&self) -> Option<Id<NSAttributedString>>;

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "setAttributedLabel:")]
    pub unsafe fn setAttributedLabel(&self, attributed_label: Option<&NSAttributedString>);

    #[cfg(feature = "Accessibility_AXDataPointValue")]
    #[objc2::method(sel = "initWithX:y:", managed = "Init")]
    pub unsafe fn initWithX_y(
        this: Option<Allocated<Self>>,
        x_value: &AXDataPointValue,
        y_value: Option<&AXDataPointValue>,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "Accessibility_AXDataPointValue",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(sel = "initWithX:y:additionalValues:", managed = "Init")]
    pub unsafe fn initWithX_y_additionalValues(
        this: Option<Allocated<Self>>,
        x_value: &AXDataPointValue,
        y_value: Option<&AXDataPointValue>,
        additional_values: Option<&NSArray<AXDataPointValue>>,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "Accessibility_AXDataPointValue",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "initWithX:y:additionalValues:label:", managed = "Init")]
    pub unsafe fn initWithX_y_additionalValues_label(
        this: Option<Allocated<Self>>,
        x_value: &AXDataPointValue,
        y_value: Option<&AXDataPointValue>,
        additional_values: Option<&NSArray<AXDataPointValue>>,
        label: Option<&NSString>,
    ) -> Id<Self>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Accessibility_AXDataSeriesDescriptor")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type AXDataSeriesDescriptor;
}

#[cfg(feature = "Accessibility_AXDataSeriesDescriptor")]
unsafe impl NSObjectProtocol for AXDataSeriesDescriptor {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Accessibility_AXDataSeriesDescriptor")]
    pub type AXDataSeriesDescriptor;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "name", managed = "Other")]
    pub unsafe fn name(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setName:")]
    pub unsafe fn setName(&self, name: Option<&NSString>);

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "attributedName", managed = "Other")]
    pub unsafe fn attributedName(&self) -> Id<NSAttributedString>;

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "setAttributedName:")]
    pub unsafe fn setAttributedName(&self, attributed_name: &NSAttributedString);

    #[objc2::method(sel = "isContinuous")]
    pub unsafe fn isContinuous(&self) -> bool;

    #[objc2::method(sel = "setIsContinuous:")]
    pub unsafe fn setIsContinuous(&self, is_continuous: bool);

    #[cfg(all(feature = "Accessibility_AXDataPoint", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "dataPoints", managed = "Other")]
    pub unsafe fn dataPoints(&self) -> Id<NSArray<AXDataPoint>>;

    #[cfg(all(feature = "Accessibility_AXDataPoint", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "setDataPoints:")]
    pub unsafe fn setDataPoints(&self, data_points: &NSArray<AXDataPoint>);

    #[cfg(all(
        feature = "Accessibility_AXDataPoint",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "initWithName:isContinuous:dataPoints:", managed = "Init")]
    pub unsafe fn initWithName_isContinuous_dataPoints(
        this: Option<Allocated<Self>>,
        name: &NSString,
        is_continuous: bool,
        data_points: &NSArray<AXDataPoint>,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "Accessibility_AXDataPoint",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSAttributedString"
    ))]
    #[objc2::method(
        sel = "initWithAttributedName:isContinuous:dataPoints:",
        managed = "Init"
    )]
    pub unsafe fn initWithAttributedName_isContinuous_dataPoints(
        this: Option<Allocated<Self>>,
        attributed_name: &NSAttributedString,
        is_continuous: bool,
        data_points: &NSArray<AXDataPoint>,
    ) -> Id<Self>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum AXChartDescriptorContentDirection {
    AXChartContentDirectionLeftToRight = 0,
    AXChartContentDirectionRightToLeft = 1,
    AXChartContentDirectionTopToBottom = 2,
    AXChartContentDirectionBottomToTop = 3,
    AXChartContentDirectionRadialClockwise = 4,
    AXChartContentDirectionRadialCounterClockwise = 5,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Accessibility_AXChartDescriptor")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type AXChartDescriptor;
}

#[cfg(feature = "Accessibility_AXChartDescriptor")]
unsafe impl NSObjectProtocol for AXChartDescriptor {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Accessibility_AXChartDescriptor")]
    pub type AXChartDescriptor;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "title", managed = "Other")]
    pub unsafe fn title(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setTitle:")]
    pub unsafe fn setTitle(&self, title: Option<&NSString>);

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "attributedTitle", managed = "Other")]
    pub unsafe fn attributedTitle(&self) -> Option<Id<NSAttributedString>>;

    #[cfg(feature = "Foundation_NSAttributedString")]
    #[objc2::method(sel = "setAttributedTitle:")]
    pub unsafe fn setAttributedTitle(&self, attributed_title: Option<&NSAttributedString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "summary", managed = "Other")]
    pub unsafe fn summary(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setSummary:")]
    pub unsafe fn setSummary(&self, summary: Option<&NSString>);

    #[objc2::method(sel = "contentDirection")]
    pub unsafe fn contentDirection(&self) -> AXChartDescriptorContentDirection;

    #[objc2::method(sel = "setContentDirection:")]
    pub unsafe fn setContentDirection(&self, content_direction: AXChartDescriptorContentDirection);

    #[objc2::method(sel = "contentFrame")]
    pub unsafe fn contentFrame(&self) -> CGRect;

    #[objc2::method(sel = "setContentFrame:")]
    pub unsafe fn setContentFrame(&self, content_frame: CGRect);

    #[cfg(all(
        feature = "Accessibility_AXDataSeriesDescriptor",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(sel = "series", managed = "Other")]
    pub unsafe fn series(&self) -> Id<NSArray<AXDataSeriesDescriptor>>;

    #[cfg(all(
        feature = "Accessibility_AXDataSeriesDescriptor",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(sel = "setSeries:")]
    pub unsafe fn setSeries(&self, series: &NSArray<AXDataSeriesDescriptor>);

    #[objc2::method(sel = "xAxis", managed = "Other")]
    pub unsafe fn xAxis(&self) -> Id<ProtocolObject<dyn AXDataAxisDescriptor>>;

    #[objc2::method(sel = "setXAxis:")]
    pub unsafe fn setXAxis(&self, x_axis: &ProtocolObject<dyn AXDataAxisDescriptor>);

    #[cfg(feature = "Accessibility_AXNumericDataAxisDescriptor")]
    #[objc2::method(sel = "yAxis", managed = "Other")]
    pub unsafe fn yAxis(&self) -> Option<Id<AXNumericDataAxisDescriptor>>;

    #[cfg(feature = "Accessibility_AXNumericDataAxisDescriptor")]
    #[objc2::method(sel = "setYAxis:")]
    pub unsafe fn setYAxis(&self, y_axis: Option<&AXNumericDataAxisDescriptor>);

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "additionalAxes", managed = "Other")]
    pub unsafe fn additionalAxes(
        &self,
    ) -> Option<Id<NSArray<ProtocolObject<dyn AXDataAxisDescriptor>>>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "setAdditionalAxes:")]
    pub unsafe fn setAdditionalAxes(
        &self,
        additional_axes: Option<&NSArray<ProtocolObject<dyn AXDataAxisDescriptor>>>,
    );

    #[cfg(all(
        feature = "Accessibility_AXDataSeriesDescriptor",
        feature = "Accessibility_AXNumericDataAxisDescriptor",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        sel = "initWithTitle:summary:xAxisDescriptor:yAxisDescriptor:series:",
        managed = "Init"
    )]
    pub unsafe fn initWithTitle_summary_xAxisDescriptor_yAxisDescriptor_series(
        this: Option<Allocated<Self>>,
        title: Option<&NSString>,
        summary: Option<&NSString>,
        x_axis: &ProtocolObject<dyn AXDataAxisDescriptor>,
        y_axis: Option<&AXNumericDataAxisDescriptor>,
        series: &NSArray<AXDataSeriesDescriptor>,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "Accessibility_AXDataSeriesDescriptor",
        feature = "Accessibility_AXNumericDataAxisDescriptor",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        sel = "initWithAttributedTitle:summary:xAxisDescriptor:yAxisDescriptor:series:",
        managed = "Init"
    )]
    pub unsafe fn initWithAttributedTitle_summary_xAxisDescriptor_yAxisDescriptor_series(
        this: Option<Allocated<Self>>,
        attributed_title: Option<&NSAttributedString>,
        summary: Option<&NSString>,
        x_axis: &ProtocolObject<dyn AXDataAxisDescriptor>,
        y_axis: &AXNumericDataAxisDescriptor,
        series: &NSArray<AXDataSeriesDescriptor>,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "Accessibility_AXDataSeriesDescriptor",
        feature = "Accessibility_AXNumericDataAxisDescriptor",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        sel = "initWithTitle:summary:xAxisDescriptor:yAxisDescriptor:additionalAxes:series:",
        managed = "Init"
    )]
    pub unsafe fn initWithTitle_summary_xAxisDescriptor_yAxisDescriptor_additionalAxes_series(
        this: Option<Allocated<Self>>,
        title: Option<&NSString>,
        summary: Option<&NSString>,
        x_axis: &ProtocolObject<dyn AXDataAxisDescriptor>,
        y_axis: Option<&AXNumericDataAxisDescriptor>,
        additional_axes: Option<&NSArray<ProtocolObject<dyn AXDataAxisDescriptor>>>,
        series: &NSArray<AXDataSeriesDescriptor>,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "Accessibility_AXDataSeriesDescriptor",
        feature = "Accessibility_AXNumericDataAxisDescriptor",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        sel = "initWithAttributedTitle:summary:xAxisDescriptor:yAxisDescriptor:additionalAxes:series:",
        managed = "Init"
    )]
    pub unsafe fn initWithAttributedTitle_summary_xAxisDescriptor_yAxisDescriptor_additionalAxes_series(
        this: Option<Allocated<Self>>,
        attributed_title: Option<&NSAttributedString>,
        summary: Option<&NSString>,
        x_axis: &ProtocolObject<dyn AXDataAxisDescriptor>,
        y_axis: Option<&AXNumericDataAxisDescriptor>,
        additional_axes: Option<&NSArray<ProtocolObject<dyn AXDataAxisDescriptor>>>,
        series: &NSArray<AXDataSeriesDescriptor>,
    ) -> Id<Self>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Accessibility_AXLiveAudioGraph")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type AXLiveAudioGraph;
}

#[cfg(feature = "Accessibility_AXLiveAudioGraph")]
unsafe impl NSObjectProtocol for AXLiveAudioGraph {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Accessibility_AXLiveAudioGraph")]
    pub type AXLiveAudioGraph;

    #[objc2::method(sel = "start")]
    pub unsafe fn start();

    #[objc2::method(sel = "updateValue:")]
    pub unsafe fn updateValue(value: c_double);

    #[objc2::method(sel = "stop")]
    pub unsafe fn stop();
}
