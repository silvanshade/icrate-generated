//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::ClassKit::*;
use crate::Foundation::*;

#[objc2::protocol]
pub unsafe trait CLSDataStoreDelegate: NSObjectProtocol {
    #[cfg(all(
        feature = "ClassKit_CLSContext",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        sel = "createContextForIdentifier:parentContext:parentIdentifierPath:",
        managed = "Other"
    )]
    unsafe fn createContextForIdentifier_parentContext_parentIdentifierPath(
        &self,
        identifier: &NSString,
        parent_context: &CLSContext,
        parent_identifier_path: &NSArray<NSString>,
    ) -> Option<Id<CLSContext>>;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "ClassKit_CLSDataStore")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type CLSDataStore;
}

#[cfg(feature = "ClassKit_CLSDataStore")]
unsafe impl NSObjectProtocol for CLSDataStore {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "ClassKit_CLSDataStore")]
    pub type CLSDataStore;

    #[objc2::method(sel = "shared", managed = "Other")]
    pub unsafe fn shared() -> Id<CLSDataStore>;

    #[cfg(feature = "ClassKit_CLSContext")]
    #[objc2::method(sel = "mainAppContext", managed = "Other")]
    pub unsafe fn mainAppContext(&self) -> Id<CLSContext>;

    #[cfg(feature = "ClassKit_CLSContext")]
    #[objc2::method(sel = "activeContext", managed = "Other")]
    pub unsafe fn activeContext(&self) -> Option<Id<CLSContext>>;

    #[cfg(feature = "ClassKit_CLSActivity")]
    #[objc2::method(sel = "runningActivity", managed = "Other")]
    pub unsafe fn runningActivity(&self) -> Option<Id<CLSActivity>>;

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn CLSDataStoreDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(&self, delegate: Option<&ProtocolObject<dyn CLSDataStoreDelegate>>);

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "saveWithCompletion:")]
    pub unsafe fn saveWithCompletion(&self, completion: Option<&Block<(*mut NSError,), ()>>);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "completeAllAssignedActivitiesMatching:")]
    pub unsafe fn completeAllAssignedActivitiesMatching(&self, context_path: &NSArray<NSString>);
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "ClassKit_CLSDataStore")]
    pub type CLSDataStore;

    #[cfg(all(
        feature = "ClassKit_CLSContext",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError",
        feature = "Foundation_NSPredicate"
    ))]
    #[objc2::method(sel = "contextsMatchingPredicate:completion:")]
    pub unsafe fn contextsMatchingPredicate_completion(
        &self,
        predicate: &NSPredicate,
        completion: &Block<(NonNull<NSArray<CLSContext>>, *mut NSError), ()>,
    );

    #[cfg(all(
        feature = "ClassKit_CLSContext",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "contextsMatchingIdentifierPath:completion:")]
    pub unsafe fn contextsMatchingIdentifierPath_completion(
        &self,
        identifier_path: &NSArray<NSString>,
        completion: &Block<(NonNull<NSArray<CLSContext>>, *mut NSError), ()>,
    );

    #[cfg(feature = "ClassKit_CLSContext")]
    #[objc2::method(sel = "removeContext:")]
    pub unsafe fn removeContext(&self, context: &CLSContext);

    #[cfg(all(
        feature = "ClassKit_CLSActivity",
        feature = "Foundation_NSError",
        feature = "Foundation_NSURL"
    ))]
    #[objc2::method(sel = "fetchActivityForURL:completion:")]
    pub unsafe fn fetchActivityForURL_completion(
        &self,
        url: &NSURL,
        completion: &Block<(*mut CLSActivity, *mut NSError), ()>,
    );
}
