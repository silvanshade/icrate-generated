//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreAnimation::*;
use crate::Foundation::*;

typed_enum!(
    pub type CATextLayerTruncationMode = NSString;
);

typed_enum!(
    pub type CATextLayerAlignmentMode = NSString;
);

#[objc2::interface(
    unsafe super = CALayer,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "CoreAnimation_CATextLayer")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type CATextLayer;
}

#[cfg(feature = "CoreAnimation_CATextLayer")]
unsafe impl CAMediaTiming for CATextLayer {}

#[cfg(feature = "CoreAnimation_CATextLayer")]
unsafe impl NSCoding for CATextLayer {}

#[cfg(feature = "CoreAnimation_CATextLayer")]
unsafe impl NSObjectProtocol for CATextLayer {}

#[cfg(feature = "CoreAnimation_CATextLayer")]
unsafe impl NSSecureCoding for CATextLayer {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "CoreAnimation_CATextLayer")]
    pub type CATextLayer;

    #[objc2::method(sel = "string", managed = "Other")]
    pub unsafe fn string(&self) -> Option<Id<Object>>;

    #[objc2::method(sel = "setString:")]
    pub unsafe fn setString(&self, string: Option<&Object>);

    #[objc2::method(sel = "fontSize")]
    pub unsafe fn fontSize(&self) -> CGFloat;

    #[objc2::method(sel = "setFontSize:")]
    pub unsafe fn setFontSize(&self, font_size: CGFloat);

    #[objc2::method(sel = "isWrapped")]
    pub unsafe fn isWrapped(&self) -> bool;

    #[objc2::method(sel = "setWrapped:")]
    pub unsafe fn setWrapped(&self, wrapped: bool);

    #[objc2::method(sel = "truncationMode", managed = "Other")]
    pub unsafe fn truncationMode(&self) -> Id<CATextLayerTruncationMode>;

    #[objc2::method(sel = "setTruncationMode:")]
    pub unsafe fn setTruncationMode(&self, truncation_mode: &CATextLayerTruncationMode);

    #[objc2::method(sel = "alignmentMode", managed = "Other")]
    pub unsafe fn alignmentMode(&self) -> Id<CATextLayerAlignmentMode>;

    #[objc2::method(sel = "setAlignmentMode:")]
    pub unsafe fn setAlignmentMode(&self, alignment_mode: &CATextLayerAlignmentMode);

    #[objc2::method(sel = "allowsFontSubpixelQuantization")]
    pub unsafe fn allowsFontSubpixelQuantization(&self) -> bool;

    #[objc2::method(sel = "setAllowsFontSubpixelQuantization:")]
    pub unsafe fn setAllowsFontSubpixelQuantization(&self, allows_font_subpixel_quantization: bool);
}

extern_static!(kCATruncationNone: &'static CATextLayerTruncationMode);

extern_static!(kCATruncationStart: &'static CATextLayerTruncationMode);

extern_static!(kCATruncationEnd: &'static CATextLayerTruncationMode);

extern_static!(kCATruncationMiddle: &'static CATextLayerTruncationMode);

extern_static!(kCAAlignmentNatural: &'static CATextLayerAlignmentMode);

extern_static!(kCAAlignmentLeft: &'static CATextLayerAlignmentMode);

extern_static!(kCAAlignmentRight: &'static CATextLayerAlignmentMode);

extern_static!(kCAAlignmentCenter: &'static CATextLayerAlignmentMode);

extern_static!(kCAAlignmentJustified: &'static CATextLayerAlignmentMode);

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `CALayer`
    #[cfg(feature = "CoreAnimation_CATextLayer")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "CoreAnimation_CATextLayer")]
    pub type CATextLayer;

    #[objc2::method(sel = "layer", managed = "Other")]
    pub unsafe fn layer() -> Id<Self>;

    #[objc2::method(sel = "initWithLayer:", managed = "Init")]
    pub unsafe fn initWithLayer(this: Option<Allocated<Self>>, layer: &Object) -> Id<Self>;
}
