//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::StoreKit::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "StoreKit_SKRequest")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type SKRequest;
}

#[cfg(feature = "StoreKit_SKRequest")]
unsafe impl NSObjectProtocol for SKRequest {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "StoreKit_SKRequest")]
    pub type SKRequest;

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn SKRequestDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(&self, delegate: Option<&ProtocolObject<dyn SKRequestDelegate>>);

    #[objc2::method(sel = "cancel")]
    pub unsafe fn cancel(&self);

    #[objc2::method(sel = "start")]
    pub unsafe fn start(&self);
}

#[objc2::protocol]
pub unsafe trait SKRequestDelegate: NSObjectProtocol {
    #[cfg(feature = "StoreKit_SKRequest")]
    #[objc2::method(optional, sel = "requestDidFinish:")]
    unsafe fn requestDidFinish(&self, request: &SKRequest);

    #[cfg(all(feature = "Foundation_NSError", feature = "StoreKit_SKRequest"))]
    #[objc2::method(optional, sel = "request:didFailWithError:")]
    unsafe fn request_didFailWithError(&self, request: &SKRequest, error: &NSError);
}
