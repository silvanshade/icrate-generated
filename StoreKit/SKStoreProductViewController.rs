//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::StoreKit::*;

#[objc2::interface(
    unsafe super = NSViewController,
    unsafe inherits = [
        NSResponder,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "StoreKit_SKStoreProductViewController")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type SKStoreProductViewController;
}

#[cfg(feature = "StoreKit_SKStoreProductViewController")]
unsafe impl NSCoding for SKStoreProductViewController {}

#[cfg(feature = "StoreKit_SKStoreProductViewController")]
unsafe impl NSEditor for SKStoreProductViewController {}

#[cfg(feature = "StoreKit_SKStoreProductViewController")]
unsafe impl NSObjectProtocol for SKStoreProductViewController {}

#[cfg(feature = "StoreKit_SKStoreProductViewController")]
unsafe impl NSSeguePerforming for SKStoreProductViewController {}

#[cfg(feature = "StoreKit_SKStoreProductViewController")]
unsafe impl NSUserInterfaceItemIdentification for SKStoreProductViewController {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "StoreKit_SKStoreProductViewController")]
    pub type SKStoreProductViewController;

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(
        &self,
    ) -> Option<Id<ProtocolObject<dyn SKStoreProductViewControllerDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(
        &self,
        delegate: Option<&ProtocolObject<dyn SKStoreProductViewControllerDelegate>>,
    );

    #[cfg(all(
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSError",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "loadProductWithParameters:completionBlock:")]
    pub unsafe fn loadProductWithParameters_completionBlock(
        &self,
        parameters: &NSDictionary<NSString, Object>,
        block: Option<&Block<(Bool, *mut NSError), ()>>,
    );

    #[cfg(all(
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSError",
        feature = "Foundation_NSString",
        feature = "StoreKit_SKAdImpression"
    ))]
    #[objc2::method(sel = "loadProductWithParameters:impression:completionBlock:")]
    pub unsafe fn loadProductWithParameters_impression_completionBlock(
        &self,
        parameters: &NSDictionary<NSString, Object>,
        impression: &SKAdImpression,
        block: Option<&Block<(Bool, *mut NSError), ()>>,
    );
}

#[objc2::protocol]
pub unsafe trait SKStoreProductViewControllerDelegate: NSObjectProtocol {
    #[cfg(feature = "StoreKit_SKStoreProductViewController")]
    #[objc2::method(optional, sel = "productViewControllerDidFinish:")]
    unsafe fn productViewControllerDidFinish(&self, view_controller: &SKStoreProductViewController);
}

extern_static!(SKStoreProductParameterITunesItemIdentifier: &'static NSString);

extern_static!(SKStoreProductParameterProductIdentifier: &'static NSString);

extern_static!(SKStoreProductParameterCustomProductPageIdentifier: &'static NSString);

extern_static!(SKStoreProductParameterAffiliateToken: &'static NSString);

extern_static!(SKStoreProductParameterCampaignToken: &'static NSString);

extern_static!(SKStoreProductParameterProviderToken: &'static NSString);

extern_static!(SKStoreProductParameterAdvertisingPartnerToken: &'static NSString);

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSViewController`
    #[cfg(feature = "StoreKit_SKStoreProductViewController")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "StoreKit_SKStoreProductViewController")]
    pub type SKStoreProductViewController;

    #[cfg(feature = "Foundation_NSBundle")]
    #[objc2::method(sel = "initWithNibName:bundle:", managed = "Init")]
    pub unsafe fn initWithNibName_bundle(
        this: Option<Allocated<Self>>,
        nib_name_or_nil: Option<&NSNibName>,
        nib_bundle_or_nil: Option<&NSBundle>,
    ) -> Id<Self>;
}
