//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::StoreKit::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "StoreKit_SKPaymentQueue")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type SKPaymentQueue;
}

#[cfg(feature = "StoreKit_SKPaymentQueue")]
unsafe impl NSObjectProtocol for SKPaymentQueue {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "StoreKit_SKPaymentQueue")]
    pub type SKPaymentQueue;

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn SKPaymentQueueDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(&self, delegate: Option<&ProtocolObject<dyn SKPaymentQueueDelegate>>);

    #[cfg(feature = "StoreKit_SKStorefront")]
    #[objc2::method(sel = "storefront", managed = "Other")]
    pub unsafe fn storefront(&self) -> Option<Id<SKStorefront>>;

    #[objc2::method(sel = "defaultQueue", managed = "Other")]
    pub unsafe fn defaultQueue() -> Id<Self>;

    #[objc2::method(sel = "canMakePayments")]
    pub unsafe fn canMakePayments() -> bool;

    #[cfg(feature = "StoreKit_SKPayment")]
    #[objc2::method(sel = "addPayment:")]
    pub unsafe fn addPayment(&self, payment: &SKPayment);

    #[objc2::method(sel = "restoreCompletedTransactions")]
    pub unsafe fn restoreCompletedTransactions(&self);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "restoreCompletedTransactionsWithApplicationUsername:")]
    pub unsafe fn restoreCompletedTransactionsWithApplicationUsername(
        &self,
        username: Option<&NSString>,
    );

    #[cfg(feature = "StoreKit_SKPaymentTransaction")]
    #[objc2::method(sel = "finishTransaction:")]
    pub unsafe fn finishTransaction(&self, transaction: &SKPaymentTransaction);

    #[cfg(all(feature = "Foundation_NSArray", feature = "StoreKit_SKDownload"))]
    #[deprecated = "Hosted content is no longer supported"]
    #[objc2::method(sel = "startDownloads:")]
    pub unsafe fn startDownloads(&self, downloads: &NSArray<SKDownload>);

    #[cfg(all(feature = "Foundation_NSArray", feature = "StoreKit_SKDownload"))]
    #[deprecated = "Hosted content is no longer supported"]
    #[objc2::method(sel = "pauseDownloads:")]
    pub unsafe fn pauseDownloads(&self, downloads: &NSArray<SKDownload>);

    #[cfg(all(feature = "Foundation_NSArray", feature = "StoreKit_SKDownload"))]
    #[deprecated = "Hosted content is no longer supported"]
    #[objc2::method(sel = "resumeDownloads:")]
    pub unsafe fn resumeDownloads(&self, downloads: &NSArray<SKDownload>);

    #[cfg(all(feature = "Foundation_NSArray", feature = "StoreKit_SKDownload"))]
    #[deprecated = "Hosted content is no longer supported"]
    #[objc2::method(sel = "cancelDownloads:")]
    pub unsafe fn cancelDownloads(&self, downloads: &NSArray<SKDownload>);

    #[objc2::method(sel = "addTransactionObserver:")]
    pub unsafe fn addTransactionObserver(
        &self,
        observer: &ProtocolObject<dyn SKPaymentTransactionObserver>,
    );

    #[objc2::method(sel = "removeTransactionObserver:")]
    pub unsafe fn removeTransactionObserver(
        &self,
        observer: &ProtocolObject<dyn SKPaymentTransactionObserver>,
    );

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "transactionObservers", managed = "Other")]
    pub unsafe fn transactionObservers(
        &self,
    ) -> Id<NSArray<ProtocolObject<dyn SKPaymentTransactionObserver>>>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "StoreKit_SKPaymentTransaction"
    ))]
    #[objc2::method(sel = "transactions", managed = "Other")]
    pub unsafe fn transactions(&self) -> Id<NSArray<SKPaymentTransaction>>;

    #[objc2::method(sel = "showPriceConsentIfNeeded")]
    pub unsafe fn showPriceConsentIfNeeded(&self);

    #[objc2::method(sel = "presentCodeRedemptionSheet")]
    pub unsafe fn presentCodeRedemptionSheet(&self);
}

#[objc2::protocol]
pub unsafe trait SKPaymentQueueDelegate: NSObjectProtocol {
    #[cfg(all(
        feature = "StoreKit_SKPaymentQueue",
        feature = "StoreKit_SKPaymentTransaction",
        feature = "StoreKit_SKStorefront"
    ))]
    #[objc2::method(optional, sel = "paymentQueue:shouldContinueTransaction:inStorefront:")]
    unsafe fn paymentQueue_shouldContinueTransaction_inStorefront(
        &self,
        payment_queue: &SKPaymentQueue,
        transaction: &SKPaymentTransaction,
        new_storefront: &SKStorefront,
    ) -> bool;

    #[cfg(feature = "StoreKit_SKPaymentQueue")]
    #[objc2::method(optional, sel = "paymentQueueShouldShowPriceConsent:")]
    unsafe fn paymentQueueShouldShowPriceConsent(&self, payment_queue: &SKPaymentQueue) -> bool;
}

#[objc2::protocol]
pub unsafe trait SKPaymentTransactionObserver: NSObjectProtocol {
    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "StoreKit_SKPaymentQueue",
        feature = "StoreKit_SKPaymentTransaction"
    ))]
    #[objc2::method(sel = "paymentQueue:updatedTransactions:")]
    unsafe fn paymentQueue_updatedTransactions(
        &self,
        queue: &SKPaymentQueue,
        transactions: &NSArray<SKPaymentTransaction>,
    );

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "StoreKit_SKPaymentQueue",
        feature = "StoreKit_SKPaymentTransaction"
    ))]
    #[objc2::method(optional, sel = "paymentQueue:removedTransactions:")]
    unsafe fn paymentQueue_removedTransactions(
        &self,
        queue: &SKPaymentQueue,
        transactions: &NSArray<SKPaymentTransaction>,
    );

    #[cfg(all(feature = "Foundation_NSError", feature = "StoreKit_SKPaymentQueue"))]
    #[objc2::method(
        optional,
        sel = "paymentQueue:restoreCompletedTransactionsFailedWithError:"
    )]
    unsafe fn paymentQueue_restoreCompletedTransactionsFailedWithError(
        &self,
        queue: &SKPaymentQueue,
        error: &NSError,
    );

    #[cfg(feature = "StoreKit_SKPaymentQueue")]
    #[objc2::method(optional, sel = "paymentQueueRestoreCompletedTransactionsFinished:")]
    unsafe fn paymentQueueRestoreCompletedTransactionsFinished(&self, queue: &SKPaymentQueue);

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "StoreKit_SKDownload",
        feature = "StoreKit_SKPaymentQueue"
    ))]
    #[deprecated = "Hosted content is no longer supported"]
    #[objc2::method(optional, sel = "paymentQueue:updatedDownloads:")]
    unsafe fn paymentQueue_updatedDownloads(
        &self,
        queue: &SKPaymentQueue,
        downloads: &NSArray<SKDownload>,
    );

    #[cfg(all(
        feature = "StoreKit_SKPayment",
        feature = "StoreKit_SKPaymentQueue",
        feature = "StoreKit_SKProduct"
    ))]
    #[objc2::method(optional, sel = "paymentQueue:shouldAddStorePayment:forProduct:")]
    unsafe fn paymentQueue_shouldAddStorePayment_forProduct(
        &self,
        queue: &SKPaymentQueue,
        payment: &SKPayment,
        product: &SKProduct,
    ) -> bool;

    #[cfg(feature = "StoreKit_SKPaymentQueue")]
    #[objc2::method(optional, sel = "paymentQueueDidChangeStorefront:")]
    unsafe fn paymentQueueDidChangeStorefront(&self, queue: &SKPaymentQueue);

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSString",
        feature = "StoreKit_SKPaymentQueue"
    ))]
    #[objc2::method(
        optional,
        sel = "paymentQueue:didRevokeEntitlementsForProductIdentifiers:"
    )]
    unsafe fn paymentQueue_didRevokeEntitlementsForProductIdentifiers(
        &self,
        queue: &SKPaymentQueue,
        product_identifiers: &NSArray<NSString>,
    );
}
