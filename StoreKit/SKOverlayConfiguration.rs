//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::StoreKit::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum SKOverlayPosition {
    SKOverlayPositionBottom = 0,
    SKOverlayPositionBottomRaised = 1,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "StoreKit_SKOverlayConfiguration")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type SKOverlayConfiguration;
}

#[cfg(feature = "StoreKit_SKOverlayConfiguration")]
unsafe impl NSObjectProtocol for SKOverlayConfiguration {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "StoreKit_SKOverlayConfiguration")]
    pub type SKOverlayConfiguration;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;
}

#[objc2::interface(
    unsafe super = SKOverlayConfiguration,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "StoreKit_SKOverlayAppConfiguration")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type SKOverlayAppConfiguration;
}

#[cfg(feature = "StoreKit_SKOverlayAppConfiguration")]
unsafe impl NSObjectProtocol for SKOverlayAppConfiguration {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "StoreKit_SKOverlayAppConfiguration")]
    pub type SKOverlayAppConfiguration;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithAppIdentifier:position:", managed = "Init")]
    pub unsafe fn initWithAppIdentifier_position(
        this: Option<Allocated<Self>>,
        app_identifier: &NSString,
        position: SKOverlayPosition,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "appIdentifier", managed = "Other")]
    pub unsafe fn appIdentifier(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setAppIdentifier:")]
    pub unsafe fn setAppIdentifier(&self, app_identifier: &NSString);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "campaignToken", managed = "Other")]
    pub unsafe fn campaignToken(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setCampaignToken:")]
    pub unsafe fn setCampaignToken(&self, campaign_token: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "providerToken", managed = "Other")]
    pub unsafe fn providerToken(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setProviderToken:")]
    pub unsafe fn setProviderToken(&self, provider_token: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "customProductPageIdentifier", managed = "Other")]
    pub unsafe fn customProductPageIdentifier(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setCustomProductPageIdentifier:")]
    pub unsafe fn setCustomProductPageIdentifier(
        &self,
        custom_product_page_identifier: Option<&NSString>,
    );

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "latestReleaseID", managed = "Other")]
    pub unsafe fn latestReleaseID(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setLatestReleaseID:")]
    pub unsafe fn setLatestReleaseID(&self, latest_release_id: Option<&NSString>);

    #[objc2::method(sel = "position")]
    pub unsafe fn position(&self) -> SKOverlayPosition;

    #[objc2::method(sel = "setPosition:")]
    pub unsafe fn setPosition(&self, position: SKOverlayPosition);

    #[objc2::method(sel = "userDismissible")]
    pub unsafe fn userDismissible(&self) -> bool;

    #[objc2::method(sel = "setUserDismissible:")]
    pub unsafe fn setUserDismissible(&self, user_dismissible: bool);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setAdditionalValue:forKey:")]
    pub unsafe fn setAdditionalValue_forKey(&self, value: Option<&Object>, key: &NSString);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "additionalValueForKey:", managed = "Other")]
    pub unsafe fn additionalValueForKey(&self, key: &NSString) -> Option<Id<Object>>;

    #[cfg(feature = "StoreKit_SKAdImpression")]
    #[objc2::method(sel = "setAdImpression:")]
    pub unsafe fn setAdImpression(&self, impression: &SKAdImpression);
}

#[objc2::interface(
    unsafe super = SKOverlayConfiguration,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "StoreKit_SKOverlayAppClipConfiguration")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type SKOverlayAppClipConfiguration;
}

#[cfg(feature = "StoreKit_SKOverlayAppClipConfiguration")]
unsafe impl NSObjectProtocol for SKOverlayAppClipConfiguration {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "StoreKit_SKOverlayAppClipConfiguration")]
    pub type SKOverlayAppClipConfiguration;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;

    #[objc2::method(sel = "initWithPosition:", managed = "Init")]
    pub unsafe fn initWithPosition(
        this: Option<Allocated<Self>>,
        position: SKOverlayPosition,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "campaignToken", managed = "Other")]
    pub unsafe fn campaignToken(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setCampaignToken:")]
    pub unsafe fn setCampaignToken(&self, campaign_token: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "providerToken", managed = "Other")]
    pub unsafe fn providerToken(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setProviderToken:")]
    pub unsafe fn setProviderToken(&self, provider_token: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "customProductPageIdentifier", managed = "Other")]
    pub unsafe fn customProductPageIdentifier(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setCustomProductPageIdentifier:")]
    pub unsafe fn setCustomProductPageIdentifier(
        &self,
        custom_product_page_identifier: Option<&NSString>,
    );

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "latestReleaseID", managed = "Other")]
    pub unsafe fn latestReleaseID(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setLatestReleaseID:")]
    pub unsafe fn setLatestReleaseID(&self, latest_release_id: Option<&NSString>);

    #[objc2::method(sel = "position")]
    pub unsafe fn position(&self) -> SKOverlayPosition;

    #[objc2::method(sel = "setPosition:")]
    pub unsafe fn setPosition(&self, position: SKOverlayPosition);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setAdditionalValue:forKey:")]
    pub unsafe fn setAdditionalValue_forKey(&self, value: Option<&Object>, key: &NSString);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "additionalValueForKey:", managed = "Other")]
    pub unsafe fn additionalValueForKey(&self, key: &NSString) -> Option<Id<Object>>;
}
