//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Contacts::*;
use crate::CoreLocation::*;
use crate::Foundation::*;

pub type CLLocationDegrees = c_double;

pub type CLLocationAccuracy = c_double;

pub type CLLocationSpeed = c_double;

pub type CLLocationSpeedAccuracy = c_double;

pub type CLLocationDirection = c_double;

pub type CLLocationDirectionAccuracy = c_double;

extern_struct!(
    pub struct CLLocationCoordinate2D {
        pub latitude: CLLocationDegrees,
        pub longitude: CLLocationDegrees,
    }
);

pub type CLLocationDistance = c_double;

extern_static!(kCLDistanceFilterNone: CLLocationDistance);

extern_static!(kCLLocationAccuracyBestForNavigation: CLLocationAccuracy);

extern_static!(kCLLocationAccuracyBest: CLLocationAccuracy);

extern_static!(kCLLocationAccuracyNearestTenMeters: CLLocationAccuracy);

extern_static!(kCLLocationAccuracyHundredMeters: CLLocationAccuracy);

extern_static!(kCLLocationAccuracyKilometer: CLLocationAccuracy);

extern_static!(kCLLocationAccuracyThreeKilometers: CLLocationAccuracy);

extern_static!(kCLLocationAccuracyReduced: CLLocationAccuracy);

extern_static!(CLLocationDistanceMax: CLLocationDistance);

extern_static!(CLTimeIntervalMax: NSTimeInterval);

extern_static!(kCLLocationCoordinate2DInvalid: CLLocationCoordinate2D);

extern_fn!(
    pub unsafe fn CLLocationCoordinate2DIsValid(coord: CLLocationCoordinate2D) -> Bool;
);

extern_fn!(
    pub unsafe fn CLLocationCoordinate2DMake(
        latitude: CLLocationDegrees,
        longitude: CLLocationDegrees,
    ) -> CLLocationCoordinate2D;
);

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "CoreLocation_CLFloor")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type CLFloor;
}

#[cfg(feature = "CoreLocation_CLFloor")]
unsafe impl NSCoding for CLFloor {}

#[cfg(feature = "CoreLocation_CLFloor")]
unsafe impl NSObjectProtocol for CLFloor {}

#[cfg(feature = "CoreLocation_CLFloor")]
unsafe impl NSSecureCoding for CLFloor {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "CoreLocation_CLFloor")]
    pub type CLFloor;

    #[objc2::method(sel = "level")]
    pub unsafe fn level(&self) -> NSInteger;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "CoreLocation_CLLocationSourceInformation")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type CLLocationSourceInformation;
}

#[cfg(feature = "CoreLocation_CLLocationSourceInformation")]
unsafe impl NSCoding for CLLocationSourceInformation {}

#[cfg(feature = "CoreLocation_CLLocationSourceInformation")]
unsafe impl NSObjectProtocol for CLLocationSourceInformation {}

#[cfg(feature = "CoreLocation_CLLocationSourceInformation")]
unsafe impl NSSecureCoding for CLLocationSourceInformation {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "CoreLocation_CLLocationSourceInformation")]
    pub type CLLocationSourceInformation;

    #[objc2::method(
        sel = "initWithSoftwareSimulationState:andExternalAccessoryState:",
        managed = "Init"
    )]
    pub unsafe fn initWithSoftwareSimulationState_andExternalAccessoryState(
        this: Option<Allocated<Self>>,
        is_software: bool,
        is_accessory: bool,
    ) -> Id<Self>;

    #[objc2::method(sel = "isSimulatedBySoftware")]
    pub unsafe fn isSimulatedBySoftware(&self) -> bool;

    #[objc2::method(sel = "isProducedByAccessory")]
    pub unsafe fn isProducedByAccessory(&self) -> bool;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "CoreLocation_CLLocation")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type CLLocation;
}

#[cfg(feature = "CoreLocation_CLLocation")]
unsafe impl NSCoding for CLLocation {}

#[cfg(feature = "CoreLocation_CLLocation")]
unsafe impl NSObjectProtocol for CLLocation {}

#[cfg(feature = "CoreLocation_CLLocation")]
unsafe impl NSSecureCoding for CLLocation {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "CoreLocation_CLLocation")]
    pub type CLLocation;

    #[objc2::method(sel = "initWithLatitude:longitude:", managed = "Init")]
    pub unsafe fn initWithLatitude_longitude(
        this: Option<Allocated<Self>>,
        latitude: CLLocationDegrees,
        longitude: CLLocationDegrees,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(
        sel = "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:",
        managed = "Init"
    )]
    pub unsafe fn initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_timestamp(
        this: Option<Allocated<Self>>,
        coordinate: CLLocationCoordinate2D,
        altitude: CLLocationDistance,
        h_accuracy: CLLocationAccuracy,
        v_accuracy: CLLocationAccuracy,
        timestamp: &NSDate,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(
        sel = "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:speed:timestamp:",
        managed = "Init"
    )]
    pub unsafe fn initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_course_speed_timestamp(
        this: Option<Allocated<Self>>,
        coordinate: CLLocationCoordinate2D,
        altitude: CLLocationDistance,
        h_accuracy: CLLocationAccuracy,
        v_accuracy: CLLocationAccuracy,
        course: CLLocationDirection,
        speed: CLLocationSpeed,
        timestamp: &NSDate,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(
        sel = "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:courseAccuracy:speed:speedAccuracy:timestamp:",
        managed = "Init"
    )]
    pub unsafe fn initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_course_courseAccuracy_speed_speedAccuracy_timestamp(
        this: Option<Allocated<Self>>,
        coordinate: CLLocationCoordinate2D,
        altitude: CLLocationDistance,
        h_accuracy: CLLocationAccuracy,
        v_accuracy: CLLocationAccuracy,
        course: CLLocationDirection,
        course_accuracy: CLLocationDirectionAccuracy,
        speed: CLLocationSpeed,
        speed_accuracy: CLLocationSpeedAccuracy,
        timestamp: &NSDate,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "CoreLocation_CLLocationSourceInformation",
        feature = "Foundation_NSDate"
    ))]
    #[objc2::method(
        sel = "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:courseAccuracy:speed:speedAccuracy:timestamp:sourceInfo:",
        managed = "Init"
    )]
    pub unsafe fn initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_course_courseAccuracy_speed_speedAccuracy_timestamp_sourceInfo(
        this: Option<Allocated<Self>>,
        coordinate: CLLocationCoordinate2D,
        altitude: CLLocationDistance,
        h_accuracy: CLLocationAccuracy,
        v_accuracy: CLLocationAccuracy,
        course: CLLocationDirection,
        course_accuracy: CLLocationDirectionAccuracy,
        speed: CLLocationSpeed,
        speed_accuracy: CLLocationSpeedAccuracy,
        timestamp: &NSDate,
        source_info: &CLLocationSourceInformation,
    ) -> Id<Self>;

    #[objc2::method(sel = "coordinate")]
    pub unsafe fn coordinate(&self) -> CLLocationCoordinate2D;

    #[objc2::method(sel = "altitude")]
    pub unsafe fn altitude(&self) -> CLLocationDistance;

    #[objc2::method(sel = "ellipsoidalAltitude")]
    pub unsafe fn ellipsoidalAltitude(&self) -> CLLocationDistance;

    #[objc2::method(sel = "horizontalAccuracy")]
    pub unsafe fn horizontalAccuracy(&self) -> CLLocationAccuracy;

    #[objc2::method(sel = "verticalAccuracy")]
    pub unsafe fn verticalAccuracy(&self) -> CLLocationAccuracy;

    #[objc2::method(sel = "course")]
    pub unsafe fn course(&self) -> CLLocationDirection;

    #[objc2::method(sel = "courseAccuracy")]
    pub unsafe fn courseAccuracy(&self) -> CLLocationDirectionAccuracy;

    #[objc2::method(sel = "speed")]
    pub unsafe fn speed(&self) -> CLLocationSpeed;

    #[objc2::method(sel = "speedAccuracy")]
    pub unsafe fn speedAccuracy(&self) -> CLLocationSpeedAccuracy;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "timestamp", managed = "Other")]
    pub unsafe fn timestamp(&self) -> Id<NSDate>;

    #[cfg(feature = "CoreLocation_CLFloor")]
    #[objc2::method(sel = "floor", managed = "Other")]
    pub unsafe fn floor(&self) -> Option<Id<CLFloor>>;

    #[cfg(feature = "CoreLocation_CLLocationSourceInformation")]
    #[objc2::method(sel = "sourceInformation", managed = "Other")]
    pub unsafe fn sourceInformation(&self) -> Option<Id<CLLocationSourceInformation>>;
}
