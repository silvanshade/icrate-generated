//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::MailKit::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum MEMessageState {
    MEMessageStateReceived = 0,
    MEMessageStateDraft = 1,
    MEMessageStateSending = 2,
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum MEMessageEncryptionState {
    MEMessageEncryptionStateUnknown = 0,
    MEMessageEncryptionStateNotEncrypted = 1,
    MEMessageEncryptionStateEncrypted = 2,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "MailKit_MEMessage")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MEMessage;
}

#[cfg(feature = "MailKit_MEMessage")]
unsafe impl NSCoding for MEMessage {}

#[cfg(feature = "MailKit_MEMessage")]
unsafe impl NSObjectProtocol for MEMessage {}

#[cfg(feature = "MailKit_MEMessage")]
unsafe impl NSSecureCoding for MEMessage {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MailKit_MEMessage")]
    pub type MEMessage;

    #[objc2::method(sel = "state")]
    pub unsafe fn state(&self) -> MEMessageState;

    #[objc2::method(sel = "encryptionState")]
    pub unsafe fn encryptionState(&self) -> MEMessageEncryptionState;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "subject", managed = "Other")]
    pub unsafe fn subject(&self) -> Id<NSString>;

    #[cfg(feature = "MailKit_MEEmailAddress")]
    #[objc2::method(sel = "fromAddress", managed = "Other")]
    pub unsafe fn fromAddress(&self) -> Id<MEEmailAddress>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "MailKit_MEEmailAddress"))]
    #[objc2::method(sel = "toAddresses", managed = "Other")]
    pub unsafe fn toAddresses(&self) -> Id<NSArray<MEEmailAddress>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "MailKit_MEEmailAddress"))]
    #[objc2::method(sel = "ccAddresses", managed = "Other")]
    pub unsafe fn ccAddresses(&self) -> Id<NSArray<MEEmailAddress>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "MailKit_MEEmailAddress"))]
    #[objc2::method(sel = "bccAddresses", managed = "Other")]
    pub unsafe fn bccAddresses(&self) -> Id<NSArray<MEEmailAddress>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "MailKit_MEEmailAddress"))]
    #[objc2::method(sel = "replyToAddresses", managed = "Other")]
    pub unsafe fn replyToAddresses(&self) -> Id<NSArray<MEEmailAddress>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "MailKit_MEEmailAddress"))]
    #[objc2::method(sel = "allRecipientAddresses", managed = "Other")]
    pub unsafe fn allRecipientAddresses(&self) -> Id<NSArray<MEEmailAddress>>;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "dateSent", managed = "Other")]
    pub unsafe fn dateSent(&self) -> Option<Id<NSDate>>;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "dateReceived", managed = "Other")]
    pub unsafe fn dateReceived(&self) -> Option<Id<NSDate>>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "headers", managed = "Other")]
    pub unsafe fn headers(&self) -> Option<Id<NSDictionary<NSString, NSArray<NSString>>>>;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "rawData", managed = "Other")]
    pub unsafe fn rawData(&self) -> Option<Id<NSData>>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;
}
