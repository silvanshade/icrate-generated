//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::MailKit::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "MailKit_MEComposeSession")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MEComposeSession;
}

#[cfg(feature = "MailKit_MEComposeSession")]
unsafe impl NSCoding for MEComposeSession {}

#[cfg(feature = "MailKit_MEComposeSession")]
unsafe impl NSObjectProtocol for MEComposeSession {}

#[cfg(feature = "MailKit_MEComposeSession")]
unsafe impl NSSecureCoding for MEComposeSession {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MailKit_MEComposeSession")]
    pub type MEComposeSession;

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(feature = "Foundation_NSUUID")]
    #[objc2::method(sel = "sessionID", managed = "Other")]
    pub unsafe fn sessionID(&self) -> Id<NSUUID>;

    #[cfg(feature = "MailKit_MEMessage")]
    #[objc2::method(sel = "mailMessage", managed = "Other")]
    pub unsafe fn mailMessage(&self) -> Id<MEMessage>;

    #[cfg(feature = "MailKit_MEComposeContext")]
    #[objc2::method(sel = "composeContext", managed = "Other")]
    pub unsafe fn composeContext(&self) -> Id<MEComposeContext>;

    #[objc2::method(sel = "reloadSession")]
    pub unsafe fn reloadSession(&self);
}

extern_static!(MEComposeSessionErrorDomain: &'static NSErrorDomain);

#[ns_error_enum]
#[underlying(NSInteger)]
pub enum MEComposeSessionErrorCode {
    MEComposeSessionErrorCodeInvalidRecipients = 0,
    MEComposeSessionErrorCodeInvalidHeaders = 1,
    MEComposeSessionErrorCodeInvalidBody = 2,
}

#[objc2::protocol]
pub unsafe trait MEComposeSessionHandler: NSObjectProtocol {
    #[cfg(feature = "MailKit_MEComposeSession")]
    #[objc2::method(sel = "mailComposeSessionDidBegin:")]
    unsafe fn mailComposeSessionDidBegin(&self, session: &MEComposeSession);

    #[cfg(feature = "MailKit_MEComposeSession")]
    #[objc2::method(sel = "mailComposeSessionDidEnd:")]
    unsafe fn mailComposeSessionDidEnd(&self, session: &MEComposeSession);

    #[cfg(all(
        feature = "MailKit_MEComposeSession",
        feature = "MailKit_MEExtensionViewController"
    ))]
    #[objc2::method(sel = "viewControllerForSession:", managed = "Other")]
    unsafe fn viewControllerForSession(
        &self,
        session: &MEComposeSession,
    ) -> Id<MEExtensionViewController>;

    #[cfg(all(
        feature = "Foundation_NSDictionary",
        feature = "MailKit_MEAddressAnnotation",
        feature = "MailKit_MEComposeSession",
        feature = "MailKit_MEEmailAddress"
    ))]
    #[objc2::method(optional, sel = "session:annotateAddressesWithCompletionHandler:")]
    unsafe fn session_annotateAddressesWithCompletionHandler(
        &self,
        session: &MEComposeSession,
        completion_handler: &Block<
            (NonNull<NSDictionary<MEEmailAddress, MEAddressAnnotation>>,),
            (),
        >,
    );

    #[cfg(all(feature = "Foundation_NSError", feature = "MailKit_MEComposeSession"))]
    #[objc2::method(optional, sel = "session:canSendMessageWithCompletionHandler:")]
    unsafe fn session_canSendMessageWithCompletionHandler(
        &self,
        session: &MEComposeSession,
        completion: &Block<(*mut NSError,), ()>,
    );

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSString",
        feature = "MailKit_MEComposeSession"
    ))]
    #[objc2::method(optional, sel = "additionalHeadersForSession:", managed = "Other")]
    unsafe fn additionalHeadersForSession(
        &self,
        session: &MEComposeSession,
    ) -> Id<NSDictionary<NSString, NSArray<NSString>>>;
}
