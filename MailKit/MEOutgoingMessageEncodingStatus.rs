//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::MailKit::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "MailKit_MEOutgoingMessageEncodingStatus")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MEOutgoingMessageEncodingStatus;
}

#[cfg(feature = "MailKit_MEOutgoingMessageEncodingStatus")]
unsafe impl NSCoding for MEOutgoingMessageEncodingStatus {}

#[cfg(feature = "MailKit_MEOutgoingMessageEncodingStatus")]
unsafe impl NSObjectProtocol for MEOutgoingMessageEncodingStatus {}

#[cfg(feature = "MailKit_MEOutgoingMessageEncodingStatus")]
unsafe impl NSSecureCoding for MEOutgoingMessageEncodingStatus {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MailKit_MEOutgoingMessageEncodingStatus")]
    pub type MEOutgoingMessageEncodingStatus;

    #[objc2::method(sel = "canSign")]
    pub unsafe fn canSign(&self) -> bool;

    #[objc2::method(sel = "canEncrypt")]
    pub unsafe fn canEncrypt(&self) -> bool;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "securityError", managed = "Other")]
    pub unsafe fn securityError(&self) -> Option<Id<NSError>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "MailKit_MEEmailAddress"))]
    #[objc2::method(sel = "addressesFailingEncryption", managed = "Other")]
    pub unsafe fn addressesFailingEncryption(&self) -> Id<NSArray<MEEmailAddress>>;

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError",
        feature = "MailKit_MEEmailAddress"
    ))]
    #[objc2::method(
        sel = "initWithCanSign:canEncrypt:securityError:addressesFailingEncryption:",
        managed = "Init"
    )]
    pub unsafe fn initWithCanSign_canEncrypt_securityError_addressesFailingEncryption(
        this: Option<Allocated<Self>>,
        can_sign: bool,
        can_encrypt: bool,
        security_error: Option<&NSError>,
        addresses_failing_encryption: &NSArray<MEEmailAddress>,
    ) -> Id<Self>;
}
