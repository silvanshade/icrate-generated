//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::MailKit::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "MailKit_MEMessageSecurityInformation")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MEMessageSecurityInformation;
}

#[cfg(feature = "MailKit_MEMessageSecurityInformation")]
unsafe impl NSCoding for MEMessageSecurityInformation {}

#[cfg(feature = "MailKit_MEMessageSecurityInformation")]
unsafe impl NSObjectProtocol for MEMessageSecurityInformation {}

#[cfg(feature = "MailKit_MEMessageSecurityInformation")]
unsafe impl NSSecureCoding for MEMessageSecurityInformation {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MailKit_MEMessageSecurityInformation")]
    pub type MEMessageSecurityInformation;

    #[cfg(all(feature = "Foundation_NSArray", feature = "MailKit_MEMessageSigner"))]
    #[objc2::method(sel = "signers", managed = "Other")]
    pub unsafe fn signers(&self) -> Id<NSArray<MEMessageSigner>>;

    #[objc2::method(sel = "isEncrypted")]
    pub unsafe fn isEncrypted(&self) -> bool;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "signingError", managed = "Other")]
    pub unsafe fn signingError(&self) -> Option<Id<NSError>>;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "encryptionError", managed = "Other")]
    pub unsafe fn encryptionError(&self) -> Option<Id<NSError>>;

    #[objc2::method(sel = "shouldBlockRemoteContent")]
    pub unsafe fn shouldBlockRemoteContent(&self) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "localizedRemoteContentBlockingReason", managed = "Other")]
    pub unsafe fn localizedRemoteContentBlockingReason(&self) -> Option<Id<NSString>>;

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError",
        feature = "MailKit_MEMessageSigner"
    ))]
    #[objc2::method(
        sel = "initWithSigners:isEncrypted:signingError:encryptionError:",
        managed = "Init"
    )]
    pub unsafe fn initWithSigners_isEncrypted_signingError_encryptionError(
        this: Option<Allocated<Self>>,
        signers: &NSArray<MEMessageSigner>,
        is_encrypted: bool,
        signing_error: Option<&NSError>,
        encryption_error: Option<&NSError>,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError",
        feature = "Foundation_NSString",
        feature = "MailKit_MEMessageSigner"
    ))]
    #[objc2::method(
        sel = "initWithSigners:isEncrypted:signingError:encryptionError:shouldBlockRemoteContent:localizedRemoteContentBlockingReason:",
        managed = "Init"
    )]
    pub unsafe fn initWithSigners_isEncrypted_signingError_encryptionError_shouldBlockRemoteContent_localizedRemoteContentBlockingReason(
        this: Option<Allocated<Self>>,
        signers: &NSArray<MEMessageSigner>,
        is_encrypted: bool,
        signing_error: Option<&NSError>,
        encryption_error: Option<&NSError>,
        should_block_remote_content: bool,
        localized_remote_content_blocking_reason: Option<&NSString>,
    ) -> Id<Self>;
}
