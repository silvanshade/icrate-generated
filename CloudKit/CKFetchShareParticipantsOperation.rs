//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CloudKit::*;
use crate::CoreLocation::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = CKOperation,
    unsafe inherits = [
        NSOperation,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKFetchShareParticipantsOperation")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type CKFetchShareParticipantsOperation;
}

#[cfg(feature = "CloudKit_CKFetchShareParticipantsOperation")]
unsafe impl NSObjectProtocol for CKFetchShareParticipantsOperation {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKFetchShareParticipantsOperation")]
    pub type CKFetchShareParticipantsOperation;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(all(
        feature = "CloudKit_CKUserIdentityLookupInfo",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(sel = "initWithUserIdentityLookupInfos:", managed = "Init")]
    pub unsafe fn initWithUserIdentityLookupInfos(
        this: Option<Allocated<Self>>,
        user_identity_lookup_infos: &NSArray<CKUserIdentityLookupInfo>,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "CloudKit_CKUserIdentityLookupInfo",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(sel = "userIdentityLookupInfos", managed = "Other")]
    pub unsafe fn userIdentityLookupInfos(&self) -> Option<Id<NSArray<CKUserIdentityLookupInfo>>>;

    #[cfg(all(
        feature = "CloudKit_CKUserIdentityLookupInfo",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(sel = "setUserIdentityLookupInfos:")]
    pub unsafe fn setUserIdentityLookupInfos(
        &self,
        user_identity_lookup_infos: Option<&NSArray<CKUserIdentityLookupInfo>>,
    );

    #[cfg(feature = "CloudKit_CKShareParticipant")]
    #[deprecated = "Use perShareParticipantCompletionBlock instead, which surfaces per-share-participant errors"]
    #[objc2::method(sel = "shareParticipantFetchedBlock")]
    pub unsafe fn shareParticipantFetchedBlock(
        &self,
    ) -> *mut Block<(NonNull<CKShareParticipant>,), ()>;

    #[cfg(feature = "CloudKit_CKShareParticipant")]
    #[deprecated = "Use perShareParticipantCompletionBlock instead, which surfaces per-share-participant errors"]
    #[objc2::method(sel = "setShareParticipantFetchedBlock:")]
    pub unsafe fn setShareParticipantFetchedBlock(
        &self,
        share_participant_fetched_block: Option<&Block<(NonNull<CKShareParticipant>,), ()>>,
    );

    #[cfg(all(
        feature = "CloudKit_CKShareParticipant",
        feature = "CloudKit_CKUserIdentityLookupInfo",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "perShareParticipantCompletionBlock")]
    pub unsafe fn perShareParticipantCompletionBlock(
        &self,
    ) -> *mut Block<
        (
            NonNull<CKUserIdentityLookupInfo>,
            *mut CKShareParticipant,
            *mut NSError,
        ),
        (),
    >;

    #[cfg(all(
        feature = "CloudKit_CKShareParticipant",
        feature = "CloudKit_CKUserIdentityLookupInfo",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "setPerShareParticipantCompletionBlock:")]
    pub unsafe fn setPerShareParticipantCompletionBlock(
        &self,
        per_share_participant_completion_block: Option<
            &Block<
                (
                    NonNull<CKUserIdentityLookupInfo>,
                    *mut CKShareParticipant,
                    *mut NSError,
                ),
                (),
            >,
        >,
    );

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "fetchShareParticipantsCompletionBlock")]
    pub unsafe fn fetchShareParticipantsCompletionBlock(&self) -> *mut Block<(*mut NSError,), ()>;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "setFetchShareParticipantsCompletionBlock:")]
    pub unsafe fn setFetchShareParticipantsCompletionBlock(
        &self,
        fetch_share_participants_completion_block: Option<&Block<(*mut NSError,), ()>>,
    );
}
