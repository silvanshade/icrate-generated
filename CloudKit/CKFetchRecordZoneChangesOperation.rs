//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CloudKit::*;
use crate::CoreLocation::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = CKDatabaseOperation,
    unsafe inherits = [
        CKOperation,
        NSOperation,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKFetchRecordZoneChangesOperation")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type CKFetchRecordZoneChangesOperation;
}

#[cfg(feature = "CloudKit_CKFetchRecordZoneChangesOperation")]
unsafe impl NSObjectProtocol for CKFetchRecordZoneChangesOperation {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKFetchRecordZoneChangesOperation")]
    pub type CKFetchRecordZoneChangesOperation;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(all(
        feature = "CloudKit_CKFetchRecordZoneChangesConfiguration",
        feature = "CloudKit_CKRecordZoneID",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSDictionary"
    ))]
    #[objc2::method(
        sel = "initWithRecordZoneIDs:configurationsByRecordZoneID:",
        managed = "Init"
    )]
    pub unsafe fn initWithRecordZoneIDs_configurationsByRecordZoneID(
        this: Option<Allocated<Self>>,
        record_zone_i_ds: &NSArray<CKRecordZoneID>,
        configurations_by_record_zone_id: Option<
            &NSDictionary<CKRecordZoneID, CKFetchRecordZoneChangesConfiguration>,
        >,
    ) -> Id<Self>;

    #[cfg(all(feature = "CloudKit_CKRecordZoneID", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "recordZoneIDs", managed = "Other")]
    pub unsafe fn recordZoneIDs(&self) -> Option<Id<NSArray<CKRecordZoneID>>>;

    #[cfg(all(feature = "CloudKit_CKRecordZoneID", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "setRecordZoneIDs:")]
    pub unsafe fn setRecordZoneIDs(&self, record_zone_i_ds: Option<&NSArray<CKRecordZoneID>>);

    #[cfg(all(
        feature = "CloudKit_CKFetchRecordZoneChangesConfiguration",
        feature = "CloudKit_CKRecordZoneID",
        feature = "Foundation_NSDictionary"
    ))]
    #[objc2::method(sel = "configurationsByRecordZoneID", managed = "Other")]
    pub unsafe fn configurationsByRecordZoneID(
        &self,
    ) -> Option<Id<NSDictionary<CKRecordZoneID, CKFetchRecordZoneChangesConfiguration>>>;

    #[cfg(all(
        feature = "CloudKit_CKFetchRecordZoneChangesConfiguration",
        feature = "CloudKit_CKRecordZoneID",
        feature = "Foundation_NSDictionary"
    ))]
    #[objc2::method(sel = "setConfigurationsByRecordZoneID:")]
    pub unsafe fn setConfigurationsByRecordZoneID(
        &self,
        configurations_by_record_zone_id: Option<
            &NSDictionary<CKRecordZoneID, CKFetchRecordZoneChangesConfiguration>,
        >,
    );

    #[objc2::method(sel = "fetchAllChanges")]
    pub unsafe fn fetchAllChanges(&self) -> bool;

    #[objc2::method(sel = "setFetchAllChanges:")]
    pub unsafe fn setFetchAllChanges(&self, fetch_all_changes: bool);

    #[cfg(feature = "CloudKit_CKRecord")]
    #[deprecated = "Use recordWasChangedBlock instead, which surfaces per-record errors"]
    #[objc2::method(sel = "recordChangedBlock")]
    pub unsafe fn recordChangedBlock(&self) -> *mut Block<(NonNull<CKRecord>,), ()>;

    #[cfg(feature = "CloudKit_CKRecord")]
    #[deprecated = "Use recordWasChangedBlock instead, which surfaces per-record errors"]
    #[objc2::method(sel = "setRecordChangedBlock:")]
    pub unsafe fn setRecordChangedBlock(
        &self,
        record_changed_block: Option<&Block<(NonNull<CKRecord>,), ()>>,
    );

    #[cfg(all(
        feature = "CloudKit_CKRecord",
        feature = "CloudKit_CKRecordID",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "recordWasChangedBlock")]
    pub unsafe fn recordWasChangedBlock(
        &self,
    ) -> *mut Block<(NonNull<CKRecordID>, *mut CKRecord, *mut NSError), ()>;

    #[cfg(all(
        feature = "CloudKit_CKRecord",
        feature = "CloudKit_CKRecordID",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "setRecordWasChangedBlock:")]
    pub unsafe fn setRecordWasChangedBlock(
        &self,
        record_was_changed_block: Option<
            &Block<(NonNull<CKRecordID>, *mut CKRecord, *mut NSError), ()>,
        >,
    );

    #[cfg(feature = "CloudKit_CKRecordID")]
    #[objc2::method(sel = "recordWithIDWasDeletedBlock")]
    pub unsafe fn recordWithIDWasDeletedBlock(
        &self,
    ) -> *mut Block<(NonNull<CKRecordID>, NonNull<CKRecordType>), ()>;

    #[cfg(feature = "CloudKit_CKRecordID")]
    #[objc2::method(sel = "setRecordWithIDWasDeletedBlock:")]
    pub unsafe fn setRecordWithIDWasDeletedBlock(
        &self,
        record_with_id_was_deleted_block: Option<
            &Block<(NonNull<CKRecordID>, NonNull<CKRecordType>), ()>,
        >,
    );

    #[cfg(all(
        feature = "CloudKit_CKRecordZoneID",
        feature = "CloudKit_CKServerChangeToken",
        feature = "Foundation_NSData"
    ))]
    #[objc2::method(sel = "recordZoneChangeTokensUpdatedBlock")]
    pub unsafe fn recordZoneChangeTokensUpdatedBlock(
        &self,
    ) -> *mut Block<
        (
            NonNull<CKRecordZoneID>,
            *mut CKServerChangeToken,
            *mut NSData,
        ),
        (),
    >;

    #[cfg(all(
        feature = "CloudKit_CKRecordZoneID",
        feature = "CloudKit_CKServerChangeToken",
        feature = "Foundation_NSData"
    ))]
    #[objc2::method(sel = "setRecordZoneChangeTokensUpdatedBlock:")]
    pub unsafe fn setRecordZoneChangeTokensUpdatedBlock(
        &self,
        record_zone_change_tokens_updated_block: Option<
            &Block<
                (
                    NonNull<CKRecordZoneID>,
                    *mut CKServerChangeToken,
                    *mut NSData,
                ),
                (),
            >,
        >,
    );

    #[cfg(all(
        feature = "CloudKit_CKRecordZoneID",
        feature = "CloudKit_CKServerChangeToken",
        feature = "Foundation_NSData",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "recordZoneFetchCompletionBlock")]
    pub unsafe fn recordZoneFetchCompletionBlock(
        &self,
    ) -> *mut Block<
        (
            NonNull<CKRecordZoneID>,
            *mut CKServerChangeToken,
            *mut NSData,
            Bool,
            *mut NSError,
        ),
        (),
    >;

    #[cfg(all(
        feature = "CloudKit_CKRecordZoneID",
        feature = "CloudKit_CKServerChangeToken",
        feature = "Foundation_NSData",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "setRecordZoneFetchCompletionBlock:")]
    pub unsafe fn setRecordZoneFetchCompletionBlock(
        &self,
        record_zone_fetch_completion_block: Option<
            &Block<
                (
                    NonNull<CKRecordZoneID>,
                    *mut CKServerChangeToken,
                    *mut NSData,
                    Bool,
                    *mut NSError,
                ),
                (),
            >,
        >,
    );

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "fetchRecordZoneChangesCompletionBlock")]
    pub unsafe fn fetchRecordZoneChangesCompletionBlock(&self) -> *mut Block<(*mut NSError,), ()>;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "setFetchRecordZoneChangesCompletionBlock:")]
    pub unsafe fn setFetchRecordZoneChangesCompletionBlock(
        &self,
        fetch_record_zone_changes_completion_block: Option<&Block<(*mut NSError,), ()>>,
    );
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKFetchRecordZoneChangesOperation")]
    pub type CKFetchRecordZoneChangesOperation;

    #[cfg(all(
        feature = "CloudKit_CKFetchRecordZoneChangesOptions",
        feature = "CloudKit_CKRecordZoneID",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSDictionary"
    ))]
    #[deprecated]
    #[objc2::method(sel = "initWithRecordZoneIDs:optionsByRecordZoneID:", managed = "Init")]
    pub unsafe fn initWithRecordZoneIDs_optionsByRecordZoneID(
        this: Option<Allocated<Self>>,
        record_zone_i_ds: &NSArray<CKRecordZoneID>,
        options_by_record_zone_id: Option<
            &NSDictionary<CKRecordZoneID, CKFetchRecordZoneChangesOptions>,
        >,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "CloudKit_CKFetchRecordZoneChangesOptions",
        feature = "CloudKit_CKRecordZoneID",
        feature = "Foundation_NSDictionary"
    ))]
    #[deprecated]
    #[objc2::method(sel = "optionsByRecordZoneID", managed = "Other")]
    pub unsafe fn optionsByRecordZoneID(
        &self,
    ) -> Option<Id<NSDictionary<CKRecordZoneID, CKFetchRecordZoneChangesOptions>>>;

    #[cfg(all(
        feature = "CloudKit_CKFetchRecordZoneChangesOptions",
        feature = "CloudKit_CKRecordZoneID",
        feature = "Foundation_NSDictionary"
    ))]
    #[deprecated]
    #[objc2::method(sel = "setOptionsByRecordZoneID:")]
    pub unsafe fn setOptionsByRecordZoneID(
        &self,
        options_by_record_zone_id: Option<
            &NSDictionary<CKRecordZoneID, CKFetchRecordZoneChangesOptions>,
        >,
    );
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKFetchRecordZoneChangesConfiguration")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type CKFetchRecordZoneChangesConfiguration;
}

#[cfg(feature = "CloudKit_CKFetchRecordZoneChangesConfiguration")]
unsafe impl NSCoding for CKFetchRecordZoneChangesConfiguration {}

#[cfg(feature = "CloudKit_CKFetchRecordZoneChangesConfiguration")]
unsafe impl NSObjectProtocol for CKFetchRecordZoneChangesConfiguration {}

#[cfg(feature = "CloudKit_CKFetchRecordZoneChangesConfiguration")]
unsafe impl NSSecureCoding for CKFetchRecordZoneChangesConfiguration {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKFetchRecordZoneChangesConfiguration")]
    pub type CKFetchRecordZoneChangesConfiguration;

    #[cfg(feature = "CloudKit_CKServerChangeToken")]
    #[objc2::method(sel = "previousServerChangeToken", managed = "Other")]
    pub unsafe fn previousServerChangeToken(&self) -> Option<Id<CKServerChangeToken>>;

    #[cfg(feature = "CloudKit_CKServerChangeToken")]
    #[objc2::method(sel = "setPreviousServerChangeToken:")]
    pub unsafe fn setPreviousServerChangeToken(
        &self,
        previous_server_change_token: Option<&CKServerChangeToken>,
    );

    #[objc2::method(sel = "resultsLimit")]
    pub unsafe fn resultsLimit(&self) -> NSUInteger;

    #[objc2::method(sel = "setResultsLimit:")]
    pub unsafe fn setResultsLimit(&self, results_limit: NSUInteger);

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "desiredKeys", managed = "Other")]
    pub unsafe fn desiredKeys(&self) -> Option<Id<NSArray<CKRecordFieldKey>>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "setDesiredKeys:")]
    pub unsafe fn setDesiredKeys(&self, desired_keys: Option<&NSArray<CKRecordFieldKey>>);
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[deprecated]
    #[cfg(feature = "CloudKit_CKFetchRecordZoneChangesOptions")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type CKFetchRecordZoneChangesOptions;
}

#[cfg(feature = "CloudKit_CKFetchRecordZoneChangesOptions")]
unsafe impl NSCoding for CKFetchRecordZoneChangesOptions {}

#[cfg(feature = "CloudKit_CKFetchRecordZoneChangesOptions")]
unsafe impl NSObjectProtocol for CKFetchRecordZoneChangesOptions {}

#[cfg(feature = "CloudKit_CKFetchRecordZoneChangesOptions")]
unsafe impl NSSecureCoding for CKFetchRecordZoneChangesOptions {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKFetchRecordZoneChangesOptions")]
    #[deprecated]
    pub type CKFetchRecordZoneChangesOptions;

    #[cfg(feature = "CloudKit_CKServerChangeToken")]
    #[objc2::method(sel = "previousServerChangeToken", managed = "Other")]
    pub unsafe fn previousServerChangeToken(&self) -> Option<Id<CKServerChangeToken>>;

    #[cfg(feature = "CloudKit_CKServerChangeToken")]
    #[objc2::method(sel = "setPreviousServerChangeToken:")]
    pub unsafe fn setPreviousServerChangeToken(
        &self,
        previous_server_change_token: Option<&CKServerChangeToken>,
    );

    #[objc2::method(sel = "resultsLimit")]
    pub unsafe fn resultsLimit(&self) -> NSUInteger;

    #[objc2::method(sel = "setResultsLimit:")]
    pub unsafe fn setResultsLimit(&self, results_limit: NSUInteger);

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "desiredKeys", managed = "Other")]
    pub unsafe fn desiredKeys(&self) -> Option<Id<NSArray<CKRecordFieldKey>>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "setDesiredKeys:")]
    pub unsafe fn setDesiredKeys(&self, desired_keys: Option<&NSArray<CKRecordFieldKey>>);
}
