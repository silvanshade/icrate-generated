//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CloudKit::*;
use crate::CoreLocation::*;
use crate::Foundation::*;

extern_static!(CKCurrentUserDefaultName: &'static NSString);

extern_static!(CKOwnerDefaultName: &'static NSString);

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKContainer")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type CKContainer;
}

#[cfg(feature = "CloudKit_CKContainer")]
unsafe impl NSObjectProtocol for CKContainer {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKContainer")]
    pub type CKContainer;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;

    #[objc2::method(sel = "defaultContainer", managed = "Other")]
    pub unsafe fn defaultContainer() -> Id<CKContainer>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "containerWithIdentifier:", managed = "Other")]
    pub unsafe fn containerWithIdentifier(container_identifier: &NSString) -> Id<CKContainer>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "containerIdentifier", managed = "Other")]
    pub unsafe fn containerIdentifier(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "CloudKit_CKOperation")]
    #[objc2::method(sel = "addOperation:")]
    pub unsafe fn addOperation(&self, operation: &CKOperation);
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKContainer")]
    pub type CKContainer;

    #[cfg(feature = "CloudKit_CKDatabase")]
    #[objc2::method(sel = "privateCloudDatabase", managed = "Other")]
    pub unsafe fn privateCloudDatabase(&self) -> Id<CKDatabase>;

    #[cfg(feature = "CloudKit_CKDatabase")]
    #[objc2::method(sel = "publicCloudDatabase", managed = "Other")]
    pub unsafe fn publicCloudDatabase(&self) -> Id<CKDatabase>;

    #[cfg(feature = "CloudKit_CKDatabase")]
    #[objc2::method(sel = "sharedCloudDatabase", managed = "Other")]
    pub unsafe fn sharedCloudDatabase(&self) -> Id<CKDatabase>;

    #[cfg(feature = "CloudKit_CKDatabase")]
    #[objc2::method(sel = "databaseWithDatabaseScope:", managed = "Other")]
    pub unsafe fn databaseWithDatabaseScope(
        &self,
        database_scope: CKDatabaseScope,
    ) -> Id<CKDatabase>;
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum CKAccountStatus {
    CKAccountStatusCouldNotDetermine = 0,
    CKAccountStatusAvailable = 1,
    CKAccountStatusRestricted = 2,
    CKAccountStatusNoAccount = 3,
    CKAccountStatusTemporarilyUnavailable = 4,
}

extern_static!(CKAccountChangedNotification: &'static NSString);

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKContainer")]
    pub type CKContainer;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "accountStatusWithCompletionHandler:")]
    pub unsafe fn accountStatusWithCompletionHandler(
        &self,
        completion_handler: &Block<(CKAccountStatus, *mut NSError), ()>,
    );
}

#[ns_options]
#[underlying(NSUInteger)]
pub enum CKApplicationPermissions {
    CKApplicationPermissionUserDiscoverability = 1 << 0,
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum CKApplicationPermissionStatus {
    CKApplicationPermissionStatusInitialState = 0,
    CKApplicationPermissionStatusCouldNotComplete = 1,
    CKApplicationPermissionStatusDenied = 2,
    CKApplicationPermissionStatusGranted = 3,
}

pub type CKApplicationPermissionBlock =
    *mut Block<(CKApplicationPermissionStatus, *mut NSError), ()>;

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKContainer")]
    pub type CKContainer;

    #[objc2::method(sel = "statusForApplicationPermission:completionHandler:")]
    pub unsafe fn statusForApplicationPermission_completionHandler(
        &self,
        application_permission: CKApplicationPermissions,
        completion_handler: CKApplicationPermissionBlock,
    );

    #[objc2::method(sel = "requestApplicationPermission:completionHandler:")]
    pub unsafe fn requestApplicationPermission_completionHandler(
        &self,
        application_permission: CKApplicationPermissions,
        completion_handler: CKApplicationPermissionBlock,
    );
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKContainer")]
    pub type CKContainer;

    #[cfg(all(feature = "CloudKit_CKRecordID", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "fetchUserRecordIDWithCompletionHandler:")]
    pub unsafe fn fetchUserRecordIDWithCompletionHandler(
        &self,
        completion_handler: &Block<(*mut CKRecordID, *mut NSError), ()>,
    );

    #[cfg(all(
        feature = "CloudKit_CKUserIdentity",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "discoverAllIdentitiesWithCompletionHandler:")]
    pub unsafe fn discoverAllIdentitiesWithCompletionHandler(
        &self,
        completion_handler: &Block<(*mut NSArray<CKUserIdentity>, *mut NSError), ()>,
    );

    #[cfg(all(
        feature = "CloudKit_CKUserIdentity",
        feature = "Foundation_NSError",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "discoverUserIdentityWithEmailAddress:completionHandler:")]
    pub unsafe fn discoverUserIdentityWithEmailAddress_completionHandler(
        &self,
        email: &NSString,
        completion_handler: &Block<(*mut CKUserIdentity, *mut NSError), ()>,
    );

    #[cfg(all(
        feature = "CloudKit_CKUserIdentity",
        feature = "Foundation_NSError",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "discoverUserIdentityWithPhoneNumber:completionHandler:")]
    pub unsafe fn discoverUserIdentityWithPhoneNumber_completionHandler(
        &self,
        phone_number: &NSString,
        completion_handler: &Block<(*mut CKUserIdentity, *mut NSError), ()>,
    );

    #[cfg(all(
        feature = "CloudKit_CKRecordID",
        feature = "CloudKit_CKUserIdentity",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "discoverUserIdentityWithUserRecordID:completionHandler:")]
    pub unsafe fn discoverUserIdentityWithUserRecordID_completionHandler(
        &self,
        user_record_id: &CKRecordID,
        completion_handler: &Block<(*mut CKUserIdentity, *mut NSError), ()>,
    );
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKContainer")]
    pub type CKContainer;

    #[cfg(all(
        feature = "CloudKit_CKShareParticipant",
        feature = "Foundation_NSError",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "fetchShareParticipantWithEmailAddress:completionHandler:")]
    pub unsafe fn fetchShareParticipantWithEmailAddress_completionHandler(
        &self,
        email_address: &NSString,
        completion_handler: &Block<(*mut CKShareParticipant, *mut NSError), ()>,
    );

    #[cfg(all(
        feature = "CloudKit_CKShareParticipant",
        feature = "Foundation_NSError",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "fetchShareParticipantWithPhoneNumber:completionHandler:")]
    pub unsafe fn fetchShareParticipantWithPhoneNumber_completionHandler(
        &self,
        phone_number: &NSString,
        completion_handler: &Block<(*mut CKShareParticipant, *mut NSError), ()>,
    );

    #[cfg(all(
        feature = "CloudKit_CKRecordID",
        feature = "CloudKit_CKShareParticipant",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "fetchShareParticipantWithUserRecordID:completionHandler:")]
    pub unsafe fn fetchShareParticipantWithUserRecordID_completionHandler(
        &self,
        user_record_id: &CKRecordID,
        completion_handler: &Block<(*mut CKShareParticipant, *mut NSError), ()>,
    );

    #[cfg(all(
        feature = "CloudKit_CKShareMetadata",
        feature = "Foundation_NSError",
        feature = "Foundation_NSURL"
    ))]
    #[objc2::method(sel = "fetchShareMetadataWithURL:completionHandler:")]
    pub unsafe fn fetchShareMetadataWithURL_completionHandler(
        &self,
        url: &NSURL,
        completion_handler: &Block<(*mut CKShareMetadata, *mut NSError), ()>,
    );

    #[cfg(all(
        feature = "CloudKit_CKShare",
        feature = "CloudKit_CKShareMetadata",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "acceptShareMetadata:completionHandler:")]
    pub unsafe fn acceptShareMetadata_completionHandler(
        &self,
        metadata: &CKShareMetadata,
        completion_handler: &Block<(*mut CKShare, *mut NSError), ()>,
    );
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKContainer")]
    pub type CKContainer;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "fetchAllLongLivedOperationIDsWithCompletionHandler:")]
    pub unsafe fn fetchAllLongLivedOperationIDsWithCompletionHandler(
        &self,
        completion_handler: &Block<(*mut NSArray<CKOperationID>, *mut NSError), ()>,
    );

    #[cfg(all(feature = "CloudKit_CKOperation", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "fetchLongLivedOperationWithID:completionHandler:")]
    pub unsafe fn fetchLongLivedOperationWithID_completionHandler(
        &self,
        operation_id: &CKOperationID,
        completion_handler: &Block<(*mut CKOperation, *mut NSError), ()>,
    );
}
