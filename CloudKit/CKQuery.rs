//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CloudKit::*;
use crate::CoreLocation::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKQuery")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type CKQuery;
}

#[cfg(feature = "CloudKit_CKQuery")]
unsafe impl NSCoding for CKQuery {}

#[cfg(feature = "CloudKit_CKQuery")]
unsafe impl NSObjectProtocol for CKQuery {}

#[cfg(feature = "CloudKit_CKQuery")]
unsafe impl NSSecureCoding for CKQuery {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKQuery")]
    pub type CKQuery;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, a_decoder: &NSCoder) -> Id<Self>;

    #[cfg(feature = "Foundation_NSPredicate")]
    #[objc2::method(sel = "initWithRecordType:predicate:", managed = "Init")]
    pub unsafe fn initWithRecordType_predicate(
        this: Option<Allocated<Self>>,
        record_type: &CKRecordType,
        predicate: &NSPredicate,
    ) -> Id<Self>;

    #[objc2::method(sel = "recordType", managed = "Other")]
    pub unsafe fn recordType(&self) -> Id<CKRecordType>;

    #[cfg(feature = "Foundation_NSPredicate")]
    #[objc2::method(sel = "predicate", managed = "Other")]
    pub unsafe fn predicate(&self) -> Id<NSPredicate>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSSortDescriptor"
    ))]
    #[objc2::method(sel = "sortDescriptors", managed = "Other")]
    pub unsafe fn sortDescriptors(&self) -> Option<Id<NSArray<NSSortDescriptor>>>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSSortDescriptor"
    ))]
    #[objc2::method(sel = "setSortDescriptors:")]
    pub unsafe fn setSortDescriptors(&self, sort_descriptors: Option<&NSArray<NSSortDescriptor>>);
}
