//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CloudKit::*;
use crate::CoreLocation::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = CKDatabaseOperation,
    unsafe inherits = [
        CKOperation,
        NSOperation,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKFetchRecordsOperation")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type CKFetchRecordsOperation;
}

#[cfg(feature = "CloudKit_CKFetchRecordsOperation")]
unsafe impl NSObjectProtocol for CKFetchRecordsOperation {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKFetchRecordsOperation")]
    pub type CKFetchRecordsOperation;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(all(feature = "CloudKit_CKRecordID", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "initWithRecordIDs:", managed = "Init")]
    pub unsafe fn initWithRecordIDs(
        this: Option<Allocated<Self>>,
        record_i_ds: &NSArray<CKRecordID>,
    ) -> Id<Self>;

    #[objc2::method(sel = "fetchCurrentUserRecordOperation", managed = "Other")]
    pub unsafe fn fetchCurrentUserRecordOperation() -> Id<Self>;

    #[cfg(all(feature = "CloudKit_CKRecordID", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "recordIDs", managed = "Other")]
    pub unsafe fn recordIDs(&self) -> Option<Id<NSArray<CKRecordID>>>;

    #[cfg(all(feature = "CloudKit_CKRecordID", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "setRecordIDs:")]
    pub unsafe fn setRecordIDs(&self, record_i_ds: Option<&NSArray<CKRecordID>>);

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "desiredKeys", managed = "Other")]
    pub unsafe fn desiredKeys(&self) -> Option<Id<NSArray<CKRecordFieldKey>>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "setDesiredKeys:")]
    pub unsafe fn setDesiredKeys(&self, desired_keys: Option<&NSArray<CKRecordFieldKey>>);

    #[cfg(feature = "CloudKit_CKRecordID")]
    #[objc2::method(sel = "perRecordProgressBlock")]
    pub unsafe fn perRecordProgressBlock(&self) -> *mut Block<(NonNull<CKRecordID>, c_double), ()>;

    #[cfg(feature = "CloudKit_CKRecordID")]
    #[objc2::method(sel = "setPerRecordProgressBlock:")]
    pub unsafe fn setPerRecordProgressBlock(
        &self,
        per_record_progress_block: Option<&Block<(NonNull<CKRecordID>, c_double), ()>>,
    );

    #[cfg(all(
        feature = "CloudKit_CKRecord",
        feature = "CloudKit_CKRecordID",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "perRecordCompletionBlock")]
    pub unsafe fn perRecordCompletionBlock(
        &self,
    ) -> *mut Block<(*mut CKRecord, *mut CKRecordID, *mut NSError), ()>;

    #[cfg(all(
        feature = "CloudKit_CKRecord",
        feature = "CloudKit_CKRecordID",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "setPerRecordCompletionBlock:")]
    pub unsafe fn setPerRecordCompletionBlock(
        &self,
        per_record_completion_block: Option<
            &Block<(*mut CKRecord, *mut CKRecordID, *mut NSError), ()>,
        >,
    );

    #[cfg(all(
        feature = "CloudKit_CKRecord",
        feature = "CloudKit_CKRecordID",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "fetchRecordsCompletionBlock")]
    pub unsafe fn fetchRecordsCompletionBlock(
        &self,
    ) -> *mut Block<(*mut NSDictionary<CKRecordID, CKRecord>, *mut NSError), ()>;

    #[cfg(all(
        feature = "CloudKit_CKRecord",
        feature = "CloudKit_CKRecordID",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "setFetchRecordsCompletionBlock:")]
    pub unsafe fn setFetchRecordsCompletionBlock(
        &self,
        fetch_records_completion_block: Option<
            &Block<(*mut NSDictionary<CKRecordID, CKRecord>, *mut NSError), ()>,
        >,
    );
}
