//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CloudKit::*;
use crate::CoreLocation::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = CKDatabaseOperation,
    unsafe inherits = [
        CKOperation,
        NSOperation,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKFetchWebAuthTokenOperation")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type CKFetchWebAuthTokenOperation;
}

#[cfg(feature = "CloudKit_CKFetchWebAuthTokenOperation")]
unsafe impl NSObjectProtocol for CKFetchWebAuthTokenOperation {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKFetchWebAuthTokenOperation")]
    pub type CKFetchWebAuthTokenOperation;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithAPIToken:", managed = "Init")]
    pub unsafe fn initWithAPIToken(this: Option<Allocated<Self>>, api_token: &NSString)
        -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "APIToken", managed = "Other")]
    pub unsafe fn APIToken(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setAPIToken:")]
    pub unsafe fn setAPIToken(&self, api_token: Option<&NSString>);

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "fetchWebAuthTokenCompletionBlock")]
    pub unsafe fn fetchWebAuthTokenCompletionBlock(
        &self,
    ) -> *mut Block<(*mut NSString, *mut NSError), ()>;

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setFetchWebAuthTokenCompletionBlock:")]
    pub unsafe fn setFetchWebAuthTokenCompletionBlock(
        &self,
        fetch_web_auth_token_completion_block: Option<&Block<(*mut NSString, *mut NSError), ()>>,
    );
}
