//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CloudKit::*;
use crate::CoreLocation::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum CKRecordSavePolicy {
    CKRecordSaveIfServerRecordUnchanged = 0,
    CKRecordSaveChangedKeys = 1,
    CKRecordSaveAllKeys = 2,
}

#[objc2::interface(
    unsafe super = CKDatabaseOperation,
    unsafe inherits = [
        CKOperation,
        NSOperation,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKModifyRecordsOperation")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type CKModifyRecordsOperation;
}

#[cfg(feature = "CloudKit_CKModifyRecordsOperation")]
unsafe impl NSObjectProtocol for CKModifyRecordsOperation {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKModifyRecordsOperation")]
    pub type CKModifyRecordsOperation;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(all(
        feature = "CloudKit_CKRecord",
        feature = "CloudKit_CKRecordID",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(sel = "initWithRecordsToSave:recordIDsToDelete:", managed = "Init")]
    pub unsafe fn initWithRecordsToSave_recordIDsToDelete(
        this: Option<Allocated<Self>>,
        records: Option<&NSArray<CKRecord>>,
        record_i_ds: Option<&NSArray<CKRecordID>>,
    ) -> Id<Self>;

    #[cfg(all(feature = "CloudKit_CKRecord", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "recordsToSave", managed = "Other")]
    pub unsafe fn recordsToSave(&self) -> Option<Id<NSArray<CKRecord>>>;

    #[cfg(all(feature = "CloudKit_CKRecord", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "setRecordsToSave:")]
    pub unsafe fn setRecordsToSave(&self, records_to_save: Option<&NSArray<CKRecord>>);

    #[cfg(all(feature = "CloudKit_CKRecordID", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "recordIDsToDelete", managed = "Other")]
    pub unsafe fn recordIDsToDelete(&self) -> Option<Id<NSArray<CKRecordID>>>;

    #[cfg(all(feature = "CloudKit_CKRecordID", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "setRecordIDsToDelete:")]
    pub unsafe fn setRecordIDsToDelete(&self, record_i_ds_to_delete: Option<&NSArray<CKRecordID>>);

    #[objc2::method(sel = "savePolicy")]
    pub unsafe fn savePolicy(&self) -> CKRecordSavePolicy;

    #[objc2::method(sel = "setSavePolicy:")]
    pub unsafe fn setSavePolicy(&self, save_policy: CKRecordSavePolicy);

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "clientChangeTokenData", managed = "Other")]
    pub unsafe fn clientChangeTokenData(&self) -> Option<Id<NSData>>;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "setClientChangeTokenData:")]
    pub unsafe fn setClientChangeTokenData(&self, client_change_token_data: Option<&NSData>);

    #[objc2::method(sel = "atomic")]
    pub unsafe fn atomic(&self) -> bool;

    #[objc2::method(sel = "setAtomic:")]
    pub unsafe fn setAtomic(&self, atomic: bool);

    #[cfg(feature = "CloudKit_CKRecord")]
    #[objc2::method(sel = "perRecordProgressBlock")]
    pub unsafe fn perRecordProgressBlock(&self) -> *mut Block<(NonNull<CKRecord>, c_double), ()>;

    #[cfg(feature = "CloudKit_CKRecord")]
    #[objc2::method(sel = "setPerRecordProgressBlock:")]
    pub unsafe fn setPerRecordProgressBlock(
        &self,
        per_record_progress_block: Option<&Block<(NonNull<CKRecord>, c_double), ()>>,
    );

    #[cfg(all(feature = "CloudKit_CKRecord", feature = "Foundation_NSError"))]
    #[deprecated]
    #[objc2::method(sel = "perRecordCompletionBlock")]
    pub unsafe fn perRecordCompletionBlock(
        &self,
    ) -> *mut Block<(NonNull<CKRecord>, *mut NSError), ()>;

    #[cfg(all(feature = "CloudKit_CKRecord", feature = "Foundation_NSError"))]
    #[deprecated]
    #[objc2::method(sel = "setPerRecordCompletionBlock:")]
    pub unsafe fn setPerRecordCompletionBlock(
        &self,
        per_record_completion_block: Option<&Block<(NonNull<CKRecord>, *mut NSError), ()>>,
    );

    #[cfg(all(
        feature = "CloudKit_CKRecord",
        feature = "CloudKit_CKRecordID",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "perRecordSaveBlock")]
    pub unsafe fn perRecordSaveBlock(
        &self,
    ) -> *mut Block<(NonNull<CKRecordID>, *mut CKRecord, *mut NSError), ()>;

    #[cfg(all(
        feature = "CloudKit_CKRecord",
        feature = "CloudKit_CKRecordID",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "setPerRecordSaveBlock:")]
    pub unsafe fn setPerRecordSaveBlock(
        &self,
        per_record_save_block: Option<
            &Block<(NonNull<CKRecordID>, *mut CKRecord, *mut NSError), ()>,
        >,
    );

    #[cfg(all(feature = "CloudKit_CKRecordID", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "perRecordDeleteBlock")]
    pub unsafe fn perRecordDeleteBlock(
        &self,
    ) -> *mut Block<(NonNull<CKRecordID>, *mut NSError), ()>;

    #[cfg(all(feature = "CloudKit_CKRecordID", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "setPerRecordDeleteBlock:")]
    pub unsafe fn setPerRecordDeleteBlock(
        &self,
        per_record_delete_block: Option<&Block<(NonNull<CKRecordID>, *mut NSError), ()>>,
    );

    #[cfg(all(
        feature = "CloudKit_CKRecord",
        feature = "CloudKit_CKRecordID",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "modifyRecordsCompletionBlock")]
    pub unsafe fn modifyRecordsCompletionBlock(
        &self,
    ) -> *mut Block<
        (
            *mut NSArray<CKRecord>,
            *mut NSArray<CKRecordID>,
            *mut NSError,
        ),
        (),
    >;

    #[cfg(all(
        feature = "CloudKit_CKRecord",
        feature = "CloudKit_CKRecordID",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "setModifyRecordsCompletionBlock:")]
    pub unsafe fn setModifyRecordsCompletionBlock(
        &self,
        modify_records_completion_block: Option<
            &Block<
                (
                    *mut NSArray<CKRecord>,
                    *mut NSArray<CKRecordID>,
                    *mut NSError,
                ),
                (),
            >,
        >,
    );
}
