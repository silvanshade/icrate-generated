//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CloudKit::*;
use crate::CoreLocation::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKNotificationID")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type CKNotificationID;
}

#[cfg(feature = "CloudKit_CKNotificationID")]
unsafe impl NSCoding for CKNotificationID {}

#[cfg(feature = "CloudKit_CKNotificationID")]
unsafe impl NSObjectProtocol for CKNotificationID {}

#[cfg(feature = "CloudKit_CKNotificationID")]
unsafe impl NSSecureCoding for CKNotificationID {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKNotificationID")]
    pub type CKNotificationID;
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum CKNotificationType {
    CKNotificationTypeQuery = 1,
    CKNotificationTypeRecordZone = 2,
    CKNotificationTypeReadNotification = 3,
    CKNotificationTypeDatabase = 4,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKNotification")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type CKNotification;
}

#[cfg(feature = "CloudKit_CKNotification")]
unsafe impl NSObjectProtocol for CKNotification {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKNotification")]
    pub type CKNotification;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;

    #[cfg(feature = "Foundation_NSDictionary")]
    #[objc2::method(
        sel = "notificationFromRemoteNotificationDictionary:",
        managed = "Other"
    )]
    pub unsafe fn notificationFromRemoteNotificationDictionary(
        notification_dictionary: &NSDictionary,
    ) -> Option<Id<Self>>;

    #[objc2::method(sel = "notificationType")]
    pub unsafe fn notificationType(&self) -> CKNotificationType;

    #[cfg(feature = "CloudKit_CKNotificationID")]
    #[objc2::method(sel = "notificationID", managed = "Other")]
    pub unsafe fn notificationID(&self) -> Option<Id<CKNotificationID>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "containerIdentifier", managed = "Other")]
    pub unsafe fn containerIdentifier(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "CloudKit_CKRecordID")]
    #[objc2::method(sel = "subscriptionOwnerUserRecordID", managed = "Other")]
    pub unsafe fn subscriptionOwnerUserRecordID(&self) -> Option<Id<CKRecordID>>;

    #[objc2::method(sel = "isPruned")]
    pub unsafe fn isPruned(&self) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "alertBody", managed = "Other")]
    pub unsafe fn alertBody(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "alertLocalizationKey", managed = "Other")]
    pub unsafe fn alertLocalizationKey(&self) -> Option<Id<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "alertLocalizationArgs", managed = "Other")]
    pub unsafe fn alertLocalizationArgs(&self) -> Option<Id<NSArray<NSString>>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "title", managed = "Other")]
    pub unsafe fn title(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "titleLocalizationKey", managed = "Other")]
    pub unsafe fn titleLocalizationKey(&self) -> Option<Id<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "titleLocalizationArgs", managed = "Other")]
    pub unsafe fn titleLocalizationArgs(&self) -> Option<Id<NSArray<NSString>>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "subtitle", managed = "Other")]
    pub unsafe fn subtitle(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "subtitleLocalizationKey", managed = "Other")]
    pub unsafe fn subtitleLocalizationKey(&self) -> Option<Id<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "subtitleLocalizationArgs", managed = "Other")]
    pub unsafe fn subtitleLocalizationArgs(&self) -> Option<Id<NSArray<NSString>>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "alertActionLocalizationKey", managed = "Other")]
    pub unsafe fn alertActionLocalizationKey(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "alertLaunchImage", managed = "Other")]
    pub unsafe fn alertLaunchImage(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSNumber")]
    #[objc2::method(sel = "badge", managed = "Other")]
    pub unsafe fn badge(&self) -> Option<Id<NSNumber>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "soundName", managed = "Other")]
    pub unsafe fn soundName(&self) -> Option<Id<NSString>>;

    #[objc2::method(sel = "subscriptionID", managed = "Other")]
    pub unsafe fn subscriptionID(&self) -> Option<Id<CKSubscriptionID>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "category", managed = "Other")]
    pub unsafe fn category(&self) -> Option<Id<NSString>>;
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum CKQueryNotificationReason {
    CKQueryNotificationReasonRecordCreated = 1,
    CKQueryNotificationReasonRecordUpdated = 2,
    CKQueryNotificationReasonRecordDeleted = 3,
}

#[objc2::interface(
    unsafe super = CKNotification,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKQueryNotification")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type CKQueryNotification;
}

#[cfg(feature = "CloudKit_CKQueryNotification")]
unsafe impl NSObjectProtocol for CKQueryNotification {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKQueryNotification")]
    pub type CKQueryNotification;

    #[objc2::method(sel = "queryNotificationReason")]
    pub unsafe fn queryNotificationReason(&self) -> CKQueryNotificationReason;

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "recordFields", managed = "Other")]
    pub unsafe fn recordFields(&self) -> Option<Id<NSDictionary<NSString, Object>>>;

    #[cfg(feature = "CloudKit_CKRecordID")]
    #[objc2::method(sel = "recordID", managed = "Other")]
    pub unsafe fn recordID(&self) -> Option<Id<CKRecordID>>;

    #[objc2::method(sel = "databaseScope")]
    pub unsafe fn databaseScope(&self) -> CKDatabaseScope;
}

#[objc2::interface(
    unsafe super = CKNotification,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKRecordZoneNotification")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type CKRecordZoneNotification;
}

#[cfg(feature = "CloudKit_CKRecordZoneNotification")]
unsafe impl NSObjectProtocol for CKRecordZoneNotification {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKRecordZoneNotification")]
    pub type CKRecordZoneNotification;

    #[cfg(feature = "CloudKit_CKRecordZoneID")]
    #[objc2::method(sel = "recordZoneID", managed = "Other")]
    pub unsafe fn recordZoneID(&self) -> Option<Id<CKRecordZoneID>>;

    #[objc2::method(sel = "databaseScope")]
    pub unsafe fn databaseScope(&self) -> CKDatabaseScope;
}

#[objc2::interface(
    unsafe super = CKNotification,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKDatabaseNotification")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type CKDatabaseNotification;
}

#[cfg(feature = "CloudKit_CKDatabaseNotification")]
unsafe impl NSObjectProtocol for CKDatabaseNotification {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKDatabaseNotification")]
    pub type CKDatabaseNotification;

    #[objc2::method(sel = "databaseScope")]
    pub unsafe fn databaseScope(&self) -> CKDatabaseScope;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `CKNotification`
    #[cfg(feature = "CloudKit_CKQueryNotification")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKQueryNotification")]
    pub type CKQueryNotification;

    #[cfg(feature = "Foundation_NSDictionary")]
    #[objc2::method(
        sel = "notificationFromRemoteNotificationDictionary:",
        managed = "Other"
    )]
    pub unsafe fn notificationFromRemoteNotificationDictionary(
        notification_dictionary: &NSDictionary,
    ) -> Option<Id<Self>>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `CKNotification`
    #[cfg(feature = "CloudKit_CKRecordZoneNotification")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKRecordZoneNotification")]
    pub type CKRecordZoneNotification;

    #[cfg(feature = "Foundation_NSDictionary")]
    #[objc2::method(
        sel = "notificationFromRemoteNotificationDictionary:",
        managed = "Other"
    )]
    pub unsafe fn notificationFromRemoteNotificationDictionary(
        notification_dictionary: &NSDictionary,
    ) -> Option<Id<Self>>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `CKNotification`
    #[cfg(feature = "CloudKit_CKDatabaseNotification")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "CloudKit_CKDatabaseNotification")]
    pub type CKDatabaseNotification;

    #[cfg(feature = "Foundation_NSDictionary")]
    #[objc2::method(
        sel = "notificationFromRemoteNotificationDictionary:",
        managed = "Other"
    )]
    pub unsafe fn notificationFromRemoteNotificationDictionary(
        notification_dictionary: &NSDictionary,
    ) -> Option<Id<Self>>;
}
