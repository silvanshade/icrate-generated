//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreLocation::*;
use crate::EventKit::*;
use crate::Foundation::*;
use crate::MapKit::*;

#[objc2::interface(
    unsafe super = EKObject,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "EventKit_EKRecurrenceRule")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type EKRecurrenceRule;
}

#[cfg(feature = "EventKit_EKRecurrenceRule")]
unsafe impl NSObjectProtocol for EKRecurrenceRule {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "EventKit_EKRecurrenceRule")]
    pub type EKRecurrenceRule;

    #[cfg(feature = "EventKit_EKRecurrenceEnd")]
    #[objc2::method(sel = "initRecurrenceWithFrequency:interval:end:", managed = "Init")]
    pub unsafe fn initRecurrenceWithFrequency_interval_end(
        this: Option<Allocated<Self>>,
        r#type: EKRecurrenceFrequency,
        interval: NSInteger,
        end: Option<&EKRecurrenceEnd>,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "EventKit_EKRecurrenceDayOfWeek",
        feature = "EventKit_EKRecurrenceEnd",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSNumber"
    ))]
    #[objc2::method(
        sel = "initRecurrenceWithFrequency:interval:daysOfTheWeek:daysOfTheMonth:monthsOfTheYear:weeksOfTheYear:daysOfTheYear:setPositions:end:",
        managed = "Init"
    )]
    pub unsafe fn initRecurrenceWithFrequency_interval_daysOfTheWeek_daysOfTheMonth_monthsOfTheYear_weeksOfTheYear_daysOfTheYear_setPositions_end(
        this: Option<Allocated<Self>>,
        r#type: EKRecurrenceFrequency,
        interval: NSInteger,
        days: Option<&NSArray<EKRecurrenceDayOfWeek>>,
        month_days: Option<&NSArray<NSNumber>>,
        months: Option<&NSArray<NSNumber>>,
        weeks_of_the_year: Option<&NSArray<NSNumber>>,
        days_of_the_year: Option<&NSArray<NSNumber>>,
        set_positions: Option<&NSArray<NSNumber>>,
        end: Option<&EKRecurrenceEnd>,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "calendarIdentifier", managed = "Other")]
    pub unsafe fn calendarIdentifier(&self) -> Id<NSString>;

    #[cfg(feature = "EventKit_EKRecurrenceEnd")]
    #[objc2::method(sel = "recurrenceEnd", managed = "Other")]
    pub unsafe fn recurrenceEnd(&self) -> Option<Id<EKRecurrenceEnd>>;

    #[cfg(feature = "EventKit_EKRecurrenceEnd")]
    #[objc2::method(sel = "setRecurrenceEnd:")]
    pub unsafe fn setRecurrenceEnd(&self, recurrence_end: Option<&EKRecurrenceEnd>);

    #[objc2::method(sel = "frequency")]
    pub unsafe fn frequency(&self) -> EKRecurrenceFrequency;

    #[objc2::method(sel = "interval")]
    pub unsafe fn interval(&self) -> NSInteger;

    #[objc2::method(sel = "firstDayOfTheWeek")]
    pub unsafe fn firstDayOfTheWeek(&self) -> NSInteger;

    #[cfg(all(
        feature = "EventKit_EKRecurrenceDayOfWeek",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(sel = "daysOfTheWeek", managed = "Other")]
    pub unsafe fn daysOfTheWeek(&self) -> Option<Id<NSArray<EKRecurrenceDayOfWeek>>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
    #[objc2::method(sel = "daysOfTheMonth", managed = "Other")]
    pub unsafe fn daysOfTheMonth(&self) -> Option<Id<NSArray<NSNumber>>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
    #[objc2::method(sel = "daysOfTheYear", managed = "Other")]
    pub unsafe fn daysOfTheYear(&self) -> Option<Id<NSArray<NSNumber>>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
    #[objc2::method(sel = "weeksOfTheYear", managed = "Other")]
    pub unsafe fn weeksOfTheYear(&self) -> Option<Id<NSArray<NSNumber>>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
    #[objc2::method(sel = "monthsOfTheYear", managed = "Other")]
    pub unsafe fn monthsOfTheYear(&self) -> Option<Id<NSArray<NSNumber>>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
    #[objc2::method(sel = "setPositions", managed = "Other")]
    pub unsafe fn setPositions(&self) -> Option<Id<NSArray<NSNumber>>>;
}
