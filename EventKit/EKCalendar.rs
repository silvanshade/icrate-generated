//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreLocation::*;
use crate::EventKit::*;
use crate::Foundation::*;
use crate::MapKit::*;

#[objc2::interface(
    unsafe super = EKObject,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "EventKit_EKCalendar")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type EKCalendar;
}

#[cfg(feature = "EventKit_EKCalendar")]
unsafe impl NSObjectProtocol for EKCalendar {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "EventKit_EKCalendar")]
    pub type EKCalendar;

    #[cfg(feature = "EventKit_EKEventStore")]
    #[objc2::method(sel = "calendarWithEventStore:", managed = "Other")]
    pub unsafe fn calendarWithEventStore(event_store: &EKEventStore) -> Id<EKCalendar>;

    #[cfg(feature = "EventKit_EKEventStore")]
    #[objc2::method(sel = "calendarForEntityType:eventStore:", managed = "Other")]
    pub unsafe fn calendarForEntityType_eventStore(
        entity_type: EKEntityType,
        event_store: &EKEventStore,
    ) -> Id<EKCalendar>;

    #[cfg(feature = "EventKit_EKSource")]
    #[objc2::method(sel = "source", managed = "Other")]
    pub unsafe fn source(&self) -> Option<Id<EKSource>>;

    #[cfg(feature = "EventKit_EKSource")]
    #[objc2::method(sel = "setSource:")]
    pub unsafe fn setSource(&self, source: Option<&EKSource>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "calendarIdentifier", managed = "Other")]
    pub unsafe fn calendarIdentifier(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "title", managed = "Other")]
    pub unsafe fn title(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setTitle:")]
    pub unsafe fn setTitle(&self, title: &NSString);

    #[objc2::method(sel = "type")]
    pub unsafe fn r#type(&self) -> EKCalendarType;

    #[objc2::method(sel = "allowsContentModifications")]
    pub unsafe fn allowsContentModifications(&self) -> bool;

    #[objc2::method(sel = "isSubscribed")]
    pub unsafe fn isSubscribed(&self) -> bool;

    #[objc2::method(sel = "isImmutable")]
    pub unsafe fn isImmutable(&self) -> bool;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "color", managed = "Other")]
    pub unsafe fn color(&self) -> Id<NSColor>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "setColor:")]
    pub unsafe fn setColor(&self, color: Option<&NSColor>);

    #[objc2::method(sel = "supportedEventAvailabilities")]
    pub unsafe fn supportedEventAvailabilities(&self) -> EKCalendarEventAvailabilityMask;

    #[objc2::method(sel = "allowedEntityTypes")]
    pub unsafe fn allowedEntityTypes(&self) -> EKEntityMask;
}
