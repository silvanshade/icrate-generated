//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreLocation::*;
use crate::EventKit::*;
use crate::Foundation::*;
use crate::MapKit::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "EventKit_EKVirtualConferenceProvider")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type EKVirtualConferenceProvider;
}

#[cfg(feature = "EventKit_EKVirtualConferenceProvider")]
unsafe impl NSExtensionRequestHandling for EKVirtualConferenceProvider {}

#[cfg(feature = "EventKit_EKVirtualConferenceProvider")]
unsafe impl NSObjectProtocol for EKVirtualConferenceProvider {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "EventKit_EKVirtualConferenceProvider")]
    pub type EKVirtualConferenceProvider;

    #[cfg(all(
        feature = "EventKit_EKVirtualConferenceRoomTypeDescriptor",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "fetchAvailableRoomTypesWithCompletionHandler:")]
    pub unsafe fn fetchAvailableRoomTypesWithCompletionHandler(
        &self,
        completion_handler: &Block<
            (
                *mut NSArray<EKVirtualConferenceRoomTypeDescriptor>,
                *mut NSError,
            ),
            (),
        >,
    );

    #[cfg(all(
        feature = "EventKit_EKVirtualConferenceDescriptor",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "fetchVirtualConferenceForIdentifier:completionHandler:")]
    pub unsafe fn fetchVirtualConferenceForIdentifier_completionHandler(
        &self,
        identifier: &EKVirtualConferenceRoomTypeIdentifier,
        completion_handler: &Block<(*mut EKVirtualConferenceDescriptor, *mut NSError), ()>,
    );
}
