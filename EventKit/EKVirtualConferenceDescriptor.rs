//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreLocation::*;
use crate::EventKit::*;
use crate::Foundation::*;
use crate::MapKit::*;

pub type EKVirtualConferenceRoomTypeIdentifier = NSString;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "EventKit_EKVirtualConferenceRoomTypeDescriptor")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type EKVirtualConferenceRoomTypeDescriptor;
}

#[cfg(feature = "EventKit_EKVirtualConferenceRoomTypeDescriptor")]
unsafe impl NSObjectProtocol for EKVirtualConferenceRoomTypeDescriptor {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "EventKit_EKVirtualConferenceRoomTypeDescriptor")]
    pub type EKVirtualConferenceRoomTypeDescriptor;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithTitle:identifier:", managed = "Init")]
    pub unsafe fn initWithTitle_identifier(
        this: Option<Allocated<Self>>,
        title: &NSString,
        identifier: &EKVirtualConferenceRoomTypeIdentifier,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "title", managed = "Other")]
    pub unsafe fn title(&self) -> Id<NSString>;

    #[objc2::method(sel = "identifier", managed = "Other")]
    pub unsafe fn identifier(&self) -> Id<EKVirtualConferenceRoomTypeIdentifier>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "EventKit_EKVirtualConferenceURLDescriptor")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type EKVirtualConferenceURLDescriptor;
}

#[cfg(feature = "EventKit_EKVirtualConferenceURLDescriptor")]
unsafe impl NSObjectProtocol for EKVirtualConferenceURLDescriptor {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "EventKit_EKVirtualConferenceURLDescriptor")]
    pub type EKVirtualConferenceURLDescriptor;

    #[cfg(all(feature = "Foundation_NSString", feature = "Foundation_NSURL"))]
    #[objc2::method(sel = "initWithTitle:URL:", managed = "Init")]
    pub unsafe fn initWithTitle_URL(
        this: Option<Allocated<Self>>,
        title: Option<&NSString>,
        url: &NSURL,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "title", managed = "Other")]
    pub unsafe fn title(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "URL", managed = "Other")]
    pub unsafe fn URL(&self) -> Id<NSURL>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "EventKit_EKVirtualConferenceDescriptor")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type EKVirtualConferenceDescriptor;
}

#[cfg(feature = "EventKit_EKVirtualConferenceDescriptor")]
unsafe impl NSObjectProtocol for EKVirtualConferenceDescriptor {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "EventKit_EKVirtualConferenceDescriptor")]
    pub type EKVirtualConferenceDescriptor;

    #[cfg(all(
        feature = "EventKit_EKVirtualConferenceURLDescriptor",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        sel = "initWithTitle:URLDescriptors:conferenceDetails:",
        managed = "Init"
    )]
    pub unsafe fn initWithTitle_URLDescriptors_conferenceDetails(
        this: Option<Allocated<Self>>,
        title: Option<&NSString>,
        url_descriptors: &NSArray<EKVirtualConferenceURLDescriptor>,
        conference_details: Option<&NSString>,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "title", managed = "Other")]
    pub unsafe fn title(&self) -> Option<Id<NSString>>;

    #[cfg(all(
        feature = "EventKit_EKVirtualConferenceURLDescriptor",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(sel = "URLDescriptors", managed = "Other")]
    pub unsafe fn URLDescriptors(&self) -> Id<NSArray<EKVirtualConferenceURLDescriptor>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "conferenceDetails", managed = "Other")]
    pub unsafe fn conferenceDetails(&self) -> Option<Id<NSString>>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;
}
