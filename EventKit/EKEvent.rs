//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreLocation::*;
use crate::EventKit::*;
use crate::Foundation::*;
use crate::MapKit::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum EKEventAvailability {
    EKEventAvailabilityNotSupported = -1,
    EKEventAvailabilityBusy = 0,
    EKEventAvailabilityFree = 1,
    EKEventAvailabilityTentative = 2,
    EKEventAvailabilityUnavailable = 3,
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum EKEventStatus {
    EKEventStatusNone = 0,
    EKEventStatusConfirmed = 1,
    EKEventStatusTentative = 2,
    EKEventStatusCanceled = 3,
}

#[objc2::interface(
    unsafe super = EKCalendarItem,
    unsafe inherits = [
        EKObject,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "EventKit_EKEvent")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type EKEvent;
}

#[cfg(feature = "EventKit_EKEvent")]
unsafe impl NSObjectProtocol for EKEvent {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "EventKit_EKEvent")]
    pub type EKEvent;

    #[cfg(feature = "EventKit_EKEventStore")]
    #[objc2::method(sel = "eventWithEventStore:", managed = "Other")]
    pub unsafe fn eventWithEventStore(event_store: &EKEventStore) -> Id<EKEvent>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "eventIdentifier", managed = "Other")]
    pub unsafe fn eventIdentifier(&self) -> Option<Id<NSString>>;

    #[objc2::method(sel = "isAllDay")]
    pub unsafe fn isAllDay(&self) -> bool;

    #[objc2::method(sel = "setAllDay:")]
    pub unsafe fn setAllDay(&self, all_day: bool);

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "startDate", managed = "Other")]
    pub unsafe fn startDate(&self) -> Id<NSDate>;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "setStartDate:")]
    pub unsafe fn setStartDate(&self, start_date: Option<&NSDate>);

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "endDate", managed = "Other")]
    pub unsafe fn endDate(&self) -> Id<NSDate>;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "setEndDate:")]
    pub unsafe fn setEndDate(&self, end_date: Option<&NSDate>);

    #[cfg(feature = "EventKit_EKStructuredLocation")]
    #[objc2::method(sel = "structuredLocation", managed = "Other")]
    pub unsafe fn structuredLocation(&self) -> Option<Id<EKStructuredLocation>>;

    #[cfg(feature = "EventKit_EKStructuredLocation")]
    #[objc2::method(sel = "setStructuredLocation:")]
    pub unsafe fn setStructuredLocation(&self, structured_location: Option<&EKStructuredLocation>);

    #[objc2::method(sel = "compareStartDateWithEvent:")]
    pub unsafe fn compareStartDateWithEvent(&self, other: &EKEvent) -> NSComparisonResult;

    #[cfg(feature = "EventKit_EKParticipant")]
    #[objc2::method(sel = "organizer", managed = "Other")]
    pub unsafe fn organizer(&self) -> Option<Id<EKParticipant>>;

    #[objc2::method(sel = "availability")]
    pub unsafe fn availability(&self) -> EKEventAvailability;

    #[objc2::method(sel = "setAvailability:")]
    pub unsafe fn setAvailability(&self, availability: EKEventAvailability);

    #[objc2::method(sel = "status")]
    pub unsafe fn status(&self) -> EKEventStatus;

    #[objc2::method(sel = "isDetached")]
    pub unsafe fn isDetached(&self) -> bool;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "occurrenceDate", managed = "Other")]
    pub unsafe fn occurrenceDate(&self) -> Option<Id<NSDate>>;

    #[objc2::method(sel = "refresh")]
    pub unsafe fn refresh(&self) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "birthdayContactIdentifier", managed = "Other")]
    pub unsafe fn birthdayContactIdentifier(&self) -> Option<Id<NSString>>;

    #[objc2::method(sel = "birthdayPersonID")]
    pub unsafe fn birthdayPersonID(&self) -> NSInteger;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "Use birthdayContactIdentifier instead"]
    #[objc2::method(sel = "birthdayPersonUniqueID", managed = "Other")]
    pub unsafe fn birthdayPersonUniqueID(&self) -> Option<Id<NSString>>;
}
