//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreLocation::*;
use crate::EventKit::*;
use crate::Foundation::*;
use crate::MapKit::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum EKSpan {
    EKSpanThisEvent = 0,
    EKSpanFutureEvents = 1,
}

pub type EKEventSearchCallback = *mut Block<(NonNull<EKEvent>, NonNull<Bool>), ()>;

pub type EKEventStoreRequestAccessCompletionHandler = *mut Block<(Bool, *mut NSError), ()>;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "EventKit_EKEventStore")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type EKEventStore;
}

#[cfg(feature = "EventKit_EKEventStore")]
unsafe impl NSObjectProtocol for EKEventStore {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "EventKit_EKEventStore")]
    pub type EKEventStore;

    #[objc2::method(sel = "authorizationStatusForEntityType:")]
    pub unsafe fn authorizationStatusForEntityType(
        entity_type: EKEntityType,
    ) -> EKAuthorizationStatus;

    #[deprecated]
    #[objc2::method(sel = "initWithAccessToEntityTypes:", managed = "Init")]
    pub unsafe fn initWithAccessToEntityTypes(
        this: Option<Allocated<Self>>,
        entity_types: EKEntityMask,
    ) -> Id<Self>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(all(feature = "EventKit_EKSource", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "initWithSources:", managed = "Init")]
    pub unsafe fn initWithSources(
        this: Option<Allocated<Self>>,
        sources: &NSArray<EKSource>,
    ) -> Id<Self>;

    #[objc2::method(sel = "requestAccessToEntityType:completion:")]
    pub unsafe fn requestAccessToEntityType_completion(
        &self,
        entity_type: EKEntityType,
        completion: EKEventStoreRequestAccessCompletionHandler,
    );

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "eventStoreIdentifier", managed = "Other")]
    pub unsafe fn eventStoreIdentifier(&self) -> Id<NSString>;

    #[cfg(all(feature = "EventKit_EKSource", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "delegateSources", managed = "Other")]
    pub unsafe fn delegateSources(&self) -> Id<NSArray<EKSource>>;

    #[cfg(all(feature = "EventKit_EKSource", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "sources", managed = "Other")]
    pub unsafe fn sources(&self) -> Id<NSArray<EKSource>>;

    #[cfg(all(feature = "EventKit_EKSource", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "sourceWithIdentifier:", managed = "Other")]
    pub unsafe fn sourceWithIdentifier(&self, identifier: &NSString) -> Option<Id<EKSource>>;

    #[cfg(all(feature = "EventKit_EKCalendar", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "calendars", managed = "Other")]
    pub unsafe fn calendars(&self) -> Id<NSArray<EKCalendar>>;

    #[cfg(all(feature = "EventKit_EKCalendar", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "calendarsForEntityType:", managed = "Other")]
    pub unsafe fn calendarsForEntityType(
        &self,
        entity_type: EKEntityType,
    ) -> Id<NSArray<EKCalendar>>;

    #[cfg(feature = "EventKit_EKCalendar")]
    #[objc2::method(sel = "defaultCalendarForNewEvents", managed = "Other")]
    pub unsafe fn defaultCalendarForNewEvents(&self) -> Option<Id<EKCalendar>>;

    #[cfg(feature = "EventKit_EKCalendar")]
    #[objc2::method(sel = "defaultCalendarForNewReminders", managed = "Other")]
    pub unsafe fn defaultCalendarForNewReminders(&self) -> Option<Id<EKCalendar>>;

    #[cfg(all(feature = "EventKit_EKCalendar", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "calendarWithIdentifier:", managed = "Other")]
    pub unsafe fn calendarWithIdentifier(&self, identifier: &NSString) -> Option<Id<EKCalendar>>;

    #[cfg(all(feature = "EventKit_EKCalendar", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "saveCalendar:commit:error:", throws)]
    pub unsafe fn saveCalendar_commit_error(
        &self,
        calendar: &EKCalendar,
        commit: bool,
    ) -> Result<(), Id<NSError>>;

    #[cfg(all(feature = "EventKit_EKCalendar", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "removeCalendar:commit:error:", throws)]
    pub unsafe fn removeCalendar_commit_error(
        &self,
        calendar: &EKCalendar,
        commit: bool,
    ) -> Result<(), Id<NSError>>;

    #[cfg(all(feature = "EventKit_EKCalendarItem", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "calendarItemWithIdentifier:", managed = "Other")]
    pub unsafe fn calendarItemWithIdentifier(
        &self,
        identifier: &NSString,
    ) -> Option<Id<EKCalendarItem>>;

    #[cfg(all(
        feature = "EventKit_EKCalendarItem",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "calendarItemsWithExternalIdentifier:", managed = "Other")]
    pub unsafe fn calendarItemsWithExternalIdentifier(
        &self,
        external_identifier: &NSString,
    ) -> Id<NSArray<EKCalendarItem>>;

    #[cfg(all(feature = "EventKit_EKEvent", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "saveEvent:span:error:", throws)]
    pub unsafe fn saveEvent_span_error(
        &self,
        event: &EKEvent,
        span: EKSpan,
    ) -> Result<(), Id<NSError>>;

    #[cfg(all(feature = "EventKit_EKEvent", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "removeEvent:span:error:", throws)]
    pub unsafe fn removeEvent_span_error(
        &self,
        event: &EKEvent,
        span: EKSpan,
    ) -> Result<(), Id<NSError>>;

    #[cfg(all(feature = "EventKit_EKEvent", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "saveEvent:span:commit:error:", throws)]
    pub unsafe fn saveEvent_span_commit_error(
        &self,
        event: &EKEvent,
        span: EKSpan,
        commit: bool,
    ) -> Result<(), Id<NSError>>;

    #[cfg(all(feature = "EventKit_EKEvent", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "removeEvent:span:commit:error:", throws)]
    pub unsafe fn removeEvent_span_commit_error(
        &self,
        event: &EKEvent,
        span: EKSpan,
        commit: bool,
    ) -> Result<(), Id<NSError>>;

    #[cfg(all(feature = "EventKit_EKEvent", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "eventWithIdentifier:", managed = "Other")]
    pub unsafe fn eventWithIdentifier(&self, identifier: &NSString) -> Option<Id<EKEvent>>;

    #[cfg(all(
        feature = "EventKit_EKEvent",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSPredicate"
    ))]
    #[objc2::method(sel = "eventsMatchingPredicate:", managed = "Other")]
    pub unsafe fn eventsMatchingPredicate(&self, predicate: &NSPredicate) -> Id<NSArray<EKEvent>>;

    #[cfg(feature = "Foundation_NSPredicate")]
    #[objc2::method(sel = "enumerateEventsMatchingPredicate:usingBlock:")]
    pub unsafe fn enumerateEventsMatchingPredicate_usingBlock(
        &self,
        predicate: &NSPredicate,
        block: EKEventSearchCallback,
    );

    #[cfg(all(
        feature = "EventKit_EKCalendar",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSDate",
        feature = "Foundation_NSPredicate"
    ))]
    #[objc2::method(
        sel = "predicateForEventsWithStartDate:endDate:calendars:",
        managed = "Other"
    )]
    pub unsafe fn predicateForEventsWithStartDate_endDate_calendars(
        &self,
        start_date: &NSDate,
        end_date: &NSDate,
        calendars: Option<&NSArray<EKCalendar>>,
    ) -> Id<NSPredicate>;

    #[cfg(all(feature = "EventKit_EKReminder", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "saveReminder:commit:error:", throws)]
    pub unsafe fn saveReminder_commit_error(
        &self,
        reminder: &EKReminder,
        commit: bool,
    ) -> Result<(), Id<NSError>>;

    #[cfg(all(feature = "EventKit_EKReminder", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "removeReminder:commit:error:", throws)]
    pub unsafe fn removeReminder_commit_error(
        &self,
        reminder: &EKReminder,
        commit: bool,
    ) -> Result<(), Id<NSError>>;

    #[cfg(all(
        feature = "EventKit_EKReminder",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSPredicate"
    ))]
    #[objc2::method(sel = "fetchRemindersMatchingPredicate:completion:", managed = "Other")]
    pub unsafe fn fetchRemindersMatchingPredicate_completion(
        &self,
        predicate: &NSPredicate,
        completion: &Block<(*mut NSArray<EKReminder>,), ()>,
    ) -> Id<Object>;

    #[objc2::method(sel = "cancelFetchRequest:")]
    pub unsafe fn cancelFetchRequest(&self, fetch_identifier: &Object);

    #[cfg(all(
        feature = "EventKit_EKCalendar",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSPredicate"
    ))]
    #[objc2::method(sel = "predicateForRemindersInCalendars:", managed = "Other")]
    pub unsafe fn predicateForRemindersInCalendars(
        &self,
        calendars: Option<&NSArray<EKCalendar>>,
    ) -> Id<NSPredicate>;

    #[cfg(all(
        feature = "EventKit_EKCalendar",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSDate",
        feature = "Foundation_NSPredicate"
    ))]
    #[objc2::method(
        sel = "predicateForIncompleteRemindersWithDueDateStarting:ending:calendars:",
        managed = "Other"
    )]
    pub unsafe fn predicateForIncompleteRemindersWithDueDateStarting_ending_calendars(
        &self,
        start_date: Option<&NSDate>,
        end_date: Option<&NSDate>,
        calendars: Option<&NSArray<EKCalendar>>,
    ) -> Id<NSPredicate>;

    #[cfg(all(
        feature = "EventKit_EKCalendar",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSDate",
        feature = "Foundation_NSPredicate"
    ))]
    #[objc2::method(
        sel = "predicateForCompletedRemindersWithCompletionDateStarting:ending:calendars:",
        managed = "Other"
    )]
    pub unsafe fn predicateForCompletedRemindersWithCompletionDateStarting_ending_calendars(
        &self,
        start_date: Option<&NSDate>,
        end_date: Option<&NSDate>,
        calendars: Option<&NSArray<EKCalendar>>,
    ) -> Id<NSPredicate>;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "commit:", throws)]
    pub unsafe fn commit(&self) -> Result<(), Id<NSError>>;

    #[objc2::method(sel = "reset")]
    pub unsafe fn reset(&self);

    #[objc2::method(sel = "refreshSourcesIfNecessary")]
    pub unsafe fn refreshSourcesIfNecessary(&self);
}

extern_static!(EKEventStoreChangedNotification: &'static NSString);
