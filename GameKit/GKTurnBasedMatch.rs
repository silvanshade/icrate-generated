//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::GameKit::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum GKTurnBasedMatchStatus {
    GKTurnBasedMatchStatusUnknown = 0,
    GKTurnBasedMatchStatusOpen = 1,
    GKTurnBasedMatchStatusEnded = 2,
    GKTurnBasedMatchStatusMatching = 3,
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum GKTurnBasedParticipantStatus {
    GKTurnBasedParticipantStatusUnknown = 0,
    GKTurnBasedParticipantStatusInvited = 1,
    GKTurnBasedParticipantStatusDeclined = 2,
    GKTurnBasedParticipantStatusMatching = 3,
    GKTurnBasedParticipantStatusActive = 4,
    GKTurnBasedParticipantStatusDone = 5,
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum GKTurnBasedMatchOutcome {
    GKTurnBasedMatchOutcomeNone = 0,
    GKTurnBasedMatchOutcomeQuit = 1,
    GKTurnBasedMatchOutcomeWon = 2,
    GKTurnBasedMatchOutcomeLost = 3,
    GKTurnBasedMatchOutcomeTied = 4,
    GKTurnBasedMatchOutcomeTimeExpired = 5,
    GKTurnBasedMatchOutcomeFirst = 6,
    GKTurnBasedMatchOutcomeSecond = 7,
    GKTurnBasedMatchOutcomeThird = 8,
    GKTurnBasedMatchOutcomeFourth = 9,
    GKTurnBasedMatchOutcomeCustomRange = 0x00FF0000,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKTurnBasedParticipant")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type GKTurnBasedParticipant;
}

#[cfg(feature = "GameKit_GKTurnBasedParticipant")]
unsafe impl NSObjectProtocol for GKTurnBasedParticipant {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKTurnBasedParticipant")]
    pub type GKTurnBasedParticipant;

    #[cfg(feature = "GameKit_GKPlayer")]
    #[objc2::method(sel = "player", managed = "Other")]
    pub unsafe fn player(&self) -> Option<Id<GKPlayer>>;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "lastTurnDate", managed = "Other")]
    pub unsafe fn lastTurnDate(&self) -> Option<Id<NSDate>>;

    #[objc2::method(sel = "status")]
    pub unsafe fn status(&self) -> GKTurnBasedParticipantStatus;

    #[objc2::method(sel = "matchOutcome")]
    pub unsafe fn matchOutcome(&self) -> GKTurnBasedMatchOutcome;

    #[objc2::method(sel = "setMatchOutcome:")]
    pub unsafe fn setMatchOutcome(&self, match_outcome: GKTurnBasedMatchOutcome);

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "timeoutDate", managed = "Other")]
    pub unsafe fn timeoutDate(&self) -> Option<Id<NSDate>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKTurnBasedParticipant")]
    pub type GKTurnBasedParticipant;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "use player"]
    #[objc2::method(sel = "playerID", managed = "Other")]
    pub unsafe fn playerID(&self) -> Option<Id<NSString>>;
}

#[objc2::protocol]
pub unsafe trait GKTurnBasedEventListener {
    #[cfg(all(feature = "Foundation_NSArray", feature = "GameKit_GKPlayer"))]
    #[objc2::method(optional, sel = "player:didRequestMatchWithOtherPlayers:")]
    unsafe fn player_didRequestMatchWithOtherPlayers(
        &self,
        player: &GKPlayer,
        players_to_invite: &NSArray<GKPlayer>,
    );

    #[cfg(all(feature = "GameKit_GKPlayer", feature = "GameKit_GKTurnBasedMatch"))]
    #[objc2::method(optional, sel = "player:receivedTurnEventForMatch:didBecomeActive:")]
    unsafe fn player_receivedTurnEventForMatch_didBecomeActive(
        &self,
        player: &GKPlayer,
        r#match: &GKTurnBasedMatch,
        did_become_active: bool,
    );

    #[cfg(all(feature = "GameKit_GKPlayer", feature = "GameKit_GKTurnBasedMatch"))]
    #[objc2::method(optional, sel = "player:matchEnded:")]
    unsafe fn player_matchEnded(&self, player: &GKPlayer, r#match: &GKTurnBasedMatch);

    #[cfg(all(
        feature = "GameKit_GKPlayer",
        feature = "GameKit_GKTurnBasedExchange",
        feature = "GameKit_GKTurnBasedMatch"
    ))]
    #[objc2::method(optional, sel = "player:receivedExchangeRequest:forMatch:")]
    unsafe fn player_receivedExchangeRequest_forMatch(
        &self,
        player: &GKPlayer,
        exchange: &GKTurnBasedExchange,
        r#match: &GKTurnBasedMatch,
    );

    #[cfg(all(
        feature = "GameKit_GKPlayer",
        feature = "GameKit_GKTurnBasedExchange",
        feature = "GameKit_GKTurnBasedMatch"
    ))]
    #[objc2::method(optional, sel = "player:receivedExchangeCancellation:forMatch:")]
    unsafe fn player_receivedExchangeCancellation_forMatch(
        &self,
        player: &GKPlayer,
        exchange: &GKTurnBasedExchange,
        r#match: &GKTurnBasedMatch,
    );

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "GameKit_GKPlayer",
        feature = "GameKit_GKTurnBasedExchange",
        feature = "GameKit_GKTurnBasedExchangeReply",
        feature = "GameKit_GKTurnBasedMatch"
    ))]
    #[objc2::method(
        optional,
        sel = "player:receivedExchangeReplies:forCompletedExchange:forMatch:"
    )]
    unsafe fn player_receivedExchangeReplies_forCompletedExchange_forMatch(
        &self,
        player: &GKPlayer,
        replies: &NSArray<GKTurnBasedExchangeReply>,
        exchange: &GKTurnBasedExchange,
        r#match: &GKTurnBasedMatch,
    );

    #[cfg(all(feature = "GameKit_GKPlayer", feature = "GameKit_GKTurnBasedMatch"))]
    #[objc2::method(optional, sel = "player:wantsToQuitMatch:")]
    unsafe fn player_wantsToQuitMatch(&self, player: &GKPlayer, r#match: &GKTurnBasedMatch);

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSString",
        feature = "GameKit_GKPlayer"
    ))]
    #[objc2::method(optional, sel = "player:didRequestMatchWithPlayers:")]
    unsafe fn player_didRequestMatchWithPlayers(
        &self,
        player: &GKPlayer,
        player_i_ds_to_invite: &NSArray<NSString>,
    );
}

extern_static!(GKTurnTimeoutDefault: NSTimeInterval);

extern_static!(GKTurnTimeoutNone: NSTimeInterval);

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKTurnBasedMatch")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type GKTurnBasedMatch;
}

#[cfg(feature = "GameKit_GKTurnBasedMatch")]
unsafe impl NSObjectProtocol for GKTurnBasedMatch {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKTurnBasedMatch")]
    pub type GKTurnBasedMatch;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "matchID", managed = "Other")]
    pub unsafe fn matchID(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "creationDate", managed = "Other")]
    pub unsafe fn creationDate(&self) -> Option<Id<NSDate>>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "GameKit_GKTurnBasedParticipant"
    ))]
    #[objc2::method(sel = "participants", managed = "Other")]
    pub unsafe fn participants(&self) -> Option<Id<NSArray<GKTurnBasedParticipant>>>;

    #[objc2::method(sel = "status")]
    pub unsafe fn status(&self) -> GKTurnBasedMatchStatus;

    #[cfg(feature = "GameKit_GKTurnBasedParticipant")]
    #[objc2::method(sel = "currentParticipant", managed = "Other")]
    pub unsafe fn currentParticipant(&self) -> Option<Id<GKTurnBasedParticipant>>;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "matchData", managed = "Other")]
    pub unsafe fn matchData(&self) -> Option<Id<NSData>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setLocalizableMessageWithKey:arguments:")]
    pub unsafe fn setLocalizableMessageWithKey_arguments(
        &self,
        key: &NSString,
        arguments: Option<&NSArray<NSString>>,
    );

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "message", managed = "Other")]
    pub unsafe fn message(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setMessage:")]
    pub unsafe fn setMessage(&self, message: Option<&NSString>);

    #[objc2::method(sel = "matchDataMaximumSize")]
    pub unsafe fn matchDataMaximumSize(&self) -> NSUInteger;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "GameKit_GKTurnBasedExchange"
    ))]
    #[objc2::method(sel = "exchanges", managed = "Other")]
    pub unsafe fn exchanges(&self) -> Option<Id<NSArray<GKTurnBasedExchange>>>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "GameKit_GKTurnBasedExchange"
    ))]
    #[objc2::method(sel = "activeExchanges", managed = "Other")]
    pub unsafe fn activeExchanges(&self) -> Option<Id<NSArray<GKTurnBasedExchange>>>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "GameKit_GKTurnBasedExchange"
    ))]
    #[objc2::method(sel = "completedExchanges", managed = "Other")]
    pub unsafe fn completedExchanges(&self) -> Option<Id<NSArray<GKTurnBasedExchange>>>;

    #[objc2::method(sel = "exchangeDataMaximumSize")]
    pub unsafe fn exchangeDataMaximumSize(&self) -> NSUInteger;

    #[objc2::method(sel = "exchangeMaxInitiatedExchangesPerPlayer")]
    pub unsafe fn exchangeMaxInitiatedExchangesPerPlayer(&self) -> NSUInteger;

    #[cfg(all(feature = "Foundation_NSError", feature = "GameKit_GKMatchRequest"))]
    #[objc2::method(sel = "findMatchForRequest:withCompletionHandler:")]
    pub unsafe fn findMatchForRequest_withCompletionHandler(
        request: &GKMatchRequest,
        completion_handler: &Block<(*mut GKTurnBasedMatch, *mut NSError), ()>,
    );

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "loadMatchesWithCompletionHandler:")]
    pub unsafe fn loadMatchesWithCompletionHandler(
        completion_handler: Option<&Block<(*mut NSArray<GKTurnBasedMatch>, *mut NSError), ()>>,
    );

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "loadMatchWithID:withCompletionHandler:")]
    pub unsafe fn loadMatchWithID_withCompletionHandler(
        match_id: &NSString,
        completion_handler: Option<&Block<(*mut GKTurnBasedMatch, *mut NSError), ()>>,
    );

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "rematchWithCompletionHandler:")]
    pub unsafe fn rematchWithCompletionHandler(
        &self,
        completion_handler: Option<&Block<(*mut GKTurnBasedMatch, *mut NSError), ()>>,
    );

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "acceptInviteWithCompletionHandler:")]
    pub unsafe fn acceptInviteWithCompletionHandler(
        &self,
        completion_handler: Option<&Block<(*mut GKTurnBasedMatch, *mut NSError), ()>>,
    );

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "declineInviteWithCompletionHandler:")]
    pub unsafe fn declineInviteWithCompletionHandler(
        &self,
        completion_handler: Option<&Block<(*mut NSError,), ()>>,
    );

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "removeWithCompletionHandler:")]
    pub unsafe fn removeWithCompletionHandler(
        &self,
        completion_handler: Option<&Block<(*mut NSError,), ()>>,
    );

    #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "loadMatchDataWithCompletionHandler:")]
    pub unsafe fn loadMatchDataWithCompletionHandler(
        &self,
        completion_handler: Option<&Block<(*mut NSData, *mut NSError), ()>>,
    );

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSData",
        feature = "Foundation_NSError",
        feature = "GameKit_GKTurnBasedParticipant"
    ))]
    #[objc2::method(sel = "endTurnWithNextParticipants:turnTimeout:matchData:completionHandler:")]
    pub unsafe fn endTurnWithNextParticipants_turnTimeout_matchData_completionHandler(
        &self,
        next_participants: &NSArray<GKTurnBasedParticipant>,
        timeout: NSTimeInterval,
        match_data: &NSData,
        completion_handler: Option<&Block<(*mut NSError,), ()>>,
    );

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSData",
        feature = "Foundation_NSError",
        feature = "GameKit_GKTurnBasedParticipant"
    ))]
    #[objc2::method(
        sel = "participantQuitInTurnWithOutcome:nextParticipants:turnTimeout:matchData:completionHandler:"
    )]
    pub unsafe fn participantQuitInTurnWithOutcome_nextParticipants_turnTimeout_matchData_completionHandler(
        &self,
        match_outcome: GKTurnBasedMatchOutcome,
        next_participants: &NSArray<GKTurnBasedParticipant>,
        timeout: NSTimeInterval,
        match_data: &NSData,
        completion_handler: Option<&Block<(*mut NSError,), ()>>,
    );

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "participantQuitOutOfTurnWithOutcome:withCompletionHandler:")]
    pub unsafe fn participantQuitOutOfTurnWithOutcome_withCompletionHandler(
        &self,
        match_outcome: GKTurnBasedMatchOutcome,
        completion_handler: Option<&Block<(*mut NSError,), ()>>,
    );

    #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "endMatchInTurnWithMatchData:completionHandler:")]
    pub unsafe fn endMatchInTurnWithMatchData_completionHandler(
        &self,
        match_data: &NSData,
        completion_handler: Option<&Block<(*mut NSError,), ()>>,
    );

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSData",
        feature = "Foundation_NSError",
        feature = "GameKit_GKAchievement",
        feature = "GameKit_GKScore"
    ))]
    #[deprecated = "pass GKLeaderboardScore to endMatchInTurnWithMatchData:scores:completionHandler instead"]
    #[objc2::method(sel = "endMatchInTurnWithMatchData:scores:achievements:completionHandler:")]
    pub unsafe fn endMatchInTurnWithMatchData_scores_achievements_completionHandler(
        &self,
        match_data: &NSData,
        scores: Option<&NSArray<GKScore>>,
        achievements: Option<&NSArray<GKAchievement>>,
        completion_handler: Option<&Block<(*mut NSError,), ()>>,
    );

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSData",
        feature = "Foundation_NSError",
        feature = "GameKit_GKLeaderboardScore"
    ))]
    #[objc2::method(
        sel = "endMatchInTurnWithMatchData:leaderboardScores:achievements:completionHandler:"
    )]
    pub unsafe fn endMatchInTurnWithMatchData_leaderboardScores_achievements_completionHandler(
        &self,
        match_data: &NSData,
        scores: &NSArray<GKLeaderboardScore>,
        achievements: &NSArray,
        completion_handler: &Block<(*mut NSError,), ()>,
    );

    #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "saveCurrentTurnWithMatchData:completionHandler:")]
    pub unsafe fn saveCurrentTurnWithMatchData_completionHandler(
        &self,
        match_data: &NSData,
        completion_handler: Option<&Block<(*mut NSError,), ()>>,
    );

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSData",
        feature = "Foundation_NSError",
        feature = "GameKit_GKTurnBasedExchange"
    ))]
    #[objc2::method(sel = "saveMergedMatchData:withResolvedExchanges:completionHandler:")]
    pub unsafe fn saveMergedMatchData_withResolvedExchanges_completionHandler(
        &self,
        match_data: &NSData,
        exchanges: &NSArray<GKTurnBasedExchange>,
        completion_handler: Option<&Block<(*mut NSError,), ()>>,
    );

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSData",
        feature = "Foundation_NSError",
        feature = "Foundation_NSString",
        feature = "GameKit_GKTurnBasedExchange",
        feature = "GameKit_GKTurnBasedParticipant"
    ))]
    #[objc2::method(
        sel = "sendExchangeToParticipants:data:localizableMessageKey:arguments:timeout:completionHandler:"
    )]
    pub unsafe fn sendExchangeToParticipants_data_localizableMessageKey_arguments_timeout_completionHandler(
        &self,
        participants: &NSArray<GKTurnBasedParticipant>,
        data: &NSData,
        key: &NSString,
        arguments: &NSArray<NSString>,
        timeout: NSTimeInterval,
        completion_handler: Option<&Block<(*mut GKTurnBasedExchange, *mut NSError), ()>>,
    );

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError",
        feature = "Foundation_NSString",
        feature = "GameKit_GKTurnBasedParticipant"
    ))]
    #[objc2::method(
        sel = "sendReminderToParticipants:localizableMessageKey:arguments:completionHandler:"
    )]
    pub unsafe fn sendReminderToParticipants_localizableMessageKey_arguments_completionHandler(
        &self,
        participants: &NSArray<GKTurnBasedParticipant>,
        key: &NSString,
        arguments: &NSArray<NSString>,
        completion_handler: Option<&Block<(*mut NSError,), ()>>,
    );

    #[cfg(all(
        feature = "Foundation_NSData",
        feature = "Foundation_NSError",
        feature = "GameKit_GKTurnBasedParticipant"
    ))]
    #[deprecated = "Use endTurnWithNextParticipants:... instead"]
    #[objc2::method(sel = "endTurnWithNextParticipant:matchData:completionHandler:")]
    pub unsafe fn endTurnWithNextParticipant_matchData_completionHandler(
        &self,
        next_participant: &GKTurnBasedParticipant,
        match_data: &NSData,
        completion_handler: Option<&Block<(*mut NSError,), ()>>,
    );

    #[cfg(all(
        feature = "Foundation_NSData",
        feature = "Foundation_NSError",
        feature = "GameKit_GKTurnBasedParticipant"
    ))]
    #[deprecated = "Use participantQuitInTurnWithOutcome:nextParticipants:turnTimeout:... instead"]
    #[objc2::method(
        sel = "participantQuitInTurnWithOutcome:nextParticipant:matchData:completionHandler:"
    )]
    pub unsafe fn participantQuitInTurnWithOutcome_nextParticipant_matchData_completionHandler(
        &self,
        match_outcome: GKTurnBasedMatchOutcome,
        next_participant: &GKTurnBasedParticipant,
        match_data: &NSData,
        completion_handler: Option<&Block<(*mut NSError,), ()>>,
    );
}

#[ns_enum]
#[underlying(i8)]
pub enum GKTurnBasedExchangeStatus {
    GKTurnBasedExchangeStatusUnknown = 0,
    GKTurnBasedExchangeStatusActive = 1,
    GKTurnBasedExchangeStatusComplete = 2,
    GKTurnBasedExchangeStatusResolved = 3,
    GKTurnBasedExchangeStatusCanceled = 4,
}

extern_static!(GKExchangeTimeoutDefault: NSTimeInterval);

extern_static!(GKExchangeTimeoutNone: NSTimeInterval);

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKTurnBasedExchange")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type GKTurnBasedExchange;
}

#[cfg(feature = "GameKit_GKTurnBasedExchange")]
unsafe impl NSObjectProtocol for GKTurnBasedExchange {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKTurnBasedExchange")]
    pub type GKTurnBasedExchange;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "exchangeID", managed = "Other")]
    pub unsafe fn exchangeID(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "GameKit_GKTurnBasedParticipant")]
    #[objc2::method(sel = "sender", managed = "Other")]
    pub unsafe fn sender(&self) -> Option<Id<GKTurnBasedParticipant>>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "GameKit_GKTurnBasedParticipant"
    ))]
    #[objc2::method(sel = "recipients", managed = "Other")]
    pub unsafe fn recipients(&self) -> Option<Id<NSArray<GKTurnBasedParticipant>>>;

    #[objc2::method(sel = "status")]
    pub unsafe fn status(&self) -> GKTurnBasedExchangeStatus;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "message", managed = "Other")]
    pub unsafe fn message(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "data", managed = "Other")]
    pub unsafe fn data(&self) -> Option<Id<NSData>>;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "sendDate", managed = "Other")]
    pub unsafe fn sendDate(&self) -> Option<Id<NSDate>>;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "timeoutDate", managed = "Other")]
    pub unsafe fn timeoutDate(&self) -> Option<Id<NSDate>>;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "completionDate", managed = "Other")]
    pub unsafe fn completionDate(&self) -> Option<Id<NSDate>>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "GameKit_GKTurnBasedExchangeReply"
    ))]
    #[objc2::method(sel = "replies", managed = "Other")]
    pub unsafe fn replies(&self) -> Option<Id<NSArray<GKTurnBasedExchangeReply>>>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "cancelWithLocalizableMessageKey:arguments:completionHandler:")]
    pub unsafe fn cancelWithLocalizableMessageKey_arguments_completionHandler(
        &self,
        key: &NSString,
        arguments: &NSArray<NSString>,
        completion_handler: Option<&Block<(*mut NSError,), ()>>,
    );

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSData",
        feature = "Foundation_NSError",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "replyWithLocalizableMessageKey:arguments:data:completionHandler:")]
    pub unsafe fn replyWithLocalizableMessageKey_arguments_data_completionHandler(
        &self,
        key: &NSString,
        arguments: &NSArray<NSString>,
        data: &NSData,
        completion_handler: Option<&Block<(*mut NSError,), ()>>,
    );
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKTurnBasedExchangeReply")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type GKTurnBasedExchangeReply;
}

#[cfg(feature = "GameKit_GKTurnBasedExchangeReply")]
unsafe impl NSObjectProtocol for GKTurnBasedExchangeReply {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKTurnBasedExchangeReply")]
    pub type GKTurnBasedExchangeReply;

    #[cfg(feature = "GameKit_GKTurnBasedParticipant")]
    #[objc2::method(sel = "recipient", managed = "Other")]
    pub unsafe fn recipient(&self) -> Option<Id<GKTurnBasedParticipant>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "message", managed = "Other")]
    pub unsafe fn message(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "data", managed = "Other")]
    pub unsafe fn data(&self) -> Option<Id<NSData>>;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "replyDate", managed = "Other")]
    pub unsafe fn replyDate(&self) -> Option<Id<NSDate>>;
}

#[objc2::protocol]
#[deprecated = "Use registerListener on GKLocalPlayer with an object that implements the GKTurnBasedEventListener protocol"]
pub unsafe trait GKTurnBasedEventHandlerDelegate {
    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[deprecated]
    #[objc2::method(sel = "handleInviteFromGameCenter:")]
    unsafe fn handleInviteFromGameCenter(&self, players_to_invite: &NSArray<NSString>);

    #[cfg(feature = "GameKit_GKTurnBasedMatch")]
    #[deprecated]
    #[objc2::method(sel = "handleTurnEventForMatch:didBecomeActive:")]
    unsafe fn handleTurnEventForMatch_didBecomeActive(
        &self,
        r#match: &GKTurnBasedMatch,
        did_become_active: bool,
    );

    #[cfg(feature = "GameKit_GKTurnBasedMatch")]
    #[deprecated]
    #[objc2::method(optional, sel = "handleTurnEventForMatch:")]
    unsafe fn handleTurnEventForMatch(&self, r#match: &GKTurnBasedMatch);

    #[cfg(feature = "GameKit_GKTurnBasedMatch")]
    #[deprecated]
    #[objc2::method(optional, sel = "handleMatchEnded:")]
    unsafe fn handleMatchEnded(&self, r#match: &GKTurnBasedMatch);
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[deprecated = "Use registerListener on GKLocalPlayer with an object that implements the GKTurnBasedEventListener protocol"]
    #[cfg(feature = "GameKit_GKTurnBasedEventHandler")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type GKTurnBasedEventHandler;
}

#[cfg(feature = "GameKit_GKTurnBasedEventHandler")]
unsafe impl NSObjectProtocol for GKTurnBasedEventHandler {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKTurnBasedEventHandler")]
    #[deprecated = "Use registerListener on GKLocalPlayer with an object that implements the GKTurnBasedEventListener protocol"]
    pub type GKTurnBasedEventHandler;

    #[deprecated]
    #[objc2::method(sel = "sharedTurnBasedEventHandler", managed = "Other")]
    pub unsafe fn sharedTurnBasedEventHandler() -> Id<GKTurnBasedEventHandler>;

    #[deprecated]
    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<NSObject>>;

    #[deprecated]
    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(&self, delegate: Option<&NSObject>);
}
