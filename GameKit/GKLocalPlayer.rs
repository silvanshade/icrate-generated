//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::GameKit::*;

#[objc2::interface(
    unsafe super = GKPlayer,
    unsafe inherits = [
        GKBasePlayer,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKLocalPlayer")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type GKLocalPlayer;
}

#[cfg(feature = "GameKit_GKLocalPlayer")]
unsafe impl NSObjectProtocol for GKLocalPlayer {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKLocalPlayer")]
    pub type GKLocalPlayer;

    #[objc2::method(sel = "local", managed = "Other")]
    pub unsafe fn local() -> Id<GKLocalPlayer>;

    #[objc2::method(sel = "localPlayer", managed = "Other")]
    pub unsafe fn localPlayer() -> Id<GKLocalPlayer>;

    #[objc2::method(sel = "isAuthenticated")]
    pub unsafe fn isAuthenticated(&self) -> bool;

    #[objc2::method(sel = "isUnderage")]
    pub unsafe fn isUnderage(&self) -> bool;

    #[objc2::method(sel = "isMultiplayerGamingRestricted")]
    pub unsafe fn isMultiplayerGamingRestricted(&self) -> bool;

    #[objc2::method(sel = "isPersonalizedCommunicationRestricted")]
    pub unsafe fn isPersonalizedCommunicationRestricted(&self) -> bool;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "loadRecentPlayersWithCompletionHandler:")]
    pub unsafe fn loadRecentPlayersWithCompletionHandler(
        &self,
        completion_handler: Option<&Block<(*mut NSArray<GKPlayer>, *mut NSError), ()>>,
    );

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "loadChallengableFriendsWithCompletionHandler:")]
    pub unsafe fn loadChallengableFriendsWithCompletionHandler(
        &self,
        completion_handler: Option<&Block<(*mut NSArray<GKPlayer>, *mut NSError), ()>>,
    );

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setDefaultLeaderboardIdentifier:completionHandler:")]
    pub unsafe fn setDefaultLeaderboardIdentifier_completionHandler(
        &self,
        leaderboard_identifier: &NSString,
        completion_handler: Option<&Block<(*mut NSError,), ()>>,
    );

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "loadDefaultLeaderboardIdentifierWithCompletionHandler:")]
    pub unsafe fn loadDefaultLeaderboardIdentifierWithCompletionHandler(
        &self,
        completion_handler: Option<&Block<(*mut NSString, *mut NSError), ()>>,
    );

    #[cfg(all(
        feature = "Foundation_NSData",
        feature = "Foundation_NSError",
        feature = "Foundation_NSURL"
    ))]
    #[objc2::method(sel = "fetchItemsForIdentityVerificationSignature:")]
    pub unsafe fn fetchItemsForIdentityVerificationSignature(
        &self,
        completion_handler: Option<
            &Block<(*mut NSURL, *mut NSData, *mut NSData, u64, *mut NSError), ()>,
        >,
    );
}

#[objc2::protocol]
pub unsafe trait GKLocalPlayerListener:
    GKChallengeListener + GKInviteEventListener + GKSavedGameListener + GKTurnBasedEventListener
{
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKLocalPlayer")]
    pub type GKLocalPlayer;

    #[objc2::method(sel = "registerListener:")]
    pub unsafe fn registerListener(&self, listener: &ProtocolObject<dyn GKLocalPlayerListener>);

    #[objc2::method(sel = "unregisterListener:")]
    pub unsafe fn unregisterListener(&self, listener: &ProtocolObject<dyn GKLocalPlayerListener>);

    #[objc2::method(sel = "unregisterAllListeners")]
    pub unsafe fn unregisterAllListeners(&self);
}

extern_static!(GKPlayerAuthenticationDidChangeNotificationName: &'static NSNotificationName);

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKLocalPlayer")]
    pub type GKLocalPlayer;

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSString"))]
    #[deprecated = "Use setDefaultLeaderboardIdentifier:completionHandler: instead"]
    #[objc2::method(sel = "setDefaultLeaderboardCategoryID:completionHandler:")]
    pub unsafe fn setDefaultLeaderboardCategoryID_completionHandler(
        &self,
        category_id: Option<&NSString>,
        completion_handler: Option<&Block<(*mut NSError,), ()>>,
    );

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSString"))]
    #[deprecated = "Use loadDefaultLeaderboardIdentifierWithCompletionHandler: instead"]
    #[objc2::method(sel = "loadDefaultLeaderboardCategoryIDWithCompletionHandler:")]
    pub unsafe fn loadDefaultLeaderboardCategoryIDWithCompletionHandler(
        &self,
        completion_handler: Option<&Block<(*mut NSString, *mut NSError), ()>>,
    );

    #[cfg(feature = "Foundation_NSError")]
    #[deprecated = "Set the authenticateHandler instead"]
    #[objc2::method(sel = "authenticateWithCompletionHandler:")]
    pub unsafe fn authenticateWithCompletionHandler(
        &self,
        completion_handler: Option<&Block<(*mut NSError,), ()>>,
    );

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError",
        feature = "GameKit_GKPlayer"
    ))]
    #[deprecated]
    #[objc2::method(sel = "loadFriendPlayersWithCompletionHandler:")]
    pub unsafe fn loadFriendPlayersWithCompletionHandler(
        &self,
        completion_handler: Option<&Block<(*mut NSArray<GKPlayer>, *mut NSError), ()>>,
    );

    #[cfg(all(
        feature = "Foundation_NSData",
        feature = "Foundation_NSError",
        feature = "Foundation_NSURL"
    ))]
    #[deprecated = "API deprecated. Use fetchItemsForIdentityVerificationSignature: and the teamPlayerID value to verify a user identity."]
    #[objc2::method(sel = "generateIdentityVerificationSignatureWithCompletionHandler:")]
    pub unsafe fn generateIdentityVerificationSignatureWithCompletionHandler(
        &self,
        completion_handler: Option<
            &Block<(*mut NSURL, *mut NSData, *mut NSData, u64, *mut NSError), ()>,
        >,
    );
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKLocalPlayer")]
    pub type GKLocalPlayer;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError",
        feature = "Foundation_NSString"
    ))]
    #[deprecated = "This is never invoked and its implementation does nothing, use loadRecentPlayersWithCompletionHandler: instead"]
    #[objc2::method(sel = "loadFriendsWithCompletionHandler:")]
    pub unsafe fn loadFriendsWithCompletionHandler(
        &self,
        completion_handler: Option<&Block<(*mut NSArray<NSString>, *mut NSError), ()>>,
    );

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[deprecated = " This property is obsolete, Use loadFriendPlayersWithCompletionHandler: instead"]
    #[objc2::method(sel = "friends", managed = "Other")]
    pub unsafe fn friends(&self) -> Option<Id<NSArray<NSString>>>;
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum GKFriendsAuthorizationStatus {
    GKFriendsAuthorizationStatusNotDetermined = 0,
    GKFriendsAuthorizationStatusRestricted = 1,
    GKFriendsAuthorizationStatusDenied = 2,
    GKFriendsAuthorizationStatusAuthorized = 3,
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKLocalPlayer")]
    pub type GKLocalPlayer;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "loadFriendsAuthorizationStatus:")]
    pub unsafe fn loadFriendsAuthorizationStatus(
        &self,
        completion_handler: &Block<(GKFriendsAuthorizationStatus, *mut NSError), ()>,
    );

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError",
        feature = "GameKit_GKPlayer"
    ))]
    #[objc2::method(sel = "loadFriends:")]
    pub unsafe fn loadFriends(
        &self,
        completion_handler: &Block<(*mut NSArray<GKPlayer>, *mut NSError), ()>,
    );

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError",
        feature = "Foundation_NSString",
        feature = "GameKit_GKPlayer"
    ))]
    #[objc2::method(sel = "loadFriendsWithIdentifiers:completionHandler:")]
    pub unsafe fn loadFriendsWithIdentifiers_completionHandler(
        &self,
        identifiers: &NSArray<NSString>,
        completion_handler: &Block<(*mut NSArray<GKPlayer>, *mut NSError), ()>,
    );
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKLocalPlayer")]
    pub type GKLocalPlayer;

    #[cfg(all(feature = "AppKit_NSViewController", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "authenticateHandler")]
    pub unsafe fn authenticateHandler(
        &self,
    ) -> *mut Block<(*mut NSViewController, *mut NSError), ()>;

    #[cfg(all(feature = "AppKit_NSViewController", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "setAuthenticateHandler:")]
    pub unsafe fn setAuthenticateHandler(
        &self,
        authenticate_handler: Option<&Block<(*mut NSViewController, *mut NSError), ()>>,
    );

    #[objc2::method(sel = "isPresentingFriendRequestViewController")]
    pub unsafe fn isPresentingFriendRequestViewController(&self) -> bool;

    #[cfg(all(feature = "AppKit_NSWindow", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "presentFriendRequestCreatorFromWindow:error:", throws)]
    pub unsafe fn presentFriendRequestCreatorFromWindow_error(
        &self,
        window: Option<&NSWindow>,
    ) -> Result<(), Id<NSError>>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `GKPlayer`
    #[cfg(feature = "GameKit_GKLocalPlayer")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKLocalPlayer")]
    pub type GKLocalPlayer;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "anonymousGuestPlayerWithIdentifier:", managed = "Other")]
    pub unsafe fn anonymousGuestPlayerWithIdentifier(guest_identifier: &NSString) -> Id<Self>;
}
