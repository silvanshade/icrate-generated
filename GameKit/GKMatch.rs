//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::GameKit::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum GKMatchSendDataMode {
    GKMatchSendDataReliable = 0,
    GKMatchSendDataUnreliable = 1,
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum GKPlayerConnectionState {
    GKPlayerStateUnknown = 0,
    GKPlayerStateConnected = 1,
    GKPlayerStateDisconnected = 2,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKMatch")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type GKMatch;
}

#[cfg(feature = "GameKit_GKMatch")]
unsafe impl NSObjectProtocol for GKMatch {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKMatch")]
    pub type GKMatch;

    #[cfg(all(feature = "Foundation_NSArray", feature = "GameKit_GKPlayer"))]
    #[objc2::method(sel = "players", managed = "Other")]
    pub unsafe fn players(&self) -> Id<NSArray<GKPlayer>>;

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn GKMatchDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(&self, delegate: Option<&ProtocolObject<dyn GKMatchDelegate>>);

    #[objc2::method(sel = "expectedPlayerCount")]
    pub unsafe fn expectedPlayerCount(&self) -> NSUInteger;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSData",
        feature = "Foundation_NSError",
        feature = "GameKit_GKPlayer"
    ))]
    #[objc2::method(sel = "sendData:toPlayers:dataMode:error:", throws)]
    pub unsafe fn sendData_toPlayers_dataMode_error(
        &self,
        data: &NSData,
        players: &NSArray<GKPlayer>,
        mode: GKMatchSendDataMode,
    ) -> Result<(), Id<NSError>>;

    #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "sendDataToAllPlayers:withDataMode:error:", throws)]
    pub unsafe fn sendDataToAllPlayers_withDataMode_error(
        &self,
        data: &NSData,
        mode: GKMatchSendDataMode,
    ) -> Result<(), Id<NSError>>;

    #[objc2::method(sel = "disconnect")]
    pub unsafe fn disconnect(&self);

    #[cfg(all(feature = "Foundation_NSString", feature = "GameKit_GKVoiceChat"))]
    #[objc2::method(sel = "voiceChatWithName:", managed = "Other")]
    pub unsafe fn voiceChatWithName(&self, name: &NSString) -> Option<Id<GKVoiceChat>>;

    #[cfg(feature = "GameKit_GKPlayer")]
    #[objc2::method(sel = "chooseBestHostingPlayerWithCompletionHandler:")]
    pub unsafe fn chooseBestHostingPlayerWithCompletionHandler(
        &self,
        completion_handler: &Block<(*mut GKPlayer,), ()>,
    );

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "rematchWithCompletionHandler:")]
    pub unsafe fn rematchWithCompletionHandler(
        &self,
        completion_handler: Option<&Block<(*mut GKMatch, *mut NSError), ()>>,
    );
}

#[objc2::protocol]
pub unsafe trait GKMatchDelegate: NSObjectProtocol {
    #[cfg(all(
        feature = "Foundation_NSData",
        feature = "GameKit_GKMatch",
        feature = "GameKit_GKPlayer"
    ))]
    #[objc2::method(optional, sel = "match:didReceiveData:fromRemotePlayer:")]
    unsafe fn match_didReceiveData_fromRemotePlayer(
        &self,
        r#match: &GKMatch,
        data: &NSData,
        player: &GKPlayer,
    );

    #[cfg(all(
        feature = "Foundation_NSData",
        feature = "GameKit_GKMatch",
        feature = "GameKit_GKPlayer"
    ))]
    #[objc2::method(optional, sel = "match:didReceiveData:forRecipient:fromRemotePlayer:")]
    unsafe fn match_didReceiveData_forRecipient_fromRemotePlayer(
        &self,
        r#match: &GKMatch,
        data: &NSData,
        recipient: &GKPlayer,
        player: &GKPlayer,
    );

    #[cfg(all(feature = "GameKit_GKMatch", feature = "GameKit_GKPlayer"))]
    #[objc2::method(optional, sel = "match:player:didChangeConnectionState:")]
    unsafe fn match_player_didChangeConnectionState(
        &self,
        r#match: &GKMatch,
        player: &GKPlayer,
        state: GKPlayerConnectionState,
    );

    #[cfg(all(feature = "Foundation_NSError", feature = "GameKit_GKMatch"))]
    #[objc2::method(optional, sel = "match:didFailWithError:")]
    unsafe fn match_didFailWithError(&self, r#match: &GKMatch, error: Option<&NSError>);

    #[cfg(all(feature = "GameKit_GKMatch", feature = "GameKit_GKPlayer"))]
    #[objc2::method(optional, sel = "match:shouldReinviteDisconnectedPlayer:")]
    unsafe fn match_shouldReinviteDisconnectedPlayer(
        &self,
        r#match: &GKMatch,
        player: &GKPlayer,
    ) -> bool;

    #[cfg(all(
        feature = "Foundation_NSData",
        feature = "Foundation_NSString",
        feature = "GameKit_GKMatch"
    ))]
    #[deprecated = "This is never invoked and its implementation does nothing, use match:didReceiveData:fromRemotePlayer:"]
    #[objc2::method(optional, sel = "match:didReceiveData:fromPlayer:")]
    unsafe fn match_didReceiveData_fromPlayer(
        &self,
        r#match: &GKMatch,
        data: &NSData,
        player_id: &NSString,
    );

    #[cfg(all(feature = "Foundation_NSString", feature = "GameKit_GKMatch"))]
    #[deprecated = "This is never invoked and its implementation does nothing, use match:player:didChangeConnectionState:"]
    #[objc2::method(optional, sel = "match:player:didChangeState:")]
    unsafe fn match_player_didChangeState(
        &self,
        r#match: &GKMatch,
        player_id: &NSString,
        state: GKPlayerConnectionState,
    );

    #[cfg(all(feature = "Foundation_NSString", feature = "GameKit_GKMatch"))]
    #[deprecated = "This is never invoked and its implementation does nothing, use shouldReinviteDisconnectedPlayer:"]
    #[objc2::method(optional, sel = "match:shouldReinvitePlayer:")]
    unsafe fn match_shouldReinvitePlayer(&self, r#match: &GKMatch, player_id: &NSString) -> bool;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKMatch")]
    pub type GKMatch;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "This is never invoked and its implementation does nothing, use chooseBestHostingPlayerWithCompletionHandler:"]
    #[objc2::method(sel = "chooseBestHostPlayerWithCompletionHandler:")]
    pub unsafe fn chooseBestHostPlayerWithCompletionHandler(
        &self,
        completion_handler: &Block<(*mut NSString,), ()>,
    );

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSData",
        feature = "Foundation_NSError",
        feature = "Foundation_NSString"
    ))]
    #[deprecated = "This is never invoked and its implementation does nothing, use sendData:toPlayers:dataMode:error:"]
    #[objc2::method(sel = "sendData:toPlayers:withDataMode:error:", throws)]
    pub unsafe fn sendData_toPlayers_withDataMode_error(
        &self,
        data: &NSData,
        player_i_ds: &NSArray<NSString>,
        mode: GKMatchSendDataMode,
    ) -> Result<(), Id<NSError>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[deprecated = "This is never invoked and its implementation does nothing, use players instead."]
    #[objc2::method(sel = "playerIDs", managed = "Other")]
    pub unsafe fn playerIDs(&self) -> Option<Id<NSArray<NSString>>>;
}
