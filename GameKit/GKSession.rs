//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::GameKit::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[deprecated = "Use MCSession from the MultipeerConnectivity framework instead"]
    #[cfg(feature = "GameKit_GKSession")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type GKSession;
}

#[cfg(feature = "GameKit_GKSession")]
unsafe impl NSObjectProtocol for GKSession {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKSession")]
    #[deprecated = "Use MCSession from the MultipeerConnectivity framework instead"]
    pub type GKSession;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "initWithSessionID:displayName:sessionMode:", managed = "Init")]
    pub unsafe fn initWithSessionID_displayName_sessionMode(
        this: Option<Allocated<Self>>,
        session_id: Option<&NSString>,
        name: Option<&NSString>,
        mode: GKSessionMode,
    ) -> Option<Id<Self>>;

    #[deprecated]
    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn GKSessionDelegate>>>;

    #[deprecated]
    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(&self, delegate: Option<&ProtocolObject<dyn GKSessionDelegate>>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "sessionID", managed = "Other")]
    pub unsafe fn sessionID(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "displayName", managed = "Other")]
    pub unsafe fn displayName(&self) -> Option<Id<NSString>>;

    #[deprecated]
    #[objc2::method(sel = "sessionMode")]
    pub unsafe fn sessionMode(&self) -> GKSessionMode;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "peerID", managed = "Other")]
    pub unsafe fn peerID(&self) -> Option<Id<NSString>>;

    #[objc2::method(sel = "isAvailable")]
    pub unsafe fn isAvailable(&self) -> bool;

    #[objc2::method(sel = "setAvailable:")]
    pub unsafe fn setAvailable(&self, available: bool);

    #[objc2::method(sel = "disconnectTimeout")]
    pub unsafe fn disconnectTimeout(&self) -> NSTimeInterval;

    #[objc2::method(sel = "setDisconnectTimeout:")]
    pub unsafe fn setDisconnectTimeout(&self, disconnect_timeout: NSTimeInterval);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "displayNameForPeer:", managed = "Other")]
    pub unsafe fn displayNameForPeer(&self, peer_id: Option<&NSString>) -> Option<Id<NSString>>;

    #[objc2::method(sel = "setDataReceiveHandler:withContext:")]
    pub unsafe fn setDataReceiveHandler_withContext(
        &self,
        handler: Option<&Object>,
        context: *mut c_void,
    );

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "connectToPeer:withTimeout:")]
    pub unsafe fn connectToPeer_withTimeout(
        &self,
        peer_id: Option<&NSString>,
        timeout: NSTimeInterval,
    );

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "cancelConnectToPeer:")]
    pub unsafe fn cancelConnectToPeer(&self, peer_id: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "denyConnectionFromPeer:")]
    pub unsafe fn denyConnectionFromPeer(&self, peer_id: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "disconnectPeerFromAllPeers:")]
    pub unsafe fn disconnectPeerFromAllPeers(&self, peer_id: Option<&NSString>);

    #[objc2::method(sel = "disconnectFromAllPeers")]
    pub unsafe fn disconnectFromAllPeers(&self);

    #[cfg(feature = "Foundation_NSArray")]
    #[deprecated]
    #[objc2::method(sel = "peersWithConnectionState:", managed = "Other")]
    pub unsafe fn peersWithConnectionState(
        &self,
        state: GKPeerConnectionState,
    ) -> Option<Id<NSArray>>;
}
