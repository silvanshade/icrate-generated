//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::GameKit::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum GKMatchmakingMode {
    GKMatchmakingModeDefault = 0,
    GKMatchmakingModeNearbyOnly = 1,
    GKMatchmakingModeAutomatchOnly = 2,
    GKMatchmakingModeInviteOnly = 3,
}

#[objc2::interface(
    unsafe super = NSViewController,
    unsafe inherits = [
        NSResponder,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKMatchmakerViewController")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type GKMatchmakerViewController;
}

#[cfg(feature = "GameKit_GKMatchmakerViewController")]
unsafe impl GKViewController for GKMatchmakerViewController {}

#[cfg(feature = "GameKit_GKMatchmakerViewController")]
unsafe impl NSCoding for GKMatchmakerViewController {}

#[cfg(feature = "GameKit_GKMatchmakerViewController")]
unsafe impl NSEditor for GKMatchmakerViewController {}

#[cfg(feature = "GameKit_GKMatchmakerViewController")]
unsafe impl NSObjectProtocol for GKMatchmakerViewController {}

#[cfg(feature = "GameKit_GKMatchmakerViewController")]
unsafe impl NSSeguePerforming for GKMatchmakerViewController {}

#[cfg(feature = "GameKit_GKMatchmakerViewController")]
unsafe impl NSUserInterfaceItemIdentification for GKMatchmakerViewController {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKMatchmakerViewController")]
    pub type GKMatchmakerViewController;

    #[objc2::method(sel = "matchmakerDelegate", managed = "Other")]
    pub unsafe fn matchmakerDelegate(
        &self,
    ) -> Option<Id<ProtocolObject<dyn GKMatchmakerViewControllerDelegate>>>;

    #[objc2::method(sel = "setMatchmakerDelegate:")]
    pub unsafe fn setMatchmakerDelegate(
        &self,
        matchmaker_delegate: Option<&ProtocolObject<dyn GKMatchmakerViewControllerDelegate>>,
    );

    #[cfg(feature = "GameKit_GKMatchRequest")]
    #[objc2::method(sel = "matchRequest", managed = "Other")]
    pub unsafe fn matchRequest(&self) -> Id<GKMatchRequest>;

    #[objc2::method(sel = "isHosted")]
    pub unsafe fn isHosted(&self) -> bool;

    #[objc2::method(sel = "setHosted:")]
    pub unsafe fn setHosted(&self, hosted: bool);

    #[objc2::method(sel = "matchmakingMode")]
    pub unsafe fn matchmakingMode(&self) -> GKMatchmakingMode;

    #[objc2::method(sel = "setMatchmakingMode:")]
    pub unsafe fn setMatchmakingMode(&self, matchmaking_mode: GKMatchmakingMode);

    #[objc2::method(sel = "canStartWithMinimumPlayers")]
    pub unsafe fn canStartWithMinimumPlayers(&self) -> bool;

    #[objc2::method(sel = "setCanStartWithMinimumPlayers:")]
    pub unsafe fn setCanStartWithMinimumPlayers(&self, can_start_with_minimum_players: bool);

    #[cfg(feature = "GameKit_GKMatchRequest")]
    #[objc2::method(sel = "initWithMatchRequest:", managed = "Init")]
    pub unsafe fn initWithMatchRequest(
        this: Option<Allocated<Self>>,
        request: &GKMatchRequest,
    ) -> Option<Id<Self>>;

    #[cfg(feature = "GameKit_GKInvite")]
    #[objc2::method(sel = "initWithInvite:", managed = "Init")]
    pub unsafe fn initWithInvite(
        this: Option<Allocated<Self>>,
        invite: &GKInvite,
    ) -> Option<Id<Self>>;

    #[cfg(feature = "GameKit_GKMatch")]
    #[objc2::method(sel = "addPlayersToMatch:")]
    pub unsafe fn addPlayersToMatch(&self, r#match: &GKMatch);

    #[cfg(feature = "GameKit_GKPlayer")]
    #[objc2::method(sel = "setHostedPlayer:didConnect:")]
    pub unsafe fn setHostedPlayer_didConnect(&self, player: &GKPlayer, connected: bool);

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "defaultInvitationMessage", managed = "Other")]
    pub unsafe fn defaultInvitationMessage(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "setDefaultInvitationMessage:")]
    pub unsafe fn setDefaultInvitationMessage(&self, default_invitation_message: Option<&NSString>);
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKMatchmakerViewController")]
    pub type GKMatchmakerViewController;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "This is never invoked and its implementation does nothing, use setHostedPlayer:didConnect:"]
    #[objc2::method(sel = "setHostedPlayer:connected:")]
    pub unsafe fn setHostedPlayer_connected(&self, player_id: &NSString, connected: bool);
}

#[objc2::protocol]
pub unsafe trait GKMatchmakerViewControllerDelegate: NSObjectProtocol {
    #[cfg(feature = "GameKit_GKMatchmakerViewController")]
    #[objc2::method(sel = "matchmakerViewControllerWasCancelled:")]
    unsafe fn matchmakerViewControllerWasCancelled(
        &self,
        view_controller: &GKMatchmakerViewController,
    );

    #[cfg(all(
        feature = "Foundation_NSError",
        feature = "GameKit_GKMatchmakerViewController"
    ))]
    #[objc2::method(sel = "matchmakerViewController:didFailWithError:")]
    unsafe fn matchmakerViewController_didFailWithError(
        &self,
        view_controller: &GKMatchmakerViewController,
        error: &NSError,
    );

    #[cfg(all(
        feature = "GameKit_GKMatch",
        feature = "GameKit_GKMatchmakerViewController"
    ))]
    #[objc2::method(optional, sel = "matchmakerViewController:didFindMatch:")]
    unsafe fn matchmakerViewController_didFindMatch(
        &self,
        view_controller: &GKMatchmakerViewController,
        r#match: &GKMatch,
    );

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "GameKit_GKMatchmakerViewController",
        feature = "GameKit_GKPlayer"
    ))]
    #[objc2::method(optional, sel = "matchmakerViewController:didFindHostedPlayers:")]
    unsafe fn matchmakerViewController_didFindHostedPlayers(
        &self,
        view_controller: &GKMatchmakerViewController,
        players: &NSArray<GKPlayer>,
    );

    #[cfg(all(
        feature = "GameKit_GKMatchmakerViewController",
        feature = "GameKit_GKPlayer"
    ))]
    #[objc2::method(optional, sel = "matchmakerViewController:hostedPlayerDidAccept:")]
    unsafe fn matchmakerViewController_hostedPlayerDidAccept(
        &self,
        view_controller: &GKMatchmakerViewController,
        player: &GKPlayer,
    );

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSString",
        feature = "GameKit_GKMatchmakerViewController"
    ))]
    #[deprecated = "This is never invoked and its implementation does nothing, use matchmakerViewController:didFindHostedPlayers:"]
    #[objc2::method(optional, sel = "matchmakerViewController:didFindPlayers:")]
    unsafe fn matchmakerViewController_didFindPlayers(
        &self,
        view_controller: &GKMatchmakerViewController,
        player_i_ds: &NSArray<NSString>,
    );

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "GameKit_GKMatchmakerViewController"
    ))]
    #[deprecated = "This is never invoked and its implementation does nothing, use matchmakerViewController:hostedPlayerDidAccept:"]
    #[objc2::method(
        optional,
        sel = "matchmakerViewController:didReceiveAcceptFromHostedPlayer:"
    )]
    unsafe fn matchmakerViewController_didReceiveAcceptFromHostedPlayer(
        &self,
        view_controller: &GKMatchmakerViewController,
        player_id: &NSString,
    );
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSViewController`
    #[cfg(feature = "GameKit_GKMatchmakerViewController")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKMatchmakerViewController")]
    pub type GKMatchmakerViewController;

    #[cfg(feature = "Foundation_NSBundle")]
    #[objc2::method(sel = "initWithNibName:bundle:", managed = "Init")]
    pub unsafe fn initWithNibName_bundle(
        this: Option<Allocated<Self>>,
        nib_name_or_nil: Option<&NSNibName>,
        nib_bundle_or_nil: Option<&NSBundle>,
    ) -> Id<Self>;
}
