//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::GameKit::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKAchievement")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type GKAchievement;
}

#[cfg(feature = "GameKit_GKAchievement")]
unsafe impl NSCoding for GKAchievement {}

#[cfg(feature = "GameKit_GKAchievement")]
unsafe impl NSObjectProtocol for GKAchievement {}

#[cfg(feature = "GameKit_GKAchievement")]
unsafe impl NSSecureCoding for GKAchievement {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKAchievement")]
    pub type GKAchievement;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "loadAchievementsWithCompletionHandler:")]
    pub unsafe fn loadAchievementsWithCompletionHandler(
        completion_handler: Option<&Block<(*mut NSArray<GKAchievement>, *mut NSError), ()>>,
    );

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "resetAchievementsWithCompletionHandler:")]
    pub unsafe fn resetAchievementsWithCompletionHandler(
        completion_handler: Option<&Block<(*mut NSError,), ()>>,
    );

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithIdentifier:", managed = "Init")]
    pub unsafe fn initWithIdentifier(
        this: Option<Allocated<Self>>,
        identifier: Option<&NSString>,
    ) -> Id<Self>;

    #[cfg(all(feature = "Foundation_NSString", feature = "GameKit_GKPlayer"))]
    #[objc2::method(sel = "initWithIdentifier:player:", managed = "Init")]
    pub unsafe fn initWithIdentifier_player(
        this: Option<Allocated<Self>>,
        identifier: Option<&NSString>,
        player: &GKPlayer,
    ) -> Id<Self>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "reportAchievements:withCompletionHandler:")]
    pub unsafe fn reportAchievements_withCompletionHandler(
        achievements: &NSArray<GKAchievement>,
        completion_handler: Option<&Block<(*mut NSError,), ()>>,
    );

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "identifier", managed = "Other")]
    pub unsafe fn identifier(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setIdentifier:")]
    pub unsafe fn setIdentifier(&self, identifier: Option<&NSString>);

    #[objc2::method(sel = "percentComplete")]
    pub unsafe fn percentComplete(&self) -> c_double;

    #[objc2::method(sel = "setPercentComplete:")]
    pub unsafe fn setPercentComplete(&self, percent_complete: c_double);

    #[objc2::method(sel = "isCompleted")]
    pub unsafe fn isCompleted(&self) -> bool;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "lastReportedDate", managed = "Other")]
    pub unsafe fn lastReportedDate(&self) -> Id<NSDate>;

    #[objc2::method(sel = "showsCompletionBanner")]
    pub unsafe fn showsCompletionBanner(&self) -> bool;

    #[objc2::method(sel = "setShowsCompletionBanner:")]
    pub unsafe fn setShowsCompletionBanner(&self, shows_completion_banner: bool);

    #[cfg(feature = "GameKit_GKPlayer")]
    #[objc2::method(sel = "player", managed = "Other")]
    pub unsafe fn player(&self) -> Option<Id<GKPlayer>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKAchievement")]
    pub type GKAchievement;

    #[cfg(feature = "Foundation_NSError")]
    #[deprecated = "Use +reportAchievements:withCompletionHandler:"]
    #[objc2::method(sel = "reportAchievementWithCompletionHandler:")]
    pub unsafe fn reportAchievementWithCompletionHandler(
        &self,
        completion_handler: Option<&Block<(*mut NSError,), ()>>,
    );

    #[deprecated = "Use isHidden on the GKAchievementDescription class instead"]
    #[objc2::method(sel = "isHidden")]
    pub unsafe fn isHidden(&self) -> bool;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKAchievement")]
    pub type GKAchievement;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithIdentifier:forPlayer:", managed = "Init")]
    pub unsafe fn initWithIdentifier_forPlayer(
        this: Option<Allocated<Self>>,
        identifier: Option<&NSString>,
        player_id: &NSString,
    ) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "playerID", managed = "Other")]
    pub unsafe fn playerID(&self) -> Option<Id<NSString>>;
}
