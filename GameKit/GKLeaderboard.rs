//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::GameKit::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum GKLeaderboardTimeScope {
    GKLeaderboardTimeScopeToday = 0,
    GKLeaderboardTimeScopeWeek = 1,
    GKLeaderboardTimeScopeAllTime = 2,
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum GKLeaderboardPlayerScope {
    GKLeaderboardPlayerScopeGlobal = 0,
    GKLeaderboardPlayerScopeFriendsOnly = 1,
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum GKLeaderboardType {
    GKLeaderboardTypeClassic = 0,
    GKLeaderboardTypeRecurring = 1,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKLeaderboard")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type GKLeaderboard;
}

#[cfg(feature = "GameKit_GKLeaderboard")]
unsafe impl NSObjectProtocol for GKLeaderboard {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKLeaderboard")]
    pub type GKLeaderboard;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "title", managed = "Other")]
    pub unsafe fn title(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "groupIdentifier", managed = "Other")]
    pub unsafe fn groupIdentifier(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "baseLeaderboardID", managed = "Other")]
    pub unsafe fn baseLeaderboardID(&self) -> Id<NSString>;

    #[objc2::method(sel = "type")]
    pub unsafe fn r#type(&self) -> GKLeaderboardType;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "startDate", managed = "Other")]
    pub unsafe fn startDate(&self) -> Option<Id<NSDate>>;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "nextStartDate", managed = "Other")]
    pub unsafe fn nextStartDate(&self) -> Option<Id<NSDate>>;

    #[objc2::method(sel = "duration")]
    pub unsafe fn duration(&self) -> NSTimeInterval;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "loadLeaderboardsWithIDs:completionHandler:")]
    pub unsafe fn loadLeaderboardsWithIDs_completionHandler(
        leaderboard_i_ds: Option<&NSArray<NSString>>,
        completion_handler: &Block<(*mut NSArray<GKLeaderboard>, *mut NSError), ()>,
    );

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "loadPreviousOccurrenceWithCompletionHandler:")]
    pub unsafe fn loadPreviousOccurrenceWithCompletionHandler(
        &self,
        completion_handler: &Block<(*mut GKLeaderboard, *mut NSError), ()>,
    );

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError",
        feature = "Foundation_NSString",
        feature = "GameKit_GKPlayer"
    ))]
    #[objc2::method(sel = "submitScore:context:player:leaderboardIDs:completionHandler:")]
    pub unsafe fn submitScore_context_player_leaderboardIDs_completionHandler(
        score: NSInteger,
        context: NSUInteger,
        player: &GKPlayer,
        leaderboard_i_ds: &NSArray<NSString>,
        completion_handler: &Block<(*mut NSError,), ()>,
    );

    #[cfg(all(feature = "Foundation_NSError", feature = "GameKit_GKPlayer"))]
    #[objc2::method(sel = "submitScore:context:player:completionHandler:")]
    pub unsafe fn submitScore_context_player_completionHandler(
        &self,
        score: NSInteger,
        context: NSUInteger,
        player: &GKPlayer,
        completion_handler: &Block<(*mut NSError,), ()>,
    );

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError",
        feature = "GameKit_GKLeaderboardEntry"
    ))]
    #[objc2::method(sel = "loadEntriesForPlayerScope:timeScope:range:completionHandler:")]
    pub unsafe fn loadEntriesForPlayerScope_timeScope_range_completionHandler(
        &self,
        player_scope: GKLeaderboardPlayerScope,
        time_scope: GKLeaderboardTimeScope,
        range: NSRange,
        completion_handler: &Block<
            (
                *mut GKLeaderboardEntry,
                *mut NSArray<GKLeaderboardEntry>,
                NSInteger,
                *mut NSError,
            ),
            (),
        >,
    );

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError",
        feature = "GameKit_GKLeaderboardEntry",
        feature = "GameKit_GKPlayer"
    ))]
    #[objc2::method(sel = "loadEntriesForPlayers:timeScope:completionHandler:")]
    pub unsafe fn loadEntriesForPlayers_timeScope_completionHandler(
        &self,
        players: &NSArray<GKPlayer>,
        time_scope: GKLeaderboardTimeScope,
        completion_handler: &Block<
            (
                *mut GKLeaderboardEntry,
                *mut NSArray<GKLeaderboardEntry>,
                *mut NSError,
            ),
            (),
        >,
    );
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKLeaderboard")]
    pub type GKLeaderboard;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "Use identifier instead"]
    #[objc2::method(sel = "category", managed = "Other")]
    pub unsafe fn category(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "Use identifier instead"]
    #[objc2::method(sel = "setCategory:")]
    pub unsafe fn setCategory(&self, category: Option<&NSString>);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[deprecated = "Use initWithPlayers: instead"]
    #[objc2::method(sel = "initWithPlayerIDs:", managed = "Init")]
    pub unsafe fn initWithPlayerIDs(
        this: Option<Allocated<Self>>,
        player_i_ds: Option<&NSArray<NSString>>,
    ) -> Option<Id<Self>>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError",
        feature = "Foundation_NSString"
    ))]
    #[deprecated = "Use loadLeaderboardsWithIDs:completionHandler: instead"]
    #[objc2::method(sel = "loadCategoriesWithCompletionHandler:")]
    pub unsafe fn loadCategoriesWithCompletionHandler(
        completion_handler: Option<
            &Block<(*mut NSArray<NSString>, *mut NSArray<NSString>, *mut NSError), ()>,
        >,
    );

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSString"))]
    #[deprecated = "Use setDefaultLeaderboardIdentifier:completionHandler: on GKLocalPlayer instead"]
    #[objc2::method(sel = "setDefaultLeaderboard:withCompletionHandler:")]
    pub unsafe fn setDefaultLeaderboard_withCompletionHandler(
        leaderboard_identifier: Option<&NSString>,
        completion_handler: Option<&Block<(*mut NSError,), ()>>,
    );

    #[deprecated = "Use loadEntriesForPlayerScope:timeScope:range:completionHandler: instead."]
    #[objc2::method(sel = "timeScope")]
    pub unsafe fn timeScope(&self) -> GKLeaderboardTimeScope;

    #[deprecated = "Use loadEntriesForPlayerScope:timeScope:range:completionHandler: instead."]
    #[objc2::method(sel = "setTimeScope:")]
    pub unsafe fn setTimeScope(&self, time_scope: GKLeaderboardTimeScope);

    #[deprecated = "Use loadEntriesForPlayerScope:timeScope:range:completionHandler: instead."]
    #[objc2::method(sel = "playerScope")]
    pub unsafe fn playerScope(&self) -> GKLeaderboardPlayerScope;

    #[deprecated = "Use loadEntriesForPlayerScope:timeScope:range:completionHandler: instead."]
    #[objc2::method(sel = "setPlayerScope:")]
    pub unsafe fn setPlayerScope(&self, player_scope: GKLeaderboardPlayerScope);

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "Use loadEntriesForPlayerScope:timeScope:range:completionHandler: instead."]
    #[objc2::method(sel = "identifier", managed = "Other")]
    pub unsafe fn identifier(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "Use loadEntriesForPlayerScope:timeScope:range:completionHandler: instead."]
    #[objc2::method(sel = "setIdentifier:")]
    pub unsafe fn setIdentifier(&self, identifier: Option<&NSString>);

    #[deprecated = "Use loadEntriesForPlayerScope:timeScope:range:completionHandler: instead."]
    #[objc2::method(sel = "range")]
    pub unsafe fn range(&self) -> NSRange;

    #[deprecated = "Use loadEntriesForPlayerScope:timeScope:range:completionHandler: instead."]
    #[objc2::method(sel = "setRange:")]
    pub unsafe fn setRange(&self, range: NSRange);

    #[cfg(all(feature = "Foundation_NSArray", feature = "GameKit_GKScore"))]
    #[deprecated = "Use loadEntriesForPlayerScope:timeScope:range:completionHandler: to obtain scores."]
    #[objc2::method(sel = "scores", managed = "Other")]
    pub unsafe fn scores(&self) -> Option<Id<NSArray<GKScore>>>;

    #[deprecated = "Use loadEntriesForPlayerScope:timeScope:range:completionHandler: method to obtain the size of the leaderboard."]
    #[objc2::method(sel = "maxRange")]
    pub unsafe fn maxRange(&self) -> NSUInteger;

    #[cfg(feature = "GameKit_GKScore")]
    #[deprecated = "Use loadEntriesForPlayerScope:timeScope:range:completionHandler: method to obtain scores."]
    #[objc2::method(sel = "localPlayerScore", managed = "Other")]
    pub unsafe fn localPlayerScore(&self) -> Option<Id<GKScore>>;

    #[deprecated = "Use loadEntriesForPlayerScope:timeScope:range:completionHandler: method to obtain scores."]
    #[objc2::method(sel = "isLoading")]
    pub unsafe fn isLoading(&self) -> bool;

    #[deprecated = "Do not instantiate GKLeaderboard directly. Use class method loadLeaderboardsWithIDs:completionHandler: to get the leaderboards."]
    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "GameKit_GKPlayer"))]
    #[deprecated = "Use instance method loadEntriesForPlayers:timeScope:completionHandler: instead."]
    #[objc2::method(sel = "initWithPlayers:", managed = "Init")]
    pub unsafe fn initWithPlayers(
        this: Option<Allocated<Self>>,
        players: &NSArray<GKPlayer>,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError",
        feature = "GameKit_GKScore"
    ))]
    #[deprecated = "Use loadEntriesForPlayerScope:timeScope:range:completionHandler:."]
    #[objc2::method(sel = "loadScoresWithCompletionHandler:")]
    pub unsafe fn loadScoresWithCompletionHandler(
        &self,
        completion_handler: Option<&Block<(*mut NSArray<GKScore>, *mut NSError), ()>>,
    );

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSError"))]
    #[deprecated = "Use class method loadLeaderboardsWithIDs:completionHandler:"]
    #[objc2::method(sel = "loadLeaderboardsWithCompletionHandler:")]
    pub unsafe fn loadLeaderboardsWithCompletionHandler(
        completion_handler: Option<&Block<(*mut NSArray<GKLeaderboard>, *mut NSError), ()>>,
    );
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKLeaderboard")]
    pub type GKLeaderboard;

    #[cfg(all(feature = "AppKit_NSImage", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "loadImageWithCompletionHandler:")]
    pub unsafe fn loadImageWithCompletionHandler(
        &self,
        completion_handler: Option<&Block<(*mut NSImage, *mut NSError), ()>>,
    );
}
