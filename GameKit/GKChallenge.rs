//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::GameKit::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum GKChallengeState {
    GKChallengeStateInvalid = 0,
    GKChallengeStatePending = 1,
    GKChallengeStateCompleted = 2,
    GKChallengeStateDeclined = 3,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKChallenge")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type GKChallenge;
}

#[cfg(feature = "GameKit_GKChallenge")]
unsafe impl NSCoding for GKChallenge {}

#[cfg(feature = "GameKit_GKChallenge")]
unsafe impl NSObjectProtocol for GKChallenge {}

#[cfg(feature = "GameKit_GKChallenge")]
unsafe impl NSSecureCoding for GKChallenge {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKChallenge")]
    pub type GKChallenge;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "loadReceivedChallengesWithCompletionHandler:")]
    pub unsafe fn loadReceivedChallengesWithCompletionHandler(
        completion_handler: Option<&Block<(*mut NSArray<GKChallenge>, *mut NSError), ()>>,
    );

    #[objc2::method(sel = "decline")]
    pub unsafe fn decline(&self);

    #[cfg(feature = "GameKit_GKPlayer")]
    #[objc2::method(sel = "issuingPlayer", managed = "Other")]
    pub unsafe fn issuingPlayer(&self) -> Option<Id<GKPlayer>>;

    #[cfg(feature = "GameKit_GKPlayer")]
    #[objc2::method(sel = "receivingPlayer", managed = "Other")]
    pub unsafe fn receivingPlayer(&self) -> Option<Id<GKPlayer>>;

    #[objc2::method(sel = "state")]
    pub unsafe fn state(&self) -> GKChallengeState;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "issueDate", managed = "Other")]
    pub unsafe fn issueDate(&self) -> Id<NSDate>;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "completionDate", managed = "Other")]
    pub unsafe fn completionDate(&self) -> Option<Id<NSDate>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "message", managed = "Other")]
    pub unsafe fn message(&self) -> Option<Id<NSString>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKChallenge")]
    pub type GKChallenge;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = " This property is obsolete, Use issuingPlayer instead"]
    #[objc2::method(sel = "issuingPlayerID", managed = "Other")]
    pub unsafe fn issuingPlayerID(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = " This property is obsolete, Use receivingPlayer instead"]
    #[objc2::method(sel = "receivingPlayerID", managed = "Other")]
    pub unsafe fn receivingPlayerID(&self) -> Option<Id<NSString>>;
}

#[objc2::interface(
    unsafe super = GKChallenge,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKScoreChallenge")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type GKScoreChallenge;
}

#[cfg(feature = "GameKit_GKScoreChallenge")]
unsafe impl NSCoding for GKScoreChallenge {}

#[cfg(feature = "GameKit_GKScoreChallenge")]
unsafe impl NSObjectProtocol for GKScoreChallenge {}

#[cfg(feature = "GameKit_GKScoreChallenge")]
unsafe impl NSSecureCoding for GKScoreChallenge {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKScoreChallenge")]
    pub type GKScoreChallenge;

    #[cfg(feature = "GameKit_GKScore")]
    #[objc2::method(sel = "score", managed = "Other")]
    pub unsafe fn score(&self) -> Option<Id<GKScore>>;
}

#[objc2::interface(
    unsafe super = GKChallenge,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKAchievementChallenge")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type GKAchievementChallenge;
}

#[cfg(feature = "GameKit_GKAchievementChallenge")]
unsafe impl NSCoding for GKAchievementChallenge {}

#[cfg(feature = "GameKit_GKAchievementChallenge")]
unsafe impl NSObjectProtocol for GKAchievementChallenge {}

#[cfg(feature = "GameKit_GKAchievementChallenge")]
unsafe impl NSSecureCoding for GKAchievementChallenge {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKAchievementChallenge")]
    pub type GKAchievementChallenge;

    #[cfg(feature = "GameKit_GKAchievement")]
    #[objc2::method(sel = "achievement", managed = "Other")]
    pub unsafe fn achievement(&self) -> Option<Id<GKAchievement>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKScore")]
    pub type GKScore;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError",
        feature = "GameKit_GKChallenge"
    ))]
    #[deprecated = "pass GKLeaderboardScore to reportLeaderboardScores:withEligibleChallenges:withCompletionHandler instead"]
    #[objc2::method(sel = "reportScores:withEligibleChallenges:withCompletionHandler:")]
    pub unsafe fn reportScores_withEligibleChallenges_withCompletionHandler(
        scores: &NSArray<GKScore>,
        challenges: &NSArray<GKChallenge>,
        completion_handler: Option<&Block<(*mut NSError,), ()>>,
    );

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError",
        feature = "GameKit_GKChallenge",
        feature = "GameKit_GKLeaderboardScore"
    ))]
    #[objc2::method(sel = "reportLeaderboardScores:withEligibleChallenges:withCompletionHandler:")]
    pub unsafe fn reportLeaderboardScores_withEligibleChallenges_withCompletionHandler(
        scores: &NSArray<GKLeaderboardScore>,
        challenges: &NSArray<GKChallenge>,
        completion_handler: Option<&Block<(*mut NSError,), ()>>,
    );
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKAchievement")]
    pub type GKAchievement;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError",
        feature = "GameKit_GKPlayer"
    ))]
    #[objc2::method(sel = "selectChallengeablePlayers:withCompletionHandler:")]
    pub unsafe fn selectChallengeablePlayers_withCompletionHandler(
        &self,
        players: &NSArray<GKPlayer>,
        completion_handler: Option<&Block<(*mut NSArray<GKPlayer>, *mut NSError), ()>>,
    );

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError",
        feature = "GameKit_GKChallenge"
    ))]
    #[objc2::method(sel = "reportAchievements:withEligibleChallenges:withCompletionHandler:")]
    pub unsafe fn reportAchievements_withEligibleChallenges_withCompletionHandler(
        achievements: &NSArray<GKAchievement>,
        challenges: &NSArray<GKChallenge>,
        completion_handler: Option<&Block<(*mut NSError,), ()>>,
    );
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKScore")]
    pub type GKScore;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[deprecated = "This is never invoked and its implementation does nothing, pass GKPlayers to challengeComposeControllerWithMessage:players:completionHandler: and present the view controller instead"]
    #[objc2::method(sel = "issueChallengeToPlayers:message:")]
    pub unsafe fn issueChallengeToPlayers_message(
        &self,
        player_i_ds: Option<&NSArray<NSString>>,
        message: Option<&NSString>,
    );
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKAchievement")]
    pub type GKAchievement;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[deprecated = "This is never invoked and its implementation does nothing, pass GKPlayers to challengeComposeControllerWithMessage:players:completionHandler: and present the view controller instead"]
    #[objc2::method(sel = "issueChallengeToPlayers:message:")]
    pub unsafe fn issueChallengeToPlayers_message(
        &self,
        player_i_ds: Option<&NSArray<NSString>>,
        message: Option<&NSString>,
    );

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError",
        feature = "Foundation_NSString"
    ))]
    #[deprecated = "This is never invoked and its implementation does nothing, pass GKPlayers to selectChallengeablePlayers:"]
    #[objc2::method(sel = "selectChallengeablePlayerIDs:withCompletionHandler:")]
    pub unsafe fn selectChallengeablePlayerIDs_withCompletionHandler(
        &self,
        player_i_ds: Option<&NSArray<NSString>>,
        completion_handler: Option<&Block<(*mut NSArray<NSString>, *mut NSError), ()>>,
    );
}

pub type GKChallengeComposeCompletionBlock =
    *mut Block<(NonNull<NSViewController>, Bool, *mut NSArray<NSString>), ()>;

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKScore")]
    pub type GKScore;

    #[cfg(all(
        feature = "AppKit_NSViewController",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSString",
        feature = "GameKit_GKPlayer"
    ))]
    #[objc2::method(
        sel = "challengeComposeControllerWithMessage:players:completionHandler:",
        managed = "Other"
    )]
    pub unsafe fn challengeComposeControllerWithMessage_players_completionHandler(
        &self,
        message: Option<&NSString>,
        players: Option<&NSArray<GKPlayer>>,
        completion_handler: GKChallengeComposeCompletionBlock,
    ) -> Id<NSViewController>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKLeaderboardEntry")]
    pub type GKLeaderboardEntry;

    #[cfg(all(
        feature = "AppKit_NSViewController",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSString",
        feature = "GameKit_GKPlayer"
    ))]
    #[objc2::method(
        sel = "challengeComposeControllerWithMessage:players:completionHandler:",
        managed = "Other"
    )]
    pub unsafe fn challengeComposeControllerWithMessage_players_completionHandler(
        &self,
        message: Option<&NSString>,
        players: Option<&NSArray<GKPlayer>>,
        completion_handler: GKChallengeComposeCompletionBlock,
    ) -> Id<NSViewController>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKAchievement")]
    pub type GKAchievement;

    #[cfg(all(
        feature = "AppKit_NSViewController",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSString",
        feature = "GameKit_GKPlayer"
    ))]
    #[objc2::method(
        sel = "challengeComposeControllerWithMessage:players:completionHandler:",
        managed = "Other"
    )]
    pub unsafe fn challengeComposeControllerWithMessage_players_completionHandler(
        &self,
        message: Option<&NSString>,
        players: &NSArray<GKPlayer>,
        completion_handler: GKChallengeComposeCompletionBlock,
    ) -> Id<NSViewController>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKScore")]
    pub type GKScore;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKAchievement")]
    pub type GKAchievement;
}
