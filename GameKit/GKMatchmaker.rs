//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::GameKit::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum GKInviteRecipientResponse {
    GKInviteRecipientResponseAccepted = 0,
    GKInviteRecipientResponseDeclined = 1,
    GKInviteRecipientResponseFailed = 2,
    GKInviteRecipientResponseIncompatible = 3,
    GKInviteRecipientResponseUnableToConnect = 4,
    GKInviteRecipientResponseNoAnswer = 5,
    GKInviteeResponseAccepted = GKInviteRecipientResponseAccepted,
    GKInviteeResponseDeclined = GKInviteRecipientResponseDeclined,
    GKInviteeResponseFailed = GKInviteRecipientResponseFailed,
    GKInviteeResponseIncompatible = GKInviteRecipientResponseIncompatible,
    GKInviteeResponseUnableToConnect = GKInviteRecipientResponseUnableToConnect,
    GKInviteeResponseNoAnswer = GKInviteRecipientResponseNoAnswer,
}

pub type GKInviteeResponse = GKInviteRecipientResponse;

#[ns_enum]
#[underlying(NSUInteger)]
pub enum GKMatchType {
    GKMatchTypePeerToPeer = 0,
    GKMatchTypeHosted = 1,
    GKMatchTypeTurnBased = 2,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKMatchRequest")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type GKMatchRequest;
}

#[cfg(feature = "GameKit_GKMatchRequest")]
unsafe impl NSObjectProtocol for GKMatchRequest {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKMatchRequest")]
    pub type GKMatchRequest;

    #[objc2::method(sel = "minPlayers")]
    pub unsafe fn minPlayers(&self) -> NSUInteger;

    #[objc2::method(sel = "setMinPlayers:")]
    pub unsafe fn setMinPlayers(&self, min_players: NSUInteger);

    #[objc2::method(sel = "maxPlayers")]
    pub unsafe fn maxPlayers(&self) -> NSUInteger;

    #[objc2::method(sel = "setMaxPlayers:")]
    pub unsafe fn setMaxPlayers(&self, max_players: NSUInteger);

    #[objc2::method(sel = "playerGroup")]
    pub unsafe fn playerGroup(&self) -> NSUInteger;

    #[objc2::method(sel = "setPlayerGroup:")]
    pub unsafe fn setPlayerGroup(&self, player_group: NSUInteger);

    #[objc2::method(sel = "playerAttributes")]
    pub unsafe fn playerAttributes(&self) -> u32;

    #[objc2::method(sel = "setPlayerAttributes:")]
    pub unsafe fn setPlayerAttributes(&self, player_attributes: u32);

    #[cfg(all(feature = "Foundation_NSArray", feature = "GameKit_GKPlayer"))]
    #[objc2::method(sel = "recipients", managed = "Other")]
    pub unsafe fn recipients(&self) -> Option<Id<NSArray<GKPlayer>>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "GameKit_GKPlayer"))]
    #[objc2::method(sel = "setRecipients:")]
    pub unsafe fn setRecipients(&self, recipients: Option<&NSArray<GKPlayer>>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "inviteMessage", managed = "Other")]
    pub unsafe fn inviteMessage(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setInviteMessage:")]
    pub unsafe fn setInviteMessage(&self, invite_message: Option<&NSString>);

    #[objc2::method(sel = "defaultNumberOfPlayers")]
    pub unsafe fn defaultNumberOfPlayers(&self) -> NSUInteger;

    #[objc2::method(sel = "setDefaultNumberOfPlayers:")]
    pub unsafe fn setDefaultNumberOfPlayers(&self, default_number_of_players: NSUInteger);

    #[deprecated = "Set the matchmakingMode of GKMatchmakerViewController instead."]
    #[objc2::method(sel = "restrictToAutomatch")]
    pub unsafe fn restrictToAutomatch(&self) -> bool;

    #[deprecated = "Set the matchmakingMode of GKMatchmakerViewController instead."]
    #[objc2::method(sel = "setRestrictToAutomatch:")]
    pub unsafe fn setRestrictToAutomatch(&self, restrict_to_automatch: bool);

    #[cfg(feature = "GameKit_GKPlayer")]
    #[objc2::method(sel = "recipientResponseHandler")]
    pub unsafe fn recipientResponseHandler(
        &self,
    ) -> *mut Block<(NonNull<GKPlayer>, GKInviteRecipientResponse), ()>;

    #[cfg(feature = "GameKit_GKPlayer")]
    #[objc2::method(sel = "setRecipientResponseHandler:")]
    pub unsafe fn setRecipientResponseHandler(
        &self,
        recipient_response_handler: Option<
            &Block<(NonNull<GKPlayer>, GKInviteRecipientResponse), ()>,
        >,
    );

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "use recipientResponseHandler"]
    #[objc2::method(sel = "inviteeResponseHandler")]
    pub unsafe fn inviteeResponseHandler(
        &self,
    ) -> *mut Block<(NonNull<NSString>, GKInviteeResponse), ()>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "use recipientResponseHandler"]
    #[objc2::method(sel = "setInviteeResponseHandler:")]
    pub unsafe fn setInviteeResponseHandler(
        &self,
        invitee_response_handler: Option<&Block<(NonNull<NSString>, GKInviteeResponse), ()>>,
    );

    #[objc2::method(sel = "maxPlayersAllowedForMatchOfType:")]
    pub unsafe fn maxPlayersAllowedForMatchOfType(match_type: GKMatchType) -> NSUInteger;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[deprecated = "This property is obsolete, use recipients instead"]
    #[objc2::method(sel = "playersToInvite", managed = "Other")]
    pub unsafe fn playersToInvite(&self) -> Option<Id<NSArray<NSString>>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[deprecated = "This property is obsolete, use recipients instead"]
    #[objc2::method(sel = "setPlayersToInvite:")]
    pub unsafe fn setPlayersToInvite(&self, players_to_invite: Option<&NSArray<NSString>>);
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKInvite")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type GKInvite;
}

#[cfg(feature = "GameKit_GKInvite")]
unsafe impl NSObjectProtocol for GKInvite {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKInvite")]
    pub type GKInvite;

    #[cfg(feature = "GameKit_GKPlayer")]
    #[objc2::method(sel = "sender", managed = "Other")]
    pub unsafe fn sender(&self) -> Id<GKPlayer>;

    #[objc2::method(sel = "isHosted")]
    pub unsafe fn isHosted(&self) -> bool;

    #[objc2::method(sel = "playerGroup")]
    pub unsafe fn playerGroup(&self) -> NSUInteger;

    #[objc2::method(sel = "playerAttributes")]
    pub unsafe fn playerAttributes(&self) -> u32;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "This property is obsolete, use sender instead"]
    #[objc2::method(sel = "inviter", managed = "Other")]
    pub unsafe fn inviter(&self) -> Id<NSString>;
}

#[objc2::protocol]
pub unsafe trait GKInviteEventListener {
    #[cfg(all(feature = "GameKit_GKInvite", feature = "GameKit_GKPlayer"))]
    #[objc2::method(optional, sel = "player:didAcceptInvite:")]
    unsafe fn player_didAcceptInvite(&self, player: &GKPlayer, invite: &GKInvite);

    #[cfg(all(feature = "Foundation_NSArray", feature = "GameKit_GKPlayer"))]
    #[objc2::method(optional, sel = "player:didRequestMatchWithRecipients:")]
    unsafe fn player_didRequestMatchWithRecipients(
        &self,
        player: &GKPlayer,
        recipient_players: &NSArray<GKPlayer>,
    );

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSString",
        feature = "GameKit_GKPlayer"
    ))]
    #[objc2::method(optional, sel = "player:didRequestMatchWithPlayers:")]
    unsafe fn player_didRequestMatchWithPlayers(
        &self,
        player: &GKPlayer,
        player_i_ds_to_invite: &NSArray<NSString>,
    );
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKMatchmaker")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type GKMatchmaker;
}

#[cfg(feature = "GameKit_GKMatchmaker")]
unsafe impl NSObjectProtocol for GKMatchmaker {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKMatchmaker")]
    pub type GKMatchmaker;

    #[objc2::method(sel = "sharedMatchmaker", managed = "Other")]
    pub unsafe fn sharedMatchmaker() -> Id<GKMatchmaker>;

    #[cfg(all(
        feature = "Foundation_NSError",
        feature = "GameKit_GKInvite",
        feature = "GameKit_GKMatch"
    ))]
    #[objc2::method(sel = "matchForInvite:completionHandler:")]
    pub unsafe fn matchForInvite_completionHandler(
        &self,
        invite: &GKInvite,
        completion_handler: Option<&Block<(*mut GKMatch, *mut NSError), ()>>,
    );

    #[cfg(all(
        feature = "Foundation_NSError",
        feature = "GameKit_GKMatch",
        feature = "GameKit_GKMatchRequest"
    ))]
    #[objc2::method(sel = "findMatchForRequest:withCompletionHandler:")]
    pub unsafe fn findMatchForRequest_withCompletionHandler(
        &self,
        request: &GKMatchRequest,
        completion_handler: Option<&Block<(*mut GKMatch, *mut NSError), ()>>,
    );

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError",
        feature = "GameKit_GKMatchRequest",
        feature = "GameKit_GKPlayer"
    ))]
    #[objc2::method(sel = "findPlayersForHostedRequest:withCompletionHandler:")]
    pub unsafe fn findPlayersForHostedRequest_withCompletionHandler(
        &self,
        request: &GKMatchRequest,
        completion_handler: Option<&Block<(*mut NSArray<GKPlayer>, *mut NSError), ()>>,
    );

    #[cfg(all(
        feature = "Foundation_NSError",
        feature = "GameKit_GKMatch",
        feature = "GameKit_GKMatchRequest"
    ))]
    #[objc2::method(sel = "addPlayersToMatch:matchRequest:completionHandler:")]
    pub unsafe fn addPlayersToMatch_matchRequest_completionHandler(
        &self,
        r#match: &GKMatch,
        match_request: &GKMatchRequest,
        completion_handler: Option<&Block<(*mut NSError,), ()>>,
    );

    #[objc2::method(sel = "cancel")]
    pub unsafe fn cancel(&self);

    #[cfg(feature = "GameKit_GKPlayer")]
    #[objc2::method(sel = "cancelPendingInviteToPlayer:")]
    pub unsafe fn cancelPendingInviteToPlayer(&self, player: &GKPlayer);

    #[cfg(feature = "GameKit_GKMatch")]
    #[objc2::method(sel = "finishMatchmakingForMatch:")]
    pub unsafe fn finishMatchmakingForMatch(&self, r#match: &GKMatch);

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "queryPlayerGroupActivity:withCompletionHandler:")]
    pub unsafe fn queryPlayerGroupActivity_withCompletionHandler(
        &self,
        player_group: NSUInteger,
        completion_handler: Option<&Block<(NSInteger, *mut NSError), ()>>,
    );

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "queryActivityWithCompletionHandler:")]
    pub unsafe fn queryActivityWithCompletionHandler(
        &self,
        completion_handler: Option<&Block<(NSInteger, *mut NSError), ()>>,
    );

    #[cfg(feature = "GameKit_GKPlayer")]
    #[objc2::method(sel = "startBrowsingForNearbyPlayersWithHandler:")]
    pub unsafe fn startBrowsingForNearbyPlayersWithHandler(
        &self,
        reachable_handler: Option<&Block<(NonNull<GKPlayer>, Bool), ()>>,
    );

    #[objc2::method(sel = "stopBrowsingForNearbyPlayers")]
    pub unsafe fn stopBrowsingForNearbyPlayers(&self);

    #[cfg(feature = "GameKit_GKPlayer")]
    #[objc2::method(sel = "startGroupActivityWithPlayerHandler:")]
    pub unsafe fn startGroupActivityWithPlayerHandler(
        &self,
        handler: &Block<(NonNull<GKPlayer>,), ()>,
    );

    #[objc2::method(sel = "stopGroupActivity")]
    pub unsafe fn stopGroupActivity(&self);
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKMatchmaker")]
    pub type GKMatchmaker;

    #[cfg(all(feature = "Foundation_NSArray", feature = "GameKit_GKInvite"))]
    #[deprecated = "Use registerListener on GKLocalPlayer to register an object that implements the GKInviteEventListenerProtocol instead"]
    #[objc2::method(sel = "inviteHandler")]
    pub unsafe fn inviteHandler(&self) -> *mut Block<(NonNull<GKInvite>, *mut NSArray), ()>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "GameKit_GKInvite"))]
    #[deprecated = "Use registerListener on GKLocalPlayer to register an object that implements the GKInviteEventListenerProtocol instead"]
    #[objc2::method(sel = "setInviteHandler:")]
    pub unsafe fn setInviteHandler(
        &self,
        invite_handler: Option<&Block<(NonNull<GKInvite>, *mut NSArray), ()>>,
    );
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "GameKit_GKMatchmaker")]
    pub type GKMatchmaker;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "This is never invoked and its implementation does nothing, Use startBrowsingForNearbyPlayersWithHandler: instead"]
    #[objc2::method(sel = "startBrowsingForNearbyPlayersWithReachableHandler:")]
    pub unsafe fn startBrowsingForNearbyPlayersWithReachableHandler(
        &self,
        reachable_handler: Option<&Block<(NonNull<NSString>, Bool), ()>>,
    );

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "This is never invoked and its implementation does nothing, use cancelPendingInviteToPlayer:"]
    #[objc2::method(sel = "cancelInviteToPlayer:")]
    pub unsafe fn cancelInviteToPlayer(&self, player_id: &NSString);

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError",
        feature = "Foundation_NSString",
        feature = "GameKit_GKMatchRequest"
    ))]
    #[deprecated = "This is never invoked and its implementation does nothing, use findPlayersForHostedRequest:"]
    #[objc2::method(sel = "findPlayersForHostedMatchRequest:withCompletionHandler:")]
    pub unsafe fn findPlayersForHostedMatchRequest_withCompletionHandler(
        &self,
        request: &GKMatchRequest,
        completion_handler: Option<&Block<(*mut NSArray<NSString>, *mut NSError), ()>>,
    );
}
