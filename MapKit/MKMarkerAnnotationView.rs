//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Contacts::*;
use crate::CoreLocation::*;
use crate::Foundation::*;
use crate::MapKit::*;

#[objc2::interface(
    unsafe super = MKAnnotationView,
    unsafe inherits = [
        NSView,
        NSResponder,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "MapKit_MKMarkerAnnotationView")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MKMarkerAnnotationView;
}

#[cfg(feature = "MapKit_MKMarkerAnnotationView")]
unsafe impl NSAccessibility for MKMarkerAnnotationView {}

#[cfg(feature = "MapKit_MKMarkerAnnotationView")]
unsafe impl NSAccessibilityElementProtocol for MKMarkerAnnotationView {}

#[cfg(feature = "MapKit_MKMarkerAnnotationView")]
unsafe impl NSAnimatablePropertyContainer for MKMarkerAnnotationView {}

#[cfg(feature = "MapKit_MKMarkerAnnotationView")]
unsafe impl NSAppearanceCustomization for MKMarkerAnnotationView {}

#[cfg(feature = "MapKit_MKMarkerAnnotationView")]
unsafe impl NSCoding for MKMarkerAnnotationView {}

#[cfg(feature = "MapKit_MKMarkerAnnotationView")]
unsafe impl NSDraggingDestination for MKMarkerAnnotationView {}

#[cfg(feature = "MapKit_MKMarkerAnnotationView")]
unsafe impl NSObjectProtocol for MKMarkerAnnotationView {}

#[cfg(feature = "MapKit_MKMarkerAnnotationView")]
unsafe impl NSUserInterfaceItemIdentification for MKMarkerAnnotationView {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MapKit_MKMarkerAnnotationView")]
    pub type MKMarkerAnnotationView;

    #[objc2::method(sel = "titleVisibility")]
    pub unsafe fn titleVisibility(&self) -> MKFeatureVisibility;

    #[objc2::method(sel = "setTitleVisibility:")]
    pub unsafe fn setTitleVisibility(&self, title_visibility: MKFeatureVisibility);

    #[objc2::method(sel = "subtitleVisibility")]
    pub unsafe fn subtitleVisibility(&self) -> MKFeatureVisibility;

    #[objc2::method(sel = "setSubtitleVisibility:")]
    pub unsafe fn setSubtitleVisibility(&self, subtitle_visibility: MKFeatureVisibility);

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "markerTintColor", managed = "Other")]
    pub unsafe fn markerTintColor(&self) -> Option<Id<NSColor>>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "setMarkerTintColor:")]
    pub unsafe fn setMarkerTintColor(&self, marker_tint_color: Option<&NSColor>);

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "glyphTintColor", managed = "Other")]
    pub unsafe fn glyphTintColor(&self) -> Option<Id<NSColor>>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "setGlyphTintColor:")]
    pub unsafe fn setGlyphTintColor(&self, glyph_tint_color: Option<&NSColor>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "glyphText", managed = "Other")]
    pub unsafe fn glyphText(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setGlyphText:")]
    pub unsafe fn setGlyphText(&self, glyph_text: Option<&NSString>);

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "glyphImage", managed = "Other")]
    pub unsafe fn glyphImage(&self) -> Option<Id<NSImage>>;

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "setGlyphImage:")]
    pub unsafe fn setGlyphImage(&self, glyph_image: Option<&NSImage>);

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "selectedGlyphImage", managed = "Other")]
    pub unsafe fn selectedGlyphImage(&self) -> Option<Id<NSImage>>;

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "setSelectedGlyphImage:")]
    pub unsafe fn setSelectedGlyphImage(&self, selected_glyph_image: Option<&NSImage>);

    #[objc2::method(sel = "animatesWhenAdded")]
    pub unsafe fn animatesWhenAdded(&self) -> bool;

    #[objc2::method(sel = "setAnimatesWhenAdded:")]
    pub unsafe fn setAnimatesWhenAdded(&self, animates_when_added: bool);
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `MKAnnotationView`
    #[cfg(feature = "MapKit_MKMarkerAnnotationView")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "MapKit_MKMarkerAnnotationView")]
    pub type MKMarkerAnnotationView;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithAnnotation:reuseIdentifier:", managed = "Init")]
    pub unsafe fn initWithAnnotation_reuseIdentifier(
        this: Option<Allocated<Self>>,
        annotation: Option<&ProtocolObject<dyn MKAnnotation>>,
        reuse_identifier: Option<&NSString>,
    ) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSView`
    #[cfg(feature = "MapKit_MKMarkerAnnotationView")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "MapKit_MKMarkerAnnotationView")]
    pub type MKMarkerAnnotationView;

    #[objc2::method(sel = "initWithFrame:", managed = "Init")]
    pub unsafe fn initWithFrame(this: Option<Allocated<Self>>, frame_rect: NSRect) -> Id<Self>;
}
