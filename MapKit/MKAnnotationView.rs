//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Contacts::*;
use crate::CoreLocation::*;
use crate::Foundation::*;
use crate::MapKit::*;

extern_static!(MKAnnotationCalloutInfoDidChangeNotification: &'static NSString);

#[ns_enum]
#[underlying(NSUInteger)]
pub enum MKAnnotationViewDragState {
    MKAnnotationViewDragStateNone = 0,
    MKAnnotationViewDragStateStarting = 1,
    MKAnnotationViewDragStateDragging = 2,
    MKAnnotationViewDragStateCanceling = 3,
    MKAnnotationViewDragStateEnding = 4,
}

typed_extensible_enum!(
    pub type MKFeatureDisplayPriority = c_float;
);

extern_static!(MKFeatureDisplayPriorityRequired: MKFeatureDisplayPriority = 1000);

extern_static!(MKFeatureDisplayPriorityDefaultHigh: MKFeatureDisplayPriority = 750);

extern_static!(MKFeatureDisplayPriorityDefaultLow: MKFeatureDisplayPriority = 250);

typed_extensible_enum!(
    pub type MKAnnotationViewZPriority = c_float;
);

extern_static!(MKAnnotationViewZPriorityMax: MKAnnotationViewZPriority = 1000);

extern_static!(MKAnnotationViewZPriorityDefaultSelected: MKAnnotationViewZPriority = 1000);

extern_static!(MKAnnotationViewZPriorityDefaultUnselected: MKAnnotationViewZPriority = 500);

extern_static!(MKAnnotationViewZPriorityMin: MKAnnotationViewZPriority = 0);

#[ns_enum]
#[underlying(NSInteger)]
pub enum MKAnnotationViewCollisionMode {
    MKAnnotationViewCollisionModeRectangle = 0,
    MKAnnotationViewCollisionModeCircle = 1,
    MKAnnotationViewCollisionModeNone = 2,
}

#[objc2::interface(
    unsafe super = NSView,
    unsafe inherits = [
        NSResponder,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "MapKit_MKAnnotationView")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MKAnnotationView;
}

#[cfg(feature = "MapKit_MKAnnotationView")]
unsafe impl NSAccessibility for MKAnnotationView {}

#[cfg(feature = "MapKit_MKAnnotationView")]
unsafe impl NSAccessibilityElementProtocol for MKAnnotationView {}

#[cfg(feature = "MapKit_MKAnnotationView")]
unsafe impl NSAnimatablePropertyContainer for MKAnnotationView {}

#[cfg(feature = "MapKit_MKAnnotationView")]
unsafe impl NSAppearanceCustomization for MKAnnotationView {}

#[cfg(feature = "MapKit_MKAnnotationView")]
unsafe impl NSCoding for MKAnnotationView {}

#[cfg(feature = "MapKit_MKAnnotationView")]
unsafe impl NSDraggingDestination for MKAnnotationView {}

#[cfg(feature = "MapKit_MKAnnotationView")]
unsafe impl NSObjectProtocol for MKAnnotationView {}

#[cfg(feature = "MapKit_MKAnnotationView")]
unsafe impl NSUserInterfaceItemIdentification for MKAnnotationView {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MapKit_MKAnnotationView")]
    pub type MKAnnotationView;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithAnnotation:reuseIdentifier:", managed = "Init")]
    pub unsafe fn initWithAnnotation_reuseIdentifier(
        this: Option<Allocated<Self>>,
        annotation: Option<&ProtocolObject<dyn MKAnnotation>>,
        reuse_identifier: Option<&NSString>,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(
        this: Option<Allocated<Self>>,
        a_decoder: &NSCoder,
    ) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "reuseIdentifier", managed = "Other")]
    pub unsafe fn reuseIdentifier(&self) -> Option<Id<NSString>>;

    #[objc2::method(sel = "prepareForReuse")]
    pub unsafe fn prepareForReuse(&self);

    #[objc2::method(sel = "prepareForDisplay")]
    pub unsafe fn prepareForDisplay(&self);

    #[objc2::method(sel = "annotation", managed = "Other")]
    pub unsafe fn annotation(&self) -> Option<Id<ProtocolObject<dyn MKAnnotation>>>;

    #[objc2::method(sel = "setAnnotation:")]
    pub unsafe fn setAnnotation(&self, annotation: Option<&ProtocolObject<dyn MKAnnotation>>);

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "image", managed = "Other")]
    pub unsafe fn image(&self) -> Option<Id<NSImage>>;

    #[cfg(feature = "AppKit_NSImage")]
    #[objc2::method(sel = "setImage:")]
    pub unsafe fn setImage(&self, image: Option<&NSImage>);

    #[objc2::method(sel = "centerOffset")]
    pub unsafe fn centerOffset(&self) -> CGPoint;

    #[objc2::method(sel = "setCenterOffset:")]
    pub unsafe fn setCenterOffset(&self, center_offset: CGPoint);

    #[objc2::method(sel = "calloutOffset")]
    pub unsafe fn calloutOffset(&self) -> CGPoint;

    #[objc2::method(sel = "setCalloutOffset:")]
    pub unsafe fn setCalloutOffset(&self, callout_offset: CGPoint);

    #[objc2::method(sel = "leftCalloutOffset")]
    pub unsafe fn leftCalloutOffset(&self) -> CGPoint;

    #[objc2::method(sel = "setLeftCalloutOffset:")]
    pub unsafe fn setLeftCalloutOffset(&self, left_callout_offset: CGPoint);

    #[objc2::method(sel = "rightCalloutOffset")]
    pub unsafe fn rightCalloutOffset(&self) -> CGPoint;

    #[objc2::method(sel = "setRightCalloutOffset:")]
    pub unsafe fn setRightCalloutOffset(&self, right_callout_offset: CGPoint);

    #[objc2::method(sel = "isEnabled")]
    pub unsafe fn isEnabled(&self) -> bool;

    #[objc2::method(sel = "setEnabled:")]
    pub unsafe fn setEnabled(&self, enabled: bool);

    #[objc2::method(sel = "isHighlighted")]
    pub unsafe fn isHighlighted(&self) -> bool;

    #[objc2::method(sel = "setHighlighted:")]
    pub unsafe fn setHighlighted(&self, highlighted: bool);

    #[objc2::method(sel = "isSelected")]
    pub unsafe fn isSelected(&self) -> bool;

    #[objc2::method(sel = "setSelected:")]
    pub unsafe fn setSelected(&self, selected: bool);

    #[objc2::method(sel = "setSelected:animated:")]
    pub unsafe fn setSelected_animated(&self, selected: bool, animated: bool);

    #[objc2::method(sel = "canShowCallout")]
    pub unsafe fn canShowCallout(&self) -> bool;

    #[objc2::method(sel = "setCanShowCallout:")]
    pub unsafe fn setCanShowCallout(&self, can_show_callout: bool);

    #[objc2::method(sel = "leftCalloutAccessoryView", managed = "Other")]
    pub unsafe fn leftCalloutAccessoryView(&self) -> Option<Id<NSView>>;

    #[objc2::method(sel = "setLeftCalloutAccessoryView:")]
    pub unsafe fn setLeftCalloutAccessoryView(&self, left_callout_accessory_view: Option<&NSView>);

    #[objc2::method(sel = "rightCalloutAccessoryView", managed = "Other")]
    pub unsafe fn rightCalloutAccessoryView(&self) -> Option<Id<NSView>>;

    #[objc2::method(sel = "setRightCalloutAccessoryView:")]
    pub unsafe fn setRightCalloutAccessoryView(
        &self,
        right_callout_accessory_view: Option<&NSView>,
    );

    #[objc2::method(sel = "detailCalloutAccessoryView", managed = "Other")]
    pub unsafe fn detailCalloutAccessoryView(&self) -> Option<Id<NSView>>;

    #[objc2::method(sel = "setDetailCalloutAccessoryView:")]
    pub unsafe fn setDetailCalloutAccessoryView(
        &self,
        detail_callout_accessory_view: Option<&NSView>,
    );

    #[objc2::method(sel = "isDraggable")]
    pub unsafe fn isDraggable(&self) -> bool;

    #[objc2::method(sel = "setDraggable:")]
    pub unsafe fn setDraggable(&self, draggable: bool);

    #[objc2::method(sel = "dragState")]
    pub unsafe fn dragState(&self) -> MKAnnotationViewDragState;

    #[objc2::method(sel = "setDragState:")]
    pub unsafe fn setDragState(&self, drag_state: MKAnnotationViewDragState);

    #[objc2::method(sel = "setDragState:animated:")]
    pub unsafe fn setDragState_animated(
        &self,
        new_drag_state: MKAnnotationViewDragState,
        animated: bool,
    );

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "clusteringIdentifier", managed = "Other")]
    pub unsafe fn clusteringIdentifier(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setClusteringIdentifier:")]
    pub unsafe fn setClusteringIdentifier(&self, clustering_identifier: Option<&NSString>);

    #[objc2::method(sel = "clusterAnnotationView", managed = "Other")]
    pub unsafe fn clusterAnnotationView(&self) -> Option<Id<MKAnnotationView>>;

    #[objc2::method(sel = "displayPriority")]
    pub unsafe fn displayPriority(&self) -> MKFeatureDisplayPriority;

    #[objc2::method(sel = "setDisplayPriority:")]
    pub unsafe fn setDisplayPriority(&self, display_priority: MKFeatureDisplayPriority);

    #[objc2::method(sel = "zPriority")]
    pub unsafe fn zPriority(&self) -> MKAnnotationViewZPriority;

    #[objc2::method(sel = "setZPriority:")]
    pub unsafe fn setZPriority(&self, z_priority: MKAnnotationViewZPriority);

    #[objc2::method(sel = "selectedZPriority")]
    pub unsafe fn selectedZPriority(&self) -> MKAnnotationViewZPriority;

    #[objc2::method(sel = "setSelectedZPriority:")]
    pub unsafe fn setSelectedZPriority(&self, selected_z_priority: MKAnnotationViewZPriority);

    #[objc2::method(sel = "collisionMode")]
    pub unsafe fn collisionMode(&self) -> MKAnnotationViewCollisionMode;

    #[objc2::method(sel = "setCollisionMode:")]
    pub unsafe fn setCollisionMode(&self, collision_mode: MKAnnotationViewCollisionMode);
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSView`
    #[cfg(feature = "MapKit_MKAnnotationView")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "MapKit_MKAnnotationView")]
    pub type MKAnnotationView;

    #[objc2::method(sel = "initWithFrame:", managed = "Init")]
    pub unsafe fn initWithFrame(this: Option<Allocated<Self>>, frame_rect: NSRect) -> Id<Self>;
}
