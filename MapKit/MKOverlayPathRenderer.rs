//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Contacts::*;
use crate::CoreLocation::*;
use crate::Foundation::*;
use crate::MapKit::*;

#[objc2::interface(
    unsafe super = MKOverlayRenderer,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "MapKit_MKOverlayPathRenderer")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MKOverlayPathRenderer;
}

#[cfg(feature = "MapKit_MKOverlayPathRenderer")]
unsafe impl NSObjectProtocol for MKOverlayPathRenderer {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MapKit_MKOverlayPathRenderer")]
    pub type MKOverlayPathRenderer;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "fillColor", managed = "Other")]
    pub unsafe fn fillColor(&self) -> Option<Id<NSColor>>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "setFillColor:")]
    pub unsafe fn setFillColor(&self, fill_color: Option<&NSColor>);

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "strokeColor", managed = "Other")]
    pub unsafe fn strokeColor(&self) -> Option<Id<NSColor>>;

    #[cfg(feature = "AppKit_NSColor")]
    #[objc2::method(sel = "setStrokeColor:")]
    pub unsafe fn setStrokeColor(&self, stroke_color: Option<&NSColor>);

    #[objc2::method(sel = "lineWidth")]
    pub unsafe fn lineWidth(&self) -> CGFloat;

    #[objc2::method(sel = "setLineWidth:")]
    pub unsafe fn setLineWidth(&self, line_width: CGFloat);

    #[objc2::method(sel = "miterLimit")]
    pub unsafe fn miterLimit(&self) -> CGFloat;

    #[objc2::method(sel = "setMiterLimit:")]
    pub unsafe fn setMiterLimit(&self, miter_limit: CGFloat);

    #[objc2::method(sel = "lineDashPhase")]
    pub unsafe fn lineDashPhase(&self) -> CGFloat;

    #[objc2::method(sel = "setLineDashPhase:")]
    pub unsafe fn setLineDashPhase(&self, line_dash_phase: CGFloat);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
    #[objc2::method(sel = "lineDashPattern", managed = "Other")]
    pub unsafe fn lineDashPattern(&self) -> Option<Id<NSArray<NSNumber>>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
    #[objc2::method(sel = "setLineDashPattern:")]
    pub unsafe fn setLineDashPattern(&self, line_dash_pattern: Option<&NSArray<NSNumber>>);

    #[objc2::method(sel = "shouldRasterize")]
    pub unsafe fn shouldRasterize(&self) -> bool;

    #[objc2::method(sel = "setShouldRasterize:")]
    pub unsafe fn setShouldRasterize(&self, should_rasterize: bool);

    #[objc2::method(sel = "createPath")]
    pub unsafe fn createPath(&self);

    #[objc2::method(sel = "invalidatePath")]
    pub unsafe fn invalidatePath(&self);
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `MKOverlayRenderer`
    #[cfg(feature = "MapKit_MKOverlayPathRenderer")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "MapKit_MKOverlayPathRenderer")]
    pub type MKOverlayPathRenderer;

    #[objc2::method(sel = "initWithOverlay:", managed = "Init")]
    pub unsafe fn initWithOverlay(
        this: Option<Allocated<Self>>,
        overlay: &ProtocolObject<dyn MKOverlay>,
    ) -> Id<Self>;
}
