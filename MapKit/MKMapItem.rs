//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Contacts::*;
use crate::CoreLocation::*;
use crate::Foundation::*;
use crate::MapKit::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "MapKit_MKMapItem")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MKMapItem;
}

#[cfg(feature = "MapKit_MKMapItem")]
unsafe impl NSObjectProtocol for MKMapItem {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MapKit_MKMapItem")]
    pub type MKMapItem;

    #[cfg(feature = "MapKit_MKPlacemark")]
    #[objc2::method(sel = "placemark", managed = "Other")]
    pub unsafe fn placemark(&self) -> Id<MKPlacemark>;

    #[objc2::method(sel = "isCurrentLocation")]
    pub unsafe fn isCurrentLocation(&self) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "name", managed = "Other")]
    pub unsafe fn name(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setName:")]
    pub unsafe fn setName(&self, name: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "phoneNumber", managed = "Other")]
    pub unsafe fn phoneNumber(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setPhoneNumber:")]
    pub unsafe fn setPhoneNumber(&self, phone_number: Option<&NSString>);

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "url", managed = "Other")]
    pub unsafe fn url(&self) -> Option<Id<NSURL>>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "setUrl:")]
    pub unsafe fn setUrl(&self, url: Option<&NSURL>);

    #[cfg(feature = "Foundation_NSTimeZone")]
    #[objc2::method(sel = "timeZone", managed = "Other")]
    pub unsafe fn timeZone(&self) -> Option<Id<NSTimeZone>>;

    #[cfg(feature = "Foundation_NSTimeZone")]
    #[objc2::method(sel = "setTimeZone:")]
    pub unsafe fn setTimeZone(&self, time_zone: Option<&NSTimeZone>);

    #[objc2::method(sel = "pointOfInterestCategory", managed = "Other")]
    pub unsafe fn pointOfInterestCategory(&self) -> Option<Id<MKPointOfInterestCategory>>;

    #[objc2::method(sel = "setPointOfInterestCategory:")]
    pub unsafe fn setPointOfInterestCategory(
        &self,
        point_of_interest_category: Option<&MKPointOfInterestCategory>,
    );

    #[objc2::method(sel = "mapItemForCurrentLocation", managed = "Other")]
    pub unsafe fn mapItemForCurrentLocation() -> Id<MKMapItem>;

    #[cfg(feature = "MapKit_MKPlacemark")]
    #[objc2::method(sel = "initWithPlacemark:", managed = "Init")]
    pub unsafe fn initWithPlacemark(
        this: Option<Allocated<Self>>,
        placemark: &MKPlacemark,
    ) -> Id<Self>;

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "openInMapsWithLaunchOptions:")]
    pub unsafe fn openInMapsWithLaunchOptions(
        &self,
        launch_options: Option<&NSDictionary<NSString, Object>>,
    ) -> bool;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "openMapsWithItems:launchOptions:")]
    pub unsafe fn openMapsWithItems_launchOptions(
        map_items: &NSArray<MKMapItem>,
        launch_options: Option<&NSDictionary<NSString, Object>>,
    ) -> bool;
}

extern_static!(MKLaunchOptionsDirectionsModeKey: &'static NSString);

extern_static!(MKLaunchOptionsMapTypeKey: &'static NSString);

extern_static!(MKLaunchOptionsShowsTrafficKey: &'static NSString);

extern_static!(MKLaunchOptionsDirectionsModeDefault: &'static NSString);

extern_static!(MKLaunchOptionsDirectionsModeDriving: &'static NSString);

extern_static!(MKLaunchOptionsDirectionsModeWalking: &'static NSString);

extern_static!(MKLaunchOptionsDirectionsModeTransit: &'static NSString);

extern_static!(MKLaunchOptionsMapCenterKey: &'static NSString);

extern_static!(MKLaunchOptionsMapSpanKey: &'static NSString);

extern_static!(MKLaunchOptionsCameraKey: &'static NSString);

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MapKit_MKMapItem")]
    pub type MKMapItem;
}

#[cfg(feature = "MapKit_MKMapItem")]
unsafe impl NSSecureCoding for MKMapItem {}

extern_static!(MKMapItemTypeIdentifier: &'static NSString);
