//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Contacts::*;
use crate::CoreLocation::*;
use crate::Foundation::*;
use crate::MapKit::*;

extern_static!(MKPointsOfInterestRequestMaxRadius: CLLocationDistance);

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "MapKit_MKLocalPointsOfInterestRequest")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MKLocalPointsOfInterestRequest;
}

#[cfg(feature = "MapKit_MKLocalPointsOfInterestRequest")]
unsafe impl NSObjectProtocol for MKLocalPointsOfInterestRequest {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MapKit_MKLocalPointsOfInterestRequest")]
    pub type MKLocalPointsOfInterestRequest;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "initWithCenterCoordinate:radius:", managed = "Init")]
    pub unsafe fn initWithCenterCoordinate_radius(
        this: Option<Allocated<Self>>,
        coordinate: CLLocationCoordinate2D,
        radius: CLLocationDistance,
    ) -> Id<Self>;

    #[objc2::method(sel = "initWithCoordinateRegion:", managed = "Init")]
    pub unsafe fn initWithCoordinateRegion(
        this: Option<Allocated<Self>>,
        region: MKCoordinateRegion,
    ) -> Id<Self>;

    #[objc2::method(sel = "coordinate")]
    pub unsafe fn coordinate(&self) -> CLLocationCoordinate2D;

    #[objc2::method(sel = "radius")]
    pub unsafe fn radius(&self) -> CLLocationDistance;

    #[objc2::method(sel = "region")]
    pub unsafe fn region(&self) -> MKCoordinateRegion;

    #[cfg(feature = "MapKit_MKPointOfInterestFilter")]
    #[objc2::method(sel = "pointOfInterestFilter", managed = "Other")]
    pub unsafe fn pointOfInterestFilter(&self) -> Option<Id<MKPointOfInterestFilter>>;

    #[cfg(feature = "MapKit_MKPointOfInterestFilter")]
    #[objc2::method(sel = "setPointOfInterestFilter:")]
    pub unsafe fn setPointOfInterestFilter(
        &self,
        point_of_interest_filter: Option<&MKPointOfInterestFilter>,
    );
}
