//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Contacts::*;
use crate::CoreLocation::*;
use crate::Foundation::*;
use crate::MapKit::*;

#[objc2::protocol]
pub unsafe trait MKGeoJSONObject: NSObjectProtocol {}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "MapKit_MKGeoJSONDecoder")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MKGeoJSONDecoder;
}

#[cfg(feature = "MapKit_MKGeoJSONDecoder")]
unsafe impl NSObjectProtocol for MKGeoJSONDecoder {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MapKit_MKGeoJSONDecoder")]
    pub type MKGeoJSONDecoder;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSData",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "geoJSONObjectsWithData:error:", managed = "Other", throws)]
    pub unsafe fn geoJSONObjectsWithData_error(
        &self,
        data: &NSData,
    ) -> Result<Id<NSArray<ProtocolObject<dyn MKGeoJSONObject>>>, Id<NSError>>;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "MapKit_MKGeoJSONFeature")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MKGeoJSONFeature;
}

#[cfg(feature = "MapKit_MKGeoJSONFeature")]
unsafe impl MKGeoJSONObject for MKGeoJSONFeature {}

#[cfg(feature = "MapKit_MKGeoJSONFeature")]
unsafe impl NSObjectProtocol for MKGeoJSONFeature {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MapKit_MKGeoJSONFeature")]
    pub type MKGeoJSONFeature;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "identifier", managed = "Other")]
    pub unsafe fn identifier(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "properties", managed = "Other")]
    pub unsafe fn properties(&self) -> Option<Id<NSData>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "MapKit_MKShape"))]
    #[objc2::method(sel = "geometry", managed = "Other")]
    pub unsafe fn geometry(&self) -> Id<NSArray<MKShape>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MapKit_MKPointAnnotation")]
    pub type MKPointAnnotation;
}

#[cfg(feature = "MapKit_MKPointAnnotation")]
unsafe impl MKGeoJSONObject for MKPointAnnotation {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MapKit_MKMultiPoint")]
    pub type MKMultiPoint;
}

#[cfg(feature = "MapKit_MKMultiPoint")]
unsafe impl MKGeoJSONObject for MKMultiPoint {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MapKit_MKMultiPolyline")]
    pub type MKMultiPolyline;
}

#[cfg(feature = "MapKit_MKMultiPolyline")]
unsafe impl MKGeoJSONObject for MKMultiPolyline {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MapKit_MKMultiPolygon")]
    pub type MKMultiPolygon;
}

#[cfg(feature = "MapKit_MKMultiPolygon")]
unsafe impl MKGeoJSONObject for MKMultiPolygon {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MapKit_MKPolyline")]
    pub type MKPolyline;
}

#[cfg(feature = "MapKit_MKPolyline")]
unsafe impl MKGeoJSONObject for MKPolyline {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MapKit_MKPolygon")]
    pub type MKPolygon;
}

#[cfg(feature = "MapKit_MKPolygon")]
unsafe impl MKGeoJSONObject for MKPolygon {}
