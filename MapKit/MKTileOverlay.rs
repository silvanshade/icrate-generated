//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Contacts::*;
use crate::CoreLocation::*;
use crate::Foundation::*;
use crate::MapKit::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "MapKit_MKTileOverlay")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MKTileOverlay;
}

#[cfg(feature = "MapKit_MKTileOverlay")]
unsafe impl MKAnnotation for MKTileOverlay {}

#[cfg(feature = "MapKit_MKTileOverlay")]
unsafe impl MKOverlay for MKTileOverlay {}

#[cfg(feature = "MapKit_MKTileOverlay")]
unsafe impl NSObjectProtocol for MKTileOverlay {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MapKit_MKTileOverlay")]
    pub type MKTileOverlay;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithURLTemplate:", managed = "Init")]
    pub unsafe fn initWithURLTemplate(
        this: Option<Allocated<Self>>,
        url_template: Option<&NSString>,
    ) -> Id<Self>;

    #[objc2::method(sel = "tileSize")]
    pub unsafe fn tileSize(&self) -> CGSize;

    #[objc2::method(sel = "setTileSize:")]
    pub unsafe fn setTileSize(&self, tile_size: CGSize);

    #[objc2::method(sel = "isGeometryFlipped")]
    pub unsafe fn isGeometryFlipped(&self) -> bool;

    #[objc2::method(sel = "setGeometryFlipped:")]
    pub unsafe fn setGeometryFlipped(&self, geometry_flipped: bool);

    #[objc2::method(sel = "minimumZ")]
    pub unsafe fn minimumZ(&self) -> NSInteger;

    #[objc2::method(sel = "setMinimumZ:")]
    pub unsafe fn setMinimumZ(&self, minimum_z: NSInteger);

    #[objc2::method(sel = "maximumZ")]
    pub unsafe fn maximumZ(&self) -> NSInteger;

    #[objc2::method(sel = "setMaximumZ:")]
    pub unsafe fn setMaximumZ(&self, maximum_z: NSInteger);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "URLTemplate", managed = "Other")]
    pub unsafe fn URLTemplate(&self) -> Option<Id<NSString>>;

    #[objc2::method(sel = "canReplaceMapContent")]
    pub unsafe fn canReplaceMapContent(&self) -> bool;

    #[objc2::method(sel = "setCanReplaceMapContent:")]
    pub unsafe fn setCanReplaceMapContent(&self, can_replace_map_content: bool);
}

extern_struct!(
    #[encoding_name("?")]
    pub struct MKTileOverlayPath {
        pub x: NSInteger,
        pub y: NSInteger,
        pub z: NSInteger,
        pub contentScaleFactor: CGFloat,
    }
);

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MapKit_MKTileOverlay")]
    pub type MKTileOverlay;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "URLForTilePath:", managed = "Other")]
    pub unsafe fn URLForTilePath(&self, path: MKTileOverlayPath) -> Id<NSURL>;

    #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "loadTileAtPath:result:")]
    pub unsafe fn loadTileAtPath_result(
        &self,
        path: MKTileOverlayPath,
        result: &Block<(*mut NSData, *mut NSError), ()>,
    );
}
