//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Contacts::*;
use crate::CoreLocation::*;
use crate::Foundation::*;
use crate::MapKit::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "MapKit_MKDirectionsResponse")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MKDirectionsResponse;
}

#[cfg(feature = "MapKit_MKDirectionsResponse")]
unsafe impl NSObjectProtocol for MKDirectionsResponse {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MapKit_MKDirectionsResponse")]
    pub type MKDirectionsResponse;

    #[cfg(feature = "MapKit_MKMapItem")]
    #[objc2::method(sel = "source", managed = "Other")]
    pub unsafe fn source(&self) -> Id<MKMapItem>;

    #[cfg(feature = "MapKit_MKMapItem")]
    #[objc2::method(sel = "destination", managed = "Other")]
    pub unsafe fn destination(&self) -> Id<MKMapItem>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "MapKit_MKRoute"))]
    #[objc2::method(sel = "routes", managed = "Other")]
    pub unsafe fn routes(&self) -> Id<NSArray<MKRoute>>;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "MapKit_MKRoute")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MKRoute;
}

#[cfg(feature = "MapKit_MKRoute")]
unsafe impl NSObjectProtocol for MKRoute {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MapKit_MKRoute")]
    pub type MKRoute;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "name", managed = "Other")]
    pub unsafe fn name(&self) -> Id<NSString>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "advisoryNotices", managed = "Other")]
    pub unsafe fn advisoryNotices(&self) -> Id<NSArray<NSString>>;

    #[objc2::method(sel = "distance")]
    pub unsafe fn distance(&self) -> CLLocationDistance;

    #[objc2::method(sel = "expectedTravelTime")]
    pub unsafe fn expectedTravelTime(&self) -> NSTimeInterval;

    #[objc2::method(sel = "transportType")]
    pub unsafe fn transportType(&self) -> MKDirectionsTransportType;

    #[cfg(feature = "MapKit_MKPolyline")]
    #[objc2::method(sel = "polyline", managed = "Other")]
    pub unsafe fn polyline(&self) -> Id<MKPolyline>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "MapKit_MKRouteStep"))]
    #[objc2::method(sel = "steps", managed = "Other")]
    pub unsafe fn steps(&self) -> Id<NSArray<MKRouteStep>>;

    #[objc2::method(sel = "hasTolls")]
    pub unsafe fn hasTolls(&self) -> bool;

    #[objc2::method(sel = "hasHighways")]
    pub unsafe fn hasHighways(&self) -> bool;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "MapKit_MKRouteStep")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MKRouteStep;
}

#[cfg(feature = "MapKit_MKRouteStep")]
unsafe impl NSObjectProtocol for MKRouteStep {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MapKit_MKRouteStep")]
    pub type MKRouteStep;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "instructions", managed = "Other")]
    pub unsafe fn instructions(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "notice", managed = "Other")]
    pub unsafe fn notice(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "MapKit_MKPolyline")]
    #[objc2::method(sel = "polyline", managed = "Other")]
    pub unsafe fn polyline(&self) -> Id<MKPolyline>;

    #[objc2::method(sel = "distance")]
    pub unsafe fn distance(&self) -> CLLocationDistance;

    #[objc2::method(sel = "transportType")]
    pub unsafe fn transportType(&self) -> MKDirectionsTransportType;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "MapKit_MKETAResponse")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type MKETAResponse;
}

#[cfg(feature = "MapKit_MKETAResponse")]
unsafe impl NSObjectProtocol for MKETAResponse {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "MapKit_MKETAResponse")]
    pub type MKETAResponse;

    #[cfg(feature = "MapKit_MKMapItem")]
    #[objc2::method(sel = "source", managed = "Other")]
    pub unsafe fn source(&self) -> Id<MKMapItem>;

    #[cfg(feature = "MapKit_MKMapItem")]
    #[objc2::method(sel = "destination", managed = "Other")]
    pub unsafe fn destination(&self) -> Id<MKMapItem>;

    #[objc2::method(sel = "expectedTravelTime")]
    pub unsafe fn expectedTravelTime(&self) -> NSTimeInterval;

    #[objc2::method(sel = "distance")]
    pub unsafe fn distance(&self) -> CLLocationDistance;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "expectedArrivalDate", managed = "Other")]
    pub unsafe fn expectedArrivalDate(&self) -> Id<NSDate>;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "expectedDepartureDate", managed = "Other")]
    pub unsafe fn expectedDepartureDate(&self) -> Id<NSDate>;

    #[objc2::method(sel = "transportType")]
    pub unsafe fn transportType(&self) -> MKDirectionsTransportType;
}
