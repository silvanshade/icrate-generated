//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSExpressionType {
    NSConstantValueExpressionType = 0,
    NSEvaluatedObjectExpressionType = 1,
    NSVariableExpressionType = 2,
    NSKeyPathExpressionType = 3,
    NSFunctionExpressionType = 4,
    NSUnionSetExpressionType = 5,
    NSIntersectSetExpressionType = 6,
    NSMinusSetExpressionType = 7,
    NSSubqueryExpressionType = 13,
    NSAggregateExpressionType = 14,
    NSAnyKeyExpressionType = 15,
    NSBlockExpressionType = 19,
    NSConditionalExpressionType = 20,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSExpression")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSExpression;
}

#[cfg(feature = "Foundation_NSExpression")]
unsafe impl NSCoding for NSExpression {}

#[cfg(feature = "Foundation_NSExpression")]
unsafe impl NSObjectProtocol for NSExpression {}

#[cfg(feature = "Foundation_NSExpression")]
unsafe impl NSSecureCoding for NSExpression {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSExpression")]
    pub type NSExpression;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "expressionWithFormat:argumentArray:", managed = "Other")]
    pub unsafe fn expressionWithFormat_argumentArray(
        expression_format: &NSString,
        arguments: &NSArray,
    ) -> Id<NSExpression>;

    #[objc2::method(sel = "expressionForConstantValue:", managed = "Other")]
    pub unsafe fn expressionForConstantValue(obj: Option<&Object>) -> Id<NSExpression>;

    #[objc2::method(sel = "expressionForEvaluatedObject", managed = "Other")]
    pub unsafe fn expressionForEvaluatedObject() -> Id<NSExpression>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "expressionForVariable:", managed = "Other")]
    pub unsafe fn expressionForVariable(string: &NSString) -> Id<NSExpression>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "expressionForKeyPath:", managed = "Other")]
    pub unsafe fn expressionForKeyPath(key_path: &NSString) -> Id<NSExpression>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "expressionForFunction:arguments:", managed = "Other")]
    pub unsafe fn expressionForFunction_arguments(
        name: &NSString,
        parameters: &NSArray,
    ) -> Id<NSExpression>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "expressionForAggregate:", managed = "Other")]
    pub unsafe fn expressionForAggregate(
        subexpressions: &NSArray<NSExpression>,
    ) -> Id<NSExpression>;

    #[objc2::method(sel = "expressionForUnionSet:with:", managed = "Other")]
    pub unsafe fn expressionForUnionSet_with(
        left: &NSExpression,
        right: &NSExpression,
    ) -> Id<NSExpression>;

    #[objc2::method(sel = "expressionForIntersectSet:with:", managed = "Other")]
    pub unsafe fn expressionForIntersectSet_with(
        left: &NSExpression,
        right: &NSExpression,
    ) -> Id<NSExpression>;

    #[objc2::method(sel = "expressionForMinusSet:with:", managed = "Other")]
    pub unsafe fn expressionForMinusSet_with(
        left: &NSExpression,
        right: &NSExpression,
    ) -> Id<NSExpression>;

    #[cfg(all(feature = "Foundation_NSPredicate", feature = "Foundation_NSString"))]
    #[objc2::method(
        sel = "expressionForSubquery:usingIteratorVariable:predicate:",
        managed = "Other"
    )]
    pub unsafe fn expressionForSubquery_usingIteratorVariable_predicate(
        expression: &NSExpression,
        variable: &NSString,
        predicate: &NSPredicate,
    ) -> Id<NSExpression>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(
        sel = "expressionForFunction:selectorName:arguments:",
        managed = "Other"
    )]
    pub unsafe fn expressionForFunction_selectorName_arguments(
        target: &NSExpression,
        name: &NSString,
        parameters: Option<&NSArray>,
    ) -> Id<NSExpression>;

    #[objc2::method(sel = "expressionForAnyKey", managed = "Other")]
    pub unsafe fn expressionForAnyKey() -> Id<NSExpression>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSMutableDictionary"
    ))]
    #[objc2::method(sel = "expressionForBlock:arguments:", managed = "Other")]
    pub unsafe fn expressionForBlock_arguments(
        block: &Block<
            (
                *mut Object,
                NonNull<NSArray<NSExpression>>,
                *mut NSMutableDictionary,
            ),
            NonNull<Object>,
        >,
        arguments: Option<&NSArray<NSExpression>>,
    ) -> Id<NSExpression>;

    #[cfg(feature = "Foundation_NSPredicate")]
    #[objc2::method(
        sel = "expressionForConditional:trueExpression:falseExpression:",
        managed = "Other"
    )]
    pub unsafe fn expressionForConditional_trueExpression_falseExpression(
        predicate: &NSPredicate,
        true_expression: &NSExpression,
        false_expression: &NSExpression,
    ) -> Id<NSExpression>;

    #[objc2::method(sel = "initWithExpressionType:", managed = "Init")]
    pub unsafe fn initWithExpressionType(
        this: Option<Allocated<Self>>,
        r#type: NSExpressionType,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, coder: &NSCoder)
        -> Option<Id<Self>>;

    #[objc2::method(sel = "expressionType")]
    pub unsafe fn expressionType(&self) -> NSExpressionType;

    #[objc2::method(sel = "constantValue", managed = "Other")]
    pub unsafe fn constantValue(&self) -> Option<Id<Object>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "keyPath", managed = "Other")]
    pub unsafe fn keyPath(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "function", managed = "Other")]
    pub unsafe fn function(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "variable", managed = "Other")]
    pub unsafe fn variable(&self) -> Id<NSString>;

    #[objc2::method(sel = "operand", managed = "Other")]
    pub unsafe fn operand(&self) -> Id<NSExpression>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "arguments", managed = "Other")]
    pub unsafe fn arguments(&self) -> Option<Id<NSArray<NSExpression>>>;

    #[objc2::method(sel = "collection", managed = "Other")]
    pub unsafe fn collection(&self) -> Id<Object>;

    #[cfg(feature = "Foundation_NSPredicate")]
    #[objc2::method(sel = "predicate", managed = "Other")]
    pub unsafe fn predicate(&self) -> Id<NSPredicate>;

    #[objc2::method(sel = "leftExpression", managed = "Other")]
    pub unsafe fn leftExpression(&self) -> Id<NSExpression>;

    #[objc2::method(sel = "rightExpression", managed = "Other")]
    pub unsafe fn rightExpression(&self) -> Id<NSExpression>;

    #[objc2::method(sel = "trueExpression", managed = "Other")]
    pub unsafe fn trueExpression(&self) -> Id<NSExpression>;

    #[objc2::method(sel = "falseExpression", managed = "Other")]
    pub unsafe fn falseExpression(&self) -> Id<NSExpression>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSMutableDictionary"
    ))]
    #[objc2::method(sel = "expressionBlock")]
    pub unsafe fn expressionBlock(
        &self,
    ) -> NonNull<
        Block<
            (
                *mut Object,
                NonNull<NSArray<NSExpression>>,
                *mut NSMutableDictionary,
            ),
            NonNull<Object>,
        >,
    >;

    #[cfg(feature = "Foundation_NSMutableDictionary")]
    #[objc2::method(sel = "expressionValueWithObject:context:", managed = "Other")]
    pub unsafe fn expressionValueWithObject_context(
        &self,
        object: Option<&Object>,
        context: Option<&NSMutableDictionary>,
    ) -> Option<Id<Object>>;

    #[objc2::method(sel = "allowEvaluation")]
    pub unsafe fn allowEvaluation(&self);
}
