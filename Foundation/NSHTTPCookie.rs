//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

typed_extensible_enum!(
    pub type NSHTTPCookiePropertyKey = NSString;
);

typed_enum!(
    pub type NSHTTPCookieStringPolicy = NSString;
);

extern_static!(NSHTTPCookieName: &'static NSHTTPCookiePropertyKey);

extern_static!(NSHTTPCookieValue: &'static NSHTTPCookiePropertyKey);

extern_static!(NSHTTPCookieOriginURL: &'static NSHTTPCookiePropertyKey);

extern_static!(NSHTTPCookieVersion: &'static NSHTTPCookiePropertyKey);

extern_static!(NSHTTPCookieDomain: &'static NSHTTPCookiePropertyKey);

extern_static!(NSHTTPCookiePath: &'static NSHTTPCookiePropertyKey);

extern_static!(NSHTTPCookieSecure: &'static NSHTTPCookiePropertyKey);

extern_static!(NSHTTPCookieExpires: &'static NSHTTPCookiePropertyKey);

extern_static!(NSHTTPCookieComment: &'static NSHTTPCookiePropertyKey);

extern_static!(NSHTTPCookieCommentURL: &'static NSHTTPCookiePropertyKey);

extern_static!(NSHTTPCookieDiscard: &'static NSHTTPCookiePropertyKey);

extern_static!(NSHTTPCookieMaximumAge: &'static NSHTTPCookiePropertyKey);

extern_static!(NSHTTPCookiePort: &'static NSHTTPCookiePropertyKey);

extern_static!(NSHTTPCookieSameSitePolicy: &'static NSHTTPCookiePropertyKey);

extern_static!(NSHTTPCookieSameSiteLax: &'static NSHTTPCookieStringPolicy);

extern_static!(NSHTTPCookieSameSiteStrict: &'static NSHTTPCookieStringPolicy);

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSHTTPCookie")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSHTTPCookie;
}

#[cfg(feature = "Foundation_NSHTTPCookie")]
unsafe impl NSObjectProtocol for NSHTTPCookie {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSHTTPCookie")]
    pub type NSHTTPCookie;

    #[cfg(feature = "Foundation_NSDictionary")]
    #[objc2::method(sel = "initWithProperties:", managed = "Init")]
    pub unsafe fn initWithProperties(
        this: Option<Allocated<Self>>,
        properties: &NSDictionary<NSHTTPCookiePropertyKey, Object>,
    ) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSDictionary")]
    #[objc2::method(sel = "cookieWithProperties:", managed = "Other")]
    pub unsafe fn cookieWithProperties(
        properties: &NSDictionary<NSHTTPCookiePropertyKey, Object>,
    ) -> Option<Id<NSHTTPCookie>>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "requestHeaderFieldsWithCookies:", managed = "Other")]
    pub unsafe fn requestHeaderFieldsWithCookies(
        cookies: &NSArray<NSHTTPCookie>,
    ) -> Id<NSDictionary<NSString, NSString>>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSString",
        feature = "Foundation_NSURL"
    ))]
    #[objc2::method(sel = "cookiesWithResponseHeaderFields:forURL:", managed = "Other")]
    pub unsafe fn cookiesWithResponseHeaderFields_forURL(
        header_fields: &NSDictionary<NSString, NSString>,
        url: &NSURL,
    ) -> Id<NSArray<NSHTTPCookie>>;

    #[cfg(feature = "Foundation_NSDictionary")]
    #[objc2::method(sel = "properties", managed = "Other")]
    pub unsafe fn properties(&self) -> Option<Id<NSDictionary<NSHTTPCookiePropertyKey, Object>>>;

    #[objc2::method(sel = "version")]
    pub unsafe fn version(&self) -> NSUInteger;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "name", managed = "Other")]
    pub unsafe fn name(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "value", managed = "Other")]
    pub unsafe fn value(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "expiresDate", managed = "Other")]
    pub unsafe fn expiresDate(&self) -> Option<Id<NSDate>>;

    #[objc2::method(sel = "isSessionOnly")]
    pub unsafe fn isSessionOnly(&self) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "domain", managed = "Other")]
    pub unsafe fn domain(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "path", managed = "Other")]
    pub unsafe fn path(&self) -> Id<NSString>;

    #[objc2::method(sel = "isSecure")]
    pub unsafe fn isSecure(&self) -> bool;

    #[objc2::method(sel = "isHTTPOnly")]
    pub unsafe fn isHTTPOnly(&self) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "comment", managed = "Other")]
    pub unsafe fn comment(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "commentURL", managed = "Other")]
    pub unsafe fn commentURL(&self) -> Option<Id<NSURL>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
    #[objc2::method(sel = "portList", managed = "Other")]
    pub unsafe fn portList(&self) -> Option<Id<NSArray<NSNumber>>>;

    #[objc2::method(sel = "sameSitePolicy", managed = "Other")]
    pub unsafe fn sameSitePolicy(&self) -> Option<Id<NSHTTPCookieStringPolicy>>;
}
