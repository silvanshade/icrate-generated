//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSDateFormatterStyle {
    NSDateFormatterNoStyle = 0,
    NSDateFormatterShortStyle = 1,
    NSDateFormatterMediumStyle = 2,
    NSDateFormatterLongStyle = 3,
    NSDateFormatterFullStyle = 4,
}

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSDateFormatterBehavior {
    NSDateFormatterBehaviorDefault = 0,
    NSDateFormatterBehavior10_0 = 1000,
    NSDateFormatterBehavior10_4 = 1040,
}

#[objc2::interface(
    unsafe super = NSFormatter,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSDateFormatter")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSDateFormatter;
}

#[cfg(feature = "Foundation_NSDateFormatter")]
unsafe impl NSCoding for NSDateFormatter {}

#[cfg(feature = "Foundation_NSDateFormatter")]
unsafe impl NSObjectProtocol for NSDateFormatter {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSDateFormatter")]
    pub type NSDateFormatter;

    #[objc2::method(sel = "formattingContext")]
    pub unsafe fn formattingContext(&self) -> NSFormattingContext;

    #[objc2::method(sel = "setFormattingContext:")]
    pub unsafe fn setFormattingContext(&self, formatting_context: NSFormattingContext);

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "getObjectValue:forString:range:error:", throws)]
    pub unsafe fn getObjectValue_forString_range_error(
        &self,
        obj: Option<&mut Option<Id<Object>>>,
        string: &NSString,
        rangep: *mut NSRange,
    ) -> Result<(), Id<NSError>>;

    #[cfg(all(feature = "Foundation_NSDate", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "stringFromDate:", managed = "Other")]
    pub unsafe fn stringFromDate(&self, date: &NSDate) -> Id<NSString>;

    #[cfg(all(feature = "Foundation_NSDate", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "dateFromString:", managed = "Other")]
    pub unsafe fn dateFromString(&self, string: &NSString) -> Option<Id<NSDate>>;

    #[cfg(all(feature = "Foundation_NSDate", feature = "Foundation_NSString"))]
    #[objc2::method(
        sel = "localizedStringFromDate:dateStyle:timeStyle:",
        managed = "Other"
    )]
    pub unsafe fn localizedStringFromDate_dateStyle_timeStyle(
        date: &NSDate,
        dstyle: NSDateFormatterStyle,
        tstyle: NSDateFormatterStyle,
    ) -> Id<NSString>;

    #[cfg(all(feature = "Foundation_NSLocale", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "dateFormatFromTemplate:options:locale:", managed = "Other")]
    pub unsafe fn dateFormatFromTemplate_options_locale(
        tmplate: &NSString,
        opts: NSUInteger,
        locale: Option<&NSLocale>,
    ) -> Option<Id<NSString>>;

    #[objc2::method(sel = "defaultFormatterBehavior")]
    pub unsafe fn defaultFormatterBehavior() -> NSDateFormatterBehavior;

    #[objc2::method(sel = "setDefaultFormatterBehavior:")]
    pub unsafe fn setDefaultFormatterBehavior(default_formatter_behavior: NSDateFormatterBehavior);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setLocalizedDateFormatFromTemplate:")]
    pub unsafe fn setLocalizedDateFormatFromTemplate(&self, date_format_template: &NSString);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "dateFormat", managed = "Other")]
    pub unsafe fn dateFormat(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setDateFormat:")]
    pub unsafe fn setDateFormat(&self, date_format: Option<&NSString>);

    #[objc2::method(sel = "dateStyle")]
    pub unsafe fn dateStyle(&self) -> NSDateFormatterStyle;

    #[objc2::method(sel = "setDateStyle:")]
    pub unsafe fn setDateStyle(&self, date_style: NSDateFormatterStyle);

    #[objc2::method(sel = "timeStyle")]
    pub unsafe fn timeStyle(&self) -> NSDateFormatterStyle;

    #[objc2::method(sel = "setTimeStyle:")]
    pub unsafe fn setTimeStyle(&self, time_style: NSDateFormatterStyle);

    #[cfg(feature = "Foundation_NSLocale")]
    #[objc2::method(sel = "locale", managed = "Other")]
    pub unsafe fn locale(&self) -> Id<NSLocale>;

    #[cfg(feature = "Foundation_NSLocale")]
    #[objc2::method(sel = "setLocale:")]
    pub unsafe fn setLocale(&self, locale: Option<&NSLocale>);

    #[objc2::method(sel = "generatesCalendarDates")]
    pub unsafe fn generatesCalendarDates(&self) -> bool;

    #[objc2::method(sel = "setGeneratesCalendarDates:")]
    pub unsafe fn setGeneratesCalendarDates(&self, generates_calendar_dates: bool);

    #[objc2::method(sel = "formatterBehavior")]
    pub unsafe fn formatterBehavior(&self) -> NSDateFormatterBehavior;

    #[objc2::method(sel = "setFormatterBehavior:")]
    pub unsafe fn setFormatterBehavior(&self, formatter_behavior: NSDateFormatterBehavior);

    #[cfg(feature = "Foundation_NSTimeZone")]
    #[objc2::method(sel = "timeZone", managed = "Other")]
    pub unsafe fn timeZone(&self) -> Id<NSTimeZone>;

    #[cfg(feature = "Foundation_NSTimeZone")]
    #[objc2::method(sel = "setTimeZone:")]
    pub unsafe fn setTimeZone(&self, time_zone: Option<&NSTimeZone>);

    #[cfg(feature = "Foundation_NSCalendar")]
    #[objc2::method(sel = "calendar", managed = "Other")]
    pub unsafe fn calendar(&self) -> Id<NSCalendar>;

    #[cfg(feature = "Foundation_NSCalendar")]
    #[objc2::method(sel = "setCalendar:")]
    pub unsafe fn setCalendar(&self, calendar: Option<&NSCalendar>);

    #[objc2::method(sel = "isLenient")]
    pub unsafe fn isLenient(&self) -> bool;

    #[objc2::method(sel = "setLenient:")]
    pub unsafe fn setLenient(&self, lenient: bool);

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "twoDigitStartDate", managed = "Other")]
    pub unsafe fn twoDigitStartDate(&self) -> Option<Id<NSDate>>;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "setTwoDigitStartDate:")]
    pub unsafe fn setTwoDigitStartDate(&self, two_digit_start_date: Option<&NSDate>);

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "defaultDate", managed = "Other")]
    pub unsafe fn defaultDate(&self) -> Option<Id<NSDate>>;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "setDefaultDate:")]
    pub unsafe fn setDefaultDate(&self, default_date: Option<&NSDate>);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "eraSymbols", managed = "Other")]
    pub unsafe fn eraSymbols(&self) -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setEraSymbols:")]
    pub unsafe fn setEraSymbols(&self, era_symbols: Option<&NSArray<NSString>>);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "monthSymbols", managed = "Other")]
    pub unsafe fn monthSymbols(&self) -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setMonthSymbols:")]
    pub unsafe fn setMonthSymbols(&self, month_symbols: Option<&NSArray<NSString>>);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "shortMonthSymbols", managed = "Other")]
    pub unsafe fn shortMonthSymbols(&self) -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setShortMonthSymbols:")]
    pub unsafe fn setShortMonthSymbols(&self, short_month_symbols: Option<&NSArray<NSString>>);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "weekdaySymbols", managed = "Other")]
    pub unsafe fn weekdaySymbols(&self) -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setWeekdaySymbols:")]
    pub unsafe fn setWeekdaySymbols(&self, weekday_symbols: Option<&NSArray<NSString>>);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "shortWeekdaySymbols", managed = "Other")]
    pub unsafe fn shortWeekdaySymbols(&self) -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setShortWeekdaySymbols:")]
    pub unsafe fn setShortWeekdaySymbols(&self, short_weekday_symbols: Option<&NSArray<NSString>>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "AMSymbol", managed = "Other")]
    pub unsafe fn AMSymbol(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setAMSymbol:")]
    pub unsafe fn setAMSymbol(&self, am_symbol: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "PMSymbol", managed = "Other")]
    pub unsafe fn PMSymbol(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setPMSymbol:")]
    pub unsafe fn setPMSymbol(&self, pm_symbol: Option<&NSString>);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "longEraSymbols", managed = "Other")]
    pub unsafe fn longEraSymbols(&self) -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setLongEraSymbols:")]
    pub unsafe fn setLongEraSymbols(&self, long_era_symbols: Option<&NSArray<NSString>>);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "veryShortMonthSymbols", managed = "Other")]
    pub unsafe fn veryShortMonthSymbols(&self) -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setVeryShortMonthSymbols:")]
    pub unsafe fn setVeryShortMonthSymbols(
        &self,
        very_short_month_symbols: Option<&NSArray<NSString>>,
    );

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "standaloneMonthSymbols", managed = "Other")]
    pub unsafe fn standaloneMonthSymbols(&self) -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setStandaloneMonthSymbols:")]
    pub unsafe fn setStandaloneMonthSymbols(
        &self,
        standalone_month_symbols: Option<&NSArray<NSString>>,
    );

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "shortStandaloneMonthSymbols", managed = "Other")]
    pub unsafe fn shortStandaloneMonthSymbols(&self) -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setShortStandaloneMonthSymbols:")]
    pub unsafe fn setShortStandaloneMonthSymbols(
        &self,
        short_standalone_month_symbols: Option<&NSArray<NSString>>,
    );

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "veryShortStandaloneMonthSymbols", managed = "Other")]
    pub unsafe fn veryShortStandaloneMonthSymbols(&self) -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setVeryShortStandaloneMonthSymbols:")]
    pub unsafe fn setVeryShortStandaloneMonthSymbols(
        &self,
        very_short_standalone_month_symbols: Option<&NSArray<NSString>>,
    );

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "veryShortWeekdaySymbols", managed = "Other")]
    pub unsafe fn veryShortWeekdaySymbols(&self) -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setVeryShortWeekdaySymbols:")]
    pub unsafe fn setVeryShortWeekdaySymbols(
        &self,
        very_short_weekday_symbols: Option<&NSArray<NSString>>,
    );

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "standaloneWeekdaySymbols", managed = "Other")]
    pub unsafe fn standaloneWeekdaySymbols(&self) -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setStandaloneWeekdaySymbols:")]
    pub unsafe fn setStandaloneWeekdaySymbols(
        &self,
        standalone_weekday_symbols: Option<&NSArray<NSString>>,
    );

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "shortStandaloneWeekdaySymbols", managed = "Other")]
    pub unsafe fn shortStandaloneWeekdaySymbols(&self) -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setShortStandaloneWeekdaySymbols:")]
    pub unsafe fn setShortStandaloneWeekdaySymbols(
        &self,
        short_standalone_weekday_symbols: Option<&NSArray<NSString>>,
    );

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "veryShortStandaloneWeekdaySymbols", managed = "Other")]
    pub unsafe fn veryShortStandaloneWeekdaySymbols(&self) -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setVeryShortStandaloneWeekdaySymbols:")]
    pub unsafe fn setVeryShortStandaloneWeekdaySymbols(
        &self,
        very_short_standalone_weekday_symbols: Option<&NSArray<NSString>>,
    );

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "quarterSymbols", managed = "Other")]
    pub unsafe fn quarterSymbols(&self) -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setQuarterSymbols:")]
    pub unsafe fn setQuarterSymbols(&self, quarter_symbols: Option<&NSArray<NSString>>);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "shortQuarterSymbols", managed = "Other")]
    pub unsafe fn shortQuarterSymbols(&self) -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setShortQuarterSymbols:")]
    pub unsafe fn setShortQuarterSymbols(&self, short_quarter_symbols: Option<&NSArray<NSString>>);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "standaloneQuarterSymbols", managed = "Other")]
    pub unsafe fn standaloneQuarterSymbols(&self) -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setStandaloneQuarterSymbols:")]
    pub unsafe fn setStandaloneQuarterSymbols(
        &self,
        standalone_quarter_symbols: Option<&NSArray<NSString>>,
    );

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "shortStandaloneQuarterSymbols", managed = "Other")]
    pub unsafe fn shortStandaloneQuarterSymbols(&self) -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setShortStandaloneQuarterSymbols:")]
    pub unsafe fn setShortStandaloneQuarterSymbols(
        &self,
        short_standalone_quarter_symbols: Option<&NSArray<NSString>>,
    );

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "gregorianStartDate", managed = "Other")]
    pub unsafe fn gregorianStartDate(&self) -> Option<Id<NSDate>>;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "setGregorianStartDate:")]
    pub unsafe fn setGregorianStartDate(&self, gregorian_start_date: Option<&NSDate>);

    #[objc2::method(sel = "doesRelativeDateFormatting")]
    pub unsafe fn doesRelativeDateFormatting(&self) -> bool;

    #[objc2::method(sel = "setDoesRelativeDateFormatting:")]
    pub unsafe fn setDoesRelativeDateFormatting(&self, does_relative_date_formatting: bool);
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSDateFormatter")]
    pub type NSDateFormatter;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "Create an NSDateFormatter with `init` and set the dateFormat property instead."]
    #[objc2::method(sel = "initWithDateFormat:allowNaturalLanguage:", managed = "Init")]
    pub unsafe fn initWithDateFormat_allowNaturalLanguage(
        this: Option<Allocated<Self>>,
        format: &NSString,
        flag: bool,
    ) -> Id<Self>;

    #[deprecated = "There is no replacement"]
    #[objc2::method(sel = "allowsNaturalLanguage")]
    pub unsafe fn allowsNaturalLanguage(&self) -> bool;
}
