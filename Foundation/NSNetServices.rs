//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

extern_static!(NSNetServicesErrorCode: &'static NSString);

extern_static!(NSNetServicesErrorDomain: &'static NSErrorDomain);

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSNetServicesError {
    NSNetServicesUnknownError = -72000,
    NSNetServicesCollisionError = -72001,
    NSNetServicesNotFoundError = -72002,
    NSNetServicesActivityInProgress = -72003,
    NSNetServicesBadArgumentError = -72004,
    NSNetServicesCancelledError = -72005,
    NSNetServicesInvalidError = -72006,
    NSNetServicesTimeoutError = -72007,
    NSNetServicesMissingRequiredConfigurationError = -72008,
}

#[ns_options]
#[underlying(NSUInteger)]
pub enum NSNetServiceOptions {
    NSNetServiceNoAutoRename = 1 << 0,
    NSNetServiceListenForConnections = 1 << 1,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[deprecated = "Use nw_connection_t or nw_listener_t in Network framework instead"]
    #[cfg(feature = "Foundation_NSNetService")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSNetService;
}

#[cfg(feature = "Foundation_NSNetService")]
unsafe impl NSObjectProtocol for NSNetService {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSNetService")]
    #[deprecated = "Use nw_connection_t or nw_listener_t in Network framework instead"]
    pub type NSNetService;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithDomain:type:name:port:", managed = "Init")]
    pub unsafe fn initWithDomain_type_name_port(
        this: Option<Allocated<Self>>,
        domain: &NSString,
        r#type: &NSString,
        name: &NSString,
        port: c_int,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithDomain:type:name:", managed = "Init")]
    pub unsafe fn initWithDomain_type_name(
        this: Option<Allocated<Self>>,
        domain: &NSString,
        r#type: &NSString,
        name: &NSString,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSRunLoop")]
    #[objc2::method(sel = "scheduleInRunLoop:forMode:")]
    pub unsafe fn scheduleInRunLoop_forMode(&self, a_run_loop: &NSRunLoop, mode: &NSRunLoopMode);

    #[cfg(feature = "Foundation_NSRunLoop")]
    #[objc2::method(sel = "removeFromRunLoop:forMode:")]
    pub unsafe fn removeFromRunLoop_forMode(&self, a_run_loop: &NSRunLoop, mode: &NSRunLoopMode);

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn NSNetServiceDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(&self, delegate: Option<&ProtocolObject<dyn NSNetServiceDelegate>>);

    #[objc2::method(sel = "includesPeerToPeer")]
    pub unsafe fn includesPeerToPeer(&self) -> bool;

    #[objc2::method(sel = "setIncludesPeerToPeer:")]
    pub unsafe fn setIncludesPeerToPeer(&self, includes_peer_to_peer: bool);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "name", managed = "Other")]
    pub unsafe fn name(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "type", managed = "Other")]
    pub unsafe fn r#type(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "domain", managed = "Other")]
    pub unsafe fn domain(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "hostName", managed = "Other")]
    pub unsafe fn hostName(&self) -> Option<Id<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSData"))]
    #[objc2::method(sel = "addresses", managed = "Other")]
    pub unsafe fn addresses(&self) -> Option<Id<NSArray<NSData>>>;

    #[objc2::method(sel = "port")]
    pub unsafe fn port(&self) -> NSInteger;

    #[objc2::method(sel = "publish")]
    pub unsafe fn publish(&self);

    #[objc2::method(sel = "publishWithOptions:")]
    pub unsafe fn publishWithOptions(&self, options: NSNetServiceOptions);

    #[deprecated = "Not supported"]
    #[objc2::method(sel = "resolve")]
    pub unsafe fn resolve(&self);

    #[objc2::method(sel = "stop")]
    pub unsafe fn stop(&self);

    #[cfg(all(
        feature = "Foundation_NSData",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "dictionaryFromTXTRecordData:", managed = "Other")]
    pub unsafe fn dictionaryFromTXTRecordData(
        txt_data: &NSData,
    ) -> Id<NSDictionary<NSString, NSData>>;

    #[cfg(all(
        feature = "Foundation_NSData",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "dataFromTXTRecordDictionary:", managed = "Other")]
    pub unsafe fn dataFromTXTRecordDictionary(
        txt_dictionary: &NSDictionary<NSString, NSData>,
    ) -> Id<NSData>;

    #[objc2::method(sel = "resolveWithTimeout:")]
    pub unsafe fn resolveWithTimeout(&self, timeout: NSTimeInterval);

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "setTXTRecordData:")]
    pub unsafe fn setTXTRecordData(&self, record_data: Option<&NSData>) -> bool;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "TXTRecordData", managed = "Other")]
    pub unsafe fn TXTRecordData(&self) -> Option<Id<NSData>>;

    #[objc2::method(sel = "startMonitoring")]
    pub unsafe fn startMonitoring(&self);

    #[objc2::method(sel = "stopMonitoring")]
    pub unsafe fn stopMonitoring(&self);
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[deprecated = "Use nw_browser_t in Network framework instead"]
    #[cfg(feature = "Foundation_NSNetServiceBrowser")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSNetServiceBrowser;
}

#[cfg(feature = "Foundation_NSNetServiceBrowser")]
unsafe impl NSObjectProtocol for NSNetServiceBrowser {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSNetServiceBrowser")]
    #[deprecated = "Use nw_browser_t in Network framework instead"]
    pub type NSNetServiceBrowser;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn NSNetServiceBrowserDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(
        &self,
        delegate: Option<&ProtocolObject<dyn NSNetServiceBrowserDelegate>>,
    );

    #[objc2::method(sel = "includesPeerToPeer")]
    pub unsafe fn includesPeerToPeer(&self) -> bool;

    #[objc2::method(sel = "setIncludesPeerToPeer:")]
    pub unsafe fn setIncludesPeerToPeer(&self, includes_peer_to_peer: bool);

    #[cfg(feature = "Foundation_NSRunLoop")]
    #[objc2::method(sel = "scheduleInRunLoop:forMode:")]
    pub unsafe fn scheduleInRunLoop_forMode(&self, a_run_loop: &NSRunLoop, mode: &NSRunLoopMode);

    #[cfg(feature = "Foundation_NSRunLoop")]
    #[objc2::method(sel = "removeFromRunLoop:forMode:")]
    pub unsafe fn removeFromRunLoop_forMode(&self, a_run_loop: &NSRunLoop, mode: &NSRunLoopMode);

    #[objc2::method(sel = "searchForBrowsableDomains")]
    pub unsafe fn searchForBrowsableDomains(&self);

    #[objc2::method(sel = "searchForRegistrationDomains")]
    pub unsafe fn searchForRegistrationDomains(&self);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "searchForServicesOfType:inDomain:")]
    pub unsafe fn searchForServicesOfType_inDomain(
        &self,
        r#type: &NSString,
        domain_string: &NSString,
    );

    #[objc2::method(sel = "stop")]
    pub unsafe fn stop(&self);
}

#[objc2::protocol]
pub unsafe trait NSNetServiceDelegate: NSObjectProtocol {
    #[cfg(feature = "Foundation_NSNetService")]
    #[objc2::method(optional, sel = "netServiceWillPublish:")]
    unsafe fn netServiceWillPublish(&self, sender: &NSNetService);

    #[cfg(feature = "Foundation_NSNetService")]
    #[objc2::method(optional, sel = "netServiceDidPublish:")]
    unsafe fn netServiceDidPublish(&self, sender: &NSNetService);

    #[cfg(all(
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSNetService",
        feature = "Foundation_NSNumber",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(optional, sel = "netService:didNotPublish:")]
    unsafe fn netService_didNotPublish(
        &self,
        sender: &NSNetService,
        error_dict: &NSDictionary<NSString, NSNumber>,
    );

    #[cfg(feature = "Foundation_NSNetService")]
    #[objc2::method(optional, sel = "netServiceWillResolve:")]
    unsafe fn netServiceWillResolve(&self, sender: &NSNetService);

    #[cfg(feature = "Foundation_NSNetService")]
    #[objc2::method(optional, sel = "netServiceDidResolveAddress:")]
    unsafe fn netServiceDidResolveAddress(&self, sender: &NSNetService);

    #[cfg(all(
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSNetService",
        feature = "Foundation_NSNumber",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(optional, sel = "netService:didNotResolve:")]
    unsafe fn netService_didNotResolve(
        &self,
        sender: &NSNetService,
        error_dict: &NSDictionary<NSString, NSNumber>,
    );

    #[cfg(feature = "Foundation_NSNetService")]
    #[objc2::method(optional, sel = "netServiceDidStop:")]
    unsafe fn netServiceDidStop(&self, sender: &NSNetService);

    #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSNetService"))]
    #[objc2::method(optional, sel = "netService:didUpdateTXTRecordData:")]
    unsafe fn netService_didUpdateTXTRecordData(&self, sender: &NSNetService, data: &NSData);

    #[cfg(all(
        feature = "Foundation_NSInputStream",
        feature = "Foundation_NSNetService",
        feature = "Foundation_NSOutputStream"
    ))]
    #[objc2::method(
        optional,
        sel = "netService:didAcceptConnectionWithInputStream:outputStream:"
    )]
    unsafe fn netService_didAcceptConnectionWithInputStream_outputStream(
        &self,
        sender: &NSNetService,
        input_stream: &NSInputStream,
        output_stream: &NSOutputStream,
    );
}

#[objc2::protocol]
pub unsafe trait NSNetServiceBrowserDelegate: NSObjectProtocol {
    #[cfg(feature = "Foundation_NSNetServiceBrowser")]
    #[objc2::method(optional, sel = "netServiceBrowserWillSearch:")]
    unsafe fn netServiceBrowserWillSearch(&self, browser: &NSNetServiceBrowser);

    #[cfg(feature = "Foundation_NSNetServiceBrowser")]
    #[objc2::method(optional, sel = "netServiceBrowserDidStopSearch:")]
    unsafe fn netServiceBrowserDidStopSearch(&self, browser: &NSNetServiceBrowser);

    #[cfg(all(
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSNetServiceBrowser",
        feature = "Foundation_NSNumber",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(optional, sel = "netServiceBrowser:didNotSearch:")]
    unsafe fn netServiceBrowser_didNotSearch(
        &self,
        browser: &NSNetServiceBrowser,
        error_dict: &NSDictionary<NSString, NSNumber>,
    );

    #[cfg(all(
        feature = "Foundation_NSNetServiceBrowser",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(optional, sel = "netServiceBrowser:didFindDomain:moreComing:")]
    unsafe fn netServiceBrowser_didFindDomain_moreComing(
        &self,
        browser: &NSNetServiceBrowser,
        domain_string: &NSString,
        more_coming: bool,
    );

    #[cfg(all(
        feature = "Foundation_NSNetService",
        feature = "Foundation_NSNetServiceBrowser"
    ))]
    #[objc2::method(optional, sel = "netServiceBrowser:didFindService:moreComing:")]
    unsafe fn netServiceBrowser_didFindService_moreComing(
        &self,
        browser: &NSNetServiceBrowser,
        service: &NSNetService,
        more_coming: bool,
    );

    #[cfg(all(
        feature = "Foundation_NSNetServiceBrowser",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(optional, sel = "netServiceBrowser:didRemoveDomain:moreComing:")]
    unsafe fn netServiceBrowser_didRemoveDomain_moreComing(
        &self,
        browser: &NSNetServiceBrowser,
        domain_string: &NSString,
        more_coming: bool,
    );

    #[cfg(all(
        feature = "Foundation_NSNetService",
        feature = "Foundation_NSNetServiceBrowser"
    ))]
    #[objc2::method(optional, sel = "netServiceBrowser:didRemoveService:moreComing:")]
    unsafe fn netServiceBrowser_didRemoveService_moreComing(
        &self,
        browser: &NSNetServiceBrowser,
        service: &NSNetService,
        more_coming: bool,
    );
}
