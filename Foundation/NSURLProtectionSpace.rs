//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

extern_static!(NSURLProtectionSpaceHTTP: &'static NSString);

extern_static!(NSURLProtectionSpaceHTTPS: &'static NSString);

extern_static!(NSURLProtectionSpaceFTP: &'static NSString);

extern_static!(NSURLProtectionSpaceHTTPProxy: &'static NSString);

extern_static!(NSURLProtectionSpaceHTTPSProxy: &'static NSString);

extern_static!(NSURLProtectionSpaceFTPProxy: &'static NSString);

extern_static!(NSURLProtectionSpaceSOCKSProxy: &'static NSString);

extern_static!(NSURLAuthenticationMethodDefault: &'static NSString);

extern_static!(NSURLAuthenticationMethodHTTPBasic: &'static NSString);

extern_static!(NSURLAuthenticationMethodHTTPDigest: &'static NSString);

extern_static!(NSURLAuthenticationMethodHTMLForm: &'static NSString);

extern_static!(NSURLAuthenticationMethodNTLM: &'static NSString);

extern_static!(NSURLAuthenticationMethodNegotiate: &'static NSString);

extern_static!(NSURLAuthenticationMethodClientCertificate: &'static NSString);

extern_static!(NSURLAuthenticationMethodServerTrust: &'static NSString);

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSURLProtectionSpace")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSURLProtectionSpace;
}

#[cfg(feature = "Foundation_NSURLProtectionSpace")]
unsafe impl NSCoding for NSURLProtectionSpace {}

#[cfg(feature = "Foundation_NSURLProtectionSpace")]
unsafe impl NSObjectProtocol for NSURLProtectionSpace {}

#[cfg(feature = "Foundation_NSURLProtectionSpace")]
unsafe impl NSSecureCoding for NSURLProtectionSpace {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSURLProtectionSpace")]
    pub type NSURLProtectionSpace;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(
        sel = "initWithHost:port:protocol:realm:authenticationMethod:",
        managed = "Init"
    )]
    pub unsafe fn initWithHost_port_protocol_realm_authenticationMethod(
        this: Option<Allocated<Self>>,
        host: &NSString,
        port: NSInteger,
        protocol: Option<&NSString>,
        realm: Option<&NSString>,
        authentication_method: Option<&NSString>,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(
        sel = "initWithProxyHost:port:type:realm:authenticationMethod:",
        managed = "Init"
    )]
    pub unsafe fn initWithProxyHost_port_type_realm_authenticationMethod(
        this: Option<Allocated<Self>>,
        host: &NSString,
        port: NSInteger,
        r#type: Option<&NSString>,
        realm: Option<&NSString>,
        authentication_method: Option<&NSString>,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "realm", managed = "Other")]
    pub unsafe fn realm(&self) -> Option<Id<NSString>>;

    #[objc2::method(sel = "receivesCredentialSecurely")]
    pub unsafe fn receivesCredentialSecurely(&self) -> bool;

    #[objc2::method(sel = "isProxy")]
    pub unsafe fn isProxy(&self) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "host", managed = "Other")]
    pub unsafe fn host(&self) -> Id<NSString>;

    #[objc2::method(sel = "port")]
    pub unsafe fn port(&self) -> NSInteger;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "proxyType", managed = "Other")]
    pub unsafe fn proxyType(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "protocol", managed = "Other")]
    pub unsafe fn protocol(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "authenticationMethod", managed = "Other")]
    pub unsafe fn authenticationMethod(&self) -> Id<NSString>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSURLProtectionSpace")]
    pub type NSURLProtectionSpace;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSData"))]
    #[objc2::method(sel = "distinguishedNames", managed = "Other")]
    pub unsafe fn distinguishedNames(&self) -> Option<Id<NSArray<NSData>>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSURLProtectionSpace")]
    pub type NSURLProtectionSpace;
}
