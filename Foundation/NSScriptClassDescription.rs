//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSClassDescription,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSScriptClassDescription")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSScriptClassDescription;
}

#[cfg(feature = "Foundation_NSScriptClassDescription")]
unsafe impl NSObjectProtocol for NSScriptClassDescription {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSScriptClassDescription")]
    pub type NSScriptClassDescription;

    #[objc2::method(sel = "classDescriptionForClass:", managed = "Other")]
    pub unsafe fn classDescriptionForClass(a_class: &Class)
        -> Option<Id<NSScriptClassDescription>>;

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "initWithSuiteName:className:dictionary:", managed = "Init")]
    pub unsafe fn initWithSuiteName_className_dictionary(
        this: Option<Allocated<Self>>,
        suite_name: &NSString,
        class_name: &NSString,
        class_declaration: Option<&NSDictionary>,
    ) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "suiteName", managed = "Other")]
    pub unsafe fn suiteName(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "className", managed = "Other")]
    pub unsafe fn className(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "implementationClassName", managed = "Other")]
    pub unsafe fn implementationClassName(&self) -> Option<Id<NSString>>;

    #[objc2::method(sel = "superclassDescription", managed = "Other")]
    pub unsafe fn superclassDescription(&self) -> Option<Id<NSScriptClassDescription>>;

    #[objc2::method(sel = "appleEventCode")]
    pub unsafe fn appleEventCode(&self) -> FourCharCode;

    #[objc2::method(sel = "matchesAppleEventCode:")]
    pub unsafe fn matchesAppleEventCode(&self, apple_event_code: FourCharCode) -> bool;

    #[cfg(feature = "Foundation_NSScriptCommandDescription")]
    #[objc2::method(sel = "supportsCommand:")]
    pub unsafe fn supportsCommand(&self, command_description: &NSScriptCommandDescription) -> bool;

    #[cfg(feature = "Foundation_NSScriptCommandDescription")]
    #[objc2::method(sel = "selectorForCommand:")]
    pub unsafe fn selectorForCommand(
        &self,
        command_description: &NSScriptCommandDescription,
    ) -> Option<Sel>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "typeForKey:", managed = "Other")]
    pub unsafe fn typeForKey(&self, key: &NSString) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "classDescriptionForKey:", managed = "Other")]
    pub unsafe fn classDescriptionForKey(
        &self,
        key: &NSString,
    ) -> Option<Id<NSScriptClassDescription>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "appleEventCodeForKey:")]
    pub unsafe fn appleEventCodeForKey(&self, key: &NSString) -> FourCharCode;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "keyWithAppleEventCode:", managed = "Other")]
    pub unsafe fn keyWithAppleEventCode(
        &self,
        apple_event_code: FourCharCode,
    ) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "defaultSubcontainerAttributeKey", managed = "Other")]
    pub unsafe fn defaultSubcontainerAttributeKey(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "isLocationRequiredToCreateForKey:")]
    pub unsafe fn isLocationRequiredToCreateForKey(
        &self,
        to_many_relationship_key: &NSString,
    ) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "hasPropertyForKey:")]
    pub unsafe fn hasPropertyForKey(&self, key: &NSString) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "hasOrderedToManyRelationshipForKey:")]
    pub unsafe fn hasOrderedToManyRelationshipForKey(&self, key: &NSString) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "hasReadablePropertyForKey:")]
    pub unsafe fn hasReadablePropertyForKey(&self, key: &NSString) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "hasWritablePropertyForKey:")]
    pub unsafe fn hasWritablePropertyForKey(&self, key: &NSString) -> bool;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSScriptClassDescription")]
    pub type NSScriptClassDescription;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "isReadOnlyKey:")]
    pub unsafe fn isReadOnlyKey(&self, key: &NSString) -> bool;
}
