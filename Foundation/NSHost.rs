//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[deprecated = "Use Network framework instead, see deprecation notice in <Foundation/NSHost.h>"]
    #[cfg(feature = "Foundation_NSHost")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSHost;
}

#[cfg(feature = "Foundation_NSHost")]
unsafe impl NSObjectProtocol for NSHost {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSHost")]
    #[deprecated = "Use Network framework instead, see deprecation notice in <Foundation/NSHost.h>"]
    pub type NSHost;

    #[objc2::method(sel = "currentHost", managed = "Other")]
    pub unsafe fn currentHost() -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "hostWithName:", managed = "Other")]
    pub unsafe fn hostWithName(name: Option<&NSString>) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "hostWithAddress:", managed = "Other")]
    pub unsafe fn hostWithAddress(address: &NSString) -> Id<Self>;

    #[objc2::method(sel = "isEqualToHost:")]
    pub unsafe fn isEqualToHost(&self, a_host: &NSHost) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "name", managed = "Other")]
    pub unsafe fn name(&self) -> Option<Id<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "names", managed = "Other")]
    pub unsafe fn names(&self) -> Id<NSArray<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "address", managed = "Other")]
    pub unsafe fn address(&self) -> Option<Id<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "addresses", managed = "Other")]
    pub unsafe fn addresses(&self) -> Id<NSArray<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "localizedName", managed = "Other")]
    pub unsafe fn localizedName(&self) -> Option<Id<NSString>>;

    #[deprecated = "Caching no longer supported"]
    #[objc2::method(sel = "setHostCacheEnabled:")]
    pub unsafe fn setHostCacheEnabled(flag: bool);

    #[deprecated = "Caching no longer supported"]
    #[objc2::method(sel = "isHostCacheEnabled")]
    pub unsafe fn isHostCacheEnabled() -> bool;

    #[deprecated = "Caching no longer supported"]
    #[objc2::method(sel = "flushHostCache")]
    pub unsafe fn flushHostCache();
}
