//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSOrthography")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSOrthography;
}

#[cfg(feature = "Foundation_NSOrthography")]
unsafe impl NSCoding for NSOrthography {}

#[cfg(feature = "Foundation_NSOrthography")]
unsafe impl NSObjectProtocol for NSOrthography {}

#[cfg(feature = "Foundation_NSOrthography")]
unsafe impl NSSecureCoding for NSOrthography {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSOrthography")]
    pub type NSOrthography;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "dominantScript", managed = "Other")]
    pub unsafe fn dominantScript(&self) -> Id<NSString>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "languageMap", managed = "Other")]
    pub unsafe fn languageMap(&self) -> Id<NSDictionary<NSString, NSArray<NSString>>>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "initWithDominantScript:languageMap:", managed = "Init")]
    pub unsafe fn initWithDominantScript_languageMap(
        this: Option<Allocated<Self>>,
        script: &NSString,
        map: &NSDictionary<NSString, NSArray<NSString>>,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, coder: &NSCoder)
        -> Option<Id<Self>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSOrthography")]
    pub type NSOrthography;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "languagesForScript:", managed = "Other")]
    pub unsafe fn languagesForScript(&self, script: &NSString) -> Option<Id<NSArray<NSString>>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "dominantLanguageForScript:", managed = "Other")]
    pub unsafe fn dominantLanguageForScript(&self, script: &NSString) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "dominantLanguage", managed = "Other")]
    pub unsafe fn dominantLanguage(&self) -> Id<NSString>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "allScripts", managed = "Other")]
    pub unsafe fn allScripts(&self) -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "allLanguages", managed = "Other")]
    pub unsafe fn allLanguages(&self) -> Id<NSArray<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "defaultOrthographyForLanguage:", managed = "Other")]
    pub unsafe fn defaultOrthographyForLanguage(language: &NSString) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSOrthography")]
    pub type NSOrthography;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "orthographyWithDominantScript:languageMap:", managed = "Other")]
    pub unsafe fn orthographyWithDominantScript_languageMap(
        script: &NSString,
        map: &NSDictionary<NSString, NSArray<NSString>>,
    ) -> Id<Self>;
}
