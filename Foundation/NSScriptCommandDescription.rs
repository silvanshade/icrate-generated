//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSScriptCommandDescription")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSScriptCommandDescription;
}

#[cfg(feature = "Foundation_NSScriptCommandDescription")]
unsafe impl NSCoding for NSScriptCommandDescription {}

#[cfg(feature = "Foundation_NSScriptCommandDescription")]
unsafe impl NSObjectProtocol for NSScriptCommandDescription {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSScriptCommandDescription")]
    pub type NSScriptCommandDescription;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "initWithSuiteName:commandName:dictionary:", managed = "Init")]
    pub unsafe fn initWithSuiteName_commandName_dictionary(
        this: Option<Allocated<Self>>,
        suite_name: &NSString,
        command_name: &NSString,
        command_declaration: Option<&NSDictionary>,
    ) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(
        this: Option<Allocated<Self>>,
        in_coder: &NSCoder,
    ) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "suiteName", managed = "Other")]
    pub unsafe fn suiteName(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "commandName", managed = "Other")]
    pub unsafe fn commandName(&self) -> Id<NSString>;

    #[objc2::method(sel = "appleEventClassCode")]
    pub unsafe fn appleEventClassCode(&self) -> FourCharCode;

    #[objc2::method(sel = "appleEventCode")]
    pub unsafe fn appleEventCode(&self) -> FourCharCode;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "commandClassName", managed = "Other")]
    pub unsafe fn commandClassName(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "returnType", managed = "Other")]
    pub unsafe fn returnType(&self) -> Option<Id<NSString>>;

    #[objc2::method(sel = "appleEventCodeForReturnType")]
    pub unsafe fn appleEventCodeForReturnType(&self) -> FourCharCode;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "argumentNames", managed = "Other")]
    pub unsafe fn argumentNames(&self) -> Id<NSArray<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "typeForArgumentWithName:", managed = "Other")]
    pub unsafe fn typeForArgumentWithName(&self, argument_name: &NSString) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "appleEventCodeForArgumentWithName:")]
    pub unsafe fn appleEventCodeForArgumentWithName(
        &self,
        argument_name: &NSString,
    ) -> FourCharCode;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "isOptionalArgumentWithName:")]
    pub unsafe fn isOptionalArgumentWithName(&self, argument_name: &NSString) -> bool;

    #[cfg(feature = "Foundation_NSScriptCommand")]
    #[objc2::method(sel = "createCommandInstance", managed = "Other")]
    pub unsafe fn createCommandInstance(&self) -> Id<NSScriptCommand>;

    #[cfg(feature = "Foundation_NSScriptCommand")]
    #[objc2::method(sel = "createCommandInstanceWithZone:", managed = "Other")]
    pub unsafe fn createCommandInstanceWithZone(&self, zone: *mut NSZone) -> Id<NSScriptCommand>;
}
