//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[objc2::protocol]
pub unsafe trait NSLocking {
    #[objc2::method(sel = "lock")]
    unsafe fn lock(&self);

    #[objc2::method(sel = "unlock")]
    unsafe fn unlock(&self);
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSLock")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSLock;
}

#[cfg(feature = "Foundation_NSLock")]
unsafe impl NSLocking for NSLock {}

#[cfg(feature = "Foundation_NSLock")]
unsafe impl NSObjectProtocol for NSLock {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSLock")]
    pub type NSLock;

    #[objc2::method(sel = "tryLock")]
    pub unsafe fn tryLock(&self) -> bool;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "lockBeforeDate:")]
    pub unsafe fn lockBeforeDate(&self, limit: &NSDate) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "name", managed = "Other")]
    pub fn name(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setName:")]
    pub fn setName(&self, name: Option<&NSString>);
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSConditionLock")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSConditionLock;
}

#[cfg(feature = "Foundation_NSConditionLock")]
unsafe impl NSLocking for NSConditionLock {}

#[cfg(feature = "Foundation_NSConditionLock")]
unsafe impl NSObjectProtocol for NSConditionLock {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSConditionLock")]
    pub type NSConditionLock;

    #[objc2::method(sel = "initWithCondition:", managed = "Init")]
    pub unsafe fn initWithCondition(
        this: Option<Allocated<Self>>,
        condition: NSInteger,
    ) -> Id<Self>;

    #[objc2::method(sel = "condition")]
    pub unsafe fn condition(&self) -> NSInteger;

    #[objc2::method(sel = "lockWhenCondition:")]
    pub unsafe fn lockWhenCondition(&self, condition: NSInteger);

    #[objc2::method(sel = "tryLock")]
    pub unsafe fn tryLock(&self) -> bool;

    #[objc2::method(sel = "tryLockWhenCondition:")]
    pub unsafe fn tryLockWhenCondition(&self, condition: NSInteger) -> bool;

    #[objc2::method(sel = "unlockWithCondition:")]
    pub unsafe fn unlockWithCondition(&self, condition: NSInteger);

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "lockBeforeDate:")]
    pub unsafe fn lockBeforeDate(&self, limit: &NSDate) -> bool;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "lockWhenCondition:beforeDate:")]
    pub unsafe fn lockWhenCondition_beforeDate(&self, condition: NSInteger, limit: &NSDate)
        -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "name", managed = "Other")]
    pub unsafe fn name(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setName:")]
    pub unsafe fn setName(&self, name: Option<&NSString>);
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSRecursiveLock")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSRecursiveLock;
}

#[cfg(feature = "Foundation_NSRecursiveLock")]
unsafe impl NSLocking for NSRecursiveLock {}

#[cfg(feature = "Foundation_NSRecursiveLock")]
unsafe impl NSObjectProtocol for NSRecursiveLock {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSRecursiveLock")]
    pub type NSRecursiveLock;

    #[objc2::method(sel = "tryLock")]
    pub unsafe fn tryLock(&self) -> bool;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "lockBeforeDate:")]
    pub unsafe fn lockBeforeDate(&self, limit: &NSDate) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "name", managed = "Other")]
    pub unsafe fn name(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setName:")]
    pub unsafe fn setName(&self, name: Option<&NSString>);
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSCondition")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSCondition;
}

#[cfg(feature = "Foundation_NSCondition")]
unsafe impl NSLocking for NSCondition {}

#[cfg(feature = "Foundation_NSCondition")]
unsafe impl NSObjectProtocol for NSCondition {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSCondition")]
    pub type NSCondition;

    #[objc2::method(sel = "wait")]
    pub unsafe fn wait(&self);

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "waitUntilDate:")]
    pub unsafe fn waitUntilDate(&self, limit: &NSDate) -> bool;

    #[objc2::method(sel = "signal")]
    pub unsafe fn signal(&self);

    #[objc2::method(sel = "broadcast")]
    pub unsafe fn broadcast(&self);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "name", managed = "Other")]
    pub unsafe fn name(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setName:")]
    pub unsafe fn setName(&self, name: Option<&NSString>);
}
