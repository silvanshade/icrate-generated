//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

typed_extensible_enum!(
    pub type NSValueTransformerName = NSString;
);

extern_static!(NSNegateBooleanTransformerName: &'static NSValueTransformerName);

extern_static!(NSIsNilTransformerName: &'static NSValueTransformerName);

extern_static!(NSIsNotNilTransformerName: &'static NSValueTransformerName);

extern_static!(NSUnarchiveFromDataTransformerName: &'static NSValueTransformerName);

extern_static!(NSKeyedUnarchiveFromDataTransformerName: &'static NSValueTransformerName);

extern_static!(NSSecureUnarchiveFromDataTransformerName: &'static NSValueTransformerName);

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSValueTransformer")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSValueTransformer;
}

#[cfg(feature = "Foundation_NSValueTransformer")]
unsafe impl NSObjectProtocol for NSValueTransformer {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSValueTransformer")]
    pub type NSValueTransformer;

    #[objc2::method(sel = "setValueTransformer:forName:")]
    pub unsafe fn setValueTransformer_forName(
        transformer: Option<&NSValueTransformer>,
        name: &NSValueTransformerName,
    );

    #[objc2::method(sel = "valueTransformerForName:", managed = "Other")]
    pub unsafe fn valueTransformerForName(
        name: &NSValueTransformerName,
    ) -> Option<Id<NSValueTransformer>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "valueTransformerNames", managed = "Other")]
    pub unsafe fn valueTransformerNames() -> Id<NSArray<NSValueTransformerName>>;

    #[objc2::method(sel = "transformedValueClass")]
    pub unsafe fn transformedValueClass() -> &'static Class;

    #[objc2::method(sel = "allowsReverseTransformation")]
    pub unsafe fn allowsReverseTransformation() -> bool;

    #[objc2::method(sel = "transformedValue:", managed = "Other")]
    pub unsafe fn transformedValue(&self, value: Option<&Object>) -> Option<Id<Object>>;

    #[objc2::method(sel = "reverseTransformedValue:", managed = "Other")]
    pub unsafe fn reverseTransformedValue(&self, value: Option<&Object>) -> Option<Id<Object>>;
}

#[objc2::interface(
    unsafe super = NSValueTransformer,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSSecureUnarchiveFromDataTransformer")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSSecureUnarchiveFromDataTransformer;
}

#[cfg(feature = "Foundation_NSSecureUnarchiveFromDataTransformer")]
unsafe impl NSObjectProtocol for NSSecureUnarchiveFromDataTransformer {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSSecureUnarchiveFromDataTransformer")]
    pub type NSSecureUnarchiveFromDataTransformer;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "allowedTopLevelClasses", managed = "Other")]
    pub unsafe fn allowedTopLevelClasses() -> Id<NSArray<TodoClass>>;
}
