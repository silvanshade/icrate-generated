//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum __anonymous__ {
    NSNoScriptError = 0,
    NSReceiverEvaluationScriptError = 1,
    NSKeySpecifierEvaluationScriptError = 2,
    NSArgumentEvaluationScriptError = 3,
    NSReceiversCantHandleCommandScriptError = 4,
    NSRequiredArgumentsMissingScriptError = 5,
    NSArgumentsWrongScriptError = 6,
    NSUnknownKeyScriptError = 7,
    NSInternalScriptError = 8,
    NSOperationNotSupportedForKeyScriptError = 9,
    NSCannotCreateScriptCommandError = 10,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSScriptCommand")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSScriptCommand;
}

#[cfg(feature = "Foundation_NSScriptCommand")]
unsafe impl NSCoding for NSScriptCommand {}

#[cfg(feature = "Foundation_NSScriptCommand")]
unsafe impl NSObjectProtocol for NSScriptCommand {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSScriptCommand")]
    pub type NSScriptCommand;

    #[cfg(feature = "Foundation_NSScriptCommandDescription")]
    #[objc2::method(sel = "initWithCommandDescription:", managed = "Init")]
    pub unsafe fn initWithCommandDescription(
        this: Option<Allocated<Self>>,
        command_def: &NSScriptCommandDescription,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(
        this: Option<Allocated<Self>>,
        in_coder: &NSCoder,
    ) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSScriptCommandDescription")]
    #[objc2::method(sel = "commandDescription", managed = "Other")]
    pub unsafe fn commandDescription(&self) -> Id<NSScriptCommandDescription>;

    #[objc2::method(sel = "directParameter", managed = "Other")]
    pub unsafe fn directParameter(&self) -> Option<Id<Object>>;

    #[objc2::method(sel = "setDirectParameter:")]
    pub unsafe fn setDirectParameter(&self, direct_parameter: Option<&Object>);

    #[cfg(feature = "Foundation_NSScriptObjectSpecifier")]
    #[objc2::method(sel = "receiversSpecifier", managed = "Other")]
    pub unsafe fn receiversSpecifier(&self) -> Option<Id<NSScriptObjectSpecifier>>;

    #[cfg(feature = "Foundation_NSScriptObjectSpecifier")]
    #[objc2::method(sel = "setReceiversSpecifier:")]
    pub unsafe fn setReceiversSpecifier(
        &self,
        receivers_specifier: Option<&NSScriptObjectSpecifier>,
    );

    #[objc2::method(sel = "evaluatedReceivers", managed = "Other")]
    pub unsafe fn evaluatedReceivers(&self) -> Option<Id<Object>>;

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "arguments", managed = "Other")]
    pub unsafe fn arguments(&self) -> Option<Id<NSDictionary<NSString, Object>>>;

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setArguments:")]
    pub unsafe fn setArguments(&self, arguments: Option<&NSDictionary<NSString, Object>>);

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "evaluatedArguments", managed = "Other")]
    pub unsafe fn evaluatedArguments(&self) -> Option<Id<NSDictionary<NSString, Object>>>;

    #[objc2::method(sel = "isWellFormed")]
    pub unsafe fn isWellFormed(&self) -> bool;

    #[objc2::method(sel = "performDefaultImplementation", managed = "Other")]
    pub unsafe fn performDefaultImplementation(&self) -> Option<Id<Object>>;

    #[objc2::method(sel = "executeCommand", managed = "Other")]
    pub unsafe fn executeCommand(&self) -> Option<Id<Object>>;

    #[objc2::method(sel = "scriptErrorNumber")]
    pub unsafe fn scriptErrorNumber(&self) -> NSInteger;

    #[objc2::method(sel = "setScriptErrorNumber:")]
    pub unsafe fn setScriptErrorNumber(&self, script_error_number: NSInteger);

    #[cfg(feature = "Foundation_NSAppleEventDescriptor")]
    #[objc2::method(sel = "scriptErrorOffendingObjectDescriptor", managed = "Other")]
    pub unsafe fn scriptErrorOffendingObjectDescriptor(&self)
        -> Option<Id<NSAppleEventDescriptor>>;

    #[cfg(feature = "Foundation_NSAppleEventDescriptor")]
    #[objc2::method(sel = "setScriptErrorOffendingObjectDescriptor:")]
    pub unsafe fn setScriptErrorOffendingObjectDescriptor(
        &self,
        script_error_offending_object_descriptor: Option<&NSAppleEventDescriptor>,
    );

    #[cfg(feature = "Foundation_NSAppleEventDescriptor")]
    #[objc2::method(sel = "scriptErrorExpectedTypeDescriptor", managed = "Other")]
    pub unsafe fn scriptErrorExpectedTypeDescriptor(&self) -> Option<Id<NSAppleEventDescriptor>>;

    #[cfg(feature = "Foundation_NSAppleEventDescriptor")]
    #[objc2::method(sel = "setScriptErrorExpectedTypeDescriptor:")]
    pub unsafe fn setScriptErrorExpectedTypeDescriptor(
        &self,
        script_error_expected_type_descriptor: Option<&NSAppleEventDescriptor>,
    );

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "scriptErrorString", managed = "Other")]
    pub unsafe fn scriptErrorString(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setScriptErrorString:")]
    pub unsafe fn setScriptErrorString(&self, script_error_string: Option<&NSString>);

    #[objc2::method(sel = "currentCommand", managed = "Other")]
    pub unsafe fn currentCommand() -> Option<Id<NSScriptCommand>>;

    #[cfg(feature = "Foundation_NSAppleEventDescriptor")]
    #[objc2::method(sel = "appleEvent", managed = "Other")]
    pub unsafe fn appleEvent(&self) -> Option<Id<NSAppleEventDescriptor>>;

    #[objc2::method(sel = "suspendExecution")]
    pub unsafe fn suspendExecution(&self);

    #[objc2::method(sel = "resumeExecutionWithResult:")]
    pub unsafe fn resumeExecutionWithResult(&self, result: Option<&Object>);
}
