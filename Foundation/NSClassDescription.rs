//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreFoundation::*;
use crate::Foundation::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Foundation_NSClassDescription")]
    pub struct NSClassDescription;

    #[cfg(feature = "Foundation_NSClassDescription")]
    unsafe impl ClassType for NSClassDescription {
        type Super = NSObject;
    }
);

#[cfg(feature = "Foundation_NSClassDescription")]
unsafe impl NSObjectProtocol for NSClassDescription {}

extern_methods!(
    #[cfg(feature = "Foundation_NSClassDescription")]
    unsafe impl NSClassDescription {
        #[method(registerClassDescription:forClass:)]
        pub unsafe fn registerClassDescription_forClass(
            description: &NSClassDescription,
            a_class: &Class,
        );

        #[method(invalidateClassDescriptionCache)]
        pub unsafe fn invalidateClassDescriptionCache();

        #[method_id(@__retain_semantics Other classDescriptionForClass:)]
        pub unsafe fn classDescriptionForClass(
            a_class: &Class,
        ) -> Option<Id<NSClassDescription, Shared>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other attributeKeys)]
        pub unsafe fn attributeKeys(&self) -> Id<NSArray<NSString>, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other toOneRelationshipKeys)]
        pub unsafe fn toOneRelationshipKeys(&self) -> Id<NSArray<NSString>, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other toManyRelationshipKeys)]
        pub unsafe fn toManyRelationshipKeys(&self) -> Id<NSArray<NSString>, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other inverseForRelationshipKey:)]
        pub unsafe fn inverseForRelationshipKey(
            &self,
            relationship_key: &NSString,
        ) -> Option<Id<NSString, Shared>>;
    }
);

extern_static!(NSClassDescriptionNeededForClassNotification: &'static NSNotificationName);
