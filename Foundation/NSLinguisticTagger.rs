//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

typed_extensible_enum!(
    pub type NSLinguisticTagScheme = NSString;
);

extern_static!(NSLinguisticTagSchemeTokenType: &'static NSLinguisticTagScheme);

extern_static!(NSLinguisticTagSchemeLexicalClass: &'static NSLinguisticTagScheme);

extern_static!(NSLinguisticTagSchemeNameType: &'static NSLinguisticTagScheme);

extern_static!(NSLinguisticTagSchemeNameTypeOrLexicalClass: &'static NSLinguisticTagScheme);

extern_static!(NSLinguisticTagSchemeLemma: &'static NSLinguisticTagScheme);

extern_static!(NSLinguisticTagSchemeLanguage: &'static NSLinguisticTagScheme);

extern_static!(NSLinguisticTagSchemeScript: &'static NSLinguisticTagScheme);

typed_extensible_enum!(
    pub type NSLinguisticTag = NSString;
);

extern_static!(NSLinguisticTagWord: &'static NSLinguisticTag);

extern_static!(NSLinguisticTagPunctuation: &'static NSLinguisticTag);

extern_static!(NSLinguisticTagWhitespace: &'static NSLinguisticTag);

extern_static!(NSLinguisticTagOther: &'static NSLinguisticTag);

extern_static!(NSLinguisticTagNoun: &'static NSLinguisticTag);

extern_static!(NSLinguisticTagVerb: &'static NSLinguisticTag);

extern_static!(NSLinguisticTagAdjective: &'static NSLinguisticTag);

extern_static!(NSLinguisticTagAdverb: &'static NSLinguisticTag);

extern_static!(NSLinguisticTagPronoun: &'static NSLinguisticTag);

extern_static!(NSLinguisticTagDeterminer: &'static NSLinguisticTag);

extern_static!(NSLinguisticTagParticle: &'static NSLinguisticTag);

extern_static!(NSLinguisticTagPreposition: &'static NSLinguisticTag);

extern_static!(NSLinguisticTagNumber: &'static NSLinguisticTag);

extern_static!(NSLinguisticTagConjunction: &'static NSLinguisticTag);

extern_static!(NSLinguisticTagInterjection: &'static NSLinguisticTag);

extern_static!(NSLinguisticTagClassifier: &'static NSLinguisticTag);

extern_static!(NSLinguisticTagIdiom: &'static NSLinguisticTag);

extern_static!(NSLinguisticTagOtherWord: &'static NSLinguisticTag);

extern_static!(NSLinguisticTagSentenceTerminator: &'static NSLinguisticTag);

extern_static!(NSLinguisticTagOpenQuote: &'static NSLinguisticTag);

extern_static!(NSLinguisticTagCloseQuote: &'static NSLinguisticTag);

extern_static!(NSLinguisticTagOpenParenthesis: &'static NSLinguisticTag);

extern_static!(NSLinguisticTagCloseParenthesis: &'static NSLinguisticTag);

extern_static!(NSLinguisticTagWordJoiner: &'static NSLinguisticTag);

extern_static!(NSLinguisticTagDash: &'static NSLinguisticTag);

extern_static!(NSLinguisticTagOtherPunctuation: &'static NSLinguisticTag);

extern_static!(NSLinguisticTagParagraphBreak: &'static NSLinguisticTag);

extern_static!(NSLinguisticTagOtherWhitespace: &'static NSLinguisticTag);

extern_static!(NSLinguisticTagPersonalName: &'static NSLinguisticTag);

extern_static!(NSLinguisticTagPlaceName: &'static NSLinguisticTag);

extern_static!(NSLinguisticTagOrganizationName: &'static NSLinguisticTag);

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSLinguisticTaggerUnit {
    NSLinguisticTaggerUnitWord = 0,
    NSLinguisticTaggerUnitSentence = 1,
    NSLinguisticTaggerUnitParagraph = 2,
    NSLinguisticTaggerUnitDocument = 3,
}

#[ns_options]
#[underlying(NSUInteger)]
pub enum NSLinguisticTaggerOptions {
    NSLinguisticTaggerOmitWords = 1 << 0,
    NSLinguisticTaggerOmitPunctuation = 1 << 1,
    NSLinguisticTaggerOmitWhitespace = 1 << 2,
    NSLinguisticTaggerOmitOther = 1 << 3,
    NSLinguisticTaggerJoinNames = 1 << 4,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[deprecated = "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API"]
    #[cfg(feature = "Foundation_NSLinguisticTagger")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSLinguisticTagger;
}

#[cfg(feature = "Foundation_NSLinguisticTagger")]
unsafe impl NSObjectProtocol for NSLinguisticTagger {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSLinguisticTagger")]
    #[deprecated = "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API"]
    pub type NSLinguisticTagger;

    #[cfg(feature = "Foundation_NSArray")]
    #[deprecated = "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API"]
    #[objc2::method(sel = "initWithTagSchemes:options:", managed = "Init")]
    pub unsafe fn initWithTagSchemes_options(
        this: Option<Allocated<Self>>,
        tag_schemes: &NSArray<NSLinguisticTagScheme>,
        opts: NSUInteger,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSArray")]
    #[deprecated = "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API"]
    #[objc2::method(sel = "tagSchemes", managed = "Other")]
    pub unsafe fn tagSchemes(&self) -> Id<NSArray<NSLinguisticTagScheme>>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API"]
    #[objc2::method(sel = "string", managed = "Other")]
    pub unsafe fn string(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API"]
    #[objc2::method(sel = "setString:")]
    pub unsafe fn setString(&self, string: Option<&NSString>);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[deprecated = "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API"]
    #[objc2::method(sel = "availableTagSchemesForUnit:language:", managed = "Other")]
    pub unsafe fn availableTagSchemesForUnit_language(
        unit: NSLinguisticTaggerUnit,
        language: &NSString,
    ) -> Id<NSArray<NSLinguisticTagScheme>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[deprecated = "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API"]
    #[objc2::method(sel = "availableTagSchemesForLanguage:", managed = "Other")]
    pub unsafe fn availableTagSchemesForLanguage(
        language: &NSString,
    ) -> Id<NSArray<NSLinguisticTagScheme>>;

    #[cfg(feature = "Foundation_NSOrthography")]
    #[deprecated = "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API"]
    #[objc2::method(sel = "setOrthography:range:")]
    pub unsafe fn setOrthography_range(&self, orthography: Option<&NSOrthography>, range: NSRange);

    #[cfg(feature = "Foundation_NSOrthography")]
    #[deprecated = "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API"]
    #[objc2::method(sel = "orthographyAtIndex:effectiveRange:", managed = "Other")]
    pub unsafe fn orthographyAtIndex_effectiveRange(
        &self,
        char_index: NSUInteger,
        effective_range: NSRangePointer,
    ) -> Option<Id<NSOrthography>>;

    #[deprecated = "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API"]
    #[objc2::method(sel = "stringEditedInRange:changeInLength:")]
    pub unsafe fn stringEditedInRange_changeInLength(&self, new_range: NSRange, delta: NSInteger);

    #[deprecated = "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API"]
    #[objc2::method(sel = "tokenRangeAtIndex:unit:")]
    pub unsafe fn tokenRangeAtIndex_unit(
        &self,
        char_index: NSUInteger,
        unit: NSLinguisticTaggerUnit,
    ) -> NSRange;

    #[deprecated = "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API"]
    #[objc2::method(sel = "sentenceRangeForRange:")]
    pub unsafe fn sentenceRangeForRange(&self, range: NSRange) -> NSRange;

    #[deprecated = "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API"]
    #[objc2::method(sel = "enumerateTagsInRange:unit:scheme:options:usingBlock:")]
    pub unsafe fn enumerateTagsInRange_unit_scheme_options_usingBlock(
        &self,
        range: NSRange,
        unit: NSLinguisticTaggerUnit,
        scheme: &NSLinguisticTagScheme,
        options: NSLinguisticTaggerOptions,
        block: &Block<(*mut NSLinguisticTag, NSRange, NonNull<Bool>), ()>,
    );

    #[deprecated = "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API"]
    #[objc2::method(sel = "tagAtIndex:unit:scheme:tokenRange:", managed = "Other")]
    pub unsafe fn tagAtIndex_unit_scheme_tokenRange(
        &self,
        char_index: NSUInteger,
        unit: NSLinguisticTaggerUnit,
        scheme: &NSLinguisticTagScheme,
        token_range: NSRangePointer,
    ) -> Option<Id<NSLinguisticTag>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSValue"))]
    #[deprecated = "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API"]
    #[objc2::method(
        sel = "tagsInRange:unit:scheme:options:tokenRanges:",
        managed = "Other"
    )]
    pub unsafe fn tagsInRange_unit_scheme_options_tokenRanges(
        &self,
        range: NSRange,
        unit: NSLinguisticTaggerUnit,
        scheme: &NSLinguisticTagScheme,
        options: NSLinguisticTaggerOptions,
        token_ranges: Option<&mut Option<Id<NSArray<NSValue>>>>,
    ) -> Id<NSArray<NSLinguisticTag>>;

    #[deprecated = "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API"]
    #[objc2::method(sel = "enumerateTagsInRange:scheme:options:usingBlock:")]
    pub unsafe fn enumerateTagsInRange_scheme_options_usingBlock(
        &self,
        range: NSRange,
        tag_scheme: &NSLinguisticTagScheme,
        opts: NSLinguisticTaggerOptions,
        block: &Block<(*mut NSLinguisticTag, NSRange, NSRange, NonNull<Bool>), ()>,
    );

    #[deprecated = "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API"]
    #[objc2::method(sel = "tagAtIndex:scheme:tokenRange:sentenceRange:", managed = "Other")]
    pub unsafe fn tagAtIndex_scheme_tokenRange_sentenceRange(
        &self,
        char_index: NSUInteger,
        scheme: &NSLinguisticTagScheme,
        token_range: NSRangePointer,
        sentence_range: NSRangePointer,
    ) -> Option<Id<NSLinguisticTag>>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSString",
        feature = "Foundation_NSValue"
    ))]
    #[deprecated = "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API"]
    #[objc2::method(sel = "tagsInRange:scheme:options:tokenRanges:", managed = "Other")]
    pub unsafe fn tagsInRange_scheme_options_tokenRanges(
        &self,
        range: NSRange,
        tag_scheme: &NSString,
        opts: NSLinguisticTaggerOptions,
        token_ranges: Option<&mut Option<Id<NSArray<NSValue>>>>,
    ) -> Id<NSArray<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API"]
    #[objc2::method(sel = "dominantLanguage", managed = "Other")]
    pub unsafe fn dominantLanguage(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API"]
    #[objc2::method(sel = "dominantLanguageForString:", managed = "Other")]
    pub unsafe fn dominantLanguageForString(string: &NSString) -> Option<Id<NSString>>;

    #[cfg(all(feature = "Foundation_NSOrthography", feature = "Foundation_NSString"))]
    #[deprecated = "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API"]
    #[objc2::method(
        sel = "tagForString:atIndex:unit:scheme:orthography:tokenRange:",
        managed = "Other"
    )]
    pub unsafe fn tagForString_atIndex_unit_scheme_orthography_tokenRange(
        string: &NSString,
        char_index: NSUInteger,
        unit: NSLinguisticTaggerUnit,
        scheme: &NSLinguisticTagScheme,
        orthography: Option<&NSOrthography>,
        token_range: NSRangePointer,
    ) -> Option<Id<NSLinguisticTag>>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSOrthography",
        feature = "Foundation_NSString",
        feature = "Foundation_NSValue"
    ))]
    #[deprecated = "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API"]
    #[objc2::method(
        sel = "tagsForString:range:unit:scheme:options:orthography:tokenRanges:",
        managed = "Other"
    )]
    pub unsafe fn tagsForString_range_unit_scheme_options_orthography_tokenRanges(
        string: &NSString,
        range: NSRange,
        unit: NSLinguisticTaggerUnit,
        scheme: &NSLinguisticTagScheme,
        options: NSLinguisticTaggerOptions,
        orthography: Option<&NSOrthography>,
        token_ranges: Option<&mut Option<Id<NSArray<NSValue>>>>,
    ) -> Id<NSArray<NSLinguisticTag>>;

    #[cfg(all(feature = "Foundation_NSOrthography", feature = "Foundation_NSString"))]
    #[deprecated = "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API"]
    #[objc2::method(
        sel = "enumerateTagsForString:range:unit:scheme:options:orthography:usingBlock:"
    )]
    pub unsafe fn enumerateTagsForString_range_unit_scheme_options_orthography_usingBlock(
        string: &NSString,
        range: NSRange,
        unit: NSLinguisticTaggerUnit,
        scheme: &NSLinguisticTagScheme,
        options: NSLinguisticTaggerOptions,
        orthography: Option<&NSOrthography>,
        block: &Block<(*mut NSLinguisticTag, NSRange, NonNull<Bool>), ()>,
    );

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSString",
        feature = "Foundation_NSValue"
    ))]
    #[deprecated = "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API"]
    #[objc2::method(
        sel = "possibleTagsAtIndex:scheme:tokenRange:sentenceRange:scores:",
        managed = "Other"
    )]
    pub unsafe fn possibleTagsAtIndex_scheme_tokenRange_sentenceRange_scores(
        &self,
        char_index: NSUInteger,
        tag_scheme: &NSString,
        token_range: NSRangePointer,
        sentence_range: NSRangePointer,
        scores: Option<&mut Option<Id<NSArray<NSValue>>>>,
    ) -> Option<Id<NSArray<NSString>>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSString")]
    pub type NSString;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSOrthography",
        feature = "Foundation_NSValue"
    ))]
    #[deprecated = "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API"]
    #[objc2::method(
        sel = "linguisticTagsInRange:scheme:options:orthography:tokenRanges:",
        managed = "Other"
    )]
    pub unsafe fn linguisticTagsInRange_scheme_options_orthography_tokenRanges(
        &self,
        range: NSRange,
        scheme: &NSLinguisticTagScheme,
        options: NSLinguisticTaggerOptions,
        orthography: Option<&NSOrthography>,
        token_ranges: Option<&mut Option<Id<NSArray<NSValue>>>>,
    ) -> Id<NSArray<NSLinguisticTag>>;

    #[cfg(feature = "Foundation_NSOrthography")]
    #[deprecated = "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API"]
    #[objc2::method(sel = "enumerateLinguisticTagsInRange:scheme:options:orthography:usingBlock:")]
    pub unsafe fn enumerateLinguisticTagsInRange_scheme_options_orthography_usingBlock(
        &self,
        range: NSRange,
        scheme: &NSLinguisticTagScheme,
        options: NSLinguisticTaggerOptions,
        orthography: Option<&NSOrthography>,
        block: &Block<(*mut NSLinguisticTag, NSRange, NSRange, NonNull<Bool>), ()>,
    );
}
