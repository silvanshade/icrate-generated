//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSDistributedLock")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSDistributedLock;
}

#[cfg(feature = "Foundation_NSDistributedLock")]
unsafe impl NSObjectProtocol for NSDistributedLock {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSDistributedLock")]
    pub type NSDistributedLock;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "lockWithPath:", managed = "Other")]
    pub unsafe fn lockWithPath(path: &NSString) -> Option<Id<NSDistributedLock>>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithPath:", managed = "Init")]
    pub unsafe fn initWithPath(this: Option<Allocated<Self>>, path: &NSString) -> Option<Id<Self>>;

    #[objc2::method(sel = "tryLock")]
    pub unsafe fn tryLock(&self) -> bool;

    #[objc2::method(sel = "unlock")]
    pub unsafe fn unlock(&self);

    #[objc2::method(sel = "breakLock")]
    pub unsafe fn breakLock(&self);

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "lockDate", managed = "Other")]
    pub unsafe fn lockDate(&self) -> Id<NSDate>;
}
