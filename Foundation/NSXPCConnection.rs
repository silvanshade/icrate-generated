//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[objc2::protocol]
pub unsafe trait NSXPCProxyCreating {
    #[objc2::method(sel = "remoteObjectProxy", managed = "Other")]
    unsafe fn remoteObjectProxy(&self) -> Id<Object>;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "remoteObjectProxyWithErrorHandler:", managed = "Other")]
    unsafe fn remoteObjectProxyWithErrorHandler(
        &self,
        handler: &Block<(NonNull<NSError>,), ()>,
    ) -> Id<Object>;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(
        optional,
        sel = "synchronousRemoteObjectProxyWithErrorHandler:",
        managed = "Other"
    )]
    unsafe fn synchronousRemoteObjectProxyWithErrorHandler(
        &self,
        handler: &Block<(NonNull<NSError>,), ()>,
    ) -> Id<Object>;
}

#[ns_options]
#[underlying(NSUInteger)]
pub enum NSXPCConnectionOptions {
    NSXPCConnectionPrivileged = 1 << 12,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSXPCConnection")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSXPCConnection;
}

#[cfg(feature = "Foundation_NSXPCConnection")]
unsafe impl NSObjectProtocol for NSXPCConnection {}

#[cfg(feature = "Foundation_NSXPCConnection")]
unsafe impl NSXPCProxyCreating for NSXPCConnection {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSXPCConnection")]
    pub type NSXPCConnection;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithServiceName:", managed = "Init")]
    pub unsafe fn initWithServiceName(
        this: Option<Allocated<Self>>,
        service_name: &NSString,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "serviceName", managed = "Other")]
    pub unsafe fn serviceName(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithMachServiceName:options:", managed = "Init")]
    pub unsafe fn initWithMachServiceName_options(
        this: Option<Allocated<Self>>,
        name: &NSString,
        options: NSXPCConnectionOptions,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSXPCListenerEndpoint")]
    #[objc2::method(sel = "initWithListenerEndpoint:", managed = "Init")]
    pub unsafe fn initWithListenerEndpoint(
        this: Option<Allocated<Self>>,
        endpoint: &NSXPCListenerEndpoint,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSXPCListenerEndpoint")]
    #[objc2::method(sel = "endpoint", managed = "Other")]
    pub unsafe fn endpoint(&self) -> Id<NSXPCListenerEndpoint>;

    #[cfg(feature = "Foundation_NSXPCInterface")]
    #[objc2::method(sel = "exportedInterface", managed = "Other")]
    pub unsafe fn exportedInterface(&self) -> Option<Id<NSXPCInterface>>;

    #[cfg(feature = "Foundation_NSXPCInterface")]
    #[objc2::method(sel = "setExportedInterface:")]
    pub unsafe fn setExportedInterface(&self, exported_interface: Option<&NSXPCInterface>);

    #[objc2::method(sel = "exportedObject", managed = "Other")]
    pub unsafe fn exportedObject(&self) -> Option<Id<Object>>;

    #[objc2::method(sel = "setExportedObject:")]
    pub unsafe fn setExportedObject(&self, exported_object: Option<&Object>);

    #[cfg(feature = "Foundation_NSXPCInterface")]
    #[objc2::method(sel = "remoteObjectInterface", managed = "Other")]
    pub unsafe fn remoteObjectInterface(&self) -> Option<Id<NSXPCInterface>>;

    #[cfg(feature = "Foundation_NSXPCInterface")]
    #[objc2::method(sel = "setRemoteObjectInterface:")]
    pub unsafe fn setRemoteObjectInterface(&self, remote_object_interface: Option<&NSXPCInterface>);

    #[objc2::method(sel = "remoteObjectProxy", managed = "Other")]
    pub unsafe fn remoteObjectProxy(&self) -> Id<Object>;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "remoteObjectProxyWithErrorHandler:", managed = "Other")]
    pub unsafe fn remoteObjectProxyWithErrorHandler(
        &self,
        handler: &Block<(NonNull<NSError>,), ()>,
    ) -> Id<Object>;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(
        sel = "synchronousRemoteObjectProxyWithErrorHandler:",
        managed = "Other"
    )]
    pub unsafe fn synchronousRemoteObjectProxyWithErrorHandler(
        &self,
        handler: &Block<(NonNull<NSError>,), ()>,
    ) -> Id<Object>;

    #[objc2::method(sel = "interruptionHandler")]
    pub unsafe fn interruptionHandler(&self) -> *mut Block<(), ()>;

    #[objc2::method(sel = "setInterruptionHandler:")]
    pub unsafe fn setInterruptionHandler(&self, interruption_handler: Option<&Block<(), ()>>);

    #[objc2::method(sel = "invalidationHandler")]
    pub unsafe fn invalidationHandler(&self) -> *mut Block<(), ()>;

    #[objc2::method(sel = "setInvalidationHandler:")]
    pub unsafe fn setInvalidationHandler(&self, invalidation_handler: Option<&Block<(), ()>>);

    #[objc2::method(sel = "resume")]
    pub unsafe fn resume(&self);

    #[objc2::method(sel = "suspend")]
    pub unsafe fn suspend(&self);

    #[objc2::method(sel = "activate")]
    pub unsafe fn activate(&self);

    #[objc2::method(sel = "invalidate")]
    pub unsafe fn invalidate(&self);

    #[objc2::method(sel = "currentConnection", managed = "Other")]
    pub unsafe fn currentConnection() -> Option<Id<NSXPCConnection>>;

    #[objc2::method(sel = "scheduleSendBarrierBlock:")]
    pub unsafe fn scheduleSendBarrierBlock(&self, block: &Block<(), ()>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setCodeSigningRequirement:")]
    pub unsafe fn setCodeSigningRequirement(&self, requirement: &NSString);
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSXPCListener")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSXPCListener;
}

#[cfg(feature = "Foundation_NSXPCListener")]
unsafe impl NSObjectProtocol for NSXPCListener {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSXPCListener")]
    pub type NSXPCListener;

    #[objc2::method(sel = "serviceListener", managed = "Other")]
    pub unsafe fn serviceListener() -> Id<NSXPCListener>;

    #[objc2::method(sel = "anonymousListener", managed = "Other")]
    pub unsafe fn anonymousListener() -> Id<NSXPCListener>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithMachServiceName:", managed = "Init")]
    pub unsafe fn initWithMachServiceName(
        this: Option<Allocated<Self>>,
        name: &NSString,
    ) -> Id<Self>;

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn NSXPCListenerDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(&self, delegate: Option<&ProtocolObject<dyn NSXPCListenerDelegate>>);

    #[cfg(feature = "Foundation_NSXPCListenerEndpoint")]
    #[objc2::method(sel = "endpoint", managed = "Other")]
    pub unsafe fn endpoint(&self) -> Id<NSXPCListenerEndpoint>;

    #[objc2::method(sel = "resume")]
    pub unsafe fn resume(&self);

    #[objc2::method(sel = "suspend")]
    pub unsafe fn suspend(&self);

    #[objc2::method(sel = "activate")]
    pub unsafe fn activate(&self);

    #[objc2::method(sel = "invalidate")]
    pub unsafe fn invalidate(&self);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setConnectionCodeSigningRequirement:")]
    pub unsafe fn setConnectionCodeSigningRequirement(&self, requirement: &NSString);
}

#[objc2::protocol]
pub unsafe trait NSXPCListenerDelegate: NSObjectProtocol {
    #[cfg(all(
        feature = "Foundation_NSXPCConnection",
        feature = "Foundation_NSXPCListener"
    ))]
    #[objc2::method(optional, sel = "listener:shouldAcceptNewConnection:")]
    unsafe fn listener_shouldAcceptNewConnection(
        &self,
        listener: &NSXPCListener,
        new_connection: &NSXPCConnection,
    ) -> bool;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSXPCInterface")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSXPCInterface;
}

#[cfg(feature = "Foundation_NSXPCInterface")]
unsafe impl NSObjectProtocol for NSXPCInterface {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSXPCInterface")]
    pub type NSXPCInterface;

    #[objc2::method(sel = "interfaceWithProtocol:", managed = "Other")]
    pub unsafe fn interfaceWithProtocol(protocol: &Protocol) -> Id<NSXPCInterface>;

    #[objc2::method(sel = "protocol", managed = "Other")]
    pub unsafe fn protocol(&self) -> Id<Protocol>;

    #[objc2::method(sel = "setProtocol:")]
    pub unsafe fn setProtocol(&self, protocol: &Protocol);

    #[cfg(feature = "Foundation_NSSet")]
    #[objc2::method(sel = "setClasses:forSelector:argumentIndex:ofReply:")]
    pub unsafe fn setClasses_forSelector_argumentIndex_ofReply(
        &self,
        classes: &NSSet<TodoClass>,
        sel: Sel,
        arg: NSUInteger,
        of_reply: bool,
    );

    #[cfg(feature = "Foundation_NSSet")]
    #[objc2::method(sel = "classesForSelector:argumentIndex:ofReply:", managed = "Other")]
    pub unsafe fn classesForSelector_argumentIndex_ofReply(
        &self,
        sel: Sel,
        arg: NSUInteger,
        of_reply: bool,
    ) -> Id<NSSet<TodoClass>>;

    #[objc2::method(sel = "setInterface:forSelector:argumentIndex:ofReply:")]
    pub unsafe fn setInterface_forSelector_argumentIndex_ofReply(
        &self,
        ifc: &NSXPCInterface,
        sel: Sel,
        arg: NSUInteger,
        of_reply: bool,
    );

    #[objc2::method(sel = "interfaceForSelector:argumentIndex:ofReply:", managed = "Other")]
    pub unsafe fn interfaceForSelector_argumentIndex_ofReply(
        &self,
        sel: Sel,
        arg: NSUInteger,
        of_reply: bool,
    ) -> Option<Id<NSXPCInterface>>;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSXPCListenerEndpoint")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSXPCListenerEndpoint;
}

#[cfg(feature = "Foundation_NSXPCListenerEndpoint")]
unsafe impl NSCoding for NSXPCListenerEndpoint {}

#[cfg(feature = "Foundation_NSXPCListenerEndpoint")]
unsafe impl NSObjectProtocol for NSXPCListenerEndpoint {}

#[cfg(feature = "Foundation_NSXPCListenerEndpoint")]
unsafe impl NSSecureCoding for NSXPCListenerEndpoint {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSXPCListenerEndpoint")]
    pub type NSXPCListenerEndpoint;
}

#[objc2::interface(
    unsafe super = NSCoder,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSXPCCoder")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSXPCCoder;
}

#[cfg(feature = "Foundation_NSXPCCoder")]
unsafe impl NSObjectProtocol for NSXPCCoder {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSXPCCoder")]
    pub type NSXPCCoder;

    #[objc2::method(sel = "userInfo", managed = "Other")]
    pub unsafe fn userInfo(&self) -> Option<Id<NSObject>>;

    #[objc2::method(sel = "setUserInfo:")]
    pub unsafe fn setUserInfo(&self, user_info: Option<&NSObject>);

    #[cfg(feature = "Foundation_NSXPCConnection")]
    #[objc2::method(sel = "connection", managed = "Other")]
    pub unsafe fn connection(&self) -> Option<Id<NSXPCConnection>>;
}
