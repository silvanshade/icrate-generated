//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[ns_options]
#[underlying(NSUInteger)]
pub enum NSRegularExpressionOptions {
    NSRegularExpressionCaseInsensitive = 1 << 0,
    NSRegularExpressionAllowCommentsAndWhitespace = 1 << 1,
    NSRegularExpressionIgnoreMetacharacters = 1 << 2,
    NSRegularExpressionDotMatchesLineSeparators = 1 << 3,
    NSRegularExpressionAnchorsMatchLines = 1 << 4,
    NSRegularExpressionUseUnixLineSeparators = 1 << 5,
    NSRegularExpressionUseUnicodeWordBoundaries = 1 << 6,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSRegularExpression")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSRegularExpression;
}

#[cfg(feature = "Foundation_NSRegularExpression")]
unsafe impl NSCoding for NSRegularExpression {}

#[cfg(feature = "Foundation_NSRegularExpression")]
unsafe impl NSObjectProtocol for NSRegularExpression {}

#[cfg(feature = "Foundation_NSRegularExpression")]
unsafe impl NSSecureCoding for NSRegularExpression {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSRegularExpression")]
    pub type NSRegularExpression;

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSString"))]
    #[objc2::method(
        sel = "regularExpressionWithPattern:options:error:",
        managed = "Other",
        throws
    )]
    pub unsafe fn regularExpressionWithPattern_options_error(
        pattern: &NSString,
        options: NSRegularExpressionOptions,
    ) -> Result<Id<NSRegularExpression>, Id<NSError>>;

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "initWithPattern:options:error:", managed = "Init", throws)]
    pub unsafe fn initWithPattern_options_error(
        this: Option<Allocated<Self>>,
        pattern: &NSString,
        options: NSRegularExpressionOptions,
    ) -> Result<Id<Self>, Id<NSError>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "pattern", managed = "Other")]
    pub unsafe fn pattern(&self) -> Id<NSString>;

    #[objc2::method(sel = "options")]
    pub unsafe fn options(&self) -> NSRegularExpressionOptions;

    #[objc2::method(sel = "numberOfCaptureGroups")]
    pub unsafe fn numberOfCaptureGroups(&self) -> NSUInteger;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "escapedPatternForString:", managed = "Other")]
    pub unsafe fn escapedPatternForString(string: &NSString) -> Id<NSString>;
}

#[ns_options]
#[underlying(NSUInteger)]
pub enum NSMatchingOptions {
    NSMatchingReportProgress = 1 << 0,
    NSMatchingReportCompletion = 1 << 1,
    NSMatchingAnchored = 1 << 2,
    NSMatchingWithTransparentBounds = 1 << 3,
    NSMatchingWithoutAnchoringBounds = 1 << 4,
}

#[ns_options]
#[underlying(NSUInteger)]
pub enum NSMatchingFlags {
    NSMatchingProgress = 1 << 0,
    NSMatchingCompleted = 1 << 1,
    NSMatchingHitEnd = 1 << 2,
    NSMatchingRequiredEnd = 1 << 3,
    NSMatchingInternalError = 1 << 4,
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSRegularExpression")]
    pub type NSRegularExpression;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "Foundation_NSTextCheckingResult"
    ))]
    #[objc2::method(sel = "enumerateMatchesInString:options:range:usingBlock:")]
    pub unsafe fn enumerateMatchesInString_options_range_usingBlock(
        &self,
        string: &NSString,
        options: NSMatchingOptions,
        range: NSRange,
        block: &Block<(*mut NSTextCheckingResult, NSMatchingFlags, NonNull<Bool>), ()>,
    );

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSString",
        feature = "Foundation_NSTextCheckingResult"
    ))]
    #[objc2::method(sel = "matchesInString:options:range:", managed = "Other")]
    pub unsafe fn matchesInString_options_range(
        &self,
        string: &NSString,
        options: NSMatchingOptions,
        range: NSRange,
    ) -> Id<NSArray<NSTextCheckingResult>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "numberOfMatchesInString:options:range:")]
    pub unsafe fn numberOfMatchesInString_options_range(
        &self,
        string: &NSString,
        options: NSMatchingOptions,
        range: NSRange,
    ) -> NSUInteger;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "Foundation_NSTextCheckingResult"
    ))]
    #[objc2::method(sel = "firstMatchInString:options:range:", managed = "Other")]
    pub unsafe fn firstMatchInString_options_range(
        &self,
        string: &NSString,
        options: NSMatchingOptions,
        range: NSRange,
    ) -> Option<Id<NSTextCheckingResult>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "rangeOfFirstMatchInString:options:range:")]
    pub unsafe fn rangeOfFirstMatchInString_options_range(
        &self,
        string: &NSString,
        options: NSMatchingOptions,
        range: NSRange,
    ) -> NSRange;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSRegularExpression")]
    pub type NSRegularExpression;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(
        sel = "stringByReplacingMatchesInString:options:range:withTemplate:",
        managed = "Other"
    )]
    pub unsafe fn stringByReplacingMatchesInString_options_range_withTemplate(
        &self,
        string: &NSString,
        options: NSMatchingOptions,
        range: NSRange,
        templ: &NSString,
    ) -> Id<NSString>;

    #[cfg(all(
        feature = "Foundation_NSMutableString",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "replaceMatchesInString:options:range:withTemplate:")]
    pub unsafe fn replaceMatchesInString_options_range_withTemplate(
        &self,
        string: &NSMutableString,
        options: NSMatchingOptions,
        range: NSRange,
        templ: &NSString,
    ) -> NSUInteger;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "Foundation_NSTextCheckingResult"
    ))]
    #[objc2::method(
        sel = "replacementStringForResult:inString:offset:template:",
        managed = "Other"
    )]
    pub unsafe fn replacementStringForResult_inString_offset_template(
        &self,
        result: &NSTextCheckingResult,
        string: &NSString,
        offset: NSInteger,
        templ: &NSString,
    ) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "escapedTemplateForString:", managed = "Other")]
    pub unsafe fn escapedTemplateForString(string: &NSString) -> Id<NSString>;
}

#[objc2::interface(
    unsafe super = NSRegularExpression,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSDataDetector")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSDataDetector;
}

#[cfg(feature = "Foundation_NSDataDetector")]
unsafe impl NSCoding for NSDataDetector {}

#[cfg(feature = "Foundation_NSDataDetector")]
unsafe impl NSObjectProtocol for NSDataDetector {}

#[cfg(feature = "Foundation_NSDataDetector")]
unsafe impl NSSecureCoding for NSDataDetector {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSDataDetector")]
    pub type NSDataDetector;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "dataDetectorWithTypes:error:", managed = "Other", throws)]
    pub unsafe fn dataDetectorWithTypes_error(
        checking_types: NSTextCheckingTypes,
    ) -> Result<Id<NSDataDetector>, Id<NSError>>;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "initWithTypes:error:", managed = "Init", throws)]
    pub unsafe fn initWithTypes_error(
        this: Option<Allocated<Self>>,
        checking_types: NSTextCheckingTypes,
    ) -> Result<Id<Self>, Id<NSError>>;

    #[objc2::method(sel = "checkingTypes")]
    pub unsafe fn checkingTypes(&self) -> NSTextCheckingTypes;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSRegularExpression`
    #[cfg(feature = "Foundation_NSDataDetector")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSDataDetector")]
    pub type NSDataDetector;

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "initWithPattern:options:error:", managed = "Init", throws)]
    pub unsafe fn initWithPattern_options_error(
        this: Option<Allocated<Self>>,
        pattern: &NSString,
        options: NSRegularExpressionOptions,
    ) -> Result<Id<Self>, Id<NSError>>;
}
