//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSXMLNode,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSXMLElement")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSXMLElement;
}

#[cfg(feature = "Foundation_NSXMLElement")]
unsafe impl NSObjectProtocol for NSXMLElement {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSXMLElement")]
    pub type NSXMLElement;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithName:", managed = "Init")]
    pub unsafe fn initWithName(this: Option<Allocated<Self>>, name: &NSString) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithName:URI:", managed = "Init")]
    pub unsafe fn initWithName_URI(
        this: Option<Allocated<Self>>,
        name: &NSString,
        uri: Option<&NSString>,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithName:stringValue:", managed = "Init")]
    pub unsafe fn initWithName_stringValue(
        this: Option<Allocated<Self>>,
        name: &NSString,
        string: Option<&NSString>,
    ) -> Id<Self>;

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "initWithXMLString:error:", managed = "Init", throws)]
    pub unsafe fn initWithXMLString_error(
        this: Option<Allocated<Self>>,
        string: &NSString,
    ) -> Result<Id<Self>, Id<NSError>>;

    #[objc2::method(sel = "initWithKind:options:", managed = "Init")]
    pub unsafe fn initWithKind_options(
        this: Option<Allocated<Self>>,
        kind: NSXMLNodeKind,
        options: NSXMLNodeOptions,
    ) -> Id<Self>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "elementsForName:", managed = "Other")]
    pub unsafe fn elementsForName(&self, name: &NSString) -> Id<NSArray<NSXMLElement>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "elementsForLocalName:URI:", managed = "Other")]
    pub unsafe fn elementsForLocalName_URI(
        &self,
        local_name: &NSString,
        uri: Option<&NSString>,
    ) -> Id<NSArray<NSXMLElement>>;

    #[objc2::method(sel = "addAttribute:")]
    pub unsafe fn addAttribute(&self, attribute: &NSXMLNode);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "removeAttributeForName:")]
    pub unsafe fn removeAttributeForName(&self, name: &NSString);

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "attributes", managed = "Other")]
    pub unsafe fn attributes(&self) -> Option<Id<NSArray<NSXMLNode>>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "setAttributes:")]
    pub unsafe fn setAttributes(&self, attributes: Option<&NSArray<NSXMLNode>>);

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setAttributesWithDictionary:")]
    pub unsafe fn setAttributesWithDictionary(&self, attributes: &NSDictionary<NSString, NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "attributeForName:", managed = "Other")]
    pub unsafe fn attributeForName(&self, name: &NSString) -> Option<Id<NSXMLNode>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "attributeForLocalName:URI:", managed = "Other")]
    pub unsafe fn attributeForLocalName_URI(
        &self,
        local_name: &NSString,
        uri: Option<&NSString>,
    ) -> Option<Id<NSXMLNode>>;

    #[objc2::method(sel = "addNamespace:")]
    pub unsafe fn addNamespace(&self, a_namespace: &NSXMLNode);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "removeNamespaceForPrefix:")]
    pub unsafe fn removeNamespaceForPrefix(&self, name: &NSString);

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "namespaces", managed = "Other")]
    pub unsafe fn namespaces(&self) -> Option<Id<NSArray<NSXMLNode>>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "setNamespaces:")]
    pub unsafe fn setNamespaces(&self, namespaces: Option<&NSArray<NSXMLNode>>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "namespaceForPrefix:", managed = "Other")]
    pub unsafe fn namespaceForPrefix(&self, name: &NSString) -> Option<Id<NSXMLNode>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "resolveNamespaceForName:", managed = "Other")]
    pub unsafe fn resolveNamespaceForName(&self, name: &NSString) -> Option<Id<NSXMLNode>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "resolvePrefixForNamespaceURI:", managed = "Other")]
    pub unsafe fn resolvePrefixForNamespaceURI(
        &self,
        namespace_uri: &NSString,
    ) -> Option<Id<NSString>>;

    #[objc2::method(sel = "insertChild:atIndex:")]
    pub unsafe fn insertChild_atIndex(&self, child: &NSXMLNode, index: NSUInteger);

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "insertChildren:atIndex:")]
    pub unsafe fn insertChildren_atIndex(&self, children: &NSArray<NSXMLNode>, index: NSUInteger);

    #[objc2::method(sel = "removeChildAtIndex:")]
    pub unsafe fn removeChildAtIndex(&self, index: NSUInteger);

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "setChildren:")]
    pub unsafe fn setChildren(&self, children: Option<&NSArray<NSXMLNode>>);

    #[objc2::method(sel = "addChild:")]
    pub unsafe fn addChild(&self, child: &NSXMLNode);

    #[objc2::method(sel = "replaceChildAtIndex:withNode:")]
    pub unsafe fn replaceChildAtIndex_withNode(&self, index: NSUInteger, node: &NSXMLNode);

    #[objc2::method(sel = "normalizeAdjacentTextNodesPreservingCDATA:")]
    pub unsafe fn normalizeAdjacentTextNodesPreservingCDATA(&self, preserve: bool);
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSXMLElement")]
    pub type NSXMLElement;

    #[cfg(feature = "Foundation_NSDictionary")]
    #[deprecated]
    #[objc2::method(sel = "setAttributesAsDictionary:")]
    pub unsafe fn setAttributesAsDictionary(&self, attributes: &NSDictionary);
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSXMLNode`
    #[cfg(feature = "Foundation_NSXMLElement")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSXMLElement")]
    pub type NSXMLElement;

    #[objc2::method(sel = "initWithKind:", managed = "Init")]
    pub unsafe fn initWithKind(this: Option<Allocated<Self>>, kind: NSXMLNodeKind) -> Id<Self>;
}
