//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSThread")]
    #[derive(PartialEq, Eq, Hash)]
    pub type NSThread;
}

#[cfg(feature = "Foundation_NSThread")]
unsafe impl NSObjectProtocol for NSThread {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSThread")]
    pub type NSThread;

    #[objc2::method(sel = "currentThread", managed = "Other")]
    pub fn currentThread() -> Id<NSThread>;

    #[objc2::method(sel = "detachNewThreadWithBlock:")]
    pub unsafe fn detachNewThreadWithBlock(block: &Block<(), ()>);

    #[objc2::method(sel = "detachNewThreadSelector:toTarget:withObject:")]
    pub unsafe fn detachNewThreadSelector_toTarget_withObject(
        selector: Sel,
        target: &Object,
        argument: Option<&Object>,
    );

    #[objc2::method(sel = "isMultiThreaded")]
    pub fn isMultiThreaded() -> bool;

    #[cfg(feature = "Foundation_NSMutableDictionary")]
    #[objc2::method(sel = "threadDictionary", managed = "Other")]
    pub unsafe fn threadDictionary(&self) -> Id<NSMutableDictionary, Owned>;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "sleepUntilDate:")]
    pub unsafe fn sleepUntilDate(date: &NSDate);

    #[objc2::method(sel = "sleepForTimeInterval:")]
    pub unsafe fn sleepForTimeInterval(ti: NSTimeInterval);

    #[objc2::method(sel = "exit")]
    pub unsafe fn exit();

    #[objc2::method(sel = "threadPriority")]
    pub unsafe fn threadPriority_class() -> c_double;

    #[objc2::method(sel = "setThreadPriority:")]
    pub unsafe fn setThreadPriority_class(p: c_double) -> bool;

    #[objc2::method(sel = "threadPriority")]
    pub unsafe fn threadPriority(&self) -> c_double;

    #[objc2::method(sel = "setThreadPriority:")]
    pub unsafe fn setThreadPriority(&self, thread_priority: c_double);

    #[objc2::method(sel = "qualityOfService")]
    pub unsafe fn qualityOfService(&self) -> NSQualityOfService;

    #[objc2::method(sel = "setQualityOfService:")]
    pub unsafe fn setQualityOfService(&self, quality_of_service: NSQualityOfService);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
    #[objc2::method(sel = "callStackReturnAddresses", managed = "Other")]
    pub unsafe fn callStackReturnAddresses() -> Id<NSArray<NSNumber>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "callStackSymbols", managed = "Other")]
    pub unsafe fn callStackSymbols() -> Id<NSArray<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "name", managed = "Other")]
    pub fn name(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setName:")]
    pub unsafe fn setName(&self, name: Option<&NSString>);

    #[objc2::method(sel = "stackSize")]
    pub unsafe fn stackSize(&self) -> NSUInteger;

    #[objc2::method(sel = "setStackSize:")]
    pub unsafe fn setStackSize(&self, stack_size: NSUInteger);

    #[objc2::method(sel = "isMainThread")]
    pub fn isMainThread(&self) -> bool;

    #[objc2::method(sel = "isMainThread")]
    pub fn isMainThread_class() -> bool;

    #[objc2::method(sel = "mainThread", managed = "Other")]
    pub fn mainThread() -> Id<NSThread>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "initWithTarget:selector:object:", managed = "Init")]
    pub unsafe fn initWithTarget_selector_object(
        this: Option<Allocated<Self>>,
        target: &Object,
        selector: Sel,
        argument: Option<&Object>,
    ) -> Id<Self>;

    #[objc2::method(sel = "initWithBlock:", managed = "Init")]
    pub unsafe fn initWithBlock(this: Option<Allocated<Self>>, block: &Block<(), ()>) -> Id<Self>;

    #[objc2::method(sel = "isExecuting")]
    pub unsafe fn isExecuting(&self) -> bool;

    #[objc2::method(sel = "isFinished")]
    pub unsafe fn isFinished(&self) -> bool;

    #[objc2::method(sel = "isCancelled")]
    pub unsafe fn isCancelled(&self) -> bool;

    #[objc2::method(sel = "cancel")]
    pub unsafe fn cancel(&self);

    #[objc2::method(sel = "start")]
    pub unsafe fn start(&self);

    #[objc2::method(sel = "main")]
    pub unsafe fn main(&self);
}

extern_static!(NSWillBecomeMultiThreadedNotification: &'static NSNotificationName);

extern_static!(NSDidBecomeSingleThreadedNotification: &'static NSNotificationName);

extern_static!(NSThreadWillExitNotification: &'static NSNotificationName);
