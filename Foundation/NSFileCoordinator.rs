//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[ns_options]
#[underlying(NSUInteger)]
pub enum NSFileCoordinatorReadingOptions {
    NSFileCoordinatorReadingWithoutChanges = 1 << 0,
    NSFileCoordinatorReadingResolvesSymbolicLink = 1 << 1,
    NSFileCoordinatorReadingImmediatelyAvailableMetadataOnly = 1 << 2,
    NSFileCoordinatorReadingForUploading = 1 << 3,
}

#[ns_options]
#[underlying(NSUInteger)]
pub enum NSFileCoordinatorWritingOptions {
    NSFileCoordinatorWritingForDeleting = 1 << 0,
    NSFileCoordinatorWritingForMoving = 1 << 1,
    NSFileCoordinatorWritingForMerging = 1 << 2,
    NSFileCoordinatorWritingForReplacing = 1 << 3,
    NSFileCoordinatorWritingContentIndependentMetadataOnly = 1 << 4,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSFileAccessIntent")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSFileAccessIntent;
}

#[cfg(feature = "Foundation_NSFileAccessIntent")]
unsafe impl NSObjectProtocol for NSFileAccessIntent {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSFileAccessIntent")]
    pub type NSFileAccessIntent;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "readingIntentWithURL:options:", managed = "Other")]
    pub unsafe fn readingIntentWithURL_options(
        url: &NSURL,
        options: NSFileCoordinatorReadingOptions,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "writingIntentWithURL:options:", managed = "Other")]
    pub unsafe fn writingIntentWithURL_options(
        url: &NSURL,
        options: NSFileCoordinatorWritingOptions,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "URL", managed = "Other")]
    pub unsafe fn URL(&self) -> Id<NSURL>;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSFileCoordinator")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSFileCoordinator;
}

#[cfg(feature = "Foundation_NSFileCoordinator")]
unsafe impl NSObjectProtocol for NSFileCoordinator {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSFileCoordinator")]
    pub type NSFileCoordinator;

    #[objc2::method(sel = "addFilePresenter:")]
    pub unsafe fn addFilePresenter(file_presenter: &ProtocolObject<dyn NSFilePresenter>);

    #[objc2::method(sel = "removeFilePresenter:")]
    pub unsafe fn removeFilePresenter(file_presenter: &ProtocolObject<dyn NSFilePresenter>);

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "filePresenters", managed = "Other")]
    pub unsafe fn filePresenters() -> Id<NSArray<ProtocolObject<dyn NSFilePresenter>>>;

    #[objc2::method(sel = "initWithFilePresenter:", managed = "Init")]
    pub unsafe fn initWithFilePresenter(
        this: Option<Allocated<Self>>,
        file_presenter_or_nil: Option<&ProtocolObject<dyn NSFilePresenter>>,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "purposeIdentifier", managed = "Other")]
    pub unsafe fn purposeIdentifier(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setPurposeIdentifier:")]
    pub unsafe fn setPurposeIdentifier(&self, purpose_identifier: &NSString);

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError",
        feature = "Foundation_NSFileAccessIntent",
        feature = "Foundation_NSOperationQueue"
    ))]
    #[objc2::method(sel = "coordinateAccessWithIntents:queue:byAccessor:")]
    pub unsafe fn coordinateAccessWithIntents_queue_byAccessor(
        &self,
        intents: &NSArray<NSFileAccessIntent>,
        queue: &NSOperationQueue,
        accessor: &Block<(*mut NSError,), ()>,
    );

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
    #[objc2::method(sel = "coordinateReadingItemAtURL:options:error:byAccessor:")]
    pub unsafe fn coordinateReadingItemAtURL_options_error_byAccessor(
        &self,
        url: &NSURL,
        options: NSFileCoordinatorReadingOptions,
        out_error: Option<&mut Option<Id<NSError>>>,
        reader: &Block<(NonNull<NSURL>,), ()>,
    );

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
    #[objc2::method(sel = "coordinateWritingItemAtURL:options:error:byAccessor:")]
    pub unsafe fn coordinateWritingItemAtURL_options_error_byAccessor(
        &self,
        url: &NSURL,
        options: NSFileCoordinatorWritingOptions,
        out_error: Option<&mut Option<Id<NSError>>>,
        writer: &Block<(NonNull<NSURL>,), ()>,
    );

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
    #[objc2::method(
        sel = "coordinateReadingItemAtURL:options:writingItemAtURL:options:error:byAccessor:"
    )]
    pub unsafe fn coordinateReadingItemAtURL_options_writingItemAtURL_options_error_byAccessor(
        &self,
        reading_url: &NSURL,
        reading_options: NSFileCoordinatorReadingOptions,
        writing_url: &NSURL,
        writing_options: NSFileCoordinatorWritingOptions,
        out_error: Option<&mut Option<Id<NSError>>>,
        reader_writer: &Block<(NonNull<NSURL>, NonNull<NSURL>), ()>,
    );

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
    #[objc2::method(
        sel = "coordinateWritingItemAtURL:options:writingItemAtURL:options:error:byAccessor:"
    )]
    pub unsafe fn coordinateWritingItemAtURL_options_writingItemAtURL_options_error_byAccessor(
        &self,
        url1: &NSURL,
        options1: NSFileCoordinatorWritingOptions,
        url2: &NSURL,
        options2: NSFileCoordinatorWritingOptions,
        out_error: Option<&mut Option<Id<NSError>>>,
        writer: &Block<(NonNull<NSURL>, NonNull<NSURL>), ()>,
    );

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError",
        feature = "Foundation_NSURL"
    ))]
    #[objc2::method(
        sel = "prepareForReadingItemsAtURLs:options:writingItemsAtURLs:options:error:byAccessor:"
    )]
    pub unsafe fn prepareForReadingItemsAtURLs_options_writingItemsAtURLs_options_error_byAccessor(
        &self,
        reading_ur_ls: &NSArray<NSURL>,
        reading_options: NSFileCoordinatorReadingOptions,
        writing_ur_ls: &NSArray<NSURL>,
        writing_options: NSFileCoordinatorWritingOptions,
        out_error: Option<&mut Option<Id<NSError>>>,
        batch_accessor: &Block<(NonNull<Block<(), ()>>,), ()>,
    );

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "itemAtURL:willMoveToURL:")]
    pub unsafe fn itemAtURL_willMoveToURL(&self, old_url: &NSURL, new_url: &NSURL);

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "itemAtURL:didMoveToURL:")]
    pub unsafe fn itemAtURL_didMoveToURL(&self, old_url: &NSURL, new_url: &NSURL);

    #[cfg(all(feature = "Foundation_NSSet", feature = "Foundation_NSURL"))]
    #[objc2::method(sel = "itemAtURL:didChangeUbiquityAttributes:")]
    pub unsafe fn itemAtURL_didChangeUbiquityAttributes(
        &self,
        url: &NSURL,
        attributes: &NSSet<NSURLResourceKey>,
    );

    #[objc2::method(sel = "cancel")]
    pub unsafe fn cancel(&self);
}
