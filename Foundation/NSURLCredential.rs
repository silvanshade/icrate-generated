//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSURLCredentialPersistence {
    NSURLCredentialPersistenceNone = 0,
    NSURLCredentialPersistenceForSession = 1,
    NSURLCredentialPersistencePermanent = 2,
    NSURLCredentialPersistenceSynchronizable = 3,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSURLCredential")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSURLCredential;
}

#[cfg(feature = "Foundation_NSURLCredential")]
unsafe impl NSCoding for NSURLCredential {}

#[cfg(feature = "Foundation_NSURLCredential")]
unsafe impl NSObjectProtocol for NSURLCredential {}

#[cfg(feature = "Foundation_NSURLCredential")]
unsafe impl NSSecureCoding for NSURLCredential {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSURLCredential")]
    pub type NSURLCredential;

    #[objc2::method(sel = "persistence")]
    pub unsafe fn persistence(&self) -> NSURLCredentialPersistence;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSURLCredential")]
    pub type NSURLCredential;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithUser:password:persistence:", managed = "Init")]
    pub unsafe fn initWithUser_password_persistence(
        this: Option<Allocated<Self>>,
        user: &NSString,
        password: &NSString,
        persistence: NSURLCredentialPersistence,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "credentialWithUser:password:persistence:", managed = "Other")]
    pub unsafe fn credentialWithUser_password_persistence(
        user: &NSString,
        password: &NSString,
        persistence: NSURLCredentialPersistence,
    ) -> Id<NSURLCredential>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "user", managed = "Other")]
    pub unsafe fn user(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "password", managed = "Other")]
    pub unsafe fn password(&self) -> Option<Id<NSString>>;

    #[objc2::method(sel = "hasPassword")]
    pub unsafe fn hasPassword(&self) -> bool;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSURLCredential")]
    pub type NSURLCredential;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "certificates", managed = "Other")]
    pub unsafe fn certificates(&self) -> Id<NSArray>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSURLCredential")]
    pub type NSURLCredential;
}
