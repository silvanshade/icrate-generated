//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSOrderedSet")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSOrderedSet<ObjectType: Message = Object, ObjectTypeOwnership: Ownership = Shared>;
}

#[cfg(feature = "Foundation_NSOrderedSet")]
unsafe impl<ObjectType: Message, ObjectTypeOwnership: Ownership> NSCoding
    for NSOrderedSet<ObjectType, ObjectTypeOwnership>
{
}

#[cfg(feature = "Foundation_NSOrderedSet")]
unsafe impl<ObjectType: Message, ObjectTypeOwnership: Ownership> NSFastEnumeration
    for NSOrderedSet<ObjectType, ObjectTypeOwnership>
{
}

#[cfg(feature = "Foundation_NSOrderedSet")]
unsafe impl<ObjectType: Message, ObjectTypeOwnership: Ownership> NSObjectProtocol
    for NSOrderedSet<ObjectType, ObjectTypeOwnership>
{
}

#[cfg(feature = "Foundation_NSOrderedSet")]
unsafe impl<ObjectType: Message, ObjectTypeOwnership: Ownership> NSSecureCoding
    for NSOrderedSet<ObjectType, ObjectTypeOwnership>
{
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSOrderedSet")]
    pub type NSOrderedSet<ObjectType: Message = Object, ObjectTypeOwnership: Ownership = Shared>;

    #[objc2::method(sel = "count")]
    pub unsafe fn count(&self) -> NSUInteger;

    #[objc2::method(sel = "objectAtIndex:", managed = "Other")]
    pub unsafe fn objectAtIndex(&self, idx: NSUInteger) -> Id<ObjectType, ObjectTypeOwnership>;

    #[objc2::method(sel = "indexOfObject:")]
    pub unsafe fn indexOfObject(&self, object: &ObjectType) -> NSUInteger;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "initWithObjects:count:", managed = "Init")]
    pub unsafe fn initWithObjects_count(
        this: Option<Allocated<Self>>,
        objects: *mut NonNull<ObjectType>,
        cnt: NSUInteger,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, coder: &NSCoder)
        -> Option<Id<Self>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSOrderedSet")]
    pub type NSOrderedSet<ObjectType: Message = Object, ObjectTypeOwnership: Ownership = Shared>;

    #[objc2::method(sel = "getObjects:range:")]
    pub unsafe fn getObjects_range(&self, objects: *mut NonNull<ObjectType>, range: NSRange);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSIndexSet"))]
    #[objc2::method(sel = "objectsAtIndexes:", managed = "Other")]
    pub unsafe fn objectsAtIndexes(&self, indexes: &NSIndexSet) -> Id<NSArray<ObjectType>>;

    #[objc2::method(sel = "firstObject", managed = "Other")]
    pub unsafe fn firstObject(&self) -> Option<Id<ObjectType, ObjectTypeOwnership>>;

    #[objc2::method(sel = "lastObject", managed = "Other")]
    pub unsafe fn lastObject(&self) -> Option<Id<ObjectType, ObjectTypeOwnership>>;

    #[objc2::method(sel = "isEqualToOrderedSet:")]
    pub unsafe fn isEqualToOrderedSet(&self, other: &NSOrderedSet<ObjectType>) -> bool;

    #[objc2::method(sel = "containsObject:")]
    pub unsafe fn containsObject(&self, object: &ObjectType) -> bool;

    #[objc2::method(sel = "intersectsOrderedSet:")]
    pub unsafe fn intersectsOrderedSet(&self, other: &NSOrderedSet<ObjectType>) -> bool;

    #[cfg(feature = "Foundation_NSSet")]
    #[objc2::method(sel = "intersectsSet:")]
    pub unsafe fn intersectsSet(&self, set: &NSSet<ObjectType>) -> bool;

    #[objc2::method(sel = "isSubsetOfOrderedSet:")]
    pub unsafe fn isSubsetOfOrderedSet(&self, other: &NSOrderedSet<ObjectType>) -> bool;

    #[cfg(feature = "Foundation_NSSet")]
    #[objc2::method(sel = "isSubsetOfSet:")]
    pub unsafe fn isSubsetOfSet(&self, set: &NSSet<ObjectType>) -> bool;

    #[objc2::method(sel = "objectAtIndexedSubscript:", managed = "Other")]
    pub unsafe fn objectAtIndexedSubscript(
        &self,
        idx: NSUInteger,
    ) -> Id<ObjectType, ObjectTypeOwnership>;

    #[cfg(feature = "Foundation_NSEnumerator")]
    #[objc2::method(sel = "objectEnumerator", managed = "Other")]
    pub unsafe fn objectEnumerator(&self) -> Id<NSEnumerator<ObjectType>>;

    #[cfg(feature = "Foundation_NSEnumerator")]
    #[objc2::method(sel = "reverseObjectEnumerator", managed = "Other")]
    pub unsafe fn reverseObjectEnumerator(&self) -> Id<NSEnumerator<ObjectType>>;

    #[objc2::method(sel = "reversedOrderedSet", managed = "Other")]
    pub unsafe fn reversedOrderedSet(&self) -> Id<NSOrderedSet<ObjectType>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "array", managed = "Other")]
    pub unsafe fn array(&self) -> Id<NSArray<ObjectType>>;

    #[cfg(feature = "Foundation_NSSet")]
    #[objc2::method(sel = "set", managed = "Other")]
    pub unsafe fn set(&self) -> Id<NSSet<ObjectType>>;

    #[objc2::method(sel = "enumerateObjectsUsingBlock:")]
    pub unsafe fn enumerateObjectsUsingBlock(
        &self,
        block: &Block<(NonNull<ObjectType>, NSUInteger, NonNull<Bool>), ()>,
    );

    #[objc2::method(sel = "enumerateObjectsWithOptions:usingBlock:")]
    pub unsafe fn enumerateObjectsWithOptions_usingBlock(
        &self,
        opts: NSEnumerationOptions,
        block: &Block<(NonNull<ObjectType>, NSUInteger, NonNull<Bool>), ()>,
    );

    #[cfg(feature = "Foundation_NSIndexSet")]
    #[objc2::method(sel = "enumerateObjectsAtIndexes:options:usingBlock:")]
    pub unsafe fn enumerateObjectsAtIndexes_options_usingBlock(
        &self,
        s: &NSIndexSet,
        opts: NSEnumerationOptions,
        block: &Block<(NonNull<ObjectType>, NSUInteger, NonNull<Bool>), ()>,
    );

    #[objc2::method(sel = "indexOfObjectPassingTest:")]
    pub unsafe fn indexOfObjectPassingTest(
        &self,
        predicate: &Block<(NonNull<ObjectType>, NSUInteger, NonNull<Bool>), Bool>,
    ) -> NSUInteger;

    #[objc2::method(sel = "indexOfObjectWithOptions:passingTest:")]
    pub unsafe fn indexOfObjectWithOptions_passingTest(
        &self,
        opts: NSEnumerationOptions,
        predicate: &Block<(NonNull<ObjectType>, NSUInteger, NonNull<Bool>), Bool>,
    ) -> NSUInteger;

    #[cfg(feature = "Foundation_NSIndexSet")]
    #[objc2::method(sel = "indexOfObjectAtIndexes:options:passingTest:")]
    pub unsafe fn indexOfObjectAtIndexes_options_passingTest(
        &self,
        s: &NSIndexSet,
        opts: NSEnumerationOptions,
        predicate: &Block<(NonNull<ObjectType>, NSUInteger, NonNull<Bool>), Bool>,
    ) -> NSUInteger;

    #[cfg(feature = "Foundation_NSIndexSet")]
    #[objc2::method(sel = "indexesOfObjectsPassingTest:", managed = "Other")]
    pub unsafe fn indexesOfObjectsPassingTest(
        &self,
        predicate: &Block<(NonNull<ObjectType>, NSUInteger, NonNull<Bool>), Bool>,
    ) -> Id<NSIndexSet>;

    #[cfg(feature = "Foundation_NSIndexSet")]
    #[objc2::method(sel = "indexesOfObjectsWithOptions:passingTest:", managed = "Other")]
    pub unsafe fn indexesOfObjectsWithOptions_passingTest(
        &self,
        opts: NSEnumerationOptions,
        predicate: &Block<(NonNull<ObjectType>, NSUInteger, NonNull<Bool>), Bool>,
    ) -> Id<NSIndexSet>;

    #[cfg(feature = "Foundation_NSIndexSet")]
    #[objc2::method(
        sel = "indexesOfObjectsAtIndexes:options:passingTest:",
        managed = "Other"
    )]
    pub unsafe fn indexesOfObjectsAtIndexes_options_passingTest(
        &self,
        s: &NSIndexSet,
        opts: NSEnumerationOptions,
        predicate: &Block<(NonNull<ObjectType>, NSUInteger, NonNull<Bool>), Bool>,
    ) -> Id<NSIndexSet>;

    #[objc2::method(sel = "indexOfObject:inSortedRange:options:usingComparator:")]
    pub unsafe fn indexOfObject_inSortedRange_options_usingComparator(
        &self,
        object: &ObjectType,
        range: NSRange,
        opts: NSBinarySearchingOptions,
        cmp: NSComparator,
    ) -> NSUInteger;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "sortedArrayUsingComparator:", managed = "Other")]
    pub unsafe fn sortedArrayUsingComparator(&self, cmptr: NSComparator)
        -> Id<NSArray<ObjectType>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "sortedArrayWithOptions:usingComparator:", managed = "Other")]
    pub unsafe fn sortedArrayWithOptions_usingComparator(
        &self,
        opts: NSSortOptions,
        cmptr: NSComparator,
    ) -> Id<NSArray<ObjectType>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "description", managed = "Other")]
    pub unsafe fn description(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "descriptionWithLocale:", managed = "Other")]
    pub unsafe fn descriptionWithLocale(&self, locale: Option<&Object>) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "descriptionWithLocale:indent:", managed = "Other")]
    pub unsafe fn descriptionWithLocale_indent(
        &self,
        locale: Option<&Object>,
        level: NSUInteger,
    ) -> Id<NSString>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSOrderedSet")]
    pub type NSOrderedSet<ObjectType: Message = Object, ObjectTypeOwnership: Ownership = Shared>;

    #[objc2::method(sel = "orderedSet", managed = "Other")]
    pub unsafe fn orderedSet() -> Id<Self>;

    #[objc2::method(sel = "orderedSetWithObject:", managed = "Other")]
    pub unsafe fn orderedSetWithObject(object: &ObjectType) -> Id<Self>;

    #[objc2::method(sel = "orderedSetWithObjects:count:", managed = "Other")]
    pub unsafe fn orderedSetWithObjects_count(
        objects: NonNull<NonNull<ObjectType>>,
        cnt: NSUInteger,
    ) -> Id<Self>;

    #[objc2::method(sel = "orderedSetWithOrderedSet:", managed = "Other")]
    pub unsafe fn orderedSetWithOrderedSet(set: &NSOrderedSet<ObjectType>) -> Id<Self>;

    #[objc2::method(sel = "orderedSetWithOrderedSet:range:copyItems:", managed = "Other")]
    pub unsafe fn orderedSetWithOrderedSet_range_copyItems(
        set: &NSOrderedSet<ObjectType>,
        range: NSRange,
        flag: bool,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "orderedSetWithArray:", managed = "Other")]
    pub unsafe fn orderedSetWithArray(array: &NSArray<ObjectType>) -> Id<Self>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "orderedSetWithArray:range:copyItems:", managed = "Other")]
    pub unsafe fn orderedSetWithArray_range_copyItems(
        array: &NSArray<ObjectType>,
        range: NSRange,
        flag: bool,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSSet")]
    #[objc2::method(sel = "orderedSetWithSet:", managed = "Other")]
    pub unsafe fn orderedSetWithSet(set: &NSSet<ObjectType>) -> Id<Self>;

    #[cfg(feature = "Foundation_NSSet")]
    #[objc2::method(sel = "orderedSetWithSet:copyItems:", managed = "Other")]
    pub unsafe fn orderedSetWithSet_copyItems(set: &NSSet<ObjectType>, flag: bool) -> Id<Self>;

    #[objc2::method(sel = "initWithObject:", managed = "Init")]
    pub unsafe fn initWithObject(this: Option<Allocated<Self>>, object: &ObjectType) -> Id<Self>;

    #[objc2::method(sel = "initWithOrderedSet:", managed = "Init")]
    pub unsafe fn initWithOrderedSet(
        this: Option<Allocated<Self>>,
        set: &NSOrderedSet<ObjectType>,
    ) -> Id<Self>;

    #[objc2::method(sel = "initWithOrderedSet:copyItems:", managed = "Init")]
    pub unsafe fn initWithOrderedSet_copyItems(
        this: Option<Allocated<Self>>,
        set: &NSOrderedSet<ObjectType>,
        flag: bool,
    ) -> Id<Self>;

    #[objc2::method(sel = "initWithOrderedSet:range:copyItems:", managed = "Init")]
    pub unsafe fn initWithOrderedSet_range_copyItems(
        this: Option<Allocated<Self>>,
        set: &NSOrderedSet<ObjectType>,
        range: NSRange,
        flag: bool,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "initWithArray:", managed = "Init")]
    pub unsafe fn initWithArray(
        this: Option<Allocated<Self>>,
        array: &NSArray<ObjectType>,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "initWithArray:copyItems:", managed = "Init")]
    pub unsafe fn initWithArray_copyItems(
        this: Option<Allocated<Self>>,
        set: &NSArray<ObjectType>,
        flag: bool,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "initWithArray:range:copyItems:", managed = "Init")]
    pub unsafe fn initWithArray_range_copyItems(
        this: Option<Allocated<Self>>,
        set: &NSArray<ObjectType>,
        range: NSRange,
        flag: bool,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSSet")]
    #[objc2::method(sel = "initWithSet:", managed = "Init")]
    pub unsafe fn initWithSet(this: Option<Allocated<Self>>, set: &NSSet<ObjectType>) -> Id<Self>;

    #[cfg(feature = "Foundation_NSSet")]
    #[objc2::method(sel = "initWithSet:copyItems:", managed = "Init")]
    pub unsafe fn initWithSet_copyItems(
        this: Option<Allocated<Self>>,
        set: &NSSet<ObjectType>,
        flag: bool,
    ) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSOrderedSet")]
    pub type NSOrderedSet<ObjectType: Message = Object, ObjectTypeOwnership: Ownership = Shared>;

    #[cfg(feature = "Foundation_NSOrderedCollectionDifference")]
    #[objc2::method(
        sel = "differenceFromOrderedSet:withOptions:usingEquivalenceTest:",
        managed = "Other"
    )]
    pub unsafe fn differenceFromOrderedSet_withOptions_usingEquivalenceTest(
        &self,
        other: &NSOrderedSet<ObjectType>,
        options: NSOrderedCollectionDifferenceCalculationOptions,
        block: &Block<(NonNull<ObjectType>, NonNull<ObjectType>), Bool>,
    ) -> Id<NSOrderedCollectionDifference<ObjectType>>;

    #[cfg(feature = "Foundation_NSOrderedCollectionDifference")]
    #[objc2::method(sel = "differenceFromOrderedSet:withOptions:", managed = "Other")]
    pub unsafe fn differenceFromOrderedSet_withOptions(
        &self,
        other: &NSOrderedSet<ObjectType>,
        options: NSOrderedCollectionDifferenceCalculationOptions,
    ) -> Id<NSOrderedCollectionDifference<ObjectType>>;

    #[cfg(feature = "Foundation_NSOrderedCollectionDifference")]
    #[objc2::method(sel = "differenceFromOrderedSet:", managed = "Other")]
    pub unsafe fn differenceFromOrderedSet(
        &self,
        other: &NSOrderedSet<ObjectType>,
    ) -> Id<NSOrderedCollectionDifference<ObjectType>>;

    #[cfg(feature = "Foundation_NSOrderedCollectionDifference")]
    #[objc2::method(sel = "orderedSetByApplyingDifference:", managed = "Other")]
    pub unsafe fn orderedSetByApplyingDifference(
        &self,
        difference: &NSOrderedCollectionDifference<ObjectType>,
    ) -> Option<Id<NSOrderedSet<ObjectType>>>;
}

#[objc2::interface(
    unsafe super = NSOrderedSet<ObjectType, ObjectTypeOwnership, >,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSMutableOrderedSet")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSMutableOrderedSet<
        ObjectType: Message = Object,
        ObjectTypeOwnership: Ownership = Shared,
    >;
}

#[cfg(feature = "Foundation_NSMutableOrderedSet")]
unsafe impl<ObjectType: Message, ObjectTypeOwnership: Ownership> NSCoding
    for NSMutableOrderedSet<ObjectType, ObjectTypeOwnership>
{
}

#[cfg(feature = "Foundation_NSMutableOrderedSet")]
unsafe impl<ObjectType: Message, ObjectTypeOwnership: Ownership> NSFastEnumeration
    for NSMutableOrderedSet<ObjectType, ObjectTypeOwnership>
{
}

#[cfg(feature = "Foundation_NSMutableOrderedSet")]
unsafe impl<ObjectType: Message, ObjectTypeOwnership: Ownership> NSObjectProtocol
    for NSMutableOrderedSet<ObjectType, ObjectTypeOwnership>
{
}

#[cfg(feature = "Foundation_NSMutableOrderedSet")]
unsafe impl<ObjectType: Message, ObjectTypeOwnership: Ownership> NSSecureCoding
    for NSMutableOrderedSet<ObjectType, ObjectTypeOwnership>
{
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSMutableOrderedSet")]
    pub type NSMutableOrderedSet<
        ObjectType: Message = Object,
        ObjectTypeOwnership: Ownership = Shared,
    >;

    #[objc2::method(sel = "insertObject:atIndex:")]
    pub unsafe fn insertObject_atIndex(&self, object: &ObjectType, idx: NSUInteger);

    #[objc2::method(sel = "removeObjectAtIndex:")]
    pub unsafe fn removeObjectAtIndex(&self, idx: NSUInteger);

    #[objc2::method(sel = "replaceObjectAtIndex:withObject:")]
    pub unsafe fn replaceObjectAtIndex_withObject(&self, idx: NSUInteger, object: &ObjectType);

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(
        this: Option<Allocated<Self>>,
        coder: &NSCoder,
    ) -> Option<Id<Self, Owned>>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self, Owned>;

    #[objc2::method(sel = "initWithCapacity:", managed = "Init")]
    pub unsafe fn initWithCapacity(
        this: Option<Allocated<Self>>,
        num_items: NSUInteger,
    ) -> Id<Self, Owned>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSMutableOrderedSet")]
    pub type NSMutableOrderedSet<
        ObjectType: Message = Object,
        ObjectTypeOwnership: Ownership = Shared,
    >;

    #[objc2::method(sel = "addObject:")]
    pub unsafe fn addObject(&self, object: &ObjectType);

    #[objc2::method(sel = "addObjects:count:")]
    pub unsafe fn addObjects_count(&self, objects: *mut NonNull<ObjectType>, count: NSUInteger);

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "addObjectsFromArray:")]
    pub unsafe fn addObjectsFromArray(&self, array: &NSArray<ObjectType>);

    #[objc2::method(sel = "exchangeObjectAtIndex:withObjectAtIndex:")]
    pub unsafe fn exchangeObjectAtIndex_withObjectAtIndex(
        &self,
        idx1: NSUInteger,
        idx2: NSUInteger,
    );

    #[cfg(feature = "Foundation_NSIndexSet")]
    #[objc2::method(sel = "moveObjectsAtIndexes:toIndex:")]
    pub unsafe fn moveObjectsAtIndexes_toIndex(&self, indexes: &NSIndexSet, idx: NSUInteger);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSIndexSet"))]
    #[objc2::method(sel = "insertObjects:atIndexes:")]
    pub unsafe fn insertObjects_atIndexes(
        &self,
        objects: &NSArray<ObjectType>,
        indexes: &NSIndexSet,
    );

    #[objc2::method(sel = "setObject:atIndex:")]
    pub unsafe fn setObject_atIndex(&self, obj: &ObjectType, idx: NSUInteger);

    #[objc2::method(sel = "setObject:atIndexedSubscript:")]
    pub unsafe fn setObject_atIndexedSubscript(&self, obj: &ObjectType, idx: NSUInteger);

    #[objc2::method(sel = "replaceObjectsInRange:withObjects:count:")]
    pub unsafe fn replaceObjectsInRange_withObjects_count(
        &self,
        range: NSRange,
        objects: *mut NonNull<ObjectType>,
        count: NSUInteger,
    );

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSIndexSet"))]
    #[objc2::method(sel = "replaceObjectsAtIndexes:withObjects:")]
    pub unsafe fn replaceObjectsAtIndexes_withObjects(
        &self,
        indexes: &NSIndexSet,
        objects: &NSArray<ObjectType>,
    );

    #[objc2::method(sel = "removeObjectsInRange:")]
    pub unsafe fn removeObjectsInRange(&self, range: NSRange);

    #[cfg(feature = "Foundation_NSIndexSet")]
    #[objc2::method(sel = "removeObjectsAtIndexes:")]
    pub unsafe fn removeObjectsAtIndexes(&self, indexes: &NSIndexSet);

    #[objc2::method(sel = "removeAllObjects")]
    pub unsafe fn removeAllObjects(&self);

    #[objc2::method(sel = "removeObject:")]
    pub unsafe fn removeObject(&self, object: &ObjectType);

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "removeObjectsInArray:")]
    pub unsafe fn removeObjectsInArray(&self, array: &NSArray<ObjectType>);

    #[cfg(feature = "Foundation_NSOrderedSet")]
    #[objc2::method(sel = "intersectOrderedSet:")]
    pub unsafe fn intersectOrderedSet(&self, other: &NSOrderedSet<ObjectType>);

    #[cfg(feature = "Foundation_NSOrderedSet")]
    #[objc2::method(sel = "minusOrderedSet:")]
    pub unsafe fn minusOrderedSet(&self, other: &NSOrderedSet<ObjectType>);

    #[cfg(feature = "Foundation_NSOrderedSet")]
    #[objc2::method(sel = "unionOrderedSet:")]
    pub unsafe fn unionOrderedSet(&self, other: &NSOrderedSet<ObjectType>);

    #[cfg(feature = "Foundation_NSSet")]
    #[objc2::method(sel = "intersectSet:")]
    pub unsafe fn intersectSet(&self, other: &NSSet<ObjectType>);

    #[cfg(feature = "Foundation_NSSet")]
    #[objc2::method(sel = "minusSet:")]
    pub unsafe fn minusSet(&self, other: &NSSet<ObjectType>);

    #[cfg(feature = "Foundation_NSSet")]
    #[objc2::method(sel = "unionSet:")]
    pub unsafe fn unionSet(&self, other: &NSSet<ObjectType>);

    #[objc2::method(sel = "sortUsingComparator:")]
    pub unsafe fn sortUsingComparator(&self, cmptr: NSComparator);

    #[objc2::method(sel = "sortWithOptions:usingComparator:")]
    pub unsafe fn sortWithOptions_usingComparator(&self, opts: NSSortOptions, cmptr: NSComparator);

    #[objc2::method(sel = "sortRange:options:usingComparator:")]
    pub unsafe fn sortRange_options_usingComparator(
        &self,
        range: NSRange,
        opts: NSSortOptions,
        cmptr: NSComparator,
    );
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSMutableOrderedSet")]
    pub type NSMutableOrderedSet<
        ObjectType: Message = Object,
        ObjectTypeOwnership: Ownership = Shared,
    >;

    #[objc2::method(sel = "orderedSetWithCapacity:", managed = "Other")]
    pub unsafe fn orderedSetWithCapacity(num_items: NSUInteger) -> Id<Self, Owned>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSMutableOrderedSet")]
    pub type NSMutableOrderedSet<
        ObjectType: Message = Object,
        ObjectTypeOwnership: Ownership = Shared,
    >;

    #[cfg(feature = "Foundation_NSOrderedCollectionDifference")]
    #[objc2::method(sel = "applyDifference:")]
    pub unsafe fn applyDifference(&self, difference: &NSOrderedCollectionDifference<ObjectType>);
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSOrderedSet`
    #[cfg(feature = "Foundation_NSMutableOrderedSet")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSMutableOrderedSet")]
    pub type NSMutableOrderedSet<
        ObjectType: Message = Object,
        ObjectTypeOwnership: Ownership = Shared,
    >;

    #[objc2::method(sel = "initWithObjects:count:", managed = "Init")]
    pub unsafe fn initWithObjects_count(
        this: Option<Allocated<Self>>,
        objects: *mut NonNull<ObjectType>,
        cnt: NSUInteger,
    ) -> Id<Self, Owned>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSOrderedSet`
        ///
        /// NSOrderedSetCreation
    #[cfg(feature = "Foundation_NSMutableOrderedSet")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSMutableOrderedSet")]
    pub type NSMutableOrderedSet<
        ObjectType: Message = Object,
        ObjectTypeOwnership: Ownership = Shared,
    >;

    #[objc2::method(sel = "orderedSet", managed = "Other")]
    pub unsafe fn orderedSet() -> Id<Self, Owned>;

    #[objc2::method(sel = "orderedSetWithObject:", managed = "Other")]
    pub unsafe fn orderedSetWithObject(object: &ObjectType) -> Id<Self, Owned>;

    #[objc2::method(sel = "orderedSetWithObjects:count:", managed = "Other")]
    pub unsafe fn orderedSetWithObjects_count(
        objects: NonNull<NonNull<ObjectType>>,
        cnt: NSUInteger,
    ) -> Id<Self, Owned>;

    #[objc2::method(sel = "orderedSetWithOrderedSet:", managed = "Other")]
    pub unsafe fn orderedSetWithOrderedSet(set: &NSOrderedSet<ObjectType>) -> Id<Self, Owned>;

    #[objc2::method(sel = "orderedSetWithOrderedSet:range:copyItems:", managed = "Other")]
    pub unsafe fn orderedSetWithOrderedSet_range_copyItems(
        set: &NSOrderedSet<ObjectType>,
        range: NSRange,
        flag: bool,
    ) -> Id<Self, Owned>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "orderedSetWithArray:", managed = "Other")]
    pub unsafe fn orderedSetWithArray(array: &NSArray<ObjectType>) -> Id<Self, Owned>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "orderedSetWithArray:range:copyItems:", managed = "Other")]
    pub unsafe fn orderedSetWithArray_range_copyItems(
        array: &NSArray<ObjectType>,
        range: NSRange,
        flag: bool,
    ) -> Id<Self, Owned>;

    #[cfg(feature = "Foundation_NSSet")]
    #[objc2::method(sel = "orderedSetWithSet:", managed = "Other")]
    pub unsafe fn orderedSetWithSet(set: &NSSet<ObjectType>) -> Id<Self, Owned>;

    #[cfg(feature = "Foundation_NSSet")]
    #[objc2::method(sel = "orderedSetWithSet:copyItems:", managed = "Other")]
    pub unsafe fn orderedSetWithSet_copyItems(
        set: &NSSet<ObjectType>,
        flag: bool,
    ) -> Id<Self, Owned>;

    #[objc2::method(sel = "initWithObject:", managed = "Init")]
    pub unsafe fn initWithObject(
        this: Option<Allocated<Self>>,
        object: &ObjectType,
    ) -> Id<Self, Owned>;

    #[objc2::method(sel = "initWithOrderedSet:", managed = "Init")]
    pub unsafe fn initWithOrderedSet(
        this: Option<Allocated<Self>>,
        set: &NSOrderedSet<ObjectType>,
    ) -> Id<Self, Owned>;

    #[objc2::method(sel = "initWithOrderedSet:copyItems:", managed = "Init")]
    pub unsafe fn initWithOrderedSet_copyItems(
        this: Option<Allocated<Self>>,
        set: &NSOrderedSet<ObjectType>,
        flag: bool,
    ) -> Id<Self, Owned>;

    #[objc2::method(sel = "initWithOrderedSet:range:copyItems:", managed = "Init")]
    pub unsafe fn initWithOrderedSet_range_copyItems(
        this: Option<Allocated<Self>>,
        set: &NSOrderedSet<ObjectType>,
        range: NSRange,
        flag: bool,
    ) -> Id<Self, Owned>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "initWithArray:", managed = "Init")]
    pub unsafe fn initWithArray(
        this: Option<Allocated<Self>>,
        array: &NSArray<ObjectType>,
    ) -> Id<Self, Owned>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "initWithArray:copyItems:", managed = "Init")]
    pub unsafe fn initWithArray_copyItems(
        this: Option<Allocated<Self>>,
        set: &NSArray<ObjectType>,
        flag: bool,
    ) -> Id<Self, Owned>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "initWithArray:range:copyItems:", managed = "Init")]
    pub unsafe fn initWithArray_range_copyItems(
        this: Option<Allocated<Self>>,
        set: &NSArray<ObjectType>,
        range: NSRange,
        flag: bool,
    ) -> Id<Self, Owned>;

    #[cfg(feature = "Foundation_NSSet")]
    #[objc2::method(sel = "initWithSet:", managed = "Init")]
    pub unsafe fn initWithSet(
        this: Option<Allocated<Self>>,
        set: &NSSet<ObjectType>,
    ) -> Id<Self, Owned>;

    #[cfg(feature = "Foundation_NSSet")]
    #[objc2::method(sel = "initWithSet:copyItems:", managed = "Init")]
    pub unsafe fn initWithSet_copyItems(
        this: Option<Allocated<Self>>,
        set: &NSSet<ObjectType>,
        flag: bool,
    ) -> Id<Self, Owned>;
}
