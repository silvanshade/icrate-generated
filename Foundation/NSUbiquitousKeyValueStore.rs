//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUbiquitousKeyValueStore")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSUbiquitousKeyValueStore;
}

#[cfg(feature = "Foundation_NSUbiquitousKeyValueStore")]
unsafe impl NSObjectProtocol for NSUbiquitousKeyValueStore {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUbiquitousKeyValueStore")]
    pub type NSUbiquitousKeyValueStore;

    #[objc2::method(sel = "defaultStore", managed = "Other")]
    pub unsafe fn defaultStore() -> Id<NSUbiquitousKeyValueStore>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "objectForKey:", managed = "Other")]
    pub unsafe fn objectForKey(&self, a_key: &NSString) -> Option<Id<Object>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setObject:forKey:")]
    pub unsafe fn setObject_forKey(&self, an_object: Option<&Object>, a_key: &NSString);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "removeObjectForKey:")]
    pub unsafe fn removeObjectForKey(&self, a_key: &NSString);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "stringForKey:", managed = "Other")]
    pub unsafe fn stringForKey(&self, a_key: &NSString) -> Option<Id<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "arrayForKey:", managed = "Other")]
    pub unsafe fn arrayForKey(&self, a_key: &NSString) -> Option<Id<NSArray>>;

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "dictionaryForKey:", managed = "Other")]
    pub unsafe fn dictionaryForKey(
        &self,
        a_key: &NSString,
    ) -> Option<Id<NSDictionary<NSString, Object>>>;

    #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "dataForKey:", managed = "Other")]
    pub unsafe fn dataForKey(&self, a_key: &NSString) -> Option<Id<NSData>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "longLongForKey:")]
    pub unsafe fn longLongForKey(&self, a_key: &NSString) -> c_longlong;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "doubleForKey:")]
    pub unsafe fn doubleForKey(&self, a_key: &NSString) -> c_double;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "boolForKey:")]
    pub unsafe fn boolForKey(&self, a_key: &NSString) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setString:forKey:")]
    pub unsafe fn setString_forKey(&self, a_string: Option<&NSString>, a_key: &NSString);

    #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setData:forKey:")]
    pub unsafe fn setData_forKey(&self, a_data: Option<&NSData>, a_key: &NSString);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setArray:forKey:")]
    pub unsafe fn setArray_forKey(&self, an_array: Option<&NSArray>, a_key: &NSString);

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setDictionary:forKey:")]
    pub unsafe fn setDictionary_forKey(
        &self,
        a_dictionary: Option<&NSDictionary<NSString, Object>>,
        a_key: &NSString,
    );

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setLongLong:forKey:")]
    pub unsafe fn setLongLong_forKey(&self, value: c_longlong, a_key: &NSString);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setDouble:forKey:")]
    pub unsafe fn setDouble_forKey(&self, value: c_double, a_key: &NSString);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setBool:forKey:")]
    pub unsafe fn setBool_forKey(&self, value: bool, a_key: &NSString);

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "dictionaryRepresentation", managed = "Other")]
    pub unsafe fn dictionaryRepresentation(&self) -> Id<NSDictionary<NSString, Object>>;

    #[objc2::method(sel = "synchronize")]
    pub unsafe fn synchronize(&self) -> bool;
}

extern_static!(
    NSUbiquitousKeyValueStoreDidChangeExternallyNotification: &'static NSNotificationName
);

extern_static!(NSUbiquitousKeyValueStoreChangeReasonKey: &'static NSString);

extern_static!(NSUbiquitousKeyValueStoreChangedKeysKey: &'static NSString);

#[ns_enum]
#[underlying(NSInteger)]
pub enum __anonymous__ {
    NSUbiquitousKeyValueStoreServerChange = 0,
    NSUbiquitousKeyValueStoreInitialSyncChange = 1,
    NSUbiquitousKeyValueStoreQuotaViolationChange = 2,
    NSUbiquitousKeyValueStoreAccountChange = 3,
}
