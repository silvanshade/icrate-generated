//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSExtensionContext")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSExtensionContext;
}

#[cfg(feature = "Foundation_NSExtensionContext")]
unsafe impl NSObjectProtocol for NSExtensionContext {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSExtensionContext")]
    pub type NSExtensionContext;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "inputItems", managed = "Other")]
    pub unsafe fn inputItems(&self) -> Id<NSArray>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "completeRequestReturningItems:completionHandler:")]
    pub unsafe fn completeRequestReturningItems_completionHandler(
        &self,
        items: Option<&NSArray>,
        completion_handler: Option<&Block<(Bool,), ()>>,
    );

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "cancelRequestWithError:")]
    pub unsafe fn cancelRequestWithError(&self, error: &NSError);

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "openURL:completionHandler:")]
    pub unsafe fn openURL_completionHandler(
        &self,
        url: &NSURL,
        completion_handler: Option<&Block<(Bool,), ()>>,
    );
}

extern_static!(NSExtensionItemsAndErrorsKey: Option<&'static NSString>);

extern_static!(NSExtensionHostWillEnterForegroundNotification: Option<&'static NSString>);

extern_static!(NSExtensionHostDidEnterBackgroundNotification: Option<&'static NSString>);

extern_static!(NSExtensionHostWillResignActiveNotification: Option<&'static NSString>);

extern_static!(NSExtensionHostDidBecomeActiveNotification: Option<&'static NSString>);
