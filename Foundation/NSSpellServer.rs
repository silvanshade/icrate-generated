//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSSpellServer")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSSpellServer;
}

#[cfg(feature = "Foundation_NSSpellServer")]
unsafe impl NSObjectProtocol for NSSpellServer {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSSpellServer")]
    pub type NSSpellServer;

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn NSSpellServerDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(&self, delegate: Option<&ProtocolObject<dyn NSSpellServerDelegate>>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "registerLanguage:byVendor:")]
    pub unsafe fn registerLanguage_byVendor(
        &self,
        language: Option<&NSString>,
        vendor: Option<&NSString>,
    ) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "isWordInUserDictionaries:caseSensitive:")]
    pub unsafe fn isWordInUserDictionaries_caseSensitive(
        &self,
        word: &NSString,
        flag: bool,
    ) -> bool;

    #[objc2::method(sel = "run")]
    pub unsafe fn run(&self);
}

extern_static!(NSGrammarRange: &'static NSString);

extern_static!(NSGrammarUserDescription: &'static NSString);

extern_static!(NSGrammarCorrections: &'static NSString);

#[objc2::protocol]
pub unsafe trait NSSpellServerDelegate: NSObjectProtocol {
    #[cfg(all(feature = "Foundation_NSSpellServer", feature = "Foundation_NSString"))]
    #[objc2::method(
        optional,
        sel = "spellServer:findMisspelledWordInString:language:wordCount:countOnly:"
    )]
    unsafe fn spellServer_findMisspelledWordInString_language_wordCount_countOnly(
        &self,
        sender: &NSSpellServer,
        string_to_check: &NSString,
        language: &NSString,
        word_count: NonNull<NSInteger>,
        count_only: bool,
    ) -> NSRange;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSSpellServer",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        optional,
        sel = "spellServer:suggestGuessesForWord:inLanguage:",
        managed = "Other"
    )]
    unsafe fn spellServer_suggestGuessesForWord_inLanguage(
        &self,
        sender: &NSSpellServer,
        word: &NSString,
        language: &NSString,
    ) -> Option<Id<NSArray<NSString>>>;

    #[cfg(all(feature = "Foundation_NSSpellServer", feature = "Foundation_NSString"))]
    #[objc2::method(optional, sel = "spellServer:didLearnWord:inLanguage:")]
    unsafe fn spellServer_didLearnWord_inLanguage(
        &self,
        sender: &NSSpellServer,
        word: &NSString,
        language: &NSString,
    );

    #[cfg(all(feature = "Foundation_NSSpellServer", feature = "Foundation_NSString"))]
    #[objc2::method(optional, sel = "spellServer:didForgetWord:inLanguage:")]
    unsafe fn spellServer_didForgetWord_inLanguage(
        &self,
        sender: &NSSpellServer,
        word: &NSString,
        language: &NSString,
    );

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSSpellServer",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        optional,
        sel = "spellServer:suggestCompletionsForPartialWordRange:inString:language:",
        managed = "Other"
    )]
    unsafe fn spellServer_suggestCompletionsForPartialWordRange_inString_language(
        &self,
        sender: &NSSpellServer,
        range: NSRange,
        string: &NSString,
        language: &NSString,
    ) -> Option<Id<NSArray<NSString>>>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSSpellServer",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(optional, sel = "spellServer:checkGrammarInString:language:details:")]
    unsafe fn spellServer_checkGrammarInString_language_details(
        &self,
        sender: &NSSpellServer,
        string_to_check: &NSString,
        language: Option<&NSString>,
        details: Option<&mut Option<Id<NSArray<NSDictionary<NSString, Object>>>>>,
    ) -> NSRange;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSOrthography",
        feature = "Foundation_NSSpellServer",
        feature = "Foundation_NSString",
        feature = "Foundation_NSTextCheckingResult"
    ))]
    #[objc2::method(
        optional,
        sel = "spellServer:checkString:offset:types:options:orthography:wordCount:",
        managed = "Other"
    )]
    unsafe fn spellServer_checkString_offset_types_options_orthography_wordCount(
        &self,
        sender: &NSSpellServer,
        string_to_check: &NSString,
        offset: NSUInteger,
        checking_types: NSTextCheckingTypes,
        options: Option<&NSDictionary<NSString, Object>>,
        orthography: Option<&NSOrthography>,
        word_count: NonNull<NSInteger>,
    ) -> Option<Id<NSArray<NSTextCheckingResult>>>;

    #[cfg(all(feature = "Foundation_NSSpellServer", feature = "Foundation_NSString"))]
    #[objc2::method(
        optional,
        sel = "spellServer:recordResponse:toCorrection:forWord:language:"
    )]
    unsafe fn spellServer_recordResponse_toCorrection_forWord_language(
        &self,
        sender: &NSSpellServer,
        response: NSUInteger,
        correction: &NSString,
        word: &NSString,
        language: &NSString,
    );
}
