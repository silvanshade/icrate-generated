//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSCoder,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[deprecated = "Use NSKeyedArchiver instead"]
    #[cfg(feature = "Foundation_NSArchiver")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSArchiver;
}

#[cfg(feature = "Foundation_NSArchiver")]
unsafe impl NSObjectProtocol for NSArchiver {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSArchiver")]
    #[deprecated = "Use NSKeyedArchiver instead"]
    pub type NSArchiver;

    #[cfg(feature = "Foundation_NSMutableData")]
    #[objc2::method(sel = "initForWritingWithMutableData:", managed = "Init")]
    pub unsafe fn initForWritingWithMutableData(
        this: Option<Allocated<Self>>,
        mdata: &NSMutableData,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSMutableData")]
    #[objc2::method(sel = "archiverData", managed = "Other")]
    pub unsafe fn archiverData(&self) -> Id<NSMutableData, Owned>;

    #[objc2::method(sel = "encodeRootObject:")]
    pub unsafe fn encodeRootObject(&self, root_object: &Object);

    #[objc2::method(sel = "encodeConditionalObject:")]
    pub unsafe fn encodeConditionalObject(&self, object: Option<&Object>);

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "archivedDataWithRootObject:", managed = "Other")]
    pub unsafe fn archivedDataWithRootObject(root_object: &Object) -> Id<NSData>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "archiveRootObject:toFile:")]
    pub unsafe fn archiveRootObject_toFile(root_object: &Object, path: &NSString) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "encodeClassName:intoClassName:")]
    pub unsafe fn encodeClassName_intoClassName(
        &self,
        true_name: &NSString,
        in_archive_name: &NSString,
    );

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "classNameEncodedForTrueClassName:", managed = "Other")]
    pub unsafe fn classNameEncodedForTrueClassName(
        &self,
        true_name: &NSString,
    ) -> Option<Id<NSString>>;

    #[objc2::method(sel = "replaceObject:withObject:")]
    pub unsafe fn replaceObject_withObject(&self, object: &Object, new_object: &Object);
}

#[objc2::interface(
    unsafe super = NSCoder,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[deprecated = "Use NSKeyedUnarchiver instead"]
    #[cfg(feature = "Foundation_NSUnarchiver")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSUnarchiver;
}

#[cfg(feature = "Foundation_NSUnarchiver")]
unsafe impl NSObjectProtocol for NSUnarchiver {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnarchiver")]
    #[deprecated = "Use NSKeyedUnarchiver instead"]
    pub type NSUnarchiver;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "initForReadingWithData:", managed = "Init")]
    pub unsafe fn initForReadingWithData(
        this: Option<Allocated<Self>>,
        data: &NSData,
    ) -> Option<Id<Self>>;

    #[objc2::method(sel = "setObjectZone:")]
    pub unsafe fn setObjectZone(&self, zone: *mut NSZone);

    #[objc2::method(sel = "objectZone")]
    pub unsafe fn objectZone(&self) -> *mut NSZone;

    #[objc2::method(sel = "isAtEnd")]
    pub unsafe fn isAtEnd(&self) -> bool;

    #[objc2::method(sel = "systemVersion")]
    pub unsafe fn systemVersion(&self) -> c_uint;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "unarchiveObjectWithData:", managed = "Other")]
    pub unsafe fn unarchiveObjectWithData(data: &NSData) -> Option<Id<Object>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "unarchiveObjectWithFile:", managed = "Other")]
    pub unsafe fn unarchiveObjectWithFile(path: &NSString) -> Option<Id<Object>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "decodeClassName:asClassName:")]
    pub unsafe fn decodeClassName_asClassName_class(
        in_archive_name: &NSString,
        true_name: &NSString,
    );

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "decodeClassName:asClassName:")]
    pub unsafe fn decodeClassName_asClassName(
        &self,
        in_archive_name: &NSString,
        true_name: &NSString,
    );

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "classNameDecodedForArchiveClassName:", managed = "Other")]
    pub unsafe fn classNameDecodedForArchiveClassName_class(
        in_archive_name: &NSString,
    ) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "classNameDecodedForArchiveClassName:", managed = "Other")]
    pub unsafe fn classNameDecodedForArchiveClassName(
        &self,
        in_archive_name: &NSString,
    ) -> Id<NSString>;

    #[objc2::method(sel = "replaceObject:withObject:")]
    pub unsafe fn replaceObject_withObject(&self, object: &Object, new_object: &Object);
}
