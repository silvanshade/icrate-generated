//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSString")]
    pub type NSString;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "pathWithComponents:", managed = "Other")]
    pub unsafe fn pathWithComponents(components: &NSArray<NSString>) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "pathComponents", managed = "Other")]
    pub unsafe fn pathComponents(&self) -> Id<NSArray<NSString>>;

    #[objc2::method(sel = "isAbsolutePath")]
    pub unsafe fn isAbsolutePath(&self) -> bool;

    #[objc2::method(sel = "lastPathComponent", managed = "Other")]
    pub unsafe fn lastPathComponent(&self) -> Id<NSString>;

    #[objc2::method(sel = "stringByDeletingLastPathComponent", managed = "Other")]
    pub unsafe fn stringByDeletingLastPathComponent(&self) -> Id<NSString>;

    #[objc2::method(sel = "stringByAppendingPathComponent:", managed = "Other")]
    pub fn stringByAppendingPathComponent(&self, str: &NSString) -> Id<NSString>;

    #[objc2::method(sel = "pathExtension", managed = "Other")]
    pub unsafe fn pathExtension(&self) -> Id<NSString>;

    #[objc2::method(sel = "stringByDeletingPathExtension", managed = "Other")]
    pub unsafe fn stringByDeletingPathExtension(&self) -> Id<NSString>;

    #[objc2::method(sel = "stringByAppendingPathExtension:", managed = "Other")]
    pub unsafe fn stringByAppendingPathExtension(&self, str: &NSString) -> Option<Id<NSString>>;

    #[objc2::method(sel = "stringByAbbreviatingWithTildeInPath", managed = "Other")]
    pub unsafe fn stringByAbbreviatingWithTildeInPath(&self) -> Id<NSString>;

    #[objc2::method(sel = "stringByExpandingTildeInPath", managed = "Other")]
    pub unsafe fn stringByExpandingTildeInPath(&self) -> Id<NSString>;

    #[objc2::method(sel = "stringByStandardizingPath", managed = "Other")]
    pub unsafe fn stringByStandardizingPath(&self) -> Id<NSString>;

    #[objc2::method(sel = "stringByResolvingSymlinksInPath", managed = "Other")]
    pub unsafe fn stringByResolvingSymlinksInPath(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "stringsByAppendingPaths:", managed = "Other")]
    pub unsafe fn stringsByAppendingPaths(
        &self,
        paths: &NSArray<NSString>,
    ) -> Id<NSArray<NSString>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:")]
    pub unsafe fn completePathIntoString_caseSensitive_matchesIntoArray_filterTypes(
        &self,
        output_name: Option<&mut Option<Id<NSString>>>,
        flag: bool,
        output_array: Option<&mut Option<Id<NSArray<NSString>>>>,
        filter_types: Option<&NSArray<NSString>>,
    ) -> NSUInteger;

    #[objc2::method(sel = "fileSystemRepresentation")]
    pub unsafe fn fileSystemRepresentation(&self) -> NonNull<c_char>;

    #[objc2::method(sel = "getFileSystemRepresentation:maxLength:")]
    pub unsafe fn getFileSystemRepresentation_maxLength(
        &self,
        cname: NonNull<c_char>,
        max: NSUInteger,
    ) -> bool;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSArray")]
    pub type NSArray<ObjectType: Message = Object, ObjectTypeOwnership: Ownership = Shared>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "pathsMatchingExtensions:", managed = "Other")]
    pub unsafe fn pathsMatchingExtensions(
        &self,
        filter_types: &NSArray<NSString>,
    ) -> Id<NSArray<NSString>>;
}

extern_fn!(
    #[cfg(feature = "Foundation_NSString")]
    pub unsafe fn NSUserName() -> NonNull<NSString>;
);

extern_fn!(
    #[cfg(feature = "Foundation_NSString")]
    pub unsafe fn NSFullUserName() -> NonNull<NSString>;
);

extern_fn!(
    #[cfg(feature = "Foundation_NSString")]
    pub unsafe fn NSHomeDirectory() -> NonNull<NSString>;
);

extern_fn!(
    #[cfg(feature = "Foundation_NSString")]
    pub unsafe fn NSHomeDirectoryForUser(user_name: Option<&NSString>) -> *mut NSString;
);

extern_fn!(
    #[cfg(feature = "Foundation_NSString")]
    pub unsafe fn NSTemporaryDirectory() -> NonNull<NSString>;
);

extern_fn!(
    #[cfg(feature = "Foundation_NSString")]
    pub unsafe fn NSOpenStepRootDirectory() -> NonNull<NSString>;
);

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSSearchPathDirectory {
    NSApplicationDirectory = 1,
    NSDemoApplicationDirectory = 2,
    NSDeveloperApplicationDirectory = 3,
    NSAdminApplicationDirectory = 4,
    NSLibraryDirectory = 5,
    NSDeveloperDirectory = 6,
    NSUserDirectory = 7,
    NSDocumentationDirectory = 8,
    NSDocumentDirectory = 9,
    NSCoreServiceDirectory = 10,
    NSAutosavedInformationDirectory = 11,
    NSDesktopDirectory = 12,
    NSCachesDirectory = 13,
    NSApplicationSupportDirectory = 14,
    NSDownloadsDirectory = 15,
    NSInputMethodsDirectory = 16,
    NSMoviesDirectory = 17,
    NSMusicDirectory = 18,
    NSPicturesDirectory = 19,
    NSPrinterDescriptionDirectory = 20,
    NSSharedPublicDirectory = 21,
    NSPreferencePanesDirectory = 22,
    NSApplicationScriptsDirectory = 23,
    NSItemReplacementDirectory = 99,
    NSAllApplicationsDirectory = 100,
    NSAllLibrariesDirectory = 101,
    NSTrashDirectory = 102,
}

#[ns_options]
#[underlying(NSUInteger)]
pub enum NSSearchPathDomainMask {
    NSUserDomainMask = 1,
    NSLocalDomainMask = 2,
    NSNetworkDomainMask = 4,
    NSSystemDomainMask = 8,
    NSAllDomainsMask = 0x0ffff,
}

extern_fn!(
    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    pub unsafe fn NSSearchPathForDirectoriesInDomains(
        directory: NSSearchPathDirectory,
        domain_mask: NSSearchPathDomainMask,
        expand_tilde: Bool,
    ) -> NonNull<NSArray<NSString>>;
);
