//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

typed_extensible_enum!(
    pub type NSURLResourceKey = NSString;
);

extern_static!(NSURLFileScheme: &'static NSString);

extern_static!(NSURLKeysOfUnsetValuesKey: &'static NSURLResourceKey);

extern_static!(NSURLNameKey: &'static NSURLResourceKey);

extern_static!(NSURLLocalizedNameKey: &'static NSURLResourceKey);

extern_static!(NSURLIsRegularFileKey: &'static NSURLResourceKey);

extern_static!(NSURLIsDirectoryKey: &'static NSURLResourceKey);

extern_static!(NSURLIsSymbolicLinkKey: &'static NSURLResourceKey);

extern_static!(NSURLIsVolumeKey: &'static NSURLResourceKey);

extern_static!(NSURLIsPackageKey: &'static NSURLResourceKey);

extern_static!(NSURLIsApplicationKey: &'static NSURLResourceKey);

extern_static!(NSURLApplicationIsScriptableKey: &'static NSURLResourceKey);

extern_static!(NSURLIsSystemImmutableKey: &'static NSURLResourceKey);

extern_static!(NSURLIsUserImmutableKey: &'static NSURLResourceKey);

extern_static!(NSURLIsHiddenKey: &'static NSURLResourceKey);

extern_static!(NSURLHasHiddenExtensionKey: &'static NSURLResourceKey);

extern_static!(NSURLCreationDateKey: &'static NSURLResourceKey);

extern_static!(NSURLContentAccessDateKey: &'static NSURLResourceKey);

extern_static!(NSURLContentModificationDateKey: &'static NSURLResourceKey);

extern_static!(NSURLAttributeModificationDateKey: &'static NSURLResourceKey);

extern_static!(NSURLLinkCountKey: &'static NSURLResourceKey);

extern_static!(NSURLParentDirectoryURLKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeURLKey: &'static NSURLResourceKey);

extern_static!(NSURLTypeIdentifierKey: &'static NSURLResourceKey);

extern_static!(NSURLContentTypeKey: &'static NSURLResourceKey);

extern_static!(NSURLLocalizedTypeDescriptionKey: &'static NSURLResourceKey);

extern_static!(NSURLLabelNumberKey: &'static NSURLResourceKey);

extern_static!(NSURLLabelColorKey: &'static NSURLResourceKey);

extern_static!(NSURLLocalizedLabelKey: &'static NSURLResourceKey);

extern_static!(NSURLEffectiveIconKey: &'static NSURLResourceKey);

extern_static!(NSURLCustomIconKey: &'static NSURLResourceKey);

extern_static!(NSURLFileResourceIdentifierKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeIdentifierKey: &'static NSURLResourceKey);

extern_static!(NSURLPreferredIOBlockSizeKey: &'static NSURLResourceKey);

extern_static!(NSURLIsReadableKey: &'static NSURLResourceKey);

extern_static!(NSURLIsWritableKey: &'static NSURLResourceKey);

extern_static!(NSURLIsExecutableKey: &'static NSURLResourceKey);

extern_static!(NSURLFileSecurityKey: &'static NSURLResourceKey);

extern_static!(NSURLIsExcludedFromBackupKey: &'static NSURLResourceKey);

extern_static!(NSURLTagNamesKey: &'static NSURLResourceKey);

extern_static!(NSURLPathKey: &'static NSURLResourceKey);

extern_static!(NSURLCanonicalPathKey: &'static NSURLResourceKey);

extern_static!(NSURLIsMountTriggerKey: &'static NSURLResourceKey);

extern_static!(NSURLGenerationIdentifierKey: &'static NSURLResourceKey);

extern_static!(NSURLDocumentIdentifierKey: &'static NSURLResourceKey);

extern_static!(NSURLAddedToDirectoryDateKey: &'static NSURLResourceKey);

extern_static!(NSURLQuarantinePropertiesKey: &'static NSURLResourceKey);

extern_static!(NSURLFileResourceTypeKey: &'static NSURLResourceKey);

extern_static!(NSURLFileContentIdentifierKey: &'static NSURLResourceKey);

extern_static!(NSURLMayShareFileContentKey: &'static NSURLResourceKey);

extern_static!(NSURLMayHaveExtendedAttributesKey: &'static NSURLResourceKey);

extern_static!(NSURLIsPurgeableKey: &'static NSURLResourceKey);

extern_static!(NSURLIsSparseKey: &'static NSURLResourceKey);

typed_enum!(
    pub type NSURLFileResourceType = NSString;
);

extern_static!(NSURLFileResourceTypeNamedPipe: &'static NSURLFileResourceType);

extern_static!(NSURLFileResourceTypeCharacterSpecial: &'static NSURLFileResourceType);

extern_static!(NSURLFileResourceTypeDirectory: &'static NSURLFileResourceType);

extern_static!(NSURLFileResourceTypeBlockSpecial: &'static NSURLFileResourceType);

extern_static!(NSURLFileResourceTypeRegular: &'static NSURLFileResourceType);

extern_static!(NSURLFileResourceTypeSymbolicLink: &'static NSURLFileResourceType);

extern_static!(NSURLFileResourceTypeSocket: &'static NSURLFileResourceType);

extern_static!(NSURLFileResourceTypeUnknown: &'static NSURLFileResourceType);

extern_static!(NSURLThumbnailDictionaryKey: &'static NSURLResourceKey);

extern_static!(NSURLThumbnailKey: &'static NSURLResourceKey);

typed_extensible_enum!(
    pub type NSURLThumbnailDictionaryItem = NSString;
);

extern_static!(NSThumbnail1024x1024SizeKey: &'static NSURLThumbnailDictionaryItem);

extern_static!(NSURLFileSizeKey: &'static NSURLResourceKey);

extern_static!(NSURLFileAllocatedSizeKey: &'static NSURLResourceKey);

extern_static!(NSURLTotalFileSizeKey: &'static NSURLResourceKey);

extern_static!(NSURLTotalFileAllocatedSizeKey: &'static NSURLResourceKey);

extern_static!(NSURLIsAliasFileKey: &'static NSURLResourceKey);

extern_static!(NSURLFileProtectionKey: &'static NSURLResourceKey);

typed_enum!(
    pub type NSURLFileProtectionType = NSString;
);

extern_static!(NSURLFileProtectionNone: &'static NSURLFileProtectionType);

extern_static!(NSURLFileProtectionComplete: &'static NSURLFileProtectionType);

extern_static!(NSURLFileProtectionCompleteUnlessOpen: &'static NSURLFileProtectionType);

extern_static!(
    NSURLFileProtectionCompleteUntilFirstUserAuthentication: &'static NSURLFileProtectionType
);

extern_static!(NSURLVolumeLocalizedFormatDescriptionKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeTotalCapacityKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeAvailableCapacityKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeResourceCountKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeSupportsPersistentIDsKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeSupportsSymbolicLinksKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeSupportsHardLinksKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeSupportsJournalingKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeIsJournalingKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeSupportsSparseFilesKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeSupportsZeroRunsKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeSupportsCaseSensitiveNamesKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeSupportsCasePreservedNamesKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeSupportsRootDirectoryDatesKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeSupportsVolumeSizesKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeSupportsRenamingKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeSupportsAdvisoryFileLockingKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeSupportsExtendedSecurityKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeIsBrowsableKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeMaximumFileSizeKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeIsEjectableKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeIsRemovableKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeIsInternalKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeIsAutomountedKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeIsLocalKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeIsReadOnlyKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeCreationDateKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeURLForRemountingKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeUUIDStringKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeNameKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeLocalizedNameKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeIsEncryptedKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeIsRootFileSystemKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeSupportsCompressionKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeSupportsFileCloningKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeSupportsSwapRenamingKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeSupportsExclusiveRenamingKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeSupportsImmutableFilesKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeSupportsAccessPermissionsKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeSupportsFileProtectionKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeAvailableCapacityForImportantUsageKey: &'static NSURLResourceKey);

extern_static!(NSURLVolumeAvailableCapacityForOpportunisticUsageKey: &'static NSURLResourceKey);

extern_static!(NSURLIsUbiquitousItemKey: &'static NSURLResourceKey);

extern_static!(NSURLUbiquitousItemHasUnresolvedConflictsKey: &'static NSURLResourceKey);

extern_static!(NSURLUbiquitousItemIsDownloadedKey: &'static NSURLResourceKey);

extern_static!(NSURLUbiquitousItemIsDownloadingKey: &'static NSURLResourceKey);

extern_static!(NSURLUbiquitousItemIsUploadedKey: &'static NSURLResourceKey);

extern_static!(NSURLUbiquitousItemIsUploadingKey: &'static NSURLResourceKey);

extern_static!(NSURLUbiquitousItemPercentDownloadedKey: &'static NSURLResourceKey);

extern_static!(NSURLUbiquitousItemPercentUploadedKey: &'static NSURLResourceKey);

extern_static!(NSURLUbiquitousItemDownloadingStatusKey: &'static NSURLResourceKey);

extern_static!(NSURLUbiquitousItemDownloadingErrorKey: &'static NSURLResourceKey);

extern_static!(NSURLUbiquitousItemUploadingErrorKey: &'static NSURLResourceKey);

extern_static!(NSURLUbiquitousItemDownloadRequestedKey: &'static NSURLResourceKey);

extern_static!(NSURLUbiquitousItemContainerDisplayNameKey: &'static NSURLResourceKey);

extern_static!(NSURLUbiquitousItemIsExcludedFromSyncKey: &'static NSURLResourceKey);

extern_static!(NSURLUbiquitousItemIsSharedKey: &'static NSURLResourceKey);

extern_static!(NSURLUbiquitousSharedItemCurrentUserRoleKey: &'static NSURLResourceKey);

extern_static!(NSURLUbiquitousSharedItemCurrentUserPermissionsKey: &'static NSURLResourceKey);

extern_static!(NSURLUbiquitousSharedItemOwnerNameComponentsKey: &'static NSURLResourceKey);

extern_static!(
    NSURLUbiquitousSharedItemMostRecentEditorNameComponentsKey: &'static NSURLResourceKey
);

typed_enum!(
    pub type NSURLUbiquitousItemDownloadingStatus = NSString;
);

extern_static!(
    NSURLUbiquitousItemDownloadingStatusNotDownloaded:
        &'static NSURLUbiquitousItemDownloadingStatus
);

extern_static!(
    NSURLUbiquitousItemDownloadingStatusDownloaded: &'static NSURLUbiquitousItemDownloadingStatus
);

extern_static!(
    NSURLUbiquitousItemDownloadingStatusCurrent: &'static NSURLUbiquitousItemDownloadingStatus
);

typed_enum!(
    pub type NSURLUbiquitousSharedItemRole = NSString;
);

extern_static!(NSURLUbiquitousSharedItemRoleOwner: &'static NSURLUbiquitousSharedItemRole);

extern_static!(NSURLUbiquitousSharedItemRoleParticipant: &'static NSURLUbiquitousSharedItemRole);

typed_enum!(
    pub type NSURLUbiquitousSharedItemPermissions = NSString;
);

extern_static!(
    NSURLUbiquitousSharedItemPermissionsReadOnly: &'static NSURLUbiquitousSharedItemPermissions
);

extern_static!(
    NSURLUbiquitousSharedItemPermissionsReadWrite: &'static NSURLUbiquitousSharedItemPermissions
);

#[ns_options]
#[underlying(NSUInteger)]
pub enum NSURLBookmarkCreationOptions {
    #[deprecated = "Not supported"]
    NSURLBookmarkCreationPreferFileIDResolution = 1 << 8,
    NSURLBookmarkCreationMinimalBookmark = 1 << 9,
    NSURLBookmarkCreationSuitableForBookmarkFile = 1 << 10,
    NSURLBookmarkCreationWithSecurityScope = 1 << 11,
    NSURLBookmarkCreationSecurityScopeAllowOnlyReadAccess = 1 << 12,
    NSURLBookmarkCreationWithoutImplicitSecurityScope = 1 << 29,
}

#[ns_options]
#[underlying(NSUInteger)]
pub enum NSURLBookmarkResolutionOptions {
    NSURLBookmarkResolutionWithoutUI = 1 << 8,
    NSURLBookmarkResolutionWithoutMounting = 1 << 9,
    NSURLBookmarkResolutionWithSecurityScope = 1 << 10,
    NSURLBookmarkResolutionWithoutImplicitStartAccessing = 1 << 15,
}

pub type NSURLBookmarkFileCreationOptions = NSUInteger;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSURL")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSURL;
}

#[cfg(feature = "Foundation_NSURL")]
unsafe impl NSCoding for NSURL {}

#[cfg(feature = "Foundation_NSURL")]
unsafe impl NSObjectProtocol for NSURL {}

#[cfg(feature = "Foundation_NSURL")]
unsafe impl NSSecureCoding for NSURL {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSURL")]
    pub type NSURL;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "Use NSURLComponents instead, which lets you create a valid URL with any valid combination of URL components and subcomponents (not just scheme, host and path), and lets you set components and subcomponents with either percent-encoded or un-percent-encoded strings."]
    #[objc2::method(sel = "initWithScheme:host:path:", managed = "Init")]
    pub unsafe fn initWithScheme_host_path(
        this: Option<Allocated<Self>>,
        scheme: &NSString,
        host: Option<&NSString>,
        path: &NSString,
    ) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(
        sel = "initFileURLWithPath:isDirectory:relativeToURL:",
        managed = "Init"
    )]
    pub unsafe fn initFileURLWithPath_isDirectory_relativeToURL(
        this: Option<Allocated<Self>>,
        path: &NSString,
        is_dir: bool,
        base_url: Option<&NSURL>,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initFileURLWithPath:relativeToURL:", managed = "Init")]
    pub unsafe fn initFileURLWithPath_relativeToURL(
        this: Option<Allocated<Self>>,
        path: &NSString,
        base_url: Option<&NSURL>,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initFileURLWithPath:isDirectory:", managed = "Init")]
    pub unsafe fn initFileURLWithPath_isDirectory(
        this: Option<Allocated<Self>>,
        path: &NSString,
        is_dir: bool,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initFileURLWithPath:", managed = "Init")]
    pub unsafe fn initFileURLWithPath(this: Option<Allocated<Self>>, path: &NSString) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "fileURLWithPath:isDirectory:relativeToURL:", managed = "Other")]
    pub unsafe fn fileURLWithPath_isDirectory_relativeToURL(
        path: &NSString,
        is_dir: bool,
        base_url: Option<&NSURL>,
    ) -> Id<NSURL>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "fileURLWithPath:relativeToURL:", managed = "Other")]
    pub unsafe fn fileURLWithPath_relativeToURL(
        path: &NSString,
        base_url: Option<&NSURL>,
    ) -> Id<NSURL>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "fileURLWithPath:isDirectory:", managed = "Other")]
    pub unsafe fn fileURLWithPath_isDirectory(path: &NSString, is_dir: bool) -> Id<NSURL>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "fileURLWithPath:", managed = "Other")]
    pub unsafe fn fileURLWithPath(path: &NSString) -> Id<NSURL>;

    #[objc2::method(
        sel = "initFileURLWithFileSystemRepresentation:isDirectory:relativeToURL:",
        managed = "Init"
    )]
    pub unsafe fn initFileURLWithFileSystemRepresentation_isDirectory_relativeToURL(
        this: Option<Allocated<Self>>,
        path: NonNull<c_char>,
        is_dir: bool,
        base_url: Option<&NSURL>,
    ) -> Id<Self>;

    #[objc2::method(
        sel = "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:",
        managed = "Other"
    )]
    pub unsafe fn fileURLWithFileSystemRepresentation_isDirectory_relativeToURL(
        path: NonNull<c_char>,
        is_dir: bool,
        base_url: Option<&NSURL>,
    ) -> Id<NSURL>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithString:", managed = "Init")]
    pub unsafe fn initWithString(
        this: Option<Allocated<Self>>,
        url_string: &NSString,
    ) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithString:relativeToURL:", managed = "Init")]
    pub unsafe fn initWithString_relativeToURL(
        this: Option<Allocated<Self>>,
        url_string: &NSString,
        base_url: Option<&NSURL>,
    ) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "URLWithString:", managed = "Other")]
    pub unsafe fn URLWithString(url_string: &NSString) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "URLWithString:relativeToURL:", managed = "Other")]
    pub unsafe fn URLWithString_relativeToURL(
        url_string: &NSString,
        base_url: Option<&NSURL>,
    ) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "initWithDataRepresentation:relativeToURL:", managed = "Init")]
    pub unsafe fn initWithDataRepresentation_relativeToURL(
        this: Option<Allocated<Self>>,
        data: &NSData,
        base_url: Option<&NSURL>,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "URLWithDataRepresentation:relativeToURL:", managed = "Other")]
    pub unsafe fn URLWithDataRepresentation_relativeToURL(
        data: &NSData,
        base_url: Option<&NSURL>,
    ) -> Id<NSURL>;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(
        sel = "initAbsoluteURLWithDataRepresentation:relativeToURL:",
        managed = "Init"
    )]
    pub unsafe fn initAbsoluteURLWithDataRepresentation_relativeToURL(
        this: Option<Allocated<Self>>,
        data: &NSData,
        base_url: Option<&NSURL>,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(
        sel = "absoluteURLWithDataRepresentation:relativeToURL:",
        managed = "Other"
    )]
    pub unsafe fn absoluteURLWithDataRepresentation_relativeToURL(
        data: &NSData,
        base_url: Option<&NSURL>,
    ) -> Id<NSURL>;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "dataRepresentation", managed = "Other")]
    pub unsafe fn dataRepresentation(&self) -> Id<NSData>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "absoluteString", managed = "Other")]
    pub unsafe fn absoluteString(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "relativeString", managed = "Other")]
    pub unsafe fn relativeString(&self) -> Id<NSString>;

    #[objc2::method(sel = "baseURL", managed = "Other")]
    pub unsafe fn baseURL(&self) -> Option<Id<NSURL>>;

    #[objc2::method(sel = "absoluteURL", managed = "Other")]
    pub unsafe fn absoluteURL(&self) -> Option<Id<NSURL>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "scheme", managed = "Other")]
    pub unsafe fn scheme(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "resourceSpecifier", managed = "Other")]
    pub unsafe fn resourceSpecifier(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "host", managed = "Other")]
    pub unsafe fn host(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSNumber")]
    #[objc2::method(sel = "port", managed = "Other")]
    pub unsafe fn port(&self) -> Option<Id<NSNumber>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "user", managed = "Other")]
    pub unsafe fn user(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "password", managed = "Other")]
    pub unsafe fn password(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "path", managed = "Other")]
    pub unsafe fn path(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "fragment", managed = "Other")]
    pub unsafe fn fragment(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "The parameterString method is deprecated. Post deprecation for applications linked with or after the macOS 10.15, and for all iOS, watchOS, and tvOS applications, parameterString will always return nil, and the path method will return the complete path including the semicolon separator and params component if the URL string contains them."]
    #[objc2::method(sel = "parameterString", managed = "Other")]
    pub unsafe fn parameterString(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "query", managed = "Other")]
    pub unsafe fn query(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "relativePath", managed = "Other")]
    pub unsafe fn relativePath(&self) -> Option<Id<NSString>>;

    #[objc2::method(sel = "hasDirectoryPath")]
    pub unsafe fn hasDirectoryPath(&self) -> bool;

    #[objc2::method(sel = "getFileSystemRepresentation:maxLength:")]
    pub unsafe fn getFileSystemRepresentation_maxLength(
        &self,
        buffer: NonNull<c_char>,
        max_buffer_length: NSUInteger,
    ) -> bool;

    #[objc2::method(sel = "fileSystemRepresentation")]
    pub unsafe fn fileSystemRepresentation(&self) -> NonNull<c_char>;

    #[objc2::method(sel = "isFileURL")]
    pub unsafe fn isFileURL(&self) -> bool;

    #[objc2::method(sel = "standardizedURL", managed = "Other")]
    pub unsafe fn standardizedURL(&self) -> Option<Id<NSURL>>;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "checkResourceIsReachableAndReturnError:", throws)]
    pub unsafe fn checkResourceIsReachableAndReturnError(&self) -> Result<(), Id<NSError>>;

    #[objc2::method(sel = "isFileReferenceURL")]
    pub unsafe fn isFileReferenceURL(&self) -> bool;

    #[objc2::method(sel = "fileReferenceURL", managed = "Other")]
    pub unsafe fn fileReferenceURL(&self) -> Option<Id<NSURL>>;

    #[objc2::method(sel = "filePathURL", managed = "Other")]
    pub unsafe fn filePathURL(&self) -> Option<Id<NSURL>>;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "getResourceValue:forKey:error:", throws)]
    pub unsafe fn getResourceValue_forKey_error(
        &self,
        value: &mut Option<Id<Object>>,
        key: &NSURLResourceKey,
    ) -> Result<(), Id<NSError>>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "resourceValuesForKeys:error:", managed = "Other", throws)]
    pub unsafe fn resourceValuesForKeys_error(
        &self,
        keys: &NSArray<NSURLResourceKey>,
    ) -> Result<Id<NSDictionary<NSURLResourceKey, Object>>, Id<NSError>>;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "setResourceValue:forKey:error:", throws)]
    pub unsafe fn setResourceValue_forKey_error(
        &self,
        value: Option<&Object>,
        key: &NSURLResourceKey,
    ) -> Result<(), Id<NSError>>;

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "setResourceValues:error:", throws)]
    pub unsafe fn setResourceValues_error(
        &self,
        keyed_values: &NSDictionary<NSURLResourceKey, Object>,
    ) -> Result<(), Id<NSError>>;

    #[objc2::method(sel = "removeCachedResourceValueForKey:")]
    pub unsafe fn removeCachedResourceValueForKey(&self, key: &NSURLResourceKey);

    #[objc2::method(sel = "removeAllCachedResourceValues")]
    pub unsafe fn removeAllCachedResourceValues(&self);

    #[objc2::method(sel = "setTemporaryResourceValue:forKey:")]
    pub unsafe fn setTemporaryResourceValue_forKey(
        &self,
        value: Option<&Object>,
        key: &NSURLResourceKey,
    );

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSData",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(
        sel = "bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:",
        managed = "Other",
        throws
    )]
    pub unsafe fn bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error(
        &self,
        options: NSURLBookmarkCreationOptions,
        keys: Option<&NSArray<NSURLResourceKey>>,
        relative_url: Option<&NSURL>,
    ) -> Result<Id<NSData>, Id<NSError>>;

    #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSError"))]
    #[objc2::method(
        sel = "initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:",
        managed = "Init",
        throws
    )]
    pub unsafe fn initByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error(
        this: Option<Allocated<Self>>,
        bookmark_data: &NSData,
        options: NSURLBookmarkResolutionOptions,
        relative_url: Option<&NSURL>,
        is_stale: *mut Bool,
    ) -> Result<Id<Self>, Id<NSError>>;

    #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSError"))]
    #[objc2::method(
        sel = "URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:",
        managed = "Other",
        throws
    )]
    pub unsafe fn URLByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error(
        bookmark_data: &NSData,
        options: NSURLBookmarkResolutionOptions,
        relative_url: Option<&NSURL>,
        is_stale: *mut Bool,
    ) -> Result<Id<Self>, Id<NSError>>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSData",
        feature = "Foundation_NSDictionary"
    ))]
    #[objc2::method(sel = "resourceValuesForKeys:fromBookmarkData:", managed = "Other")]
    pub unsafe fn resourceValuesForKeys_fromBookmarkData(
        keys: &NSArray<NSURLResourceKey>,
        bookmark_data: &NSData,
    ) -> Option<Id<NSDictionary<NSURLResourceKey, Object>>>;

    #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "writeBookmarkData:toURL:options:error:", throws)]
    pub unsafe fn writeBookmarkData_toURL_options_error(
        bookmark_data: &NSData,
        bookmark_file_url: &NSURL,
        options: NSURLBookmarkFileCreationOptions,
    ) -> Result<(), Id<NSError>>;

    #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSError"))]
    #[objc2::method(
        sel = "bookmarkDataWithContentsOfURL:error:",
        managed = "Other",
        throws
    )]
    pub unsafe fn bookmarkDataWithContentsOfURL_error(
        bookmark_file_url: &NSURL,
    ) -> Result<Id<NSData>, Id<NSError>>;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(
        sel = "URLByResolvingAliasFileAtURL:options:error:",
        managed = "Other",
        throws
    )]
    pub unsafe fn URLByResolvingAliasFileAtURL_options_error(
        url: &NSURL,
        options: NSURLBookmarkResolutionOptions,
    ) -> Result<Id<Self>, Id<NSError>>;

    #[objc2::method(sel = "startAccessingSecurityScopedResource")]
    pub unsafe fn startAccessingSecurityScopedResource(&self) -> bool;

    #[objc2::method(sel = "stopAccessingSecurityScopedResource")]
    pub unsafe fn stopAccessingSecurityScopedResource(&self);
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSURL")]
    pub type NSURL;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "getPromisedItemResourceValue:forKey:error:", throws)]
    pub unsafe fn getPromisedItemResourceValue_forKey_error(
        &self,
        value: &mut Option<Id<Object>>,
        key: &NSURLResourceKey,
    ) -> Result<(), Id<NSError>>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(
        sel = "promisedItemResourceValuesForKeys:error:",
        managed = "Other",
        throws
    )]
    pub unsafe fn promisedItemResourceValuesForKeys_error(
        &self,
        keys: &NSArray<NSURLResourceKey>,
    ) -> Result<Id<NSDictionary<NSURLResourceKey, Object>>, Id<NSError>>;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "checkPromisedItemIsReachableAndReturnError:", throws)]
    pub unsafe fn checkPromisedItemIsReachableAndReturnError(&self) -> Result<(), Id<NSError>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSURL")]
    pub type NSURL;
}

#[cfg(feature = "Foundation_NSURL")]
unsafe impl NSItemProviderReading for NSURL {}

#[cfg(feature = "Foundation_NSURL")]
unsafe impl NSItemProviderWriting for NSURL {}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSURLQueryItem")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSURLQueryItem;
}

#[cfg(feature = "Foundation_NSURLQueryItem")]
unsafe impl NSCoding for NSURLQueryItem {}

#[cfg(feature = "Foundation_NSURLQueryItem")]
unsafe impl NSObjectProtocol for NSURLQueryItem {}

#[cfg(feature = "Foundation_NSURLQueryItem")]
unsafe impl NSSecureCoding for NSURLQueryItem {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSURLQueryItem")]
    pub type NSURLQueryItem;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithName:value:", managed = "Init")]
    pub unsafe fn initWithName_value(
        this: Option<Allocated<Self>>,
        name: &NSString,
        value: Option<&NSString>,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "queryItemWithName:value:", managed = "Other")]
    pub unsafe fn queryItemWithName_value(name: &NSString, value: Option<&NSString>) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "name", managed = "Other")]
    pub unsafe fn name(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "value", managed = "Other")]
    pub unsafe fn value(&self) -> Option<Id<NSString>>;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSURLComponents")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSURLComponents;
}

#[cfg(feature = "Foundation_NSURLComponents")]
unsafe impl NSObjectProtocol for NSURLComponents {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSURLComponents")]
    pub type NSURLComponents;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "initWithURL:resolvingAgainstBaseURL:", managed = "Init")]
    pub unsafe fn initWithURL_resolvingAgainstBaseURL(
        this: Option<Allocated<Self>>,
        url: &NSURL,
        resolve: bool,
    ) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "componentsWithURL:resolvingAgainstBaseURL:", managed = "Other")]
    pub unsafe fn componentsWithURL_resolvingAgainstBaseURL(
        url: &NSURL,
        resolve: bool,
    ) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithString:", managed = "Init")]
    pub unsafe fn initWithString(
        this: Option<Allocated<Self>>,
        url_string: &NSString,
    ) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "componentsWithString:", managed = "Other")]
    pub unsafe fn componentsWithString(url_string: &NSString) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "URL", managed = "Other")]
    pub unsafe fn URL(&self) -> Option<Id<NSURL>>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "URLRelativeToURL:", managed = "Other")]
    pub unsafe fn URLRelativeToURL(&self, base_url: Option<&NSURL>) -> Option<Id<NSURL>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "string", managed = "Other")]
    pub unsafe fn string(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "scheme", managed = "Other")]
    pub unsafe fn scheme(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setScheme:")]
    pub unsafe fn setScheme(&self, scheme: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "user", managed = "Other")]
    pub unsafe fn user(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setUser:")]
    pub unsafe fn setUser(&self, user: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "password", managed = "Other")]
    pub unsafe fn password(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setPassword:")]
    pub unsafe fn setPassword(&self, password: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "host", managed = "Other")]
    pub unsafe fn host(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setHost:")]
    pub unsafe fn setHost(&self, host: Option<&NSString>);

    #[cfg(feature = "Foundation_NSNumber")]
    #[objc2::method(sel = "port", managed = "Other")]
    pub unsafe fn port(&self) -> Option<Id<NSNumber>>;

    #[cfg(feature = "Foundation_NSNumber")]
    #[objc2::method(sel = "setPort:")]
    pub unsafe fn setPort(&self, port: Option<&NSNumber>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "path", managed = "Other")]
    pub unsafe fn path(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setPath:")]
    pub unsafe fn setPath(&self, path: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "query", managed = "Other")]
    pub unsafe fn query(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setQuery:")]
    pub unsafe fn setQuery(&self, query: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "fragment", managed = "Other")]
    pub unsafe fn fragment(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setFragment:")]
    pub unsafe fn setFragment(&self, fragment: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "percentEncodedUser", managed = "Other")]
    pub unsafe fn percentEncodedUser(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setPercentEncodedUser:")]
    pub unsafe fn setPercentEncodedUser(&self, percent_encoded_user: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "percentEncodedPassword", managed = "Other")]
    pub unsafe fn percentEncodedPassword(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setPercentEncodedPassword:")]
    pub unsafe fn setPercentEncodedPassword(&self, percent_encoded_password: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "Use encodedHost instead"]
    #[objc2::method(sel = "percentEncodedHost", managed = "Other")]
    pub unsafe fn percentEncodedHost(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "Use encodedHost instead"]
    #[objc2::method(sel = "setPercentEncodedHost:")]
    pub unsafe fn setPercentEncodedHost(&self, percent_encoded_host: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "percentEncodedPath", managed = "Other")]
    pub unsafe fn percentEncodedPath(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setPercentEncodedPath:")]
    pub unsafe fn setPercentEncodedPath(&self, percent_encoded_path: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "percentEncodedQuery", managed = "Other")]
    pub unsafe fn percentEncodedQuery(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setPercentEncodedQuery:")]
    pub unsafe fn setPercentEncodedQuery(&self, percent_encoded_query: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "percentEncodedFragment", managed = "Other")]
    pub unsafe fn percentEncodedFragment(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setPercentEncodedFragment:")]
    pub unsafe fn setPercentEncodedFragment(&self, percent_encoded_fragment: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "encodedHost", managed = "Other")]
    pub unsafe fn encodedHost(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setEncodedHost:")]
    pub unsafe fn setEncodedHost(&self, encoded_host: Option<&NSString>);

    #[objc2::method(sel = "rangeOfScheme")]
    pub unsafe fn rangeOfScheme(&self) -> NSRange;

    #[objc2::method(sel = "rangeOfUser")]
    pub unsafe fn rangeOfUser(&self) -> NSRange;

    #[objc2::method(sel = "rangeOfPassword")]
    pub unsafe fn rangeOfPassword(&self) -> NSRange;

    #[objc2::method(sel = "rangeOfHost")]
    pub unsafe fn rangeOfHost(&self) -> NSRange;

    #[objc2::method(sel = "rangeOfPort")]
    pub unsafe fn rangeOfPort(&self) -> NSRange;

    #[objc2::method(sel = "rangeOfPath")]
    pub unsafe fn rangeOfPath(&self) -> NSRange;

    #[objc2::method(sel = "rangeOfQuery")]
    pub unsafe fn rangeOfQuery(&self) -> NSRange;

    #[objc2::method(sel = "rangeOfFragment")]
    pub unsafe fn rangeOfFragment(&self) -> NSRange;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSURLQueryItem"))]
    #[objc2::method(sel = "queryItems", managed = "Other")]
    pub unsafe fn queryItems(&self) -> Option<Id<NSArray<NSURLQueryItem>>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSURLQueryItem"))]
    #[objc2::method(sel = "setQueryItems:")]
    pub unsafe fn setQueryItems(&self, query_items: Option<&NSArray<NSURLQueryItem>>);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSURLQueryItem"))]
    #[objc2::method(sel = "percentEncodedQueryItems", managed = "Other")]
    pub unsafe fn percentEncodedQueryItems(&self) -> Option<Id<NSArray<NSURLQueryItem>>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSURLQueryItem"))]
    #[objc2::method(sel = "setPercentEncodedQueryItems:")]
    pub unsafe fn setPercentEncodedQueryItems(
        &self,
        percent_encoded_query_items: Option<&NSArray<NSURLQueryItem>>,
    );
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSCharacterSet")]
    pub type NSCharacterSet;

    #[objc2::method(sel = "URLUserAllowedCharacterSet", managed = "Other")]
    pub unsafe fn URLUserAllowedCharacterSet() -> Id<NSCharacterSet>;

    #[objc2::method(sel = "URLPasswordAllowedCharacterSet", managed = "Other")]
    pub unsafe fn URLPasswordAllowedCharacterSet() -> Id<NSCharacterSet>;

    #[objc2::method(sel = "URLHostAllowedCharacterSet", managed = "Other")]
    pub unsafe fn URLHostAllowedCharacterSet() -> Id<NSCharacterSet>;

    #[objc2::method(sel = "URLPathAllowedCharacterSet", managed = "Other")]
    pub unsafe fn URLPathAllowedCharacterSet() -> Id<NSCharacterSet>;

    #[objc2::method(sel = "URLQueryAllowedCharacterSet", managed = "Other")]
    pub unsafe fn URLQueryAllowedCharacterSet() -> Id<NSCharacterSet>;

    #[objc2::method(sel = "URLFragmentAllowedCharacterSet", managed = "Other")]
    pub unsafe fn URLFragmentAllowedCharacterSet() -> Id<NSCharacterSet>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSString")]
    pub type NSString;

    #[cfg(feature = "Foundation_NSCharacterSet")]
    #[objc2::method(
        sel = "stringByAddingPercentEncodingWithAllowedCharacters:",
        managed = "Other"
    )]
    pub unsafe fn stringByAddingPercentEncodingWithAllowedCharacters(
        &self,
        allowed_characters: &NSCharacterSet,
    ) -> Option<Id<NSString>>;

    #[objc2::method(sel = "stringByRemovingPercentEncoding", managed = "Other")]
    pub unsafe fn stringByRemovingPercentEncoding(&self) -> Option<Id<NSString>>;

    #[deprecated = "Use -stringByAddingPercentEncodingWithAllowedCharacters: instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent since each URL component or subcomponent has different rules for what characters are valid."]
    #[objc2::method(sel = "stringByAddingPercentEscapesUsingEncoding:", managed = "Other")]
    pub unsafe fn stringByAddingPercentEscapesUsingEncoding(
        &self,
        enc: NSStringEncoding,
    ) -> Option<Id<NSString>>;

    #[deprecated = "Use -stringByRemovingPercentEncoding instead, which always uses the recommended UTF-8 encoding."]
    #[objc2::method(
        sel = "stringByReplacingPercentEscapesUsingEncoding:",
        managed = "Other"
    )]
    pub unsafe fn stringByReplacingPercentEscapesUsingEncoding(
        &self,
        enc: NSStringEncoding,
    ) -> Option<Id<NSString>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSURL")]
    pub type NSURL;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "fileURLWithPathComponents:", managed = "Other")]
    pub unsafe fn fileURLWithPathComponents(components: &NSArray<NSString>) -> Option<Id<NSURL>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "pathComponents", managed = "Other")]
    pub unsafe fn pathComponents(&self) -> Option<Id<NSArray<NSString>>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "lastPathComponent", managed = "Other")]
    pub unsafe fn lastPathComponent(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "pathExtension", managed = "Other")]
    pub unsafe fn pathExtension(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "URLByAppendingPathComponent:", managed = "Other")]
    pub unsafe fn URLByAppendingPathComponent(
        &self,
        path_component: &NSString,
    ) -> Option<Id<NSURL>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "URLByAppendingPathComponent:isDirectory:", managed = "Other")]
    pub unsafe fn URLByAppendingPathComponent_isDirectory(
        &self,
        path_component: &NSString,
        is_directory: bool,
    ) -> Option<Id<NSURL>>;

    #[objc2::method(sel = "URLByDeletingLastPathComponent", managed = "Other")]
    pub unsafe fn URLByDeletingLastPathComponent(&self) -> Option<Id<NSURL>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "URLByAppendingPathExtension:", managed = "Other")]
    pub unsafe fn URLByAppendingPathExtension(
        &self,
        path_extension: &NSString,
    ) -> Option<Id<NSURL>>;

    #[objc2::method(sel = "URLByDeletingPathExtension", managed = "Other")]
    pub unsafe fn URLByDeletingPathExtension(&self) -> Option<Id<NSURL>>;

    #[objc2::method(sel = "URLByStandardizingPath", managed = "Other")]
    pub unsafe fn URLByStandardizingPath(&self) -> Option<Id<NSURL>>;

    #[objc2::method(sel = "URLByResolvingSymlinksInPath", managed = "Other")]
    pub unsafe fn URLByResolvingSymlinksInPath(&self) -> Option<Id<NSURL>>;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSFileSecurity")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSFileSecurity;
}

#[cfg(feature = "Foundation_NSFileSecurity")]
unsafe impl NSCoding for NSFileSecurity {}

#[cfg(feature = "Foundation_NSFileSecurity")]
unsafe impl NSObjectProtocol for NSFileSecurity {}

#[cfg(feature = "Foundation_NSFileSecurity")]
unsafe impl NSSecureCoding for NSFileSecurity {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSFileSecurity")]
    pub type NSFileSecurity;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, coder: &NSCoder)
        -> Option<Id<Self>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSURL")]
    pub type NSURL;

    #[cfg(feature = "Foundation_NSData")]
    #[deprecated = "Use NSURLConnection instead"]
    #[objc2::method(sel = "resourceDataUsingCache:", managed = "Other")]
    pub unsafe fn resourceDataUsingCache(&self, should_use_cache: bool) -> Option<Id<NSData>>;

    #[deprecated = "Use NSURLConnection instead"]
    #[objc2::method(sel = "loadResourceDataNotifyingClient:usingCache:")]
    pub unsafe fn loadResourceDataNotifyingClient_usingCache(
        &self,
        client: &Object,
        should_use_cache: bool,
    );

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "Use NSURLConnection instead"]
    #[objc2::method(sel = "propertyForKey:", managed = "Other")]
    pub unsafe fn propertyForKey(&self, property_key: &NSString) -> Option<Id<Object>>;

    #[cfg(feature = "Foundation_NSData")]
    #[deprecated = "Use NSURLConnection instead"]
    #[objc2::method(sel = "setResourceData:")]
    pub unsafe fn setResourceData(&self, data: &NSData) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "Use NSURLConnection instead"]
    #[objc2::method(sel = "setProperty:forKey:")]
    pub unsafe fn setProperty_forKey(&self, property: &Object, property_key: &NSString) -> bool;

    #[cfg(feature = "Foundation_NSURLHandle")]
    #[deprecated = "Use NSURLConnection instead"]
    #[objc2::method(sel = "URLHandleUsingCache:", managed = "Other")]
    pub unsafe fn URLHandleUsingCache(&self, should_use_cache: bool) -> Option<Id<NSURLHandle>>;
}
