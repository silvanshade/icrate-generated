//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

extern_static!(NSSystemClockDidChangeNotification: &'static NSNotificationName);

pub type NSTimeInterval = c_double;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSDate")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSDate;
}

#[cfg(feature = "Foundation_NSDate")]
unsafe impl NSCoding for NSDate {}

#[cfg(feature = "Foundation_NSDate")]
unsafe impl NSObjectProtocol for NSDate {}

#[cfg(feature = "Foundation_NSDate")]
unsafe impl NSSecureCoding for NSDate {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSDate")]
    pub type NSDate;

    #[objc2::method(sel = "timeIntervalSinceReferenceDate")]
    pub unsafe fn timeIntervalSinceReferenceDate(&self) -> NSTimeInterval;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "initWithTimeIntervalSinceReferenceDate:", managed = "Init")]
    pub unsafe fn initWithTimeIntervalSinceReferenceDate(
        this: Option<Allocated<Self>>,
        ti: NSTimeInterval,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, coder: &NSCoder)
        -> Option<Id<Self>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSDate")]
    pub type NSDate;

    #[objc2::method(sel = "timeIntervalSinceDate:")]
    pub unsafe fn timeIntervalSinceDate(&self, another_date: &NSDate) -> NSTimeInterval;

    #[objc2::method(sel = "timeIntervalSinceNow")]
    pub unsafe fn timeIntervalSinceNow(&self) -> NSTimeInterval;

    #[objc2::method(sel = "timeIntervalSince1970")]
    pub unsafe fn timeIntervalSince1970(&self) -> NSTimeInterval;

    #[deprecated = "Use dateByAddingTimeInterval instead"]
    #[objc2::method(sel = "addTimeInterval:", managed = "Other")]
    pub unsafe fn addTimeInterval(&self, seconds: NSTimeInterval) -> Id<Object>;

    #[objc2::method(sel = "dateByAddingTimeInterval:", managed = "Other")]
    pub unsafe fn dateByAddingTimeInterval(&self, ti: NSTimeInterval) -> Id<Self>;

    #[objc2::method(sel = "earlierDate:", managed = "Other")]
    pub unsafe fn earlierDate(&self, another_date: &NSDate) -> Id<NSDate>;

    #[objc2::method(sel = "laterDate:", managed = "Other")]
    pub unsafe fn laterDate(&self, another_date: &NSDate) -> Id<NSDate>;

    #[objc2::method(sel = "compare:")]
    pub unsafe fn compare(&self, other: &NSDate) -> NSComparisonResult;

    #[objc2::method(sel = "isEqualToDate:")]
    pub unsafe fn isEqualToDate(&self, other_date: &NSDate) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "description", managed = "Other")]
    pub unsafe fn description(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "descriptionWithLocale:", managed = "Other")]
    pub unsafe fn descriptionWithLocale(&self, locale: Option<&Object>) -> Id<NSString>;

    #[objc2::method(sel = "timeIntervalSinceReferenceDate")]
    pub unsafe fn timeIntervalSinceReferenceDate_class() -> NSTimeInterval;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSDate")]
    pub type NSDate;

    #[objc2::method(sel = "date", managed = "Other")]
    pub unsafe fn date() -> Id<Self>;

    #[objc2::method(sel = "dateWithTimeIntervalSinceNow:", managed = "Other")]
    pub unsafe fn dateWithTimeIntervalSinceNow(secs: NSTimeInterval) -> Id<Self>;

    #[objc2::method(sel = "dateWithTimeIntervalSinceReferenceDate:", managed = "Other")]
    pub unsafe fn dateWithTimeIntervalSinceReferenceDate(ti: NSTimeInterval) -> Id<Self>;

    #[objc2::method(sel = "dateWithTimeIntervalSince1970:", managed = "Other")]
    pub unsafe fn dateWithTimeIntervalSince1970(secs: NSTimeInterval) -> Id<Self>;

    #[objc2::method(sel = "dateWithTimeInterval:sinceDate:", managed = "Other")]
    pub unsafe fn dateWithTimeInterval_sinceDate(
        secs_to_be_added: NSTimeInterval,
        date: &NSDate,
    ) -> Id<Self>;

    #[objc2::method(sel = "distantFuture", managed = "Other")]
    pub unsafe fn distantFuture() -> Id<NSDate>;

    #[objc2::method(sel = "distantPast", managed = "Other")]
    pub unsafe fn distantPast() -> Id<NSDate>;

    #[objc2::method(sel = "now", managed = "Other")]
    pub unsafe fn now() -> Id<NSDate>;

    #[objc2::method(sel = "initWithTimeIntervalSinceNow:", managed = "Init")]
    pub unsafe fn initWithTimeIntervalSinceNow(
        this: Option<Allocated<Self>>,
        secs: NSTimeInterval,
    ) -> Id<Self>;

    #[objc2::method(sel = "initWithTimeIntervalSince1970:", managed = "Init")]
    pub unsafe fn initWithTimeIntervalSince1970(
        this: Option<Allocated<Self>>,
        secs: NSTimeInterval,
    ) -> Id<Self>;

    #[objc2::method(sel = "initWithTimeInterval:sinceDate:", managed = "Init")]
    pub unsafe fn initWithTimeInterval_sinceDate(
        this: Option<Allocated<Self>>,
        secs_to_be_added: NSTimeInterval,
        date: &NSDate,
    ) -> Id<Self>;
}
