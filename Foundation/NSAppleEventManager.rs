//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

pub type NSAppleEventManagerSuspensionID = *mut c_void;

extern_static!(NSAppleEventTimeOutDefault: c_double);

extern_static!(NSAppleEventTimeOutNone: c_double);

extern_static!(NSAppleEventManagerWillProcessFirstEventNotification: &'static NSNotificationName);

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSAppleEventManager")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSAppleEventManager;
}

#[cfg(feature = "Foundation_NSAppleEventManager")]
unsafe impl NSObjectProtocol for NSAppleEventManager {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSAppleEventManager")]
    pub type NSAppleEventManager;

    #[objc2::method(sel = "sharedAppleEventManager", managed = "Other")]
    pub unsafe fn sharedAppleEventManager() -> Id<NSAppleEventManager>;

    #[cfg(feature = "Foundation_NSAppleEventDescriptor")]
    #[objc2::method(sel = "currentAppleEvent", managed = "Other")]
    pub unsafe fn currentAppleEvent(&self) -> Option<Id<NSAppleEventDescriptor>>;

    #[cfg(feature = "Foundation_NSAppleEventDescriptor")]
    #[objc2::method(sel = "currentReplyAppleEvent", managed = "Other")]
    pub unsafe fn currentReplyAppleEvent(&self) -> Option<Id<NSAppleEventDescriptor>>;

    #[objc2::method(sel = "suspendCurrentAppleEvent")]
    pub unsafe fn suspendCurrentAppleEvent(&self) -> NSAppleEventManagerSuspensionID;

    #[cfg(feature = "Foundation_NSAppleEventDescriptor")]
    #[objc2::method(sel = "appleEventForSuspensionID:", managed = "Other")]
    pub unsafe fn appleEventForSuspensionID(
        &self,
        suspension_id: NSAppleEventManagerSuspensionID,
    ) -> Id<NSAppleEventDescriptor>;

    #[cfg(feature = "Foundation_NSAppleEventDescriptor")]
    #[objc2::method(sel = "replyAppleEventForSuspensionID:", managed = "Other")]
    pub unsafe fn replyAppleEventForSuspensionID(
        &self,
        suspension_id: NSAppleEventManagerSuspensionID,
    ) -> Id<NSAppleEventDescriptor>;

    #[objc2::method(sel = "setCurrentAppleEventAndReplyEventWithSuspensionID:")]
    pub unsafe fn setCurrentAppleEventAndReplyEventWithSuspensionID(
        &self,
        suspension_id: NSAppleEventManagerSuspensionID,
    );

    #[objc2::method(sel = "resumeWithSuspensionID:")]
    pub unsafe fn resumeWithSuspensionID(&self, suspension_id: NSAppleEventManagerSuspensionID);
}
