//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSValue")]
    pub type NSValue;
}

#[cfg(feature = "Foundation_NSValue")]
unsafe impl NSCoding for NSValue {}

#[cfg(feature = "Foundation_NSValue")]
unsafe impl NSObjectProtocol for NSValue {}

#[cfg(feature = "Foundation_NSValue")]
unsafe impl NSSecureCoding for NSValue {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSValue")]
    pub type NSValue;

    #[objc2::method(sel = "getValue:size:")]
    pub unsafe fn getValue_size(&self, value: NonNull<c_void>, size: NSUInteger);

    #[objc2::method(sel = "objCType")]
    pub fn objCType(&self) -> NonNull<c_char>;

    #[objc2::method(sel = "initWithBytes:objCType:", managed = "Init")]
    pub unsafe fn initWithBytes_objCType(
        this: Option<Allocated<Self>>,
        value: NonNull<c_void>,
        r#type: NonNull<c_char>,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, coder: &NSCoder)
        -> Option<Id<Self>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSValue")]
    pub type NSValue;

    #[objc2::method(sel = "valueWithBytes:objCType:", managed = "Other")]
    pub unsafe fn valueWithBytes_objCType(
        value: NonNull<c_void>,
        r#type: NonNull<c_char>,
    ) -> Id<NSValue>;

    #[objc2::method(sel = "value:withObjCType:", managed = "Other")]
    pub unsafe fn value_withObjCType(
        value: NonNull<c_void>,
        r#type: NonNull<c_char>,
    ) -> Id<NSValue>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSValue")]
    pub type NSValue;

    #[objc2::method(sel = "valueWithNonretainedObject:", managed = "Other")]
    pub unsafe fn valueWithNonretainedObject(an_object: Option<&Object>) -> Id<NSValue>;

    #[objc2::method(sel = "nonretainedObjectValue", managed = "Other")]
    pub unsafe fn nonretainedObjectValue(&self) -> Option<Id<Object>>;

    #[objc2::method(sel = "valueWithPointer:", managed = "Other")]
    pub unsafe fn valueWithPointer(pointer: *mut c_void) -> Id<NSValue>;

    #[objc2::method(sel = "pointerValue")]
    pub unsafe fn pointerValue(&self) -> *mut c_void;

    #[objc2::method(sel = "isEqualToValue:")]
    pub fn isEqualToValue(&self, value: &NSValue) -> bool;
}

#[objc2::interface(
    unsafe super = NSValue,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSNumber")]
    pub type NSNumber;
}

#[cfg(feature = "Foundation_NSNumber")]
unsafe impl NSCoding for NSNumber {}

#[cfg(feature = "Foundation_NSNumber")]
unsafe impl NSObjectProtocol for NSNumber {}

#[cfg(feature = "Foundation_NSNumber")]
unsafe impl NSSecureCoding for NSNumber {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSNumber")]
    pub type NSNumber;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, coder: &NSCoder)
        -> Option<Id<Self>>;

    #[objc2::method(sel = "initWithChar:", managed = "Init")]
    pub fn initWithChar(this: Option<Allocated<Self>>, value: c_char) -> Id<NSNumber>;

    #[objc2::method(sel = "initWithUnsignedChar:", managed = "Init")]
    pub fn initWithUnsignedChar(this: Option<Allocated<Self>>, value: c_uchar) -> Id<NSNumber>;

    #[objc2::method(sel = "initWithShort:", managed = "Init")]
    pub fn initWithShort(this: Option<Allocated<Self>>, value: c_short) -> Id<NSNumber>;

    #[objc2::method(sel = "initWithUnsignedShort:", managed = "Init")]
    pub fn initWithUnsignedShort(this: Option<Allocated<Self>>, value: c_ushort) -> Id<NSNumber>;

    #[objc2::method(sel = "initWithInt:", managed = "Init")]
    pub fn initWithInt(this: Option<Allocated<Self>>, value: c_int) -> Id<NSNumber>;

    #[objc2::method(sel = "initWithUnsignedInt:", managed = "Init")]
    pub fn initWithUnsignedInt(this: Option<Allocated<Self>>, value: c_uint) -> Id<NSNumber>;

    #[objc2::method(sel = "initWithLong:", managed = "Init")]
    pub fn initWithLong(this: Option<Allocated<Self>>, value: c_long) -> Id<NSNumber>;

    #[objc2::method(sel = "initWithUnsignedLong:", managed = "Init")]
    pub fn initWithUnsignedLong(this: Option<Allocated<Self>>, value: c_ulong) -> Id<NSNumber>;

    #[objc2::method(sel = "initWithLongLong:", managed = "Init")]
    pub fn initWithLongLong(this: Option<Allocated<Self>>, value: c_longlong) -> Id<NSNumber>;

    #[objc2::method(sel = "initWithUnsignedLongLong:", managed = "Init")]
    pub fn initWithUnsignedLongLong(
        this: Option<Allocated<Self>>,
        value: c_ulonglong,
    ) -> Id<NSNumber>;

    #[objc2::method(sel = "initWithFloat:", managed = "Init")]
    pub fn initWithFloat(this: Option<Allocated<Self>>, value: c_float) -> Id<NSNumber>;

    #[objc2::method(sel = "initWithDouble:", managed = "Init")]
    pub fn initWithDouble(this: Option<Allocated<Self>>, value: c_double) -> Id<NSNumber>;

    #[objc2::method(sel = "initWithBool:", managed = "Init")]
    pub fn initWithBool(this: Option<Allocated<Self>>, value: bool) -> Id<NSNumber>;

    #[objc2::method(sel = "initWithInteger:", managed = "Init")]
    pub fn initWithInteger(this: Option<Allocated<Self>>, value: NSInteger) -> Id<NSNumber>;

    #[objc2::method(sel = "initWithUnsignedInteger:", managed = "Init")]
    pub fn initWithUnsignedInteger(
        this: Option<Allocated<Self>>,
        value: NSUInteger,
    ) -> Id<NSNumber>;

    #[objc2::method(sel = "charValue")]
    pub fn charValue(&self) -> c_char;

    #[objc2::method(sel = "unsignedCharValue")]
    pub fn unsignedCharValue(&self) -> c_uchar;

    #[objc2::method(sel = "shortValue")]
    pub fn shortValue(&self) -> c_short;

    #[objc2::method(sel = "unsignedShortValue")]
    pub fn unsignedShortValue(&self) -> c_ushort;

    #[objc2::method(sel = "intValue")]
    pub fn intValue(&self) -> c_int;

    #[objc2::method(sel = "unsignedIntValue")]
    pub fn unsignedIntValue(&self) -> c_uint;

    #[objc2::method(sel = "longValue")]
    pub fn longValue(&self) -> c_long;

    #[objc2::method(sel = "unsignedLongValue")]
    pub fn unsignedLongValue(&self) -> c_ulong;

    #[objc2::method(sel = "longLongValue")]
    pub fn longLongValue(&self) -> c_longlong;

    #[objc2::method(sel = "unsignedLongLongValue")]
    pub fn unsignedLongLongValue(&self) -> c_ulonglong;

    #[objc2::method(sel = "floatValue")]
    pub fn floatValue(&self) -> c_float;

    #[objc2::method(sel = "doubleValue")]
    pub fn doubleValue(&self) -> c_double;

    #[objc2::method(sel = "boolValue")]
    pub fn boolValue(&self) -> bool;

    #[objc2::method(sel = "integerValue")]
    pub fn integerValue(&self) -> NSInteger;

    #[objc2::method(sel = "unsignedIntegerValue")]
    pub fn unsignedIntegerValue(&self) -> NSUInteger;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "stringValue", managed = "Other")]
    pub fn stringValue(&self) -> Id<NSString>;

    #[objc2::method(sel = "compare:")]
    pub fn compare(&self, other_number: &NSNumber) -> NSComparisonResult;

    #[objc2::method(sel = "isEqualToNumber:")]
    pub fn isEqualToNumber(&self, number: &NSNumber) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "descriptionWithLocale:", managed = "Other")]
    pub unsafe fn descriptionWithLocale(&self, locale: Option<&Object>) -> Id<NSString>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSNumber")]
    pub type NSNumber;

    #[objc2::method(sel = "numberWithChar:", managed = "Other")]
    pub fn numberWithChar(value: c_char) -> Id<NSNumber>;

    #[objc2::method(sel = "numberWithUnsignedChar:", managed = "Other")]
    pub fn numberWithUnsignedChar(value: c_uchar) -> Id<NSNumber>;

    #[objc2::method(sel = "numberWithShort:", managed = "Other")]
    pub fn numberWithShort(value: c_short) -> Id<NSNumber>;

    #[objc2::method(sel = "numberWithUnsignedShort:", managed = "Other")]
    pub fn numberWithUnsignedShort(value: c_ushort) -> Id<NSNumber>;

    #[objc2::method(sel = "numberWithInt:", managed = "Other")]
    pub fn numberWithInt(value: c_int) -> Id<NSNumber>;

    #[objc2::method(sel = "numberWithUnsignedInt:", managed = "Other")]
    pub fn numberWithUnsignedInt(value: c_uint) -> Id<NSNumber>;

    #[objc2::method(sel = "numberWithLong:", managed = "Other")]
    pub fn numberWithLong(value: c_long) -> Id<NSNumber>;

    #[objc2::method(sel = "numberWithUnsignedLong:", managed = "Other")]
    pub fn numberWithUnsignedLong(value: c_ulong) -> Id<NSNumber>;

    #[objc2::method(sel = "numberWithLongLong:", managed = "Other")]
    pub fn numberWithLongLong(value: c_longlong) -> Id<NSNumber>;

    #[objc2::method(sel = "numberWithUnsignedLongLong:", managed = "Other")]
    pub fn numberWithUnsignedLongLong(value: c_ulonglong) -> Id<NSNumber>;

    #[objc2::method(sel = "numberWithFloat:", managed = "Other")]
    pub fn numberWithFloat(value: c_float) -> Id<NSNumber>;

    #[objc2::method(sel = "numberWithDouble:", managed = "Other")]
    pub fn numberWithDouble(value: c_double) -> Id<NSNumber>;

    #[objc2::method(sel = "numberWithBool:", managed = "Other")]
    pub fn numberWithBool(value: bool) -> Id<NSNumber>;

    #[objc2::method(sel = "numberWithInteger:", managed = "Other")]
    pub fn numberWithInteger(value: NSInteger) -> Id<NSNumber>;

    #[objc2::method(sel = "numberWithUnsignedInteger:", managed = "Other")]
    pub fn numberWithUnsignedInteger(value: NSUInteger) -> Id<NSNumber>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSValue")]
    pub type NSValue;

    #[deprecated]
    #[objc2::method(sel = "getValue:")]
    pub unsafe fn getValue(&self, value: NonNull<c_void>);
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSValue`
    #[cfg(feature = "Foundation_NSNumber")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSNumber")]
    pub type NSNumber;

    #[objc2::method(sel = "initWithBytes:objCType:", managed = "Init")]
    pub unsafe fn initWithBytes_objCType(
        this: Option<Allocated<Self>>,
        value: NonNull<c_void>,
        r#type: NonNull<c_char>,
    ) -> Id<Self>;
}
