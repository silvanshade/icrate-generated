//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[ns_options]
#[underlying(NSUInteger)]
pub enum NSOrderedCollectionDifferenceCalculationOptions {
    NSOrderedCollectionDifferenceCalculationOmitInsertedObjects = 1 << 0,
    NSOrderedCollectionDifferenceCalculationOmitRemovedObjects = 1 << 1,
    NSOrderedCollectionDifferenceCalculationInferMoves = 1 << 2,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSOrderedCollectionDifference")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSOrderedCollectionDifference<
        ObjectType: Message = Object,
        ObjectTypeOwnership: Ownership = Shared,
    >;
}

#[cfg(feature = "Foundation_NSOrderedCollectionDifference")]
unsafe impl<ObjectType: Message, ObjectTypeOwnership: Ownership> NSFastEnumeration
    for NSOrderedCollectionDifference<ObjectType, ObjectTypeOwnership>
{
}

#[cfg(feature = "Foundation_NSOrderedCollectionDifference")]
unsafe impl<ObjectType: Message, ObjectTypeOwnership: Ownership> NSObjectProtocol
    for NSOrderedCollectionDifference<ObjectType, ObjectTypeOwnership>
{
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSOrderedCollectionDifference")]
    pub type NSOrderedCollectionDifference<
        ObjectType: Message = Object,
        ObjectTypeOwnership: Ownership = Shared,
    >;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSOrderedCollectionChange"
    ))]
    #[objc2::method(sel = "initWithChanges:", managed = "Init")]
    pub unsafe fn initWithChanges(
        this: Option<Allocated<Self>>,
        changes: &NSArray<NSOrderedCollectionChange<ObjectType>>,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSIndexSet",
        feature = "Foundation_NSOrderedCollectionChange"
    ))]
    #[objc2::method(
        sel = "initWithInsertIndexes:insertedObjects:removeIndexes:removedObjects:additionalChanges:",
        managed = "Init"
    )]
    pub unsafe fn initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects_additionalChanges(
        this: Option<Allocated<Self>>,
        inserts: &NSIndexSet,
        inserted_objects: Option<&NSArray<ObjectType>>,
        removes: &NSIndexSet,
        removed_objects: Option<&NSArray<ObjectType>>,
        changes: &NSArray<NSOrderedCollectionChange<ObjectType>>,
    ) -> Id<Self>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSIndexSet"))]
    #[objc2::method(
        sel = "initWithInsertIndexes:insertedObjects:removeIndexes:removedObjects:",
        managed = "Init"
    )]
    pub unsafe fn initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects(
        this: Option<Allocated<Self>>,
        inserts: &NSIndexSet,
        inserted_objects: Option<&NSArray<ObjectType>>,
        removes: &NSIndexSet,
        removed_objects: Option<&NSArray<ObjectType>>,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSOrderedCollectionChange"
    ))]
    #[objc2::method(sel = "insertions", managed = "Other")]
    pub unsafe fn insertions(&self) -> Id<NSArray<NSOrderedCollectionChange<ObjectType>>>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSOrderedCollectionChange"
    ))]
    #[objc2::method(sel = "removals", managed = "Other")]
    pub unsafe fn removals(&self) -> Id<NSArray<NSOrderedCollectionChange<ObjectType>>>;

    #[objc2::method(sel = "hasChanges")]
    pub unsafe fn hasChanges(&self) -> bool;

    #[cfg(feature = "Foundation_NSOrderedCollectionChange")]
    #[objc2::method(sel = "differenceByTransformingChangesWithBlock:", managed = "Other")]
    pub unsafe fn differenceByTransformingChangesWithBlock(
        &self,
        block: &Block<
            (NonNull<NSOrderedCollectionChange<ObjectType>>,),
            NonNull<NSOrderedCollectionChange<Object>>,
        >,
    ) -> Id<NSOrderedCollectionDifference<Object>>;

    #[objc2::method(sel = "inverseDifference", managed = "Other")]
    pub unsafe fn inverseDifference(&self) -> Id<Self>;
}
