//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[ns_options]
#[underlying(u64)]
pub enum NSTextCheckingType {
    NSTextCheckingTypeOrthography = 1 << 0,
    NSTextCheckingTypeSpelling = 1 << 1,
    NSTextCheckingTypeGrammar = 1 << 2,
    NSTextCheckingTypeDate = 1 << 3,
    NSTextCheckingTypeAddress = 1 << 4,
    NSTextCheckingTypeLink = 1 << 5,
    NSTextCheckingTypeQuote = 1 << 6,
    NSTextCheckingTypeDash = 1 << 7,
    NSTextCheckingTypeReplacement = 1 << 8,
    NSTextCheckingTypeCorrection = 1 << 9,
    NSTextCheckingTypeRegularExpression = 1 << 10,
    NSTextCheckingTypePhoneNumber = 1 << 11,
    NSTextCheckingTypeTransitInformation = 1 << 12,
}

#[ns_enum]
#[underlying(u64)]
pub enum NSTextCheckingTypes {
    NSTextCheckingAllSystemTypes = 0xffffffff,
    NSTextCheckingAllCustomTypes = 0xffffffff << 32,
    NSTextCheckingAllTypes = NSTextCheckingAllSystemTypes | NSTextCheckingAllCustomTypes,
}

typed_extensible_enum!(
    pub type NSTextCheckingKey = NSString;
);

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSTextCheckingResult")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSTextCheckingResult;
}

#[cfg(feature = "Foundation_NSTextCheckingResult")]
unsafe impl NSCoding for NSTextCheckingResult {}

#[cfg(feature = "Foundation_NSTextCheckingResult")]
unsafe impl NSObjectProtocol for NSTextCheckingResult {}

#[cfg(feature = "Foundation_NSTextCheckingResult")]
unsafe impl NSSecureCoding for NSTextCheckingResult {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSTextCheckingResult")]
    pub type NSTextCheckingResult;

    #[objc2::method(sel = "resultType")]
    pub unsafe fn resultType(&self) -> NSTextCheckingType;

    #[objc2::method(sel = "range")]
    pub unsafe fn range(&self) -> NSRange;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSTextCheckingResult")]
    pub type NSTextCheckingResult;

    #[cfg(feature = "Foundation_NSOrthography")]
    #[objc2::method(sel = "orthography", managed = "Other")]
    pub unsafe fn orthography(&self) -> Option<Id<NSOrthography>>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "grammarDetails", managed = "Other")]
    pub unsafe fn grammarDetails(&self) -> Option<Id<NSArray<NSDictionary<NSString, Object>>>>;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "date", managed = "Other")]
    pub unsafe fn date(&self) -> Option<Id<NSDate>>;

    #[cfg(feature = "Foundation_NSTimeZone")]
    #[objc2::method(sel = "timeZone", managed = "Other")]
    pub unsafe fn timeZone(&self) -> Option<Id<NSTimeZone>>;

    #[objc2::method(sel = "duration")]
    pub unsafe fn duration(&self) -> NSTimeInterval;

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "components", managed = "Other")]
    pub unsafe fn components(&self) -> Option<Id<NSDictionary<NSTextCheckingKey, NSString>>>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "URL", managed = "Other")]
    pub unsafe fn URL(&self) -> Option<Id<NSURL>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "replacementString", managed = "Other")]
    pub unsafe fn replacementString(&self) -> Option<Id<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "alternativeStrings", managed = "Other")]
    pub unsafe fn alternativeStrings(&self) -> Option<Id<NSArray<NSString>>>;

    #[cfg(feature = "Foundation_NSRegularExpression")]
    #[objc2::method(sel = "regularExpression", managed = "Other")]
    pub unsafe fn regularExpression(&self) -> Option<Id<NSRegularExpression>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "phoneNumber", managed = "Other")]
    pub unsafe fn phoneNumber(&self) -> Option<Id<NSString>>;

    #[objc2::method(sel = "numberOfRanges")]
    pub unsafe fn numberOfRanges(&self) -> NSUInteger;

    #[objc2::method(sel = "rangeAtIndex:")]
    pub unsafe fn rangeAtIndex(&self, idx: NSUInteger) -> NSRange;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "rangeWithName:")]
    pub unsafe fn rangeWithName(&self, name: &NSString) -> NSRange;

    #[objc2::method(sel = "resultByAdjustingRangesWithOffset:", managed = "Other")]
    pub unsafe fn resultByAdjustingRangesWithOffset(
        &self,
        offset: NSInteger,
    ) -> Id<NSTextCheckingResult>;

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "addressComponents", managed = "Other")]
    pub unsafe fn addressComponents(&self)
        -> Option<Id<NSDictionary<NSTextCheckingKey, NSString>>>;
}

extern_static!(NSTextCheckingNameKey: &'static NSTextCheckingKey);

extern_static!(NSTextCheckingJobTitleKey: &'static NSTextCheckingKey);

extern_static!(NSTextCheckingOrganizationKey: &'static NSTextCheckingKey);

extern_static!(NSTextCheckingStreetKey: &'static NSTextCheckingKey);

extern_static!(NSTextCheckingCityKey: &'static NSTextCheckingKey);

extern_static!(NSTextCheckingStateKey: &'static NSTextCheckingKey);

extern_static!(NSTextCheckingZIPKey: &'static NSTextCheckingKey);

extern_static!(NSTextCheckingCountryKey: &'static NSTextCheckingKey);

extern_static!(NSTextCheckingPhoneKey: &'static NSTextCheckingKey);

extern_static!(NSTextCheckingAirlineKey: &'static NSTextCheckingKey);

extern_static!(NSTextCheckingFlightKey: &'static NSTextCheckingKey);

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSTextCheckingResult")]
    pub type NSTextCheckingResult;

    #[cfg(feature = "Foundation_NSOrthography")]
    #[objc2::method(
        sel = "orthographyCheckingResultWithRange:orthography:",
        managed = "Other"
    )]
    pub unsafe fn orthographyCheckingResultWithRange_orthography(
        range: NSRange,
        orthography: &NSOrthography,
    ) -> Id<NSTextCheckingResult>;

    #[objc2::method(sel = "spellCheckingResultWithRange:", managed = "Other")]
    pub unsafe fn spellCheckingResultWithRange(range: NSRange) -> Id<NSTextCheckingResult>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "grammarCheckingResultWithRange:details:", managed = "Other")]
    pub unsafe fn grammarCheckingResultWithRange_details(
        range: NSRange,
        details: &NSArray<NSDictionary<NSString, Object>>,
    ) -> Id<NSTextCheckingResult>;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "dateCheckingResultWithRange:date:", managed = "Other")]
    pub unsafe fn dateCheckingResultWithRange_date(
        range: NSRange,
        date: &NSDate,
    ) -> Id<NSTextCheckingResult>;

    #[cfg(all(feature = "Foundation_NSDate", feature = "Foundation_NSTimeZone"))]
    #[objc2::method(
        sel = "dateCheckingResultWithRange:date:timeZone:duration:",
        managed = "Other"
    )]
    pub unsafe fn dateCheckingResultWithRange_date_timeZone_duration(
        range: NSRange,
        date: &NSDate,
        time_zone: &NSTimeZone,
        duration: NSTimeInterval,
    ) -> Id<NSTextCheckingResult>;

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "addressCheckingResultWithRange:components:", managed = "Other")]
    pub unsafe fn addressCheckingResultWithRange_components(
        range: NSRange,
        components: &NSDictionary<NSTextCheckingKey, NSString>,
    ) -> Id<NSTextCheckingResult>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "linkCheckingResultWithRange:URL:", managed = "Other")]
    pub unsafe fn linkCheckingResultWithRange_URL(
        range: NSRange,
        url: &NSURL,
    ) -> Id<NSTextCheckingResult>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(
        sel = "quoteCheckingResultWithRange:replacementString:",
        managed = "Other"
    )]
    pub unsafe fn quoteCheckingResultWithRange_replacementString(
        range: NSRange,
        replacement_string: &NSString,
    ) -> Id<NSTextCheckingResult>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(
        sel = "dashCheckingResultWithRange:replacementString:",
        managed = "Other"
    )]
    pub unsafe fn dashCheckingResultWithRange_replacementString(
        range: NSRange,
        replacement_string: &NSString,
    ) -> Id<NSTextCheckingResult>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(
        sel = "replacementCheckingResultWithRange:replacementString:",
        managed = "Other"
    )]
    pub unsafe fn replacementCheckingResultWithRange_replacementString(
        range: NSRange,
        replacement_string: &NSString,
    ) -> Id<NSTextCheckingResult>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(
        sel = "correctionCheckingResultWithRange:replacementString:",
        managed = "Other"
    )]
    pub unsafe fn correctionCheckingResultWithRange_replacementString(
        range: NSRange,
        replacement_string: &NSString,
    ) -> Id<NSTextCheckingResult>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(
        sel = "correctionCheckingResultWithRange:replacementString:alternativeStrings:",
        managed = "Other"
    )]
    pub unsafe fn correctionCheckingResultWithRange_replacementString_alternativeStrings(
        range: NSRange,
        replacement_string: &NSString,
        alternative_strings: &NSArray<NSString>,
    ) -> Id<NSTextCheckingResult>;

    #[cfg(feature = "Foundation_NSRegularExpression")]
    #[objc2::method(
        sel = "regularExpressionCheckingResultWithRanges:count:regularExpression:",
        managed = "Other"
    )]
    pub unsafe fn regularExpressionCheckingResultWithRanges_count_regularExpression(
        ranges: NSRangePointer,
        count: NSUInteger,
        regular_expression: &NSRegularExpression,
    ) -> Id<NSTextCheckingResult>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(
        sel = "phoneNumberCheckingResultWithRange:phoneNumber:",
        managed = "Other"
    )]
    pub unsafe fn phoneNumberCheckingResultWithRange_phoneNumber(
        range: NSRange,
        phone_number: &NSString,
    ) -> Id<NSTextCheckingResult>;

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(
        sel = "transitInformationCheckingResultWithRange:components:",
        managed = "Other"
    )]
    pub unsafe fn transitInformationCheckingResultWithRange_components(
        range: NSRange,
        components: &NSDictionary<NSTextCheckingKey, NSString>,
    ) -> Id<NSTextCheckingResult>;
}
