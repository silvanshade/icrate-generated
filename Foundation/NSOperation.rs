//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSOperationQueuePriority {
    NSOperationQueuePriorityVeryLow = -8,
    NSOperationQueuePriorityLow = -4,
    NSOperationQueuePriorityNormal = 0,
    NSOperationQueuePriorityHigh = 4,
    NSOperationQueuePriorityVeryHigh = 8,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSOperation")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSOperation;
}

#[cfg(feature = "Foundation_NSOperation")]
unsafe impl NSObjectProtocol for NSOperation {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSOperation")]
    pub type NSOperation;

    #[objc2::method(sel = "start")]
    pub unsafe fn start(&self);

    #[objc2::method(sel = "main")]
    pub unsafe fn main(&self);

    #[objc2::method(sel = "isCancelled")]
    pub unsafe fn isCancelled(&self) -> bool;

    #[objc2::method(sel = "cancel")]
    pub unsafe fn cancel(&self);

    #[objc2::method(sel = "isExecuting")]
    pub unsafe fn isExecuting(&self) -> bool;

    #[objc2::method(sel = "isFinished")]
    pub unsafe fn isFinished(&self) -> bool;

    #[objc2::method(sel = "isConcurrent")]
    pub unsafe fn isConcurrent(&self) -> bool;

    #[objc2::method(sel = "isAsynchronous")]
    pub unsafe fn isAsynchronous(&self) -> bool;

    #[objc2::method(sel = "isReady")]
    pub unsafe fn isReady(&self) -> bool;

    #[objc2::method(sel = "addDependency:")]
    pub unsafe fn addDependency(&self, op: &NSOperation);

    #[objc2::method(sel = "removeDependency:")]
    pub unsafe fn removeDependency(&self, op: &NSOperation);

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "dependencies", managed = "Other")]
    pub unsafe fn dependencies(&self) -> Id<NSArray<NSOperation>>;

    #[objc2::method(sel = "queuePriority")]
    pub unsafe fn queuePriority(&self) -> NSOperationQueuePriority;

    #[objc2::method(sel = "setQueuePriority:")]
    pub unsafe fn setQueuePriority(&self, queue_priority: NSOperationQueuePriority);

    #[objc2::method(sel = "completionBlock")]
    pub unsafe fn completionBlock(&self) -> *mut Block<(), ()>;

    #[objc2::method(sel = "setCompletionBlock:")]
    pub unsafe fn setCompletionBlock(&self, completion_block: Option<&Block<(), ()>>);

    #[objc2::method(sel = "waitUntilFinished")]
    pub unsafe fn waitUntilFinished(&self);

    #[deprecated = "Not supported"]
    #[objc2::method(sel = "threadPriority")]
    pub unsafe fn threadPriority(&self) -> c_double;

    #[deprecated = "Not supported"]
    #[objc2::method(sel = "setThreadPriority:")]
    pub unsafe fn setThreadPriority(&self, thread_priority: c_double);

    #[objc2::method(sel = "qualityOfService")]
    pub unsafe fn qualityOfService(&self) -> NSQualityOfService;

    #[objc2::method(sel = "setQualityOfService:")]
    pub unsafe fn setQualityOfService(&self, quality_of_service: NSQualityOfService);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "name", managed = "Other")]
    pub unsafe fn name(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setName:")]
    pub unsafe fn setName(&self, name: Option<&NSString>);
}

#[objc2::interface(
    unsafe super = NSOperation,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSBlockOperation")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSBlockOperation;
}

#[cfg(feature = "Foundation_NSBlockOperation")]
unsafe impl NSObjectProtocol for NSBlockOperation {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSBlockOperation")]
    pub type NSBlockOperation;

    #[objc2::method(sel = "blockOperationWithBlock:", managed = "Other")]
    pub unsafe fn blockOperationWithBlock(block: &Block<(), ()>) -> Id<Self>;

    #[objc2::method(sel = "addExecutionBlock:")]
    pub unsafe fn addExecutionBlock(&self, block: &Block<(), ()>);
}

#[objc2::interface(
    unsafe super = NSOperation,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSInvocationOperation")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSInvocationOperation;
}

#[cfg(feature = "Foundation_NSInvocationOperation")]
unsafe impl NSObjectProtocol for NSInvocationOperation {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSInvocationOperation")]
    pub type NSInvocationOperation;

    #[objc2::method(sel = "initWithTarget:selector:object:", managed = "Init")]
    pub unsafe fn initWithTarget_selector_object(
        this: Option<Allocated<Self>>,
        target: &Object,
        sel: Sel,
        arg: Option<&Object>,
    ) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSInvocation")]
    #[objc2::method(sel = "initWithInvocation:", managed = "Init")]
    pub unsafe fn initWithInvocation(this: Option<Allocated<Self>>, inv: &NSInvocation)
        -> Id<Self>;

    #[cfg(feature = "Foundation_NSInvocation")]
    #[objc2::method(sel = "invocation", managed = "Other")]
    pub unsafe fn invocation(&self) -> Id<NSInvocation>;

    #[objc2::method(sel = "result", managed = "Other")]
    pub unsafe fn result(&self) -> Option<Id<Object>>;
}

extern_static!(NSInvocationOperationVoidResultException: &'static NSExceptionName);

extern_static!(NSInvocationOperationCancelledException: &'static NSExceptionName);

extern_static!(NSOperationQueueDefaultMaxConcurrentOperationCount: NSInteger = -1);

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSOperationQueue")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSOperationQueue;
}

#[cfg(feature = "Foundation_NSOperationQueue")]
unsafe impl NSObjectProtocol for NSOperationQueue {}

#[cfg(feature = "Foundation_NSOperationQueue")]
unsafe impl NSProgressReporting for NSOperationQueue {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSOperationQueue")]
    pub type NSOperationQueue;

    #[cfg(feature = "Foundation_NSProgress")]
    #[objc2::method(sel = "progress", managed = "Other")]
    pub unsafe fn progress(&self) -> Id<NSProgress>;

    #[cfg(feature = "Foundation_NSOperation")]
    #[objc2::method(sel = "addOperation:")]
    pub unsafe fn addOperation(&self, op: &NSOperation);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSOperation"))]
    #[objc2::method(sel = "addOperations:waitUntilFinished:")]
    pub unsafe fn addOperations_waitUntilFinished(&self, ops: &NSArray<NSOperation>, wait: bool);

    #[objc2::method(sel = "addOperationWithBlock:")]
    pub unsafe fn addOperationWithBlock(&self, block: &Block<(), ()>);

    #[objc2::method(sel = "addBarrierBlock:")]
    pub unsafe fn addBarrierBlock(&self, barrier: &Block<(), ()>);

    #[objc2::method(sel = "maxConcurrentOperationCount")]
    pub unsafe fn maxConcurrentOperationCount(&self) -> NSInteger;

    #[objc2::method(sel = "setMaxConcurrentOperationCount:")]
    pub unsafe fn setMaxConcurrentOperationCount(&self, max_concurrent_operation_count: NSInteger);

    #[objc2::method(sel = "isSuspended")]
    pub unsafe fn isSuspended(&self) -> bool;

    #[objc2::method(sel = "setSuspended:")]
    pub unsafe fn setSuspended(&self, suspended: bool);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "name", managed = "Other")]
    pub unsafe fn name(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setName:")]
    pub unsafe fn setName(&self, name: Option<&NSString>);

    #[objc2::method(sel = "qualityOfService")]
    pub unsafe fn qualityOfService(&self) -> NSQualityOfService;

    #[objc2::method(sel = "setQualityOfService:")]
    pub unsafe fn setQualityOfService(&self, quality_of_service: NSQualityOfService);

    #[objc2::method(sel = "cancelAllOperations")]
    pub unsafe fn cancelAllOperations(&self);

    #[objc2::method(sel = "waitUntilAllOperationsAreFinished")]
    pub unsafe fn waitUntilAllOperationsAreFinished(&self);

    #[objc2::method(sel = "currentQueue", managed = "Other")]
    pub unsafe fn currentQueue() -> Option<Id<NSOperationQueue>>;

    #[objc2::method(sel = "mainQueue", managed = "Other")]
    pub unsafe fn mainQueue() -> Id<NSOperationQueue>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSOperationQueue")]
    pub type NSOperationQueue;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSOperation"))]
    #[deprecated = "access to operations is inherently a race condition, it should not be used. For barrier style behaviors please use addBarrierBlock: instead"]
    #[objc2::method(sel = "operations", managed = "Other")]
    pub unsafe fn operations(&self) -> Id<NSArray<NSOperation>>;

    #[deprecated]
    #[objc2::method(sel = "operationCount")]
    pub unsafe fn operationCount(&self) -> NSUInteger;
}
