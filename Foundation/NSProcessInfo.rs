//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[extern_enum]
#[underlying(c_uint)]
#[deprecated = "Not supported"]
pub enum __anonymous__ {
    #[deprecated = "Not supported"]
    NSWindowsNTOperatingSystem = 1,
    #[deprecated = "Not supported"]
    NSWindows95OperatingSystem = 2,
    #[deprecated = "Not supported"]
    NSSolarisOperatingSystem = 3,
    #[deprecated = "Not supported"]
    NSHPUXOperatingSystem = 4,
    #[deprecated = "Not supported"]
    NSMACHOperatingSystem = 5,
    #[deprecated = "Not supported"]
    NSSunOSOperatingSystem = 6,
    #[deprecated = "Not supported"]
    NSOSF1OperatingSystem = 7,
}

extern_struct!(
    #[encoding_name("?")]
    pub struct NSOperatingSystemVersion {
        pub majorVersion: NSInteger,
        pub minorVersion: NSInteger,
        pub patchVersion: NSInteger,
    }
);

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSProcessInfo")]
    #[derive(PartialEq, Eq, Hash)]
    pub type NSProcessInfo;
}

#[cfg(feature = "Foundation_NSProcessInfo")]
unsafe impl NSObjectProtocol for NSProcessInfo {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSProcessInfo")]
    pub type NSProcessInfo;

    #[objc2::method(sel = "processInfo", managed = "Other")]
    pub fn processInfo() -> Id<NSProcessInfo>;

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "environment", managed = "Other")]
    pub unsafe fn environment(&self) -> Id<NSDictionary<NSString, NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "arguments", managed = "Other")]
    pub unsafe fn arguments(&self) -> Id<NSArray<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "hostName", managed = "Other")]
    pub unsafe fn hostName(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "processName", managed = "Other")]
    pub fn processName(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setProcessName:")]
    pub unsafe fn setProcessName(&self, process_name: &NSString);

    #[objc2::method(sel = "processIdentifier")]
    pub unsafe fn processIdentifier(&self) -> c_int;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "globallyUniqueString", managed = "Other")]
    pub unsafe fn globallyUniqueString(&self) -> Id<NSString>;

    #[deprecated = "-operatingSystem always returns NSMACHOperatingSystem, use -operatingSystemVersion or -isOperatingSystemAtLeastVersion: instead"]
    #[objc2::method(sel = "operatingSystem")]
    pub unsafe fn operatingSystem(&self) -> NSUInteger;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "-operatingSystemName always returns NSMACHOperatingSystem, use -operatingSystemVersionString instead"]
    #[objc2::method(sel = "operatingSystemName", managed = "Other")]
    pub unsafe fn operatingSystemName(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "operatingSystemVersionString", managed = "Other")]
    pub unsafe fn operatingSystemVersionString(&self) -> Id<NSString>;

    #[objc2::method(sel = "operatingSystemVersion")]
    pub fn operatingSystemVersion(&self) -> NSOperatingSystemVersion;

    #[objc2::method(sel = "processorCount")]
    pub unsafe fn processorCount(&self) -> NSUInteger;

    #[objc2::method(sel = "activeProcessorCount")]
    pub unsafe fn activeProcessorCount(&self) -> NSUInteger;

    #[objc2::method(sel = "physicalMemory")]
    pub unsafe fn physicalMemory(&self) -> c_ulonglong;

    #[objc2::method(sel = "isOperatingSystemAtLeastVersion:")]
    pub unsafe fn isOperatingSystemAtLeastVersion(&self, version: NSOperatingSystemVersion)
        -> bool;

    #[objc2::method(sel = "systemUptime")]
    pub unsafe fn systemUptime(&self) -> NSTimeInterval;

    #[objc2::method(sel = "disableSuddenTermination")]
    pub unsafe fn disableSuddenTermination(&self);

    #[objc2::method(sel = "enableSuddenTermination")]
    pub unsafe fn enableSuddenTermination(&self);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "disableAutomaticTermination:")]
    pub unsafe fn disableAutomaticTermination(&self, reason: &NSString);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "enableAutomaticTermination:")]
    pub unsafe fn enableAutomaticTermination(&self, reason: &NSString);

    #[objc2::method(sel = "automaticTerminationSupportEnabled")]
    pub unsafe fn automaticTerminationSupportEnabled(&self) -> bool;

    #[objc2::method(sel = "setAutomaticTerminationSupportEnabled:")]
    pub unsafe fn setAutomaticTerminationSupportEnabled(
        &self,
        automatic_termination_support_enabled: bool,
    );
}

#[ns_options]
#[underlying(u64)]
pub enum NSActivityOptions {
    NSActivityIdleDisplaySleepDisabled = 1 << 40,
    NSActivityIdleSystemSleepDisabled = 1 << 20,
    NSActivitySuddenTerminationDisabled = 1 << 14,
    NSActivityAutomaticTerminationDisabled = 1 << 15,
    NSActivityAnimationTrackingEnabled = 1 << 45,
    NSActivityTrackingEnabled = 1 << 46,
    NSActivityUserInitiated = 0x00FFFFFF | NSActivityIdleSystemSleepDisabled,
    NSActivityUserInitiatedAllowingIdleSystemSleep =
        NSActivityUserInitiated & !NSActivityIdleSystemSleepDisabled,
    NSActivityBackground = 0x000000FF,
    NSActivityLatencyCritical = 0xFF00000000,
    NSActivityUserInteractive = NSActivityUserInitiated | NSActivityLatencyCritical,
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSProcessInfo")]
    pub type NSProcessInfo;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "beginActivityWithOptions:reason:", managed = "Other")]
    pub unsafe fn beginActivityWithOptions_reason(
        &self,
        options: NSActivityOptions,
        reason: &NSString,
    ) -> Id<NSObject>;

    #[objc2::method(sel = "endActivity:")]
    pub unsafe fn endActivity(&self, activity: &NSObject);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "performActivityWithOptions:reason:usingBlock:")]
    pub unsafe fn performActivityWithOptions_reason_usingBlock(
        &self,
        options: NSActivityOptions,
        reason: &NSString,
        block: &Block<(), ()>,
    );

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "performExpiringActivityWithReason:usingBlock:")]
    pub unsafe fn performExpiringActivityWithReason_usingBlock(
        &self,
        reason: &NSString,
        block: &Block<(Bool,), ()>,
    );
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSProcessInfo")]
    pub type NSProcessInfo;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "userName", managed = "Other")]
    pub unsafe fn userName(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "fullUserName", managed = "Other")]
    pub unsafe fn fullUserName(&self) -> Id<NSString>;
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSProcessInfoThermalState {
    NSProcessInfoThermalStateNominal = 0,
    NSProcessInfoThermalStateFair = 1,
    NSProcessInfoThermalStateSerious = 2,
    NSProcessInfoThermalStateCritical = 3,
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSProcessInfo")]
    pub type NSProcessInfo;

    #[objc2::method(sel = "thermalState")]
    pub unsafe fn thermalState(&self) -> NSProcessInfoThermalState;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSProcessInfo")]
    pub type NSProcessInfo;

    #[objc2::method(sel = "isLowPowerModeEnabled")]
    pub unsafe fn isLowPowerModeEnabled(&self) -> bool;
}

extern_static!(NSProcessInfoThermalStateDidChangeNotification: &'static NSNotificationName);

extern_static!(NSProcessInfoPowerStateDidChangeNotification: &'static NSNotificationName);

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSProcessInfo")]
    pub type NSProcessInfo;

    #[objc2::method(sel = "isMacCatalystApp")]
    pub unsafe fn isMacCatalystApp(&self) -> bool;

    #[objc2::method(sel = "isiOSAppOnMac")]
    pub unsafe fn isiOSAppOnMac(&self) -> bool;
}
