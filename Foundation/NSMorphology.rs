//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSGrammaticalGender {
    NSGrammaticalGenderNotSet = 0,
    NSGrammaticalGenderFeminine = 1,
    NSGrammaticalGenderMasculine = 2,
    NSGrammaticalGenderNeuter = 3,
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSGrammaticalPartOfSpeech {
    NSGrammaticalPartOfSpeechNotSet = 0,
    NSGrammaticalPartOfSpeechDeterminer = 1,
    NSGrammaticalPartOfSpeechPronoun = 2,
    NSGrammaticalPartOfSpeechLetter = 3,
    NSGrammaticalPartOfSpeechAdverb = 4,
    NSGrammaticalPartOfSpeechParticle = 5,
    NSGrammaticalPartOfSpeechAdjective = 6,
    NSGrammaticalPartOfSpeechAdposition = 7,
    NSGrammaticalPartOfSpeechVerb = 8,
    NSGrammaticalPartOfSpeechNoun = 9,
    NSGrammaticalPartOfSpeechConjunction = 10,
    NSGrammaticalPartOfSpeechNumeral = 11,
    NSGrammaticalPartOfSpeechInterjection = 12,
    NSGrammaticalPartOfSpeechPreposition = 13,
    NSGrammaticalPartOfSpeechAbbreviation = 14,
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSGrammaticalNumber {
    NSGrammaticalNumberNotSet = 0,
    NSGrammaticalNumberSingular = 1,
    NSGrammaticalNumberZero = 2,
    NSGrammaticalNumberPlural = 3,
    NSGrammaticalNumberPluralTwo = 4,
    NSGrammaticalNumberPluralFew = 5,
    NSGrammaticalNumberPluralMany = 6,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSMorphology")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSMorphology;
}

#[cfg(feature = "Foundation_NSMorphology")]
unsafe impl NSCoding for NSMorphology {}

#[cfg(feature = "Foundation_NSMorphology")]
unsafe impl NSObjectProtocol for NSMorphology {}

#[cfg(feature = "Foundation_NSMorphology")]
unsafe impl NSSecureCoding for NSMorphology {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSMorphology")]
    pub type NSMorphology;

    #[objc2::method(sel = "grammaticalGender")]
    pub unsafe fn grammaticalGender(&self) -> NSGrammaticalGender;

    #[objc2::method(sel = "setGrammaticalGender:")]
    pub unsafe fn setGrammaticalGender(&self, grammatical_gender: NSGrammaticalGender);

    #[objc2::method(sel = "partOfSpeech")]
    pub unsafe fn partOfSpeech(&self) -> NSGrammaticalPartOfSpeech;

    #[objc2::method(sel = "setPartOfSpeech:")]
    pub unsafe fn setPartOfSpeech(&self, part_of_speech: NSGrammaticalPartOfSpeech);

    #[objc2::method(sel = "number")]
    pub unsafe fn number(&self) -> NSGrammaticalNumber;

    #[objc2::method(sel = "setNumber:")]
    pub unsafe fn setNumber(&self, number: NSGrammaticalNumber);
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSMorphology")]
    pub type NSMorphology;

    #[cfg(all(
        feature = "Foundation_NSMorphologyCustomPronoun",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "customPronounForLanguage:", managed = "Other")]
    pub unsafe fn customPronounForLanguage(
        &self,
        language: &NSString,
    ) -> Option<Id<NSMorphologyCustomPronoun>>;

    #[cfg(all(
        feature = "Foundation_NSError",
        feature = "Foundation_NSMorphologyCustomPronoun",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "setCustomPronoun:forLanguage:error:", throws)]
    pub unsafe fn setCustomPronoun_forLanguage_error(
        &self,
        features: Option<&NSMorphologyCustomPronoun>,
        language: &NSString,
    ) -> Result<(), Id<NSError>>;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSMorphologyCustomPronoun")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSMorphologyCustomPronoun;
}

#[cfg(feature = "Foundation_NSMorphologyCustomPronoun")]
unsafe impl NSCoding for NSMorphologyCustomPronoun {}

#[cfg(feature = "Foundation_NSMorphologyCustomPronoun")]
unsafe impl NSObjectProtocol for NSMorphologyCustomPronoun {}

#[cfg(feature = "Foundation_NSMorphologyCustomPronoun")]
unsafe impl NSSecureCoding for NSMorphologyCustomPronoun {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSMorphologyCustomPronoun")]
    pub type NSMorphologyCustomPronoun;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "isSupportedForLanguage:")]
    pub unsafe fn isSupportedForLanguage(language: &NSString) -> bool;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "requiredKeysForLanguage:", managed = "Other")]
    pub unsafe fn requiredKeysForLanguage(language: &NSString) -> Id<NSArray<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "subjectForm", managed = "Other")]
    pub unsafe fn subjectForm(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setSubjectForm:")]
    pub unsafe fn setSubjectForm(&self, subject_form: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "objectForm", managed = "Other")]
    pub unsafe fn objectForm(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setObjectForm:")]
    pub unsafe fn setObjectForm(&self, object_form: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "possessiveForm", managed = "Other")]
    pub unsafe fn possessiveForm(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setPossessiveForm:")]
    pub unsafe fn setPossessiveForm(&self, possessive_form: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "possessiveAdjectiveForm", managed = "Other")]
    pub unsafe fn possessiveAdjectiveForm(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setPossessiveAdjectiveForm:")]
    pub unsafe fn setPossessiveAdjectiveForm(&self, possessive_adjective_form: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "reflexiveForm", managed = "Other")]
    pub unsafe fn reflexiveForm(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setReflexiveForm:")]
    pub unsafe fn setReflexiveForm(&self, reflexive_form: Option<&NSString>);
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSMorphology")]
    pub type NSMorphology;

    #[objc2::method(sel = "isUnspecified")]
    pub unsafe fn isUnspecified(&self) -> bool;

    #[objc2::method(sel = "userMorphology", managed = "Other")]
    pub unsafe fn userMorphology() -> Id<NSMorphology>;
}
