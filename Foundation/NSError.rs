//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

pub type NSErrorDomain = NSString;

extern_static!(NSCocoaErrorDomain: &'static NSErrorDomain);

extern_static!(NSPOSIXErrorDomain: &'static NSErrorDomain);

extern_static!(NSOSStatusErrorDomain: &'static NSErrorDomain);

extern_static!(NSMachErrorDomain: &'static NSErrorDomain);

pub type NSErrorUserInfoKey = NSString;

extern_static!(NSUnderlyingErrorKey: &'static NSErrorUserInfoKey);

extern_static!(NSMultipleUnderlyingErrorsKey: &'static NSErrorUserInfoKey);

extern_static!(NSLocalizedDescriptionKey: &'static NSErrorUserInfoKey);

extern_static!(NSLocalizedFailureReasonErrorKey: &'static NSErrorUserInfoKey);

extern_static!(NSLocalizedRecoverySuggestionErrorKey: &'static NSErrorUserInfoKey);

extern_static!(NSLocalizedRecoveryOptionsErrorKey: &'static NSErrorUserInfoKey);

extern_static!(NSRecoveryAttempterErrorKey: &'static NSErrorUserInfoKey);

extern_static!(NSHelpAnchorErrorKey: &'static NSErrorUserInfoKey);

extern_static!(NSDebugDescriptionErrorKey: &'static NSErrorUserInfoKey);

extern_static!(NSLocalizedFailureErrorKey: &'static NSErrorUserInfoKey);

extern_static!(NSStringEncodingErrorKey: &'static NSErrorUserInfoKey);

extern_static!(NSURLErrorKey: &'static NSErrorUserInfoKey);

extern_static!(NSFilePathErrorKey: &'static NSErrorUserInfoKey);

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSError")]
    #[derive(PartialEq, Eq, Hash)]
    pub type NSError;
}

#[cfg(feature = "Foundation_NSError")]
unsafe impl NSCoding for NSError {}

#[cfg(feature = "Foundation_NSError")]
unsafe impl NSObjectProtocol for NSError {}

#[cfg(feature = "Foundation_NSError")]
unsafe impl NSSecureCoding for NSError {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSError")]
    pub type NSError;

    #[cfg(feature = "Foundation_NSDictionary")]
    #[objc2::method(sel = "initWithDomain:code:userInfo:", managed = "Init")]
    pub unsafe fn initWithDomain_code_userInfo(
        this: Option<Allocated<Self>>,
        domain: &NSErrorDomain,
        code: NSInteger,
        dict: Option<&NSDictionary<NSErrorUserInfoKey, Object>>,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSDictionary")]
    #[objc2::method(sel = "errorWithDomain:code:userInfo:", managed = "Other")]
    pub unsafe fn errorWithDomain_code_userInfo(
        domain: &NSErrorDomain,
        code: NSInteger,
        dict: Option<&NSDictionary<NSErrorUserInfoKey, Object>>,
    ) -> Id<Self>;

    #[objc2::method(sel = "domain", managed = "Other")]
    pub fn domain(&self) -> Id<NSErrorDomain>;

    #[objc2::method(sel = "code")]
    pub fn code(&self) -> NSInteger;

    #[cfg(feature = "Foundation_NSDictionary")]
    #[objc2::method(sel = "userInfo", managed = "Other")]
    pub fn userInfo(&self) -> Id<NSDictionary<NSErrorUserInfoKey, Object>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "localizedDescription", managed = "Other")]
    pub fn localizedDescription(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "localizedFailureReason", managed = "Other")]
    pub unsafe fn localizedFailureReason(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "localizedRecoverySuggestion", managed = "Other")]
    pub unsafe fn localizedRecoverySuggestion(&self) -> Option<Id<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "localizedRecoveryOptions", managed = "Other")]
    pub unsafe fn localizedRecoveryOptions(&self) -> Option<Id<NSArray<NSString>>>;

    #[objc2::method(sel = "recoveryAttempter", managed = "Other")]
    pub unsafe fn recoveryAttempter(&self) -> Option<Id<Object>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "helpAnchor", managed = "Other")]
    pub unsafe fn helpAnchor(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "underlyingErrors", managed = "Other")]
    pub unsafe fn underlyingErrors(&self) -> Id<NSArray<NSError>>;

    #[objc2::method(sel = "setUserInfoValueProviderForDomain:provider:")]
    pub unsafe fn setUserInfoValueProviderForDomain_provider(
        error_domain: &NSErrorDomain,
        provider: Option<&Block<(NonNull<NSError>, NonNull<NSErrorUserInfoKey>), *mut Object>>,
    );

    #[objc2::method(sel = "userInfoValueProviderForDomain:")]
    pub unsafe fn userInfoValueProviderForDomain(
        error_domain: &NSErrorDomain,
    ) -> *mut Block<(NonNull<NSError>, NonNull<NSErrorUserInfoKey>), *mut Object>;
}
