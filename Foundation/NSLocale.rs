//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

typed_enum!(
    pub type NSLocaleKey = NSString;
);

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSLocale")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSLocale;
}

#[cfg(feature = "Foundation_NSLocale")]
unsafe impl NSCoding for NSLocale {}

#[cfg(feature = "Foundation_NSLocale")]
unsafe impl NSObjectProtocol for NSLocale {}

#[cfg(feature = "Foundation_NSLocale")]
unsafe impl NSSecureCoding for NSLocale {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSLocale")]
    pub type NSLocale;

    #[objc2::method(sel = "objectForKey:", managed = "Other")]
    pub unsafe fn objectForKey(&self, key: &NSLocaleKey) -> Option<Id<Object>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "displayNameForKey:value:", managed = "Other")]
    pub unsafe fn displayNameForKey_value(
        &self,
        key: &NSLocaleKey,
        value: &Object,
    ) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithLocaleIdentifier:", managed = "Init")]
    pub unsafe fn initWithLocaleIdentifier(
        this: Option<Allocated<Self>>,
        string: &NSString,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, coder: &NSCoder)
        -> Option<Id<Self>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSLocale")]
    pub type NSLocale;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "localeIdentifier", managed = "Other")]
    pub unsafe fn localeIdentifier(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "localizedStringForLocaleIdentifier:", managed = "Other")]
    pub unsafe fn localizedStringForLocaleIdentifier(
        &self,
        locale_identifier: &NSString,
    ) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "languageCode", managed = "Other")]
    pub unsafe fn languageCode(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "localizedStringForLanguageCode:", managed = "Other")]
    pub unsafe fn localizedStringForLanguageCode(
        &self,
        language_code: &NSString,
    ) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "countryCode", managed = "Other")]
    pub unsafe fn countryCode(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "localizedStringForCountryCode:", managed = "Other")]
    pub unsafe fn localizedStringForCountryCode(
        &self,
        country_code: &NSString,
    ) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "scriptCode", managed = "Other")]
    pub unsafe fn scriptCode(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "localizedStringForScriptCode:", managed = "Other")]
    pub unsafe fn localizedStringForScriptCode(
        &self,
        script_code: &NSString,
    ) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "variantCode", managed = "Other")]
    pub unsafe fn variantCode(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "localizedStringForVariantCode:", managed = "Other")]
    pub unsafe fn localizedStringForVariantCode(
        &self,
        variant_code: &NSString,
    ) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSCharacterSet")]
    #[objc2::method(sel = "exemplarCharacterSet", managed = "Other")]
    pub unsafe fn exemplarCharacterSet(&self) -> Id<NSCharacterSet>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "calendarIdentifier", managed = "Other")]
    pub unsafe fn calendarIdentifier(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "localizedStringForCalendarIdentifier:", managed = "Other")]
    pub unsafe fn localizedStringForCalendarIdentifier(
        &self,
        calendar_identifier: &NSString,
    ) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "collationIdentifier", managed = "Other")]
    pub unsafe fn collationIdentifier(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "localizedStringForCollationIdentifier:", managed = "Other")]
    pub unsafe fn localizedStringForCollationIdentifier(
        &self,
        collation_identifier: &NSString,
    ) -> Option<Id<NSString>>;

    #[objc2::method(sel = "usesMetricSystem")]
    pub unsafe fn usesMetricSystem(&self) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "decimalSeparator", managed = "Other")]
    pub unsafe fn decimalSeparator(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "groupingSeparator", managed = "Other")]
    pub unsafe fn groupingSeparator(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "currencySymbol", managed = "Other")]
    pub unsafe fn currencySymbol(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "currencyCode", managed = "Other")]
    pub unsafe fn currencyCode(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "localizedStringForCurrencyCode:", managed = "Other")]
    pub unsafe fn localizedStringForCurrencyCode(
        &self,
        currency_code: &NSString,
    ) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "collatorIdentifier", managed = "Other")]
    pub unsafe fn collatorIdentifier(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "localizedStringForCollatorIdentifier:", managed = "Other")]
    pub unsafe fn localizedStringForCollatorIdentifier(
        &self,
        collator_identifier: &NSString,
    ) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "quotationBeginDelimiter", managed = "Other")]
    pub unsafe fn quotationBeginDelimiter(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "quotationEndDelimiter", managed = "Other")]
    pub unsafe fn quotationEndDelimiter(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "alternateQuotationBeginDelimiter", managed = "Other")]
    pub unsafe fn alternateQuotationBeginDelimiter(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "alternateQuotationEndDelimiter", managed = "Other")]
    pub unsafe fn alternateQuotationEndDelimiter(&self) -> Id<NSString>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSLocale")]
    pub type NSLocale;

    #[objc2::method(sel = "autoupdatingCurrentLocale", managed = "Other")]
    pub unsafe fn autoupdatingCurrentLocale() -> Id<NSLocale>;

    #[objc2::method(sel = "currentLocale", managed = "Other")]
    pub unsafe fn currentLocale() -> Id<NSLocale>;

    #[objc2::method(sel = "systemLocale", managed = "Other")]
    pub unsafe fn systemLocale() -> Id<NSLocale>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "localeWithLocaleIdentifier:", managed = "Other")]
    pub unsafe fn localeWithLocaleIdentifier(ident: &NSString) -> Id<Self>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;
}

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSLocaleLanguageDirection {
    NSLocaleLanguageDirectionUnknown = 0,
    NSLocaleLanguageDirectionLeftToRight = 1,
    NSLocaleLanguageDirectionRightToLeft = 2,
    NSLocaleLanguageDirectionTopToBottom = 3,
    NSLocaleLanguageDirectionBottomToTop = 4,
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSLocale")]
    pub type NSLocale;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "availableLocaleIdentifiers", managed = "Other")]
    pub unsafe fn availableLocaleIdentifiers() -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "ISOLanguageCodes", managed = "Other")]
    pub unsafe fn ISOLanguageCodes() -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "ISOCountryCodes", managed = "Other")]
    pub unsafe fn ISOCountryCodes() -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "ISOCurrencyCodes", managed = "Other")]
    pub unsafe fn ISOCurrencyCodes() -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "commonISOCurrencyCodes", managed = "Other")]
    pub unsafe fn commonISOCurrencyCodes() -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "preferredLanguages", managed = "Other")]
    pub unsafe fn preferredLanguages() -> Id<NSArray<NSString>>;

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "componentsFromLocaleIdentifier:", managed = "Other")]
    pub unsafe fn componentsFromLocaleIdentifier(
        string: &NSString,
    ) -> Id<NSDictionary<NSString, NSString>>;

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "localeIdentifierFromComponents:", managed = "Other")]
    pub unsafe fn localeIdentifierFromComponents(
        dict: &NSDictionary<NSString, NSString>,
    ) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "canonicalLocaleIdentifierFromString:", managed = "Other")]
    pub unsafe fn canonicalLocaleIdentifierFromString(string: &NSString) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "canonicalLanguageIdentifierFromString:", managed = "Other")]
    pub unsafe fn canonicalLanguageIdentifierFromString(string: &NSString) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "localeIdentifierFromWindowsLocaleCode:", managed = "Other")]
    pub unsafe fn localeIdentifierFromWindowsLocaleCode(lcid: u32) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "windowsLocaleCodeFromLocaleIdentifier:")]
    pub unsafe fn windowsLocaleCodeFromLocaleIdentifier(locale_identifier: &NSString) -> u32;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "characterDirectionForLanguage:")]
    pub unsafe fn characterDirectionForLanguage(
        iso_lang_code: &NSString,
    ) -> NSLocaleLanguageDirection;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "lineDirectionForLanguage:")]
    pub unsafe fn lineDirectionForLanguage(iso_lang_code: &NSString) -> NSLocaleLanguageDirection;
}

extern_static!(NSCurrentLocaleDidChangeNotification: &'static NSNotificationName);

extern_static!(NSLocaleIdentifier: &'static NSLocaleKey);

extern_static!(NSLocaleLanguageCode: &'static NSLocaleKey);

extern_static!(NSLocaleCountryCode: &'static NSLocaleKey);

extern_static!(NSLocaleScriptCode: &'static NSLocaleKey);

extern_static!(NSLocaleVariantCode: &'static NSLocaleKey);

extern_static!(NSLocaleExemplarCharacterSet: &'static NSLocaleKey);

extern_static!(NSLocaleCalendar: &'static NSLocaleKey);

extern_static!(NSLocaleCollationIdentifier: &'static NSLocaleKey);

extern_static!(NSLocaleUsesMetricSystem: &'static NSLocaleKey);

extern_static!(NSLocaleMeasurementSystem: &'static NSLocaleKey);

extern_static!(NSLocaleDecimalSeparator: &'static NSLocaleKey);

extern_static!(NSLocaleGroupingSeparator: &'static NSLocaleKey);

extern_static!(NSLocaleCurrencySymbol: &'static NSLocaleKey);

extern_static!(NSLocaleCurrencyCode: &'static NSLocaleKey);

extern_static!(NSLocaleCollatorIdentifier: &'static NSLocaleKey);

extern_static!(NSLocaleQuotationBeginDelimiterKey: &'static NSLocaleKey);

extern_static!(NSLocaleQuotationEndDelimiterKey: &'static NSLocaleKey);

extern_static!(NSLocaleAlternateQuotationBeginDelimiterKey: &'static NSLocaleKey);

extern_static!(NSLocaleAlternateQuotationEndDelimiterKey: &'static NSLocaleKey);

extern_static!(NSGregorianCalendar: &'static NSString);

extern_static!(NSBuddhistCalendar: &'static NSString);

extern_static!(NSChineseCalendar: &'static NSString);

extern_static!(NSHebrewCalendar: &'static NSString);

extern_static!(NSIslamicCalendar: &'static NSString);

extern_static!(NSIslamicCivilCalendar: &'static NSString);

extern_static!(NSJapaneseCalendar: &'static NSString);

extern_static!(NSRepublicOfChinaCalendar: &'static NSString);

extern_static!(NSPersianCalendar: &'static NSString);

extern_static!(NSIndianCalendar: &'static NSString);

extern_static!(NSISO8601Calendar: &'static NSString);
