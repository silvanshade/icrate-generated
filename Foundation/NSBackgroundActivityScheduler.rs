//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSBackgroundActivityResult {
    NSBackgroundActivityResultFinished = 1,
    NSBackgroundActivityResultDeferred = 2,
}

pub type NSBackgroundActivityCompletionHandler = *mut Block<(NSBackgroundActivityResult,), ()>;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSBackgroundActivityScheduler")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSBackgroundActivityScheduler;
}

#[cfg(feature = "Foundation_NSBackgroundActivityScheduler")]
unsafe impl NSObjectProtocol for NSBackgroundActivityScheduler {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSBackgroundActivityScheduler")]
    pub type NSBackgroundActivityScheduler;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithIdentifier:", managed = "Init")]
    pub unsafe fn initWithIdentifier(
        this: Option<Allocated<Self>>,
        identifier: &NSString,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "identifier", managed = "Other")]
    pub unsafe fn identifier(&self) -> Id<NSString>;

    #[objc2::method(sel = "qualityOfService")]
    pub unsafe fn qualityOfService(&self) -> NSQualityOfService;

    #[objc2::method(sel = "setQualityOfService:")]
    pub unsafe fn setQualityOfService(&self, quality_of_service: NSQualityOfService);

    #[objc2::method(sel = "repeats")]
    pub unsafe fn repeats(&self) -> bool;

    #[objc2::method(sel = "setRepeats:")]
    pub unsafe fn setRepeats(&self, repeats: bool);

    #[objc2::method(sel = "interval")]
    pub unsafe fn interval(&self) -> NSTimeInterval;

    #[objc2::method(sel = "setInterval:")]
    pub unsafe fn setInterval(&self, interval: NSTimeInterval);

    #[objc2::method(sel = "tolerance")]
    pub unsafe fn tolerance(&self) -> NSTimeInterval;

    #[objc2::method(sel = "setTolerance:")]
    pub unsafe fn setTolerance(&self, tolerance: NSTimeInterval);

    #[objc2::method(sel = "scheduleWithBlock:")]
    pub unsafe fn scheduleWithBlock(
        &self,
        block: &Block<(NSBackgroundActivityCompletionHandler,), ()>,
    );

    #[objc2::method(sel = "invalidate")]
    pub unsafe fn invalidate(&self);

    #[objc2::method(sel = "shouldDefer")]
    pub unsafe fn shouldDefer(&self) -> bool;
}
