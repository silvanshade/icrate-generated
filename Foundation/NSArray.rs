//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSArray")]
    #[derive(PartialEq, Eq, Hash)]
    pub type NSArray<ObjectType: Message = Object, ObjectTypeOwnership: Ownership = Shared>;
}

#[cfg(feature = "Foundation_NSArray")]
unsafe impl<ObjectType: Message, ObjectTypeOwnership: Ownership> NSCoding
    for NSArray<ObjectType, ObjectTypeOwnership>
{
}

#[cfg(feature = "Foundation_NSArray")]
unsafe impl<ObjectType: Message, ObjectTypeOwnership: Ownership> NSFastEnumeration
    for NSArray<ObjectType, ObjectTypeOwnership>
{
}

#[cfg(feature = "Foundation_NSArray")]
unsafe impl<ObjectType: Message, ObjectTypeOwnership: Ownership> NSObjectProtocol
    for NSArray<ObjectType, ObjectTypeOwnership>
{
}

#[cfg(feature = "Foundation_NSArray")]
unsafe impl<ObjectType: Message, ObjectTypeOwnership: Ownership> NSSecureCoding
    for NSArray<ObjectType, ObjectTypeOwnership>
{
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSArray")]
    pub type NSArray<ObjectType: Message = Object, ObjectTypeOwnership: Ownership = Shared>;

    #[objc2::method(sel = "count")]
    pub fn count(&self) -> NSUInteger;

    #[objc2::method(sel = "objectAtIndex:", managed = "Other")]
    pub unsafe fn objectAtIndex(&self, index: NSUInteger) -> Id<ObjectType, ObjectTypeOwnership>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "initWithObjects:count:", managed = "Init")]
    pub unsafe fn initWithObjects_count(
        this: Option<Allocated<Self>>,
        objects: *mut NonNull<ObjectType>,
        cnt: NSUInteger,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, coder: &NSCoder)
        -> Option<Id<Self>>;
}

#[ns_options]
#[underlying(NSUInteger)]
pub enum NSBinarySearchingOptions {
    NSBinarySearchingFirstEqual = 1 << 8,
    NSBinarySearchingLastEqual = 1 << 9,
    NSBinarySearchingInsertionIndex = 1 << 10,
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSArray")]
    pub type NSArray<ObjectType: Message = Object, ObjectTypeOwnership: Ownership = Shared>;

    #[objc2::method(sel = "arrayByAddingObject:", managed = "Other")]
    pub unsafe fn arrayByAddingObject(&self, an_object: &ObjectType) -> Id<NSArray<ObjectType>>;

    #[objc2::method(sel = "arrayByAddingObjectsFromArray:", managed = "Other")]
    pub unsafe fn arrayByAddingObjectsFromArray(
        &self,
        other_array: &NSArray<ObjectType>,
    ) -> Id<NSArray<ObjectType>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "componentsJoinedByString:", managed = "Other")]
    pub unsafe fn componentsJoinedByString(&self, separator: &NSString) -> Id<NSString>;

    #[objc2::method(sel = "containsObject:")]
    pub unsafe fn containsObject(&self, an_object: &ObjectType) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "description", managed = "Other")]
    pub unsafe fn description(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "descriptionWithLocale:", managed = "Other")]
    pub unsafe fn descriptionWithLocale(&self, locale: Option<&Object>) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "descriptionWithLocale:indent:", managed = "Other")]
    pub unsafe fn descriptionWithLocale_indent(
        &self,
        locale: Option<&Object>,
        level: NSUInteger,
    ) -> Id<NSString>;

    #[objc2::method(sel = "firstObjectCommonWithArray:", managed = "Other")]
    pub unsafe fn firstObjectCommonWithArray(
        &self,
        other_array: &NSArray<ObjectType>,
    ) -> Option<Id<ObjectType, ObjectTypeOwnership>>;

    #[objc2::method(sel = "getObjects:range:")]
    pub unsafe fn getObjects_range(&self, objects: NonNull<NonNull<ObjectType>>, range: NSRange);

    #[objc2::method(sel = "indexOfObject:")]
    pub unsafe fn indexOfObject(&self, an_object: &ObjectType) -> NSUInteger;

    #[objc2::method(sel = "indexOfObject:inRange:")]
    pub unsafe fn indexOfObject_inRange(
        &self,
        an_object: &ObjectType,
        range: NSRange,
    ) -> NSUInteger;

    #[objc2::method(sel = "indexOfObjectIdenticalTo:")]
    pub unsafe fn indexOfObjectIdenticalTo(&self, an_object: &ObjectType) -> NSUInteger;

    #[objc2::method(sel = "indexOfObjectIdenticalTo:inRange:")]
    pub unsafe fn indexOfObjectIdenticalTo_inRange(
        &self,
        an_object: &ObjectType,
        range: NSRange,
    ) -> NSUInteger;

    #[objc2::method(sel = "isEqualToArray:")]
    pub unsafe fn isEqualToArray(&self, other_array: &NSArray<ObjectType>) -> bool;

    #[objc2::method(sel = "firstObject", managed = "Other")]
    pub unsafe fn firstObject(&self) -> Option<Id<ObjectType, ObjectTypeOwnership>>;

    #[objc2::method(sel = "lastObject", managed = "Other")]
    pub unsafe fn lastObject(&self) -> Option<Id<ObjectType, ObjectTypeOwnership>>;

    #[cfg(feature = "Foundation_NSEnumerator")]
    #[objc2::method(sel = "objectEnumerator", managed = "Other")]
    pub unsafe fn objectEnumerator(&self) -> Id<NSEnumerator<ObjectType>>;

    #[cfg(feature = "Foundation_NSEnumerator")]
    #[objc2::method(sel = "reverseObjectEnumerator", managed = "Other")]
    pub unsafe fn reverseObjectEnumerator(&self) -> Id<NSEnumerator<ObjectType>>;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "sortedArrayHint", managed = "Other")]
    pub unsafe fn sortedArrayHint(&self) -> Id<NSData>;

    #[objc2::method(sel = "sortedArrayUsingFunction:context:", managed = "Other")]
    pub unsafe fn sortedArrayUsingFunction_context(
        &self,
        comparator: unsafe extern "C" fn(
            NonNull<ObjectType>,
            NonNull<ObjectType>,
            *mut c_void,
        ) -> NSInteger,
        context: *mut c_void,
    ) -> Id<NSArray<ObjectType>>;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "sortedArrayUsingFunction:context:hint:", managed = "Other")]
    pub unsafe fn sortedArrayUsingFunction_context_hint(
        &self,
        comparator: unsafe extern "C" fn(
            NonNull<ObjectType>,
            NonNull<ObjectType>,
            *mut c_void,
        ) -> NSInteger,
        context: *mut c_void,
        hint: Option<&NSData>,
    ) -> Id<NSArray<ObjectType>>;

    #[objc2::method(sel = "sortedArrayUsingSelector:", managed = "Other")]
    pub unsafe fn sortedArrayUsingSelector(&self, comparator: Sel) -> Id<NSArray<ObjectType>>;

    #[objc2::method(sel = "subarrayWithRange:", managed = "Other")]
    pub unsafe fn subarrayWithRange(&self, range: NSRange) -> Id<NSArray<ObjectType>>;

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
    #[objc2::method(sel = "writeToURL:error:", throws)]
    pub unsafe fn writeToURL_error(&self, url: &NSURL) -> Result<(), Id<NSError>>;

    #[objc2::method(sel = "makeObjectsPerformSelector:")]
    pub unsafe fn makeObjectsPerformSelector(&self, a_selector: Sel);

    #[objc2::method(sel = "makeObjectsPerformSelector:withObject:")]
    pub unsafe fn makeObjectsPerformSelector_withObject(
        &self,
        a_selector: Sel,
        argument: Option<&Object>,
    );

    #[cfg(feature = "Foundation_NSIndexSet")]
    #[objc2::method(sel = "objectsAtIndexes:", managed = "Other")]
    pub unsafe fn objectsAtIndexes(&self, indexes: &NSIndexSet) -> Id<NSArray<ObjectType>>;

    #[objc2::method(sel = "objectAtIndexedSubscript:", managed = "Other")]
    pub unsafe fn objectAtIndexedSubscript(
        &self,
        idx: NSUInteger,
    ) -> Id<ObjectType, ObjectTypeOwnership>;

    #[objc2::method(sel = "enumerateObjectsUsingBlock:")]
    pub unsafe fn enumerateObjectsUsingBlock(
        &self,
        block: &Block<(NonNull<ObjectType>, NSUInteger, NonNull<Bool>), ()>,
    );

    #[objc2::method(sel = "enumerateObjectsWithOptions:usingBlock:")]
    pub unsafe fn enumerateObjectsWithOptions_usingBlock(
        &self,
        opts: NSEnumerationOptions,
        block: &Block<(NonNull<ObjectType>, NSUInteger, NonNull<Bool>), ()>,
    );

    #[cfg(feature = "Foundation_NSIndexSet")]
    #[objc2::method(sel = "enumerateObjectsAtIndexes:options:usingBlock:")]
    pub unsafe fn enumerateObjectsAtIndexes_options_usingBlock(
        &self,
        s: &NSIndexSet,
        opts: NSEnumerationOptions,
        block: &Block<(NonNull<ObjectType>, NSUInteger, NonNull<Bool>), ()>,
    );

    #[objc2::method(sel = "indexOfObjectPassingTest:")]
    pub unsafe fn indexOfObjectPassingTest(
        &self,
        predicate: &Block<(NonNull<ObjectType>, NSUInteger, NonNull<Bool>), Bool>,
    ) -> NSUInteger;

    #[objc2::method(sel = "indexOfObjectWithOptions:passingTest:")]
    pub unsafe fn indexOfObjectWithOptions_passingTest(
        &self,
        opts: NSEnumerationOptions,
        predicate: &Block<(NonNull<ObjectType>, NSUInteger, NonNull<Bool>), Bool>,
    ) -> NSUInteger;

    #[cfg(feature = "Foundation_NSIndexSet")]
    #[objc2::method(sel = "indexOfObjectAtIndexes:options:passingTest:")]
    pub unsafe fn indexOfObjectAtIndexes_options_passingTest(
        &self,
        s: &NSIndexSet,
        opts: NSEnumerationOptions,
        predicate: &Block<(NonNull<ObjectType>, NSUInteger, NonNull<Bool>), Bool>,
    ) -> NSUInteger;

    #[cfg(feature = "Foundation_NSIndexSet")]
    #[objc2::method(sel = "indexesOfObjectsPassingTest:", managed = "Other")]
    pub unsafe fn indexesOfObjectsPassingTest(
        &self,
        predicate: &Block<(NonNull<ObjectType>, NSUInteger, NonNull<Bool>), Bool>,
    ) -> Id<NSIndexSet>;

    #[cfg(feature = "Foundation_NSIndexSet")]
    #[objc2::method(sel = "indexesOfObjectsWithOptions:passingTest:", managed = "Other")]
    pub unsafe fn indexesOfObjectsWithOptions_passingTest(
        &self,
        opts: NSEnumerationOptions,
        predicate: &Block<(NonNull<ObjectType>, NSUInteger, NonNull<Bool>), Bool>,
    ) -> Id<NSIndexSet>;

    #[cfg(feature = "Foundation_NSIndexSet")]
    #[objc2::method(
        sel = "indexesOfObjectsAtIndexes:options:passingTest:",
        managed = "Other"
    )]
    pub unsafe fn indexesOfObjectsAtIndexes_options_passingTest(
        &self,
        s: &NSIndexSet,
        opts: NSEnumerationOptions,
        predicate: &Block<(NonNull<ObjectType>, NSUInteger, NonNull<Bool>), Bool>,
    ) -> Id<NSIndexSet>;

    #[objc2::method(sel = "sortedArrayUsingComparator:", managed = "Other")]
    pub unsafe fn sortedArrayUsingComparator(&self, cmptr: NSComparator)
        -> Id<NSArray<ObjectType>>;

    #[objc2::method(sel = "sortedArrayWithOptions:usingComparator:", managed = "Other")]
    pub unsafe fn sortedArrayWithOptions_usingComparator(
        &self,
        opts: NSSortOptions,
        cmptr: NSComparator,
    ) -> Id<NSArray<ObjectType>>;

    #[objc2::method(sel = "indexOfObject:inSortedRange:options:usingComparator:")]
    pub unsafe fn indexOfObject_inSortedRange_options_usingComparator(
        &self,
        obj: &ObjectType,
        r: NSRange,
        opts: NSBinarySearchingOptions,
        cmp: NSComparator,
    ) -> NSUInteger;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSArray")]
    pub type NSArray<ObjectType: Message = Object, ObjectTypeOwnership: Ownership = Shared>;

    #[objc2::method(sel = "array", managed = "Other")]
    pub unsafe fn array() -> Id<Self>;

    #[objc2::method(sel = "arrayWithObject:", managed = "Other")]
    pub unsafe fn arrayWithObject(an_object: &ObjectType) -> Id<Self>;

    #[objc2::method(sel = "arrayWithObjects:count:", managed = "Other")]
    pub unsafe fn arrayWithObjects_count(
        objects: NonNull<NonNull<ObjectType>>,
        cnt: NSUInteger,
    ) -> Id<Self>;

    #[objc2::method(sel = "arrayWithArray:", managed = "Other")]
    pub unsafe fn arrayWithArray(array: &NSArray<ObjectType>) -> Id<Self>;

    #[objc2::method(sel = "initWithArray:", managed = "Init")]
    pub unsafe fn initWithArray(
        this: Option<Allocated<Self>>,
        array: &NSArray<ObjectType>,
    ) -> Id<Self>;

    #[objc2::method(sel = "initWithArray:copyItems:", managed = "Init")]
    pub unsafe fn initWithArray_copyItems(
        this: Option<Allocated<Self>>,
        array: &NSArray<ObjectType>,
        flag: bool,
    ) -> Id<Self>;

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
    #[objc2::method(sel = "arrayWithContentsOfURL:error:", managed = "Other", throws)]
    pub unsafe fn arrayWithContentsOfURL_error(
        url: &NSURL,
    ) -> Result<Id<NSArray<ObjectType>>, Id<NSError>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSArray")]
    pub type NSArray<ObjectType: Message = Object, ObjectTypeOwnership: Ownership = Shared>;

    #[cfg(feature = "Foundation_NSOrderedCollectionDifference")]
    #[objc2::method(
        sel = "differenceFromArray:withOptions:usingEquivalenceTest:",
        managed = "Other"
    )]
    pub unsafe fn differenceFromArray_withOptions_usingEquivalenceTest(
        &self,
        other: &NSArray<ObjectType>,
        options: NSOrderedCollectionDifferenceCalculationOptions,
        block: &Block<(NonNull<ObjectType>, NonNull<ObjectType>), Bool>,
    ) -> Id<NSOrderedCollectionDifference<ObjectType>>;

    #[cfg(feature = "Foundation_NSOrderedCollectionDifference")]
    #[objc2::method(sel = "differenceFromArray:withOptions:", managed = "Other")]
    pub unsafe fn differenceFromArray_withOptions(
        &self,
        other: &NSArray<ObjectType>,
        options: NSOrderedCollectionDifferenceCalculationOptions,
    ) -> Id<NSOrderedCollectionDifference<ObjectType>>;

    #[cfg(feature = "Foundation_NSOrderedCollectionDifference")]
    #[objc2::method(sel = "differenceFromArray:", managed = "Other")]
    pub unsafe fn differenceFromArray(
        &self,
        other: &NSArray<ObjectType>,
    ) -> Id<NSOrderedCollectionDifference<ObjectType>>;

    #[cfg(feature = "Foundation_NSOrderedCollectionDifference")]
    #[objc2::method(sel = "arrayByApplyingDifference:", managed = "Other")]
    pub unsafe fn arrayByApplyingDifference(
        &self,
        difference: &NSOrderedCollectionDifference<ObjectType>,
    ) -> Option<Id<NSArray<ObjectType>>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSArray")]
    pub type NSArray<ObjectType: Message = Object, ObjectTypeOwnership: Ownership = Shared>;

    #[deprecated = "Use -getObjects:range: instead"]
    #[objc2::method(sel = "getObjects:")]
    pub unsafe fn getObjects(&self, objects: NonNull<NonNull<ObjectType>>);

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "arrayWithContentsOfFile:", managed = "Other")]
    pub unsafe fn arrayWithContentsOfFile(path: &NSString) -> Option<Id<NSArray<ObjectType>>>;

    #[cfg(feature = "Foundation_NSURL")]
    #[deprecated]
    #[objc2::method(sel = "arrayWithContentsOfURL:", managed = "Other")]
    pub unsafe fn arrayWithContentsOfURL(url: &NSURL) -> Option<Id<NSArray<ObjectType>>>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "writeToFile:atomically:")]
    pub unsafe fn writeToFile_atomically(&self, path: &NSString, use_auxiliary_file: bool) -> bool;

    #[cfg(feature = "Foundation_NSURL")]
    #[deprecated]
    #[objc2::method(sel = "writeToURL:atomically:")]
    pub unsafe fn writeToURL_atomically(&self, url: &NSURL, atomically: bool) -> bool;
}

#[objc2::interface(
    unsafe super = NSArray<ObjectType, ObjectTypeOwnership, >,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSMutableArray")]
    #[derive(PartialEq, Eq, Hash)]
    pub type NSMutableArray<ObjectType: Message = Object, ObjectTypeOwnership: Ownership = Shared>;
}

#[cfg(feature = "Foundation_NSMutableArray")]
unsafe impl<ObjectType: Message, ObjectTypeOwnership: Ownership> NSCoding
    for NSMutableArray<ObjectType, ObjectTypeOwnership>
{
}

#[cfg(feature = "Foundation_NSMutableArray")]
unsafe impl<ObjectType: Message, ObjectTypeOwnership: Ownership> NSFastEnumeration
    for NSMutableArray<ObjectType, ObjectTypeOwnership>
{
}

#[cfg(feature = "Foundation_NSMutableArray")]
unsafe impl<ObjectType: Message, ObjectTypeOwnership: Ownership> NSObjectProtocol
    for NSMutableArray<ObjectType, ObjectTypeOwnership>
{
}

#[cfg(feature = "Foundation_NSMutableArray")]
unsafe impl<ObjectType: Message, ObjectTypeOwnership: Ownership> NSSecureCoding
    for NSMutableArray<ObjectType, ObjectTypeOwnership>
{
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSMutableArray")]
    pub type NSMutableArray<ObjectType: Message = Object, ObjectTypeOwnership: Ownership = Shared>;

    #[objc2::method(sel = "addObject:")]
    pub unsafe fn addObject(&mut self, an_object: &ObjectType);

    #[objc2::method(sel = "insertObject:atIndex:")]
    pub unsafe fn insertObject_atIndex(&mut self, an_object: &ObjectType, index: NSUInteger);

    #[objc2::method(sel = "removeLastObject")]
    pub unsafe fn removeLastObject(&mut self);

    #[objc2::method(sel = "removeObjectAtIndex:")]
    pub unsafe fn removeObjectAtIndex(&mut self, index: NSUInteger);

    #[objc2::method(sel = "replaceObjectAtIndex:withObject:")]
    pub unsafe fn replaceObjectAtIndex_withObject(
        &mut self,
        index: NSUInteger,
        an_object: &ObjectType,
    );

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self, Owned>;

    #[objc2::method(sel = "initWithCapacity:", managed = "Init")]
    pub unsafe fn initWithCapacity(
        this: Option<Allocated<Self>>,
        num_items: NSUInteger,
    ) -> Id<Self, Owned>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(
        this: Option<Allocated<Self>>,
        coder: &NSCoder,
    ) -> Option<Id<Self, Owned>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSMutableArray")]
    pub type NSMutableArray<ObjectType: Message = Object, ObjectTypeOwnership: Ownership = Shared>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "addObjectsFromArray:")]
    pub unsafe fn addObjectsFromArray(&self, other_array: &NSArray<ObjectType>);

    #[objc2::method(sel = "exchangeObjectAtIndex:withObjectAtIndex:")]
    pub unsafe fn exchangeObjectAtIndex_withObjectAtIndex(
        &self,
        idx1: NSUInteger,
        idx2: NSUInteger,
    );

    #[objc2::method(sel = "removeAllObjects")]
    pub fn removeAllObjects(&mut self);

    #[objc2::method(sel = "removeObject:inRange:")]
    pub unsafe fn removeObject_inRange(&self, an_object: &ObjectType, range: NSRange);

    #[objc2::method(sel = "removeObject:")]
    pub unsafe fn removeObject(&self, an_object: &ObjectType);

    #[objc2::method(sel = "removeObjectIdenticalTo:inRange:")]
    pub unsafe fn removeObjectIdenticalTo_inRange(&self, an_object: &ObjectType, range: NSRange);

    #[objc2::method(sel = "removeObjectIdenticalTo:")]
    pub unsafe fn removeObjectIdenticalTo(&self, an_object: &ObjectType);

    #[deprecated = "Not supported"]
    #[objc2::method(sel = "removeObjectsFromIndices:numIndices:")]
    pub unsafe fn removeObjectsFromIndices_numIndices(
        &self,
        indices: NonNull<NSUInteger>,
        cnt: NSUInteger,
    );

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "removeObjectsInArray:")]
    pub unsafe fn removeObjectsInArray(&self, other_array: &NSArray<ObjectType>);

    #[objc2::method(sel = "removeObjectsInRange:")]
    pub unsafe fn removeObjectsInRange(&self, range: NSRange);

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "replaceObjectsInRange:withObjectsFromArray:range:")]
    pub unsafe fn replaceObjectsInRange_withObjectsFromArray_range(
        &self,
        range: NSRange,
        other_array: &NSArray<ObjectType>,
        other_range: NSRange,
    );

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "replaceObjectsInRange:withObjectsFromArray:")]
    pub unsafe fn replaceObjectsInRange_withObjectsFromArray(
        &self,
        range: NSRange,
        other_array: &NSArray<ObjectType>,
    );

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "setArray:")]
    pub unsafe fn setArray(&self, other_array: &NSArray<ObjectType>);

    #[objc2::method(sel = "sortUsingFunction:context:")]
    pub unsafe fn sortUsingFunction_context(
        &mut self,
        compare: unsafe extern "C" fn(
            NonNull<ObjectType>,
            NonNull<ObjectType>,
            *mut c_void,
        ) -> NSInteger,
        context: *mut c_void,
    );

    #[objc2::method(sel = "sortUsingSelector:")]
    pub unsafe fn sortUsingSelector(&self, comparator: Sel);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSIndexSet"))]
    #[objc2::method(sel = "insertObjects:atIndexes:")]
    pub unsafe fn insertObjects_atIndexes(
        &self,
        objects: &NSArray<ObjectType>,
        indexes: &NSIndexSet,
    );

    #[cfg(feature = "Foundation_NSIndexSet")]
    #[objc2::method(sel = "removeObjectsAtIndexes:")]
    pub unsafe fn removeObjectsAtIndexes(&self, indexes: &NSIndexSet);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSIndexSet"))]
    #[objc2::method(sel = "replaceObjectsAtIndexes:withObjects:")]
    pub unsafe fn replaceObjectsAtIndexes_withObjects(
        &self,
        indexes: &NSIndexSet,
        objects: &NSArray<ObjectType>,
    );

    #[objc2::method(sel = "setObject:atIndexedSubscript:")]
    pub unsafe fn setObject_atIndexedSubscript(&self, obj: &ObjectType, idx: NSUInteger);

    #[objc2::method(sel = "sortUsingComparator:")]
    pub unsafe fn sortUsingComparator(&self, cmptr: NSComparator);

    #[objc2::method(sel = "sortWithOptions:usingComparator:")]
    pub unsafe fn sortWithOptions_usingComparator(&self, opts: NSSortOptions, cmptr: NSComparator);
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSMutableArray")]
    pub type NSMutableArray<ObjectType: Message = Object, ObjectTypeOwnership: Ownership = Shared>;

    #[objc2::method(sel = "arrayWithCapacity:", managed = "Other")]
    pub unsafe fn arrayWithCapacity(num_items: NSUInteger) -> Id<Self, Owned>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "arrayWithContentsOfFile:", managed = "Other")]
    pub unsafe fn arrayWithContentsOfFile(
        path: &NSString,
    ) -> Option<Id<NSMutableArray<ObjectType>, Owned>>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "arrayWithContentsOfURL:", managed = "Other")]
    pub unsafe fn arrayWithContentsOfURL(
        url: &NSURL,
    ) -> Option<Id<NSMutableArray<ObjectType>, Owned>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSMutableArray")]
    pub type NSMutableArray<ObjectType: Message = Object, ObjectTypeOwnership: Ownership = Shared>;

    #[cfg(feature = "Foundation_NSOrderedCollectionDifference")]
    #[objc2::method(sel = "applyDifference:")]
    pub unsafe fn applyDifference(&self, difference: &NSOrderedCollectionDifference<ObjectType>);
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSArray`
    #[cfg(feature = "Foundation_NSMutableArray")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSMutableArray")]
    pub type NSMutableArray<ObjectType: Message = Object, ObjectTypeOwnership: Ownership = Shared>;

    #[objc2::method(sel = "initWithObjects:count:", managed = "Init")]
    pub unsafe fn initWithObjects_count(
        this: Option<Allocated<Self>>,
        objects: *mut NonNull<ObjectType>,
        cnt: NSUInteger,
    ) -> Id<Self, Owned>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSArray`
        ///
        /// NSArrayCreation
    #[cfg(feature = "Foundation_NSMutableArray")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSMutableArray")]
    pub type NSMutableArray<ObjectType: Message = Object, ObjectTypeOwnership: Ownership = Shared>;

    #[objc2::method(sel = "array", managed = "Other")]
    pub unsafe fn array() -> Id<Self, Owned>;

    #[objc2::method(sel = "arrayWithObject:", managed = "Other")]
    pub unsafe fn arrayWithObject(an_object: &ObjectType) -> Id<Self, Owned>;

    #[objc2::method(sel = "arrayWithObjects:count:", managed = "Other")]
    pub unsafe fn arrayWithObjects_count(
        objects: NonNull<NonNull<ObjectType>>,
        cnt: NSUInteger,
    ) -> Id<Self, Owned>;

    #[objc2::method(sel = "arrayWithArray:", managed = "Other")]
    pub unsafe fn arrayWithArray(array: &NSArray<ObjectType>) -> Id<Self, Owned>;

    #[objc2::method(sel = "initWithArray:", managed = "Init")]
    pub unsafe fn initWithArray(
        this: Option<Allocated<Self>>,
        array: &NSArray<ObjectType>,
    ) -> Id<Self, Owned>;

    #[objc2::method(sel = "initWithArray:copyItems:", managed = "Init")]
    pub unsafe fn initWithArray_copyItems(
        this: Option<Allocated<Self>>,
        array: &NSArray<ObjectType>,
        flag: bool,
    ) -> Id<Self, Owned>;
}
