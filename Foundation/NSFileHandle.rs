//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSFileHandle")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSFileHandle;
}

#[cfg(feature = "Foundation_NSFileHandle")]
unsafe impl NSCoding for NSFileHandle {}

#[cfg(feature = "Foundation_NSFileHandle")]
unsafe impl NSObjectProtocol for NSFileHandle {}

#[cfg(feature = "Foundation_NSFileHandle")]
unsafe impl NSSecureCoding for NSFileHandle {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSFileHandle")]
    pub type NSFileHandle;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "availableData", managed = "Other")]
    pub unsafe fn availableData(&self) -> Id<NSData>;

    #[objc2::method(sel = "initWithFileDescriptor:closeOnDealloc:", managed = "Init")]
    pub unsafe fn initWithFileDescriptor_closeOnDealloc(
        this: Option<Allocated<Self>>,
        fd: c_int,
        closeopt: bool,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, coder: &NSCoder)
        -> Option<Id<Self>>;

    #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "readDataToEndOfFileAndReturnError:", managed = "Other", throws)]
    pub unsafe fn readDataToEndOfFileAndReturnError(&self) -> Result<Id<NSData>, Id<NSError>>;

    #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "readDataUpToLength:error:", managed = "Other", throws)]
    pub unsafe fn readDataUpToLength_error(
        &self,
        length: NSUInteger,
    ) -> Result<Id<NSData>, Id<NSError>>;

    #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "writeData:error:", throws)]
    pub unsafe fn writeData_error(&self, data: &NSData) -> Result<(), Id<NSError>>;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "getOffset:error:", throws)]
    pub unsafe fn getOffset_error(
        &self,
        offset_in_file: NonNull<c_ulonglong>,
    ) -> Result<(), Id<NSError>>;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "seekToEndReturningOffset:error:", throws)]
    pub unsafe fn seekToEndReturningOffset_error(
        &self,
        offset_in_file: *mut c_ulonglong,
    ) -> Result<(), Id<NSError>>;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "seekToOffset:error:", throws)]
    pub unsafe fn seekToOffset_error(&self, offset: c_ulonglong) -> Result<(), Id<NSError>>;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "truncateAtOffset:error:", throws)]
    pub unsafe fn truncateAtOffset_error(&self, offset: c_ulonglong) -> Result<(), Id<NSError>>;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "synchronizeAndReturnError:", throws)]
    pub unsafe fn synchronizeAndReturnError(&self) -> Result<(), Id<NSError>>;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "closeAndReturnError:", throws)]
    pub unsafe fn closeAndReturnError(&self) -> Result<(), Id<NSError>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSFileHandle")]
    pub type NSFileHandle;

    #[objc2::method(sel = "fileHandleWithStandardInput", managed = "Other")]
    pub unsafe fn fileHandleWithStandardInput() -> Id<NSFileHandle>;

    #[objc2::method(sel = "fileHandleWithStandardOutput", managed = "Other")]
    pub unsafe fn fileHandleWithStandardOutput() -> Id<NSFileHandle>;

    #[objc2::method(sel = "fileHandleWithStandardError", managed = "Other")]
    pub unsafe fn fileHandleWithStandardError() -> Id<NSFileHandle>;

    #[objc2::method(sel = "fileHandleWithNullDevice", managed = "Other")]
    pub unsafe fn fileHandleWithNullDevice() -> Id<NSFileHandle>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "fileHandleForReadingAtPath:", managed = "Other")]
    pub unsafe fn fileHandleForReadingAtPath(path: &NSString) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "fileHandleForWritingAtPath:", managed = "Other")]
    pub unsafe fn fileHandleForWritingAtPath(path: &NSString) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "fileHandleForUpdatingAtPath:", managed = "Other")]
    pub unsafe fn fileHandleForUpdatingAtPath(path: &NSString) -> Option<Id<Self>>;

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
    #[objc2::method(sel = "fileHandleForReadingFromURL:error:", managed = "Other", throws)]
    pub unsafe fn fileHandleForReadingFromURL_error(url: &NSURL) -> Result<Id<Self>, Id<NSError>>;

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
    #[objc2::method(sel = "fileHandleForWritingToURL:error:", managed = "Other", throws)]
    pub unsafe fn fileHandleForWritingToURL_error(url: &NSURL) -> Result<Id<Self>, Id<NSError>>;

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
    #[objc2::method(sel = "fileHandleForUpdatingURL:error:", managed = "Other", throws)]
    pub unsafe fn fileHandleForUpdatingURL_error(url: &NSURL) -> Result<Id<Self>, Id<NSError>>;
}

extern_static!(NSFileHandleOperationException: &'static NSExceptionName);

extern_static!(NSFileHandleReadCompletionNotification: &'static NSNotificationName);

extern_static!(NSFileHandleReadToEndOfFileCompletionNotification: &'static NSNotificationName);

extern_static!(NSFileHandleConnectionAcceptedNotification: &'static NSNotificationName);

extern_static!(NSFileHandleDataAvailableNotification: &'static NSNotificationName);

extern_static!(NSFileHandleNotificationDataItem: &'static NSString);

extern_static!(NSFileHandleNotificationFileHandleItem: &'static NSString);

extern_static!(NSFileHandleNotificationMonitorModes: &'static NSString);

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSFileHandle")]
    pub type NSFileHandle;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "readInBackgroundAndNotifyForModes:")]
    pub unsafe fn readInBackgroundAndNotifyForModes(&self, modes: Option<&NSArray<NSRunLoopMode>>);

    #[objc2::method(sel = "readInBackgroundAndNotify")]
    pub unsafe fn readInBackgroundAndNotify(&self);

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "readToEndOfFileInBackgroundAndNotifyForModes:")]
    pub unsafe fn readToEndOfFileInBackgroundAndNotifyForModes(
        &self,
        modes: Option<&NSArray<NSRunLoopMode>>,
    );

    #[objc2::method(sel = "readToEndOfFileInBackgroundAndNotify")]
    pub unsafe fn readToEndOfFileInBackgroundAndNotify(&self);

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "acceptConnectionInBackgroundAndNotifyForModes:")]
    pub unsafe fn acceptConnectionInBackgroundAndNotifyForModes(
        &self,
        modes: Option<&NSArray<NSRunLoopMode>>,
    );

    #[objc2::method(sel = "acceptConnectionInBackgroundAndNotify")]
    pub unsafe fn acceptConnectionInBackgroundAndNotify(&self);

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "waitForDataInBackgroundAndNotifyForModes:")]
    pub unsafe fn waitForDataInBackgroundAndNotifyForModes(
        &self,
        modes: Option<&NSArray<NSRunLoopMode>>,
    );

    #[objc2::method(sel = "waitForDataInBackgroundAndNotify")]
    pub unsafe fn waitForDataInBackgroundAndNotify(&self);

    #[objc2::method(sel = "readabilityHandler")]
    pub unsafe fn readabilityHandler(&self) -> *mut Block<(NonNull<NSFileHandle>,), ()>;

    #[objc2::method(sel = "setReadabilityHandler:")]
    pub unsafe fn setReadabilityHandler(
        &self,
        readability_handler: Option<&Block<(NonNull<NSFileHandle>,), ()>>,
    );

    #[objc2::method(sel = "writeabilityHandler")]
    pub unsafe fn writeabilityHandler(&self) -> *mut Block<(NonNull<NSFileHandle>,), ()>;

    #[objc2::method(sel = "setWriteabilityHandler:")]
    pub unsafe fn setWriteabilityHandler(
        &self,
        writeability_handler: Option<&Block<(NonNull<NSFileHandle>,), ()>>,
    );
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSFileHandle")]
    pub type NSFileHandle;

    #[objc2::method(sel = "initWithFileDescriptor:", managed = "Init")]
    pub unsafe fn initWithFileDescriptor(this: Option<Allocated<Self>>, fd: c_int) -> Id<Self>;

    #[objc2::method(sel = "fileDescriptor")]
    pub unsafe fn fileDescriptor(&self) -> c_int;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSFileHandle")]
    pub type NSFileHandle;

    #[cfg(feature = "Foundation_NSData")]
    #[deprecated]
    #[objc2::method(sel = "readDataToEndOfFile", managed = "Other")]
    pub unsafe fn readDataToEndOfFile(&self) -> Id<NSData>;

    #[cfg(feature = "Foundation_NSData")]
    #[deprecated]
    #[objc2::method(sel = "readDataOfLength:", managed = "Other")]
    pub unsafe fn readDataOfLength(&self, length: NSUInteger) -> Id<NSData>;

    #[cfg(feature = "Foundation_NSData")]
    #[deprecated]
    #[objc2::method(sel = "writeData:")]
    pub unsafe fn writeData(&self, data: &NSData);

    #[deprecated]
    #[objc2::method(sel = "offsetInFile")]
    pub unsafe fn offsetInFile(&self) -> c_ulonglong;

    #[deprecated]
    #[objc2::method(sel = "seekToEndOfFile")]
    pub unsafe fn seekToEndOfFile(&self) -> c_ulonglong;

    #[deprecated]
    #[objc2::method(sel = "seekToFileOffset:")]
    pub unsafe fn seekToFileOffset(&self, offset: c_ulonglong);

    #[deprecated]
    #[objc2::method(sel = "truncateFileAtOffset:")]
    pub unsafe fn truncateFileAtOffset(&self, offset: c_ulonglong);

    #[deprecated]
    #[objc2::method(sel = "synchronizeFile")]
    pub unsafe fn synchronizeFile(&self);

    #[deprecated]
    #[objc2::method(sel = "closeFile")]
    pub unsafe fn closeFile(&self);
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSPipe")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSPipe;
}

#[cfg(feature = "Foundation_NSPipe")]
unsafe impl NSObjectProtocol for NSPipe {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSPipe")]
    pub type NSPipe;

    #[cfg(feature = "Foundation_NSFileHandle")]
    #[objc2::method(sel = "fileHandleForReading", managed = "Other")]
    pub unsafe fn fileHandleForReading(&self) -> Id<NSFileHandle>;

    #[cfg(feature = "Foundation_NSFileHandle")]
    #[objc2::method(sel = "fileHandleForWriting", managed = "Other")]
    pub unsafe fn fileHandleForWriting(&self) -> Id<NSFileHandle>;

    #[objc2::method(sel = "pipe", managed = "Other")]
    pub unsafe fn pipe() -> Id<NSPipe>;
}
