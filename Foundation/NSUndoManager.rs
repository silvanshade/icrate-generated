//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

extern_static!(NSUndoCloseGroupingRunLoopOrdering: NSUInteger = 350000);

extern_static!(NSUndoManagerGroupIsDiscardableKey: &'static NSString);

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUndoManager")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSUndoManager;
}

#[cfg(feature = "Foundation_NSUndoManager")]
unsafe impl NSObjectProtocol for NSUndoManager {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUndoManager")]
    pub type NSUndoManager;

    #[objc2::method(sel = "beginUndoGrouping")]
    pub unsafe fn beginUndoGrouping(&self);

    #[objc2::method(sel = "endUndoGrouping")]
    pub unsafe fn endUndoGrouping(&self);

    #[objc2::method(sel = "groupingLevel")]
    pub unsafe fn groupingLevel(&self) -> NSInteger;

    #[objc2::method(sel = "disableUndoRegistration")]
    pub unsafe fn disableUndoRegistration(&self);

    #[objc2::method(sel = "enableUndoRegistration")]
    pub unsafe fn enableUndoRegistration(&self);

    #[objc2::method(sel = "isUndoRegistrationEnabled")]
    pub unsafe fn isUndoRegistrationEnabled(&self) -> bool;

    #[objc2::method(sel = "groupsByEvent")]
    pub unsafe fn groupsByEvent(&self) -> bool;

    #[objc2::method(sel = "setGroupsByEvent:")]
    pub unsafe fn setGroupsByEvent(&self, groups_by_event: bool);

    #[objc2::method(sel = "levelsOfUndo")]
    pub unsafe fn levelsOfUndo(&self) -> NSUInteger;

    #[objc2::method(sel = "setLevelsOfUndo:")]
    pub unsafe fn setLevelsOfUndo(&self, levels_of_undo: NSUInteger);

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "runLoopModes", managed = "Other")]
    pub unsafe fn runLoopModes(&self) -> Id<NSArray<NSRunLoopMode>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "setRunLoopModes:")]
    pub unsafe fn setRunLoopModes(&self, run_loop_modes: &NSArray<NSRunLoopMode>);

    #[objc2::method(sel = "undo")]
    pub unsafe fn undo(&self);

    #[objc2::method(sel = "redo")]
    pub unsafe fn redo(&self);

    #[objc2::method(sel = "undoNestedGroup")]
    pub unsafe fn undoNestedGroup(&self);

    #[objc2::method(sel = "canUndo")]
    pub unsafe fn canUndo(&self) -> bool;

    #[objc2::method(sel = "canRedo")]
    pub unsafe fn canRedo(&self) -> bool;

    #[objc2::method(sel = "isUndoing")]
    pub unsafe fn isUndoing(&self) -> bool;

    #[objc2::method(sel = "isRedoing")]
    pub unsafe fn isRedoing(&self) -> bool;

    #[objc2::method(sel = "removeAllActions")]
    pub unsafe fn removeAllActions(&self);

    #[objc2::method(sel = "removeAllActionsWithTarget:")]
    pub unsafe fn removeAllActionsWithTarget(&self, target: &Object);

    #[objc2::method(sel = "registerUndoWithTarget:selector:object:")]
    pub unsafe fn registerUndoWithTarget_selector_object(
        &self,
        target: &Object,
        selector: Sel,
        an_object: Option<&Object>,
    );

    #[objc2::method(sel = "prepareWithInvocationTarget:", managed = "Other")]
    pub unsafe fn prepareWithInvocationTarget(&self, target: &Object) -> Id<Object>;

    #[objc2::method(sel = "registerUndoWithTarget:handler:")]
    pub unsafe fn registerUndoWithTarget_handler(
        &self,
        target: &Object,
        undo_handler: &Block<(NonNull<Object>,), ()>,
    );

    #[objc2::method(sel = "setActionIsDiscardable:")]
    pub unsafe fn setActionIsDiscardable(&self, discardable: bool);

    #[objc2::method(sel = "undoActionIsDiscardable")]
    pub unsafe fn undoActionIsDiscardable(&self) -> bool;

    #[objc2::method(sel = "redoActionIsDiscardable")]
    pub unsafe fn redoActionIsDiscardable(&self) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "undoActionName", managed = "Other")]
    pub unsafe fn undoActionName(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "redoActionName", managed = "Other")]
    pub unsafe fn redoActionName(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setActionName:")]
    pub unsafe fn setActionName(&self, action_name: &NSString);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "undoMenuItemTitle", managed = "Other")]
    pub unsafe fn undoMenuItemTitle(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "redoMenuItemTitle", managed = "Other")]
    pub unsafe fn redoMenuItemTitle(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "undoMenuTitleForUndoActionName:", managed = "Other")]
    pub unsafe fn undoMenuTitleForUndoActionName(&self, action_name: &NSString) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "redoMenuTitleForUndoActionName:", managed = "Other")]
    pub unsafe fn redoMenuTitleForUndoActionName(&self, action_name: &NSString) -> Id<NSString>;
}

extern_static!(NSUndoManagerCheckpointNotification: &'static NSNotificationName);

extern_static!(NSUndoManagerWillUndoChangeNotification: &'static NSNotificationName);

extern_static!(NSUndoManagerWillRedoChangeNotification: &'static NSNotificationName);

extern_static!(NSUndoManagerDidUndoChangeNotification: &'static NSNotificationName);

extern_static!(NSUndoManagerDidRedoChangeNotification: &'static NSNotificationName);

extern_static!(NSUndoManagerDidOpenUndoGroupNotification: &'static NSNotificationName);

extern_static!(NSUndoManagerWillCloseUndoGroupNotification: &'static NSNotificationName);

extern_static!(NSUndoManagerDidCloseUndoGroupNotification: &'static NSNotificationName);
