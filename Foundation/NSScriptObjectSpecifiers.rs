//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum __anonymous__ {
    NSNoSpecifierError = 0,
    NSNoTopLevelContainersSpecifierError = 1,
    NSContainerSpecifierError = 2,
    NSUnknownKeySpecifierError = 3,
    NSInvalidIndexSpecifierError = 4,
    NSInternalSpecifierError = 5,
    NSOperationNotSupportedForKeySpecifierError = 6,
}

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSInsertionPosition {
    NSPositionAfter = 0,
    NSPositionBefore = 1,
    NSPositionBeginning = 2,
    NSPositionEnd = 3,
    NSPositionReplace = 4,
}

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSRelativePosition {
    NSRelativeAfter = 0,
    NSRelativeBefore = 1,
}

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSWhoseSubelementIdentifier {
    NSIndexSubelement = 0,
    NSEverySubelement = 1,
    NSMiddleSubelement = 2,
    NSRandomSubelement = 3,
    NSNoSubelement = 4,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSScriptObjectSpecifier")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSScriptObjectSpecifier;
}

#[cfg(feature = "Foundation_NSScriptObjectSpecifier")]
unsafe impl NSCoding for NSScriptObjectSpecifier {}

#[cfg(feature = "Foundation_NSScriptObjectSpecifier")]
unsafe impl NSObjectProtocol for NSScriptObjectSpecifier {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSScriptObjectSpecifier")]
    pub type NSScriptObjectSpecifier;

    #[cfg(feature = "Foundation_NSAppleEventDescriptor")]
    #[objc2::method(sel = "objectSpecifierWithDescriptor:", managed = "Other")]
    pub unsafe fn objectSpecifierWithDescriptor(
        descriptor: &NSAppleEventDescriptor,
    ) -> Option<Id<NSScriptObjectSpecifier>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithContainerSpecifier:key:", managed = "Init")]
    pub unsafe fn initWithContainerSpecifier_key(
        this: Option<Allocated<Self>>,
        container: &NSScriptObjectSpecifier,
        property: &NSString,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "Foundation_NSScriptClassDescription",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        sel = "initWithContainerClassDescription:containerSpecifier:key:",
        managed = "Init"
    )]
    pub unsafe fn initWithContainerClassDescription_containerSpecifier_key(
        this: Option<Allocated<Self>>,
        class_desc: &NSScriptClassDescription,
        container: Option<&NSScriptObjectSpecifier>,
        property: &NSString,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(
        this: Option<Allocated<Self>>,
        in_coder: &NSCoder,
    ) -> Option<Id<Self>>;

    #[objc2::method(sel = "childSpecifier", managed = "Other")]
    pub unsafe fn childSpecifier(&self) -> Option<Id<NSScriptObjectSpecifier>>;

    #[objc2::method(sel = "setChildSpecifier:")]
    pub unsafe fn setChildSpecifier(&self, child_specifier: Option<&NSScriptObjectSpecifier>);

    #[objc2::method(sel = "containerSpecifier", managed = "Other")]
    pub unsafe fn containerSpecifier(&self) -> Option<Id<NSScriptObjectSpecifier>>;

    #[objc2::method(sel = "setContainerSpecifier:")]
    pub unsafe fn setContainerSpecifier(
        &self,
        container_specifier: Option<&NSScriptObjectSpecifier>,
    );

    #[objc2::method(sel = "containerIsObjectBeingTested")]
    pub unsafe fn containerIsObjectBeingTested(&self) -> bool;

    #[objc2::method(sel = "setContainerIsObjectBeingTested:")]
    pub unsafe fn setContainerIsObjectBeingTested(&self, container_is_object_being_tested: bool);

    #[objc2::method(sel = "containerIsRangeContainerObject")]
    pub unsafe fn containerIsRangeContainerObject(&self) -> bool;

    #[objc2::method(sel = "setContainerIsRangeContainerObject:")]
    pub unsafe fn setContainerIsRangeContainerObject(
        &self,
        container_is_range_container_object: bool,
    );

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "key", managed = "Other")]
    pub unsafe fn key(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setKey:")]
    pub unsafe fn setKey(&self, key: &NSString);

    #[cfg(feature = "Foundation_NSScriptClassDescription")]
    #[objc2::method(sel = "containerClassDescription", managed = "Other")]
    pub unsafe fn containerClassDescription(&self) -> Option<Id<NSScriptClassDescription>>;

    #[cfg(feature = "Foundation_NSScriptClassDescription")]
    #[objc2::method(sel = "setContainerClassDescription:")]
    pub unsafe fn setContainerClassDescription(
        &self,
        container_class_description: Option<&NSScriptClassDescription>,
    );

    #[cfg(feature = "Foundation_NSScriptClassDescription")]
    #[objc2::method(sel = "keyClassDescription", managed = "Other")]
    pub unsafe fn keyClassDescription(&self) -> Option<Id<NSScriptClassDescription>>;

    #[objc2::method(sel = "indicesOfObjectsByEvaluatingWithContainer:count:")]
    pub unsafe fn indicesOfObjectsByEvaluatingWithContainer_count(
        &self,
        container: &Object,
        count: NonNull<NSInteger>,
    ) -> *mut NSInteger;

    #[objc2::method(sel = "objectsByEvaluatingWithContainers:", managed = "Other")]
    pub unsafe fn objectsByEvaluatingWithContainers(
        &self,
        containers: &Object,
    ) -> Option<Id<Object>>;

    #[objc2::method(sel = "objectsByEvaluatingSpecifier", managed = "Other")]
    pub unsafe fn objectsByEvaluatingSpecifier(&self) -> Option<Id<Object>>;

    #[objc2::method(sel = "evaluationErrorNumber")]
    pub unsafe fn evaluationErrorNumber(&self) -> NSInteger;

    #[objc2::method(sel = "setEvaluationErrorNumber:")]
    pub unsafe fn setEvaluationErrorNumber(&self, evaluation_error_number: NSInteger);

    #[objc2::method(sel = "evaluationErrorSpecifier", managed = "Other")]
    pub unsafe fn evaluationErrorSpecifier(&self) -> Option<Id<NSScriptObjectSpecifier>>;

    #[cfg(feature = "Foundation_NSAppleEventDescriptor")]
    #[objc2::method(sel = "descriptor", managed = "Other")]
    pub unsafe fn descriptor(&self) -> Option<Id<NSAppleEventDescriptor>>;
}

#[objc2::interface(
    unsafe super = NSScriptObjectSpecifier,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSIndexSpecifier")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSIndexSpecifier;
}

#[cfg(feature = "Foundation_NSIndexSpecifier")]
unsafe impl NSCoding for NSIndexSpecifier {}

#[cfg(feature = "Foundation_NSIndexSpecifier")]
unsafe impl NSObjectProtocol for NSIndexSpecifier {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSIndexSpecifier")]
    pub type NSIndexSpecifier;

    #[cfg(all(
        feature = "Foundation_NSScriptClassDescription",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        sel = "initWithContainerClassDescription:containerSpecifier:key:index:",
        managed = "Init"
    )]
    pub unsafe fn initWithContainerClassDescription_containerSpecifier_key_index(
        this: Option<Allocated<Self>>,
        class_desc: &NSScriptClassDescription,
        container: Option<&NSScriptObjectSpecifier>,
        property: &NSString,
        index: NSInteger,
    ) -> Id<Self>;

    #[objc2::method(sel = "index")]
    pub unsafe fn index(&self) -> NSInteger;

    #[objc2::method(sel = "setIndex:")]
    pub unsafe fn setIndex(&self, index: NSInteger);
}

#[objc2::interface(
    unsafe super = NSScriptObjectSpecifier,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSMiddleSpecifier")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSMiddleSpecifier;
}

#[cfg(feature = "Foundation_NSMiddleSpecifier")]
unsafe impl NSCoding for NSMiddleSpecifier {}

#[cfg(feature = "Foundation_NSMiddleSpecifier")]
unsafe impl NSObjectProtocol for NSMiddleSpecifier {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSMiddleSpecifier")]
    pub type NSMiddleSpecifier;
}

#[objc2::interface(
    unsafe super = NSScriptObjectSpecifier,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSNameSpecifier")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSNameSpecifier;
}

#[cfg(feature = "Foundation_NSNameSpecifier")]
unsafe impl NSCoding for NSNameSpecifier {}

#[cfg(feature = "Foundation_NSNameSpecifier")]
unsafe impl NSObjectProtocol for NSNameSpecifier {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSNameSpecifier")]
    pub type NSNameSpecifier;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(
        this: Option<Allocated<Self>>,
        in_coder: &NSCoder,
    ) -> Option<Id<Self>>;

    #[cfg(all(
        feature = "Foundation_NSScriptClassDescription",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        sel = "initWithContainerClassDescription:containerSpecifier:key:name:",
        managed = "Init"
    )]
    pub unsafe fn initWithContainerClassDescription_containerSpecifier_key_name(
        this: Option<Allocated<Self>>,
        class_desc: &NSScriptClassDescription,
        container: Option<&NSScriptObjectSpecifier>,
        property: &NSString,
        name: &NSString,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "name", managed = "Other")]
    pub unsafe fn name(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setName:")]
    pub unsafe fn setName(&self, name: &NSString);
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSPositionalSpecifier")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSPositionalSpecifier;
}

#[cfg(feature = "Foundation_NSPositionalSpecifier")]
unsafe impl NSObjectProtocol for NSPositionalSpecifier {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSPositionalSpecifier")]
    pub type NSPositionalSpecifier;

    #[cfg(feature = "Foundation_NSScriptObjectSpecifier")]
    #[objc2::method(sel = "initWithPosition:objectSpecifier:", managed = "Init")]
    pub unsafe fn initWithPosition_objectSpecifier(
        this: Option<Allocated<Self>>,
        position: NSInsertionPosition,
        specifier: &NSScriptObjectSpecifier,
    ) -> Id<Self>;

    #[objc2::method(sel = "position")]
    pub unsafe fn position(&self) -> NSInsertionPosition;

    #[cfg(feature = "Foundation_NSScriptObjectSpecifier")]
    #[objc2::method(sel = "objectSpecifier", managed = "Other")]
    pub unsafe fn objectSpecifier(&self) -> Id<NSScriptObjectSpecifier>;

    #[cfg(feature = "Foundation_NSScriptClassDescription")]
    #[objc2::method(sel = "setInsertionClassDescription:")]
    pub unsafe fn setInsertionClassDescription(&self, class_description: &NSScriptClassDescription);

    #[objc2::method(sel = "evaluate")]
    pub unsafe fn evaluate(&self);

    #[objc2::method(sel = "insertionContainer", managed = "Other")]
    pub unsafe fn insertionContainer(&self) -> Option<Id<Object>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "insertionKey", managed = "Other")]
    pub unsafe fn insertionKey(&self) -> Option<Id<NSString>>;

    #[objc2::method(sel = "insertionIndex")]
    pub unsafe fn insertionIndex(&self) -> NSInteger;

    #[objc2::method(sel = "insertionReplaces")]
    pub unsafe fn insertionReplaces(&self) -> bool;
}

#[objc2::interface(
    unsafe super = NSScriptObjectSpecifier,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSPropertySpecifier")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSPropertySpecifier;
}

#[cfg(feature = "Foundation_NSPropertySpecifier")]
unsafe impl NSCoding for NSPropertySpecifier {}

#[cfg(feature = "Foundation_NSPropertySpecifier")]
unsafe impl NSObjectProtocol for NSPropertySpecifier {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSPropertySpecifier")]
    pub type NSPropertySpecifier;
}

#[objc2::interface(
    unsafe super = NSScriptObjectSpecifier,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSRandomSpecifier")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSRandomSpecifier;
}

#[cfg(feature = "Foundation_NSRandomSpecifier")]
unsafe impl NSCoding for NSRandomSpecifier {}

#[cfg(feature = "Foundation_NSRandomSpecifier")]
unsafe impl NSObjectProtocol for NSRandomSpecifier {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSRandomSpecifier")]
    pub type NSRandomSpecifier;
}

#[objc2::interface(
    unsafe super = NSScriptObjectSpecifier,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSRangeSpecifier")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSRangeSpecifier;
}

#[cfg(feature = "Foundation_NSRangeSpecifier")]
unsafe impl NSCoding for NSRangeSpecifier {}

#[cfg(feature = "Foundation_NSRangeSpecifier")]
unsafe impl NSObjectProtocol for NSRangeSpecifier {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSRangeSpecifier")]
    pub type NSRangeSpecifier;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(
        this: Option<Allocated<Self>>,
        in_coder: &NSCoder,
    ) -> Option<Id<Self>>;

    #[cfg(all(
        feature = "Foundation_NSScriptClassDescription",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        sel = "initWithContainerClassDescription:containerSpecifier:key:startSpecifier:endSpecifier:",
        managed = "Init"
    )]
    pub unsafe fn initWithContainerClassDescription_containerSpecifier_key_startSpecifier_endSpecifier(
        this: Option<Allocated<Self>>,
        class_desc: &NSScriptClassDescription,
        container: Option<&NSScriptObjectSpecifier>,
        property: &NSString,
        start_spec: Option<&NSScriptObjectSpecifier>,
        end_spec: Option<&NSScriptObjectSpecifier>,
    ) -> Id<Self>;

    #[objc2::method(sel = "startSpecifier", managed = "Other")]
    pub unsafe fn startSpecifier(&self) -> Option<Id<NSScriptObjectSpecifier>>;

    #[objc2::method(sel = "setStartSpecifier:")]
    pub unsafe fn setStartSpecifier(&self, start_specifier: Option<&NSScriptObjectSpecifier>);

    #[objc2::method(sel = "endSpecifier", managed = "Other")]
    pub unsafe fn endSpecifier(&self) -> Option<Id<NSScriptObjectSpecifier>>;

    #[objc2::method(sel = "setEndSpecifier:")]
    pub unsafe fn setEndSpecifier(&self, end_specifier: Option<&NSScriptObjectSpecifier>);
}

#[objc2::interface(
    unsafe super = NSScriptObjectSpecifier,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSRelativeSpecifier")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSRelativeSpecifier;
}

#[cfg(feature = "Foundation_NSRelativeSpecifier")]
unsafe impl NSCoding for NSRelativeSpecifier {}

#[cfg(feature = "Foundation_NSRelativeSpecifier")]
unsafe impl NSObjectProtocol for NSRelativeSpecifier {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSRelativeSpecifier")]
    pub type NSRelativeSpecifier;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(
        this: Option<Allocated<Self>>,
        in_coder: &NSCoder,
    ) -> Option<Id<Self>>;

    #[cfg(all(
        feature = "Foundation_NSScriptClassDescription",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        sel = "initWithContainerClassDescription:containerSpecifier:key:relativePosition:baseSpecifier:",
        managed = "Init"
    )]
    pub unsafe fn initWithContainerClassDescription_containerSpecifier_key_relativePosition_baseSpecifier(
        this: Option<Allocated<Self>>,
        class_desc: &NSScriptClassDescription,
        container: Option<&NSScriptObjectSpecifier>,
        property: &NSString,
        rel_pos: NSRelativePosition,
        base_specifier: Option<&NSScriptObjectSpecifier>,
    ) -> Id<Self>;

    #[objc2::method(sel = "relativePosition")]
    pub unsafe fn relativePosition(&self) -> NSRelativePosition;

    #[objc2::method(sel = "setRelativePosition:")]
    pub unsafe fn setRelativePosition(&self, relative_position: NSRelativePosition);

    #[objc2::method(sel = "baseSpecifier", managed = "Other")]
    pub unsafe fn baseSpecifier(&self) -> Option<Id<NSScriptObjectSpecifier>>;

    #[objc2::method(sel = "setBaseSpecifier:")]
    pub unsafe fn setBaseSpecifier(&self, base_specifier: Option<&NSScriptObjectSpecifier>);
}

#[objc2::interface(
    unsafe super = NSScriptObjectSpecifier,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUniqueIDSpecifier")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSUniqueIDSpecifier;
}

#[cfg(feature = "Foundation_NSUniqueIDSpecifier")]
unsafe impl NSCoding for NSUniqueIDSpecifier {}

#[cfg(feature = "Foundation_NSUniqueIDSpecifier")]
unsafe impl NSObjectProtocol for NSUniqueIDSpecifier {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUniqueIDSpecifier")]
    pub type NSUniqueIDSpecifier;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(
        this: Option<Allocated<Self>>,
        in_coder: &NSCoder,
    ) -> Option<Id<Self>>;

    #[cfg(all(
        feature = "Foundation_NSScriptClassDescription",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        sel = "initWithContainerClassDescription:containerSpecifier:key:uniqueID:",
        managed = "Init"
    )]
    pub unsafe fn initWithContainerClassDescription_containerSpecifier_key_uniqueID(
        this: Option<Allocated<Self>>,
        class_desc: &NSScriptClassDescription,
        container: Option<&NSScriptObjectSpecifier>,
        property: &NSString,
        unique_id: &Object,
    ) -> Id<Self>;

    #[objc2::method(sel = "uniqueID", managed = "Other")]
    pub unsafe fn uniqueID(&self) -> Id<Object>;

    #[objc2::method(sel = "setUniqueID:")]
    pub unsafe fn setUniqueID(&self, unique_id: &Object);
}

#[objc2::interface(
    unsafe super = NSScriptObjectSpecifier,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSWhoseSpecifier")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSWhoseSpecifier;
}

#[cfg(feature = "Foundation_NSWhoseSpecifier")]
unsafe impl NSCoding for NSWhoseSpecifier {}

#[cfg(feature = "Foundation_NSWhoseSpecifier")]
unsafe impl NSObjectProtocol for NSWhoseSpecifier {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSWhoseSpecifier")]
    pub type NSWhoseSpecifier;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(
        this: Option<Allocated<Self>>,
        in_coder: &NSCoder,
    ) -> Option<Id<Self>>;

    #[cfg(all(
        feature = "Foundation_NSScriptClassDescription",
        feature = "Foundation_NSScriptWhoseTest",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        sel = "initWithContainerClassDescription:containerSpecifier:key:test:",
        managed = "Init"
    )]
    pub unsafe fn initWithContainerClassDescription_containerSpecifier_key_test(
        this: Option<Allocated<Self>>,
        class_desc: &NSScriptClassDescription,
        container: Option<&NSScriptObjectSpecifier>,
        property: &NSString,
        test: &NSScriptWhoseTest,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSScriptWhoseTest")]
    #[objc2::method(sel = "test", managed = "Other")]
    pub unsafe fn test(&self) -> Id<NSScriptWhoseTest>;

    #[cfg(feature = "Foundation_NSScriptWhoseTest")]
    #[objc2::method(sel = "setTest:")]
    pub unsafe fn setTest(&self, test: &NSScriptWhoseTest);

    #[objc2::method(sel = "startSubelementIdentifier")]
    pub unsafe fn startSubelementIdentifier(&self) -> NSWhoseSubelementIdentifier;

    #[objc2::method(sel = "setStartSubelementIdentifier:")]
    pub unsafe fn setStartSubelementIdentifier(
        &self,
        start_subelement_identifier: NSWhoseSubelementIdentifier,
    );

    #[objc2::method(sel = "startSubelementIndex")]
    pub unsafe fn startSubelementIndex(&self) -> NSInteger;

    #[objc2::method(sel = "setStartSubelementIndex:")]
    pub unsafe fn setStartSubelementIndex(&self, start_subelement_index: NSInteger);

    #[objc2::method(sel = "endSubelementIdentifier")]
    pub unsafe fn endSubelementIdentifier(&self) -> NSWhoseSubelementIdentifier;

    #[objc2::method(sel = "setEndSubelementIdentifier:")]
    pub unsafe fn setEndSubelementIdentifier(
        &self,
        end_subelement_identifier: NSWhoseSubelementIdentifier,
    );

    #[objc2::method(sel = "endSubelementIndex")]
    pub unsafe fn endSubelementIndex(&self) -> NSInteger;

    #[objc2::method(sel = "setEndSubelementIndex:")]
    pub unsafe fn setEndSubelementIndex(&self, end_subelement_index: NSInteger);
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSScriptObjectSpecifier`
    #[cfg(feature = "Foundation_NSIndexSpecifier")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSIndexSpecifier")]
    pub type NSIndexSpecifier;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithContainerSpecifier:key:", managed = "Init")]
    pub unsafe fn initWithContainerSpecifier_key(
        this: Option<Allocated<Self>>,
        container: &NSScriptObjectSpecifier,
        property: &NSString,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "Foundation_NSScriptClassDescription",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        sel = "initWithContainerClassDescription:containerSpecifier:key:",
        managed = "Init"
    )]
    pub unsafe fn initWithContainerClassDescription_containerSpecifier_key(
        this: Option<Allocated<Self>>,
        class_desc: &NSScriptClassDescription,
        container: Option<&NSScriptObjectSpecifier>,
        property: &NSString,
    ) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSScriptObjectSpecifier`
    #[cfg(feature = "Foundation_NSMiddleSpecifier")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSMiddleSpecifier")]
    pub type NSMiddleSpecifier;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithContainerSpecifier:key:", managed = "Init")]
    pub unsafe fn initWithContainerSpecifier_key(
        this: Option<Allocated<Self>>,
        container: &NSScriptObjectSpecifier,
        property: &NSString,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "Foundation_NSScriptClassDescription",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        sel = "initWithContainerClassDescription:containerSpecifier:key:",
        managed = "Init"
    )]
    pub unsafe fn initWithContainerClassDescription_containerSpecifier_key(
        this: Option<Allocated<Self>>,
        class_desc: &NSScriptClassDescription,
        container: Option<&NSScriptObjectSpecifier>,
        property: &NSString,
    ) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSScriptObjectSpecifier`
    #[cfg(feature = "Foundation_NSNameSpecifier")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSNameSpecifier")]
    pub type NSNameSpecifier;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithContainerSpecifier:key:", managed = "Init")]
    pub unsafe fn initWithContainerSpecifier_key(
        this: Option<Allocated<Self>>,
        container: &NSScriptObjectSpecifier,
        property: &NSString,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "Foundation_NSScriptClassDescription",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        sel = "initWithContainerClassDescription:containerSpecifier:key:",
        managed = "Init"
    )]
    pub unsafe fn initWithContainerClassDescription_containerSpecifier_key(
        this: Option<Allocated<Self>>,
        class_desc: &NSScriptClassDescription,
        container: Option<&NSScriptObjectSpecifier>,
        property: &NSString,
    ) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSScriptObjectSpecifier`
    #[cfg(feature = "Foundation_NSPropertySpecifier")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSPropertySpecifier")]
    pub type NSPropertySpecifier;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithContainerSpecifier:key:", managed = "Init")]
    pub unsafe fn initWithContainerSpecifier_key(
        this: Option<Allocated<Self>>,
        container: &NSScriptObjectSpecifier,
        property: &NSString,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "Foundation_NSScriptClassDescription",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        sel = "initWithContainerClassDescription:containerSpecifier:key:",
        managed = "Init"
    )]
    pub unsafe fn initWithContainerClassDescription_containerSpecifier_key(
        this: Option<Allocated<Self>>,
        class_desc: &NSScriptClassDescription,
        container: Option<&NSScriptObjectSpecifier>,
        property: &NSString,
    ) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSScriptObjectSpecifier`
    #[cfg(feature = "Foundation_NSRandomSpecifier")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSRandomSpecifier")]
    pub type NSRandomSpecifier;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithContainerSpecifier:key:", managed = "Init")]
    pub unsafe fn initWithContainerSpecifier_key(
        this: Option<Allocated<Self>>,
        container: &NSScriptObjectSpecifier,
        property: &NSString,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "Foundation_NSScriptClassDescription",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        sel = "initWithContainerClassDescription:containerSpecifier:key:",
        managed = "Init"
    )]
    pub unsafe fn initWithContainerClassDescription_containerSpecifier_key(
        this: Option<Allocated<Self>>,
        class_desc: &NSScriptClassDescription,
        container: Option<&NSScriptObjectSpecifier>,
        property: &NSString,
    ) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSScriptObjectSpecifier`
    #[cfg(feature = "Foundation_NSRangeSpecifier")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSRangeSpecifier")]
    pub type NSRangeSpecifier;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithContainerSpecifier:key:", managed = "Init")]
    pub unsafe fn initWithContainerSpecifier_key(
        this: Option<Allocated<Self>>,
        container: &NSScriptObjectSpecifier,
        property: &NSString,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "Foundation_NSScriptClassDescription",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        sel = "initWithContainerClassDescription:containerSpecifier:key:",
        managed = "Init"
    )]
    pub unsafe fn initWithContainerClassDescription_containerSpecifier_key(
        this: Option<Allocated<Self>>,
        class_desc: &NSScriptClassDescription,
        container: Option<&NSScriptObjectSpecifier>,
        property: &NSString,
    ) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSScriptObjectSpecifier`
    #[cfg(feature = "Foundation_NSRelativeSpecifier")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSRelativeSpecifier")]
    pub type NSRelativeSpecifier;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithContainerSpecifier:key:", managed = "Init")]
    pub unsafe fn initWithContainerSpecifier_key(
        this: Option<Allocated<Self>>,
        container: &NSScriptObjectSpecifier,
        property: &NSString,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "Foundation_NSScriptClassDescription",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        sel = "initWithContainerClassDescription:containerSpecifier:key:",
        managed = "Init"
    )]
    pub unsafe fn initWithContainerClassDescription_containerSpecifier_key(
        this: Option<Allocated<Self>>,
        class_desc: &NSScriptClassDescription,
        container: Option<&NSScriptObjectSpecifier>,
        property: &NSString,
    ) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSScriptObjectSpecifier`
    #[cfg(feature = "Foundation_NSUniqueIDSpecifier")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUniqueIDSpecifier")]
    pub type NSUniqueIDSpecifier;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithContainerSpecifier:key:", managed = "Init")]
    pub unsafe fn initWithContainerSpecifier_key(
        this: Option<Allocated<Self>>,
        container: &NSScriptObjectSpecifier,
        property: &NSString,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "Foundation_NSScriptClassDescription",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        sel = "initWithContainerClassDescription:containerSpecifier:key:",
        managed = "Init"
    )]
    pub unsafe fn initWithContainerClassDescription_containerSpecifier_key(
        this: Option<Allocated<Self>>,
        class_desc: &NSScriptClassDescription,
        container: Option<&NSScriptObjectSpecifier>,
        property: &NSString,
    ) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSScriptObjectSpecifier`
    #[cfg(feature = "Foundation_NSWhoseSpecifier")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSWhoseSpecifier")]
    pub type NSWhoseSpecifier;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithContainerSpecifier:key:", managed = "Init")]
    pub unsafe fn initWithContainerSpecifier_key(
        this: Option<Allocated<Self>>,
        container: &NSScriptObjectSpecifier,
        property: &NSString,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "Foundation_NSScriptClassDescription",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        sel = "initWithContainerClassDescription:containerSpecifier:key:",
        managed = "Init"
    )]
    pub unsafe fn initWithContainerClassDescription_containerSpecifier_key(
        this: Option<Allocated<Self>>,
        class_desc: &NSScriptClassDescription,
        container: Option<&NSScriptObjectSpecifier>,
        property: &NSString,
    ) -> Id<Self>;
}
