//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSURLCacheStoragePolicy {
    NSURLCacheStorageAllowed = 0,
    NSURLCacheStorageAllowedInMemoryOnly = 1,
    NSURLCacheStorageNotAllowed = 2,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSCachedURLResponse")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSCachedURLResponse;
}

#[cfg(feature = "Foundation_NSCachedURLResponse")]
unsafe impl NSCoding for NSCachedURLResponse {}

#[cfg(feature = "Foundation_NSCachedURLResponse")]
unsafe impl NSObjectProtocol for NSCachedURLResponse {}

#[cfg(feature = "Foundation_NSCachedURLResponse")]
unsafe impl NSSecureCoding for NSCachedURLResponse {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSCachedURLResponse")]
    pub type NSCachedURLResponse;

    #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSURLResponse"))]
    #[objc2::method(sel = "initWithResponse:data:", managed = "Init")]
    pub unsafe fn initWithResponse_data(
        this: Option<Allocated<Self>>,
        response: &NSURLResponse,
        data: &NSData,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "Foundation_NSData",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSURLResponse"
    ))]
    #[objc2::method(
        sel = "initWithResponse:data:userInfo:storagePolicy:",
        managed = "Init"
    )]
    pub unsafe fn initWithResponse_data_userInfo_storagePolicy(
        this: Option<Allocated<Self>>,
        response: &NSURLResponse,
        data: &NSData,
        user_info: Option<&NSDictionary>,
        storage_policy: NSURLCacheStoragePolicy,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSURLResponse")]
    #[objc2::method(sel = "response", managed = "Other")]
    pub unsafe fn response(&self) -> Id<NSURLResponse>;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "data", managed = "Other")]
    pub unsafe fn data(&self) -> Id<NSData>;

    #[cfg(feature = "Foundation_NSDictionary")]
    #[objc2::method(sel = "userInfo", managed = "Other")]
    pub unsafe fn userInfo(&self) -> Option<Id<NSDictionary>>;

    #[objc2::method(sel = "storagePolicy")]
    pub unsafe fn storagePolicy(&self) -> NSURLCacheStoragePolicy;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSURLCache")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSURLCache;
}

#[cfg(feature = "Foundation_NSURLCache")]
unsafe impl NSObjectProtocol for NSURLCache {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSURLCache")]
    pub type NSURLCache;

    #[objc2::method(sel = "sharedURLCache", managed = "Other")]
    pub unsafe fn sharedURLCache() -> Id<NSURLCache>;

    #[objc2::method(sel = "setSharedURLCache:")]
    pub unsafe fn setSharedURLCache(shared_url_cache: &NSURLCache);

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(
        sel = "initWithMemoryCapacity:diskCapacity:diskPath:",
        managed = "Init"
    )]
    pub unsafe fn initWithMemoryCapacity_diskCapacity_diskPath(
        this: Option<Allocated<Self>>,
        memory_capacity: NSUInteger,
        disk_capacity: NSUInteger,
        path: Option<&NSString>,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(
        sel = "initWithMemoryCapacity:diskCapacity:directoryURL:",
        managed = "Init"
    )]
    pub unsafe fn initWithMemoryCapacity_diskCapacity_directoryURL(
        this: Option<Allocated<Self>>,
        memory_capacity: NSUInteger,
        disk_capacity: NSUInteger,
        directory_url: Option<&NSURL>,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "Foundation_NSCachedURLResponse",
        feature = "Foundation_NSURLRequest"
    ))]
    #[objc2::method(sel = "cachedResponseForRequest:", managed = "Other")]
    pub unsafe fn cachedResponseForRequest(
        &self,
        request: &NSURLRequest,
    ) -> Option<Id<NSCachedURLResponse>>;

    #[cfg(all(
        feature = "Foundation_NSCachedURLResponse",
        feature = "Foundation_NSURLRequest"
    ))]
    #[objc2::method(sel = "storeCachedResponse:forRequest:")]
    pub unsafe fn storeCachedResponse_forRequest(
        &self,
        cached_response: &NSCachedURLResponse,
        request: &NSURLRequest,
    );

    #[cfg(feature = "Foundation_NSURLRequest")]
    #[objc2::method(sel = "removeCachedResponseForRequest:")]
    pub unsafe fn removeCachedResponseForRequest(&self, request: &NSURLRequest);

    #[objc2::method(sel = "removeAllCachedResponses")]
    pub unsafe fn removeAllCachedResponses(&self);

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "removeCachedResponsesSinceDate:")]
    pub unsafe fn removeCachedResponsesSinceDate(&self, date: &NSDate);

    #[objc2::method(sel = "memoryCapacity")]
    pub unsafe fn memoryCapacity(&self) -> NSUInteger;

    #[objc2::method(sel = "setMemoryCapacity:")]
    pub unsafe fn setMemoryCapacity(&self, memory_capacity: NSUInteger);

    #[objc2::method(sel = "diskCapacity")]
    pub unsafe fn diskCapacity(&self) -> NSUInteger;

    #[objc2::method(sel = "setDiskCapacity:")]
    pub unsafe fn setDiskCapacity(&self, disk_capacity: NSUInteger);

    #[objc2::method(sel = "currentMemoryUsage")]
    pub unsafe fn currentMemoryUsage(&self) -> NSUInteger;

    #[objc2::method(sel = "currentDiskUsage")]
    pub unsafe fn currentDiskUsage(&self) -> NSUInteger;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSURLCache")]
    pub type NSURLCache;

    #[cfg(all(
        feature = "Foundation_NSCachedURLResponse",
        feature = "Foundation_NSURLSessionDataTask"
    ))]
    #[objc2::method(sel = "storeCachedResponse:forDataTask:")]
    pub unsafe fn storeCachedResponse_forDataTask(
        &self,
        cached_response: &NSCachedURLResponse,
        data_task: &NSURLSessionDataTask,
    );

    #[cfg(all(
        feature = "Foundation_NSCachedURLResponse",
        feature = "Foundation_NSURLSessionDataTask"
    ))]
    #[objc2::method(sel = "getCachedResponseForDataTask:completionHandler:")]
    pub unsafe fn getCachedResponseForDataTask_completionHandler(
        &self,
        data_task: &NSURLSessionDataTask,
        completion_handler: &Block<(*mut NSCachedURLResponse,), ()>,
    );

    #[cfg(feature = "Foundation_NSURLSessionDataTask")]
    #[objc2::method(sel = "removeCachedResponseForDataTask:")]
    pub unsafe fn removeCachedResponseForDataTask(&self, data_task: &NSURLSessionDataTask);
}
