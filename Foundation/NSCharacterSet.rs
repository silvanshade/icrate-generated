//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[extern_enum]
#[underlying(c_uint)]
pub enum __anonymous__ {
    NSOpenStepUnicodeReservedBase = 0xF400,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSCharacterSet")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSCharacterSet;
}

#[cfg(feature = "Foundation_NSCharacterSet")]
unsafe impl NSCoding for NSCharacterSet {}

#[cfg(feature = "Foundation_NSCharacterSet")]
unsafe impl NSObjectProtocol for NSCharacterSet {}

#[cfg(feature = "Foundation_NSCharacterSet")]
unsafe impl NSSecureCoding for NSCharacterSet {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSCharacterSet")]
    pub type NSCharacterSet;

    #[objc2::method(sel = "controlCharacterSet", managed = "Other")]
    pub unsafe fn controlCharacterSet() -> Id<NSCharacterSet>;

    #[objc2::method(sel = "whitespaceCharacterSet", managed = "Other")]
    pub unsafe fn whitespaceCharacterSet() -> Id<NSCharacterSet>;

    #[objc2::method(sel = "whitespaceAndNewlineCharacterSet", managed = "Other")]
    pub unsafe fn whitespaceAndNewlineCharacterSet() -> Id<NSCharacterSet>;

    #[objc2::method(sel = "decimalDigitCharacterSet", managed = "Other")]
    pub unsafe fn decimalDigitCharacterSet() -> Id<NSCharacterSet>;

    #[objc2::method(sel = "letterCharacterSet", managed = "Other")]
    pub unsafe fn letterCharacterSet() -> Id<NSCharacterSet>;

    #[objc2::method(sel = "lowercaseLetterCharacterSet", managed = "Other")]
    pub unsafe fn lowercaseLetterCharacterSet() -> Id<NSCharacterSet>;

    #[objc2::method(sel = "uppercaseLetterCharacterSet", managed = "Other")]
    pub unsafe fn uppercaseLetterCharacterSet() -> Id<NSCharacterSet>;

    #[objc2::method(sel = "nonBaseCharacterSet", managed = "Other")]
    pub unsafe fn nonBaseCharacterSet() -> Id<NSCharacterSet>;

    #[objc2::method(sel = "alphanumericCharacterSet", managed = "Other")]
    pub unsafe fn alphanumericCharacterSet() -> Id<NSCharacterSet>;

    #[objc2::method(sel = "decomposableCharacterSet", managed = "Other")]
    pub unsafe fn decomposableCharacterSet() -> Id<NSCharacterSet>;

    #[objc2::method(sel = "illegalCharacterSet", managed = "Other")]
    pub unsafe fn illegalCharacterSet() -> Id<NSCharacterSet>;

    #[objc2::method(sel = "punctuationCharacterSet", managed = "Other")]
    pub unsafe fn punctuationCharacterSet() -> Id<NSCharacterSet>;

    #[objc2::method(sel = "capitalizedLetterCharacterSet", managed = "Other")]
    pub unsafe fn capitalizedLetterCharacterSet() -> Id<NSCharacterSet>;

    #[objc2::method(sel = "symbolCharacterSet", managed = "Other")]
    pub unsafe fn symbolCharacterSet() -> Id<NSCharacterSet>;

    #[objc2::method(sel = "newlineCharacterSet", managed = "Other")]
    pub unsafe fn newlineCharacterSet() -> Id<NSCharacterSet>;

    #[objc2::method(sel = "characterSetWithRange:", managed = "Other")]
    pub unsafe fn characterSetWithRange(a_range: NSRange) -> Id<NSCharacterSet>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "characterSetWithCharactersInString:", managed = "Other")]
    pub unsafe fn characterSetWithCharactersInString(a_string: &NSString) -> Id<NSCharacterSet>;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "characterSetWithBitmapRepresentation:", managed = "Other")]
    pub unsafe fn characterSetWithBitmapRepresentation(data: &NSData) -> Id<NSCharacterSet>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "characterSetWithContentsOfFile:", managed = "Other")]
    pub unsafe fn characterSetWithContentsOfFile(f_name: &NSString) -> Option<Id<NSCharacterSet>>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, coder: &NSCoder) -> Id<Self>;

    #[objc2::method(sel = "characterIsMember:")]
    pub unsafe fn characterIsMember(&self, a_character: unichar) -> bool;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "bitmapRepresentation", managed = "Other")]
    pub unsafe fn bitmapRepresentation(&self) -> Id<NSData>;

    #[objc2::method(sel = "invertedSet", managed = "Other")]
    pub unsafe fn invertedSet(&self) -> Id<NSCharacterSet>;

    #[objc2::method(sel = "longCharacterIsMember:")]
    pub unsafe fn longCharacterIsMember(&self, the_long_char: UTF32Char) -> bool;

    #[objc2::method(sel = "isSupersetOfSet:")]
    pub unsafe fn isSupersetOfSet(&self, the_other_set: &NSCharacterSet) -> bool;

    #[objc2::method(sel = "hasMemberInPlane:")]
    pub unsafe fn hasMemberInPlane(&self, the_plane: u8) -> bool;
}

#[objc2::interface(
    unsafe super = NSCharacterSet,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSMutableCharacterSet")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSMutableCharacterSet;
}

#[cfg(feature = "Foundation_NSMutableCharacterSet")]
unsafe impl NSCoding for NSMutableCharacterSet {}

#[cfg(feature = "Foundation_NSMutableCharacterSet")]
unsafe impl NSObjectProtocol for NSMutableCharacterSet {}

#[cfg(feature = "Foundation_NSMutableCharacterSet")]
unsafe impl NSSecureCoding for NSMutableCharacterSet {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSMutableCharacterSet")]
    pub type NSMutableCharacterSet;

    #[objc2::method(sel = "addCharactersInRange:")]
    pub unsafe fn addCharactersInRange(&self, a_range: NSRange);

    #[objc2::method(sel = "removeCharactersInRange:")]
    pub unsafe fn removeCharactersInRange(&self, a_range: NSRange);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "addCharactersInString:")]
    pub unsafe fn addCharactersInString(&self, a_string: &NSString);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "removeCharactersInString:")]
    pub unsafe fn removeCharactersInString(&self, a_string: &NSString);

    #[objc2::method(sel = "formUnionWithCharacterSet:")]
    pub unsafe fn formUnionWithCharacterSet(&self, other_set: &NSCharacterSet);

    #[objc2::method(sel = "formIntersectionWithCharacterSet:")]
    pub unsafe fn formIntersectionWithCharacterSet(&self, other_set: &NSCharacterSet);

    #[objc2::method(sel = "invert")]
    pub unsafe fn invert(&self);

    #[objc2::method(sel = "controlCharacterSet", managed = "Other")]
    pub unsafe fn controlCharacterSet() -> Id<NSMutableCharacterSet, Owned>;

    #[objc2::method(sel = "whitespaceCharacterSet", managed = "Other")]
    pub unsafe fn whitespaceCharacterSet() -> Id<NSMutableCharacterSet, Owned>;

    #[objc2::method(sel = "whitespaceAndNewlineCharacterSet", managed = "Other")]
    pub unsafe fn whitespaceAndNewlineCharacterSet() -> Id<NSMutableCharacterSet, Owned>;

    #[objc2::method(sel = "decimalDigitCharacterSet", managed = "Other")]
    pub unsafe fn decimalDigitCharacterSet() -> Id<NSMutableCharacterSet, Owned>;

    #[objc2::method(sel = "letterCharacterSet", managed = "Other")]
    pub unsafe fn letterCharacterSet() -> Id<NSMutableCharacterSet, Owned>;

    #[objc2::method(sel = "lowercaseLetterCharacterSet", managed = "Other")]
    pub unsafe fn lowercaseLetterCharacterSet() -> Id<NSMutableCharacterSet, Owned>;

    #[objc2::method(sel = "uppercaseLetterCharacterSet", managed = "Other")]
    pub unsafe fn uppercaseLetterCharacterSet() -> Id<NSMutableCharacterSet, Owned>;

    #[objc2::method(sel = "nonBaseCharacterSet", managed = "Other")]
    pub unsafe fn nonBaseCharacterSet() -> Id<NSMutableCharacterSet, Owned>;

    #[objc2::method(sel = "alphanumericCharacterSet", managed = "Other")]
    pub unsafe fn alphanumericCharacterSet() -> Id<NSMutableCharacterSet, Owned>;

    #[objc2::method(sel = "decomposableCharacterSet", managed = "Other")]
    pub unsafe fn decomposableCharacterSet() -> Id<NSMutableCharacterSet, Owned>;

    #[objc2::method(sel = "illegalCharacterSet", managed = "Other")]
    pub unsafe fn illegalCharacterSet() -> Id<NSMutableCharacterSet, Owned>;

    #[objc2::method(sel = "punctuationCharacterSet", managed = "Other")]
    pub unsafe fn punctuationCharacterSet() -> Id<NSMutableCharacterSet, Owned>;

    #[objc2::method(sel = "capitalizedLetterCharacterSet", managed = "Other")]
    pub unsafe fn capitalizedLetterCharacterSet() -> Id<NSMutableCharacterSet, Owned>;

    #[objc2::method(sel = "symbolCharacterSet", managed = "Other")]
    pub unsafe fn symbolCharacterSet() -> Id<NSMutableCharacterSet, Owned>;

    #[objc2::method(sel = "newlineCharacterSet", managed = "Other")]
    pub unsafe fn newlineCharacterSet() -> Id<NSMutableCharacterSet, Owned>;

    #[objc2::method(sel = "characterSetWithRange:", managed = "Other")]
    pub unsafe fn characterSetWithRange(a_range: NSRange) -> Id<NSMutableCharacterSet, Owned>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "characterSetWithCharactersInString:", managed = "Other")]
    pub unsafe fn characterSetWithCharactersInString(
        a_string: &NSString,
    ) -> Id<NSMutableCharacterSet, Owned>;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "characterSetWithBitmapRepresentation:", managed = "Other")]
    pub unsafe fn characterSetWithBitmapRepresentation(
        data: &NSData,
    ) -> Id<NSMutableCharacterSet, Owned>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "characterSetWithContentsOfFile:", managed = "Other")]
    pub unsafe fn characterSetWithContentsOfFile(
        f_name: &NSString,
    ) -> Option<Id<NSMutableCharacterSet, Owned>>;
}
