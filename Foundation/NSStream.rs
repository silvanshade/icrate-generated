//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

typed_extensible_enum!(
    pub type NSStreamPropertyKey = NSString;
);

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSStreamStatus {
    NSStreamStatusNotOpen = 0,
    NSStreamStatusOpening = 1,
    NSStreamStatusOpen = 2,
    NSStreamStatusReading = 3,
    NSStreamStatusWriting = 4,
    NSStreamStatusAtEnd = 5,
    NSStreamStatusClosed = 6,
    NSStreamStatusError = 7,
}

#[ns_options]
#[underlying(NSUInteger)]
pub enum NSStreamEvent {
    NSStreamEventNone = 0,
    NSStreamEventOpenCompleted = 1 << 0,
    NSStreamEventHasBytesAvailable = 1 << 1,
    NSStreamEventHasSpaceAvailable = 1 << 2,
    NSStreamEventErrorOccurred = 1 << 3,
    NSStreamEventEndEncountered = 1 << 4,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSStream")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSStream;
}

#[cfg(feature = "Foundation_NSStream")]
unsafe impl NSObjectProtocol for NSStream {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSStream")]
    pub type NSStream;

    #[objc2::method(sel = "open")]
    pub unsafe fn open(&self);

    #[objc2::method(sel = "close")]
    pub unsafe fn close(&self);

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn NSStreamDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(&self, delegate: Option<&ProtocolObject<dyn NSStreamDelegate>>);

    #[objc2::method(sel = "propertyForKey:", managed = "Other")]
    pub unsafe fn propertyForKey(&self, key: &NSStreamPropertyKey) -> Option<Id<Object>>;

    #[objc2::method(sel = "setProperty:forKey:")]
    pub unsafe fn setProperty_forKey(
        &self,
        property: Option<&Object>,
        key: &NSStreamPropertyKey,
    ) -> bool;

    #[cfg(feature = "Foundation_NSRunLoop")]
    #[objc2::method(sel = "scheduleInRunLoop:forMode:")]
    pub unsafe fn scheduleInRunLoop_forMode(&self, a_run_loop: &NSRunLoop, mode: &NSRunLoopMode);

    #[cfg(feature = "Foundation_NSRunLoop")]
    #[objc2::method(sel = "removeFromRunLoop:forMode:")]
    pub unsafe fn removeFromRunLoop_forMode(&self, a_run_loop: &NSRunLoop, mode: &NSRunLoopMode);

    #[objc2::method(sel = "streamStatus")]
    pub unsafe fn streamStatus(&self) -> NSStreamStatus;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "streamError", managed = "Other")]
    pub unsafe fn streamError(&self) -> Option<Id<NSError>>;
}

#[objc2::interface(
    unsafe super = NSStream,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSInputStream")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSInputStream;
}

#[cfg(feature = "Foundation_NSInputStream")]
unsafe impl NSObjectProtocol for NSInputStream {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSInputStream")]
    pub type NSInputStream;

    #[objc2::method(sel = "read:maxLength:")]
    pub unsafe fn read_maxLength(&self, buffer: NonNull<u8>, len: NSUInteger) -> NSInteger;

    #[objc2::method(sel = "getBuffer:length:")]
    pub unsafe fn getBuffer_length(
        &self,
        buffer: NonNull<*mut u8>,
        len: NonNull<NSUInteger>,
    ) -> bool;

    #[objc2::method(sel = "hasBytesAvailable")]
    pub unsafe fn hasBytesAvailable(&self) -> bool;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "initWithData:", managed = "Init")]
    pub unsafe fn initWithData(this: Option<Allocated<Self>>, data: &NSData) -> Id<Self>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "initWithURL:", managed = "Init")]
    pub unsafe fn initWithURL(this: Option<Allocated<Self>>, url: &NSURL) -> Option<Id<Self>>;
}

#[objc2::interface(
    unsafe super = NSStream,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSOutputStream")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSOutputStream;
}

#[cfg(feature = "Foundation_NSOutputStream")]
unsafe impl NSObjectProtocol for NSOutputStream {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSOutputStream")]
    pub type NSOutputStream;

    #[objc2::method(sel = "write:maxLength:")]
    pub unsafe fn write_maxLength(&self, buffer: NonNull<u8>, len: NSUInteger) -> NSInteger;

    #[objc2::method(sel = "hasSpaceAvailable")]
    pub unsafe fn hasSpaceAvailable(&self) -> bool;

    #[objc2::method(sel = "initToMemory", managed = "Init")]
    pub unsafe fn initToMemory(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "initToBuffer:capacity:", managed = "Init")]
    pub unsafe fn initToBuffer_capacity(
        this: Option<Allocated<Self>>,
        buffer: NonNull<u8>,
        capacity: NSUInteger,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "initWithURL:append:", managed = "Init")]
    pub unsafe fn initWithURL_append(
        this: Option<Allocated<Self>>,
        url: &NSURL,
        should_append: bool,
    ) -> Option<Id<Self>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSStream")]
    pub type NSStream;

    #[cfg(all(
        feature = "Foundation_NSInputStream",
        feature = "Foundation_NSOutputStream",
        feature = "Foundation_NSString"
    ))]
    #[deprecated = "Use nw_connection_t in Network framework instead"]
    #[objc2::method(sel = "getStreamsToHostWithName:port:inputStream:outputStream:")]
    pub unsafe fn getStreamsToHostWithName_port_inputStream_outputStream(
        hostname: &NSString,
        port: NSInteger,
        input_stream: Option<&mut Option<Id<NSInputStream>>>,
        output_stream: Option<&mut Option<Id<NSOutputStream>>>,
    );

    #[cfg(all(
        feature = "Foundation_NSHost",
        feature = "Foundation_NSInputStream",
        feature = "Foundation_NSOutputStream"
    ))]
    #[deprecated = "Use nw_connection_t in Network framework instead"]
    #[objc2::method(sel = "getStreamsToHost:port:inputStream:outputStream:")]
    pub unsafe fn getStreamsToHost_port_inputStream_outputStream(
        host: &NSHost,
        port: NSInteger,
        input_stream: Option<&mut Option<Id<NSInputStream>>>,
        output_stream: Option<&mut Option<Id<NSOutputStream>>>,
    );
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSStream")]
    pub type NSStream;

    #[cfg(all(
        feature = "Foundation_NSInputStream",
        feature = "Foundation_NSOutputStream"
    ))]
    #[objc2::method(sel = "getBoundStreamsWithBufferSize:inputStream:outputStream:")]
    pub unsafe fn getBoundStreamsWithBufferSize_inputStream_outputStream(
        buffer_size: NSUInteger,
        input_stream: Option<&mut Option<Id<NSInputStream>>>,
        output_stream: Option<&mut Option<Id<NSOutputStream>>>,
    );
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSInputStream")]
    pub type NSInputStream;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithFileAtPath:", managed = "Init")]
    pub unsafe fn initWithFileAtPath(
        this: Option<Allocated<Self>>,
        path: &NSString,
    ) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "inputStreamWithData:", managed = "Other")]
    pub unsafe fn inputStreamWithData(data: &NSData) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "inputStreamWithFileAtPath:", managed = "Other")]
    pub unsafe fn inputStreamWithFileAtPath(path: &NSString) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "inputStreamWithURL:", managed = "Other")]
    pub unsafe fn inputStreamWithURL(url: &NSURL) -> Option<Id<Self>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSOutputStream")]
    pub type NSOutputStream;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initToFileAtPath:append:", managed = "Init")]
    pub unsafe fn initToFileAtPath_append(
        this: Option<Allocated<Self>>,
        path: &NSString,
        should_append: bool,
    ) -> Option<Id<Self>>;

    #[objc2::method(sel = "outputStreamToMemory", managed = "Other")]
    pub unsafe fn outputStreamToMemory() -> Id<Self>;

    #[objc2::method(sel = "outputStreamToBuffer:capacity:", managed = "Other")]
    pub unsafe fn outputStreamToBuffer_capacity(
        buffer: NonNull<u8>,
        capacity: NSUInteger,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "outputStreamToFileAtPath:append:", managed = "Other")]
    pub unsafe fn outputStreamToFileAtPath_append(path: &NSString, should_append: bool)
        -> Id<Self>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "outputStreamWithURL:append:", managed = "Other")]
    pub unsafe fn outputStreamWithURL_append(url: &NSURL, should_append: bool) -> Option<Id<Self>>;
}

#[objc2::protocol]
pub unsafe trait NSStreamDelegate: NSObjectProtocol {
    #[cfg(feature = "Foundation_NSStream")]
    #[objc2::method(optional, sel = "stream:handleEvent:")]
    unsafe fn stream_handleEvent(&self, a_stream: &NSStream, event_code: NSStreamEvent);
}

extern_static!(NSStreamSocketSecurityLevelKey: &'static NSStreamPropertyKey);

typed_enum!(
    pub type NSStreamSocketSecurityLevel = NSString;
);

extern_static!(NSStreamSocketSecurityLevelNone: &'static NSStreamSocketSecurityLevel);

extern_static!(NSStreamSocketSecurityLevelSSLv2: &'static NSStreamSocketSecurityLevel);

extern_static!(NSStreamSocketSecurityLevelSSLv3: &'static NSStreamSocketSecurityLevel);

extern_static!(NSStreamSocketSecurityLevelTLSv1: &'static NSStreamSocketSecurityLevel);

extern_static!(NSStreamSocketSecurityLevelNegotiatedSSL: &'static NSStreamSocketSecurityLevel);

extern_static!(NSStreamSOCKSProxyConfigurationKey: &'static NSStreamPropertyKey);

typed_enum!(
    pub type NSStreamSOCKSProxyConfiguration = NSString;
);

extern_static!(NSStreamSOCKSProxyHostKey: &'static NSStreamSOCKSProxyConfiguration);

extern_static!(NSStreamSOCKSProxyPortKey: &'static NSStreamSOCKSProxyConfiguration);

extern_static!(NSStreamSOCKSProxyVersionKey: &'static NSStreamSOCKSProxyConfiguration);

extern_static!(NSStreamSOCKSProxyUserKey: &'static NSStreamSOCKSProxyConfiguration);

extern_static!(NSStreamSOCKSProxyPasswordKey: &'static NSStreamSOCKSProxyConfiguration);

typed_enum!(
    pub type NSStreamSOCKSProxyVersion = NSString;
);

extern_static!(NSStreamSOCKSProxyVersion4: &'static NSStreamSOCKSProxyVersion);

extern_static!(NSStreamSOCKSProxyVersion5: &'static NSStreamSOCKSProxyVersion);

extern_static!(NSStreamDataWrittenToMemoryStreamKey: &'static NSStreamPropertyKey);

extern_static!(NSStreamFileCurrentOffsetKey: &'static NSStreamPropertyKey);

extern_static!(NSStreamSocketSSLErrorDomain: &'static NSErrorDomain);

extern_static!(NSStreamSOCKSErrorDomain: &'static NSErrorDomain);

extern_static!(NSStreamNetworkServiceType: &'static NSStreamPropertyKey);

typed_enum!(
    pub type NSStreamNetworkServiceTypeValue = NSString;
);

extern_static!(NSStreamNetworkServiceTypeVoIP: &'static NSStreamNetworkServiceTypeValue);

extern_static!(NSStreamNetworkServiceTypeVideo: &'static NSStreamNetworkServiceTypeValue);

extern_static!(NSStreamNetworkServiceTypeBackground: &'static NSStreamNetworkServiceTypeValue);

extern_static!(NSStreamNetworkServiceTypeVoice: &'static NSStreamNetworkServiceTypeValue);

extern_static!(NSStreamNetworkServiceTypeCallSignaling: &'static NSStreamNetworkServiceTypeValue);
