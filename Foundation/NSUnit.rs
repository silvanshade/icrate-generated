//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitConverter")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSUnitConverter;
}

#[cfg(feature = "Foundation_NSUnitConverter")]
unsafe impl NSObjectProtocol for NSUnitConverter {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitConverter")]
    pub type NSUnitConverter;

    #[objc2::method(sel = "baseUnitValueFromValue:")]
    pub unsafe fn baseUnitValueFromValue(&self, value: c_double) -> c_double;

    #[objc2::method(sel = "valueFromBaseUnitValue:")]
    pub unsafe fn valueFromBaseUnitValue(&self, base_unit_value: c_double) -> c_double;
}

#[objc2::interface(
    unsafe super = NSUnitConverter,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitConverterLinear")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSUnitConverterLinear;
}

#[cfg(feature = "Foundation_NSUnitConverterLinear")]
unsafe impl NSCoding for NSUnitConverterLinear {}

#[cfg(feature = "Foundation_NSUnitConverterLinear")]
unsafe impl NSObjectProtocol for NSUnitConverterLinear {}

#[cfg(feature = "Foundation_NSUnitConverterLinear")]
unsafe impl NSSecureCoding for NSUnitConverterLinear {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitConverterLinear")]
    pub type NSUnitConverterLinear;

    #[objc2::method(sel = "coefficient")]
    pub unsafe fn coefficient(&self) -> c_double;

    #[objc2::method(sel = "constant")]
    pub unsafe fn constant(&self) -> c_double;

    #[objc2::method(sel = "initWithCoefficient:", managed = "Init")]
    pub unsafe fn initWithCoefficient(
        this: Option<Allocated<Self>>,
        coefficient: c_double,
    ) -> Id<Self>;

    #[objc2::method(sel = "initWithCoefficient:constant:", managed = "Init")]
    pub unsafe fn initWithCoefficient_constant(
        this: Option<Allocated<Self>>,
        coefficient: c_double,
        constant: c_double,
    ) -> Id<Self>;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnit")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSUnit;
}

#[cfg(feature = "Foundation_NSUnit")]
unsafe impl NSCoding for NSUnit {}

#[cfg(feature = "Foundation_NSUnit")]
unsafe impl NSObjectProtocol for NSUnit {}

#[cfg(feature = "Foundation_NSUnit")]
unsafe impl NSSecureCoding for NSUnit {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnit")]
    pub type NSUnit;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "symbol", managed = "Other")]
    pub unsafe fn symbol(&self) -> Id<NSString>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithSymbol:", managed = "Init")]
    pub unsafe fn initWithSymbol(this: Option<Allocated<Self>>, symbol: &NSString) -> Id<Self>;
}

#[objc2::interface(
    unsafe super = NSUnit,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSDimension")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSDimension;
}

#[cfg(feature = "Foundation_NSDimension")]
unsafe impl NSCoding for NSDimension {}

#[cfg(feature = "Foundation_NSDimension")]
unsafe impl NSObjectProtocol for NSDimension {}

#[cfg(feature = "Foundation_NSDimension")]
unsafe impl NSSecureCoding for NSDimension {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSDimension")]
    pub type NSDimension;

    #[cfg(feature = "Foundation_NSUnitConverter")]
    #[objc2::method(sel = "converter", managed = "Other")]
    pub unsafe fn converter(&self) -> Id<NSUnitConverter>;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "Foundation_NSUnitConverter"
    ))]
    #[objc2::method(sel = "initWithSymbol:converter:", managed = "Init")]
    pub unsafe fn initWithSymbol_converter(
        this: Option<Allocated<Self>>,
        symbol: &NSString,
        converter: &NSUnitConverter,
    ) -> Id<Self>;

    #[objc2::method(sel = "baseUnit", managed = "Other")]
    pub unsafe fn baseUnit() -> Id<Self>;
}

#[objc2::interface(
    unsafe super = NSDimension,
    unsafe inherits = [
        NSUnit,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitAcceleration")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSUnitAcceleration;
}

#[cfg(feature = "Foundation_NSUnitAcceleration")]
unsafe impl NSCoding for NSUnitAcceleration {}

#[cfg(feature = "Foundation_NSUnitAcceleration")]
unsafe impl NSObjectProtocol for NSUnitAcceleration {}

#[cfg(feature = "Foundation_NSUnitAcceleration")]
unsafe impl NSSecureCoding for NSUnitAcceleration {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitAcceleration")]
    pub type NSUnitAcceleration;

    #[objc2::method(sel = "metersPerSecondSquared", managed = "Other")]
    pub unsafe fn metersPerSecondSquared() -> Id<NSUnitAcceleration>;

    #[objc2::method(sel = "gravity", managed = "Other")]
    pub unsafe fn gravity() -> Id<NSUnitAcceleration>;
}

#[objc2::interface(
    unsafe super = NSDimension,
    unsafe inherits = [
        NSUnit,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitAngle")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSUnitAngle;
}

#[cfg(feature = "Foundation_NSUnitAngle")]
unsafe impl NSCoding for NSUnitAngle {}

#[cfg(feature = "Foundation_NSUnitAngle")]
unsafe impl NSObjectProtocol for NSUnitAngle {}

#[cfg(feature = "Foundation_NSUnitAngle")]
unsafe impl NSSecureCoding for NSUnitAngle {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitAngle")]
    pub type NSUnitAngle;

    #[objc2::method(sel = "degrees", managed = "Other")]
    pub unsafe fn degrees() -> Id<NSUnitAngle>;

    #[objc2::method(sel = "arcMinutes", managed = "Other")]
    pub unsafe fn arcMinutes() -> Id<NSUnitAngle>;

    #[objc2::method(sel = "arcSeconds", managed = "Other")]
    pub unsafe fn arcSeconds() -> Id<NSUnitAngle>;

    #[objc2::method(sel = "radians", managed = "Other")]
    pub unsafe fn radians() -> Id<NSUnitAngle>;

    #[objc2::method(sel = "gradians", managed = "Other")]
    pub unsafe fn gradians() -> Id<NSUnitAngle>;

    #[objc2::method(sel = "revolutions", managed = "Other")]
    pub unsafe fn revolutions() -> Id<NSUnitAngle>;
}

#[objc2::interface(
    unsafe super = NSDimension,
    unsafe inherits = [
        NSUnit,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitArea")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSUnitArea;
}

#[cfg(feature = "Foundation_NSUnitArea")]
unsafe impl NSCoding for NSUnitArea {}

#[cfg(feature = "Foundation_NSUnitArea")]
unsafe impl NSObjectProtocol for NSUnitArea {}

#[cfg(feature = "Foundation_NSUnitArea")]
unsafe impl NSSecureCoding for NSUnitArea {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitArea")]
    pub type NSUnitArea;

    #[objc2::method(sel = "squareMegameters", managed = "Other")]
    pub unsafe fn squareMegameters() -> Id<NSUnitArea>;

    #[objc2::method(sel = "squareKilometers", managed = "Other")]
    pub unsafe fn squareKilometers() -> Id<NSUnitArea>;

    #[objc2::method(sel = "squareMeters", managed = "Other")]
    pub unsafe fn squareMeters() -> Id<NSUnitArea>;

    #[objc2::method(sel = "squareCentimeters", managed = "Other")]
    pub unsafe fn squareCentimeters() -> Id<NSUnitArea>;

    #[objc2::method(sel = "squareMillimeters", managed = "Other")]
    pub unsafe fn squareMillimeters() -> Id<NSUnitArea>;

    #[objc2::method(sel = "squareMicrometers", managed = "Other")]
    pub unsafe fn squareMicrometers() -> Id<NSUnitArea>;

    #[objc2::method(sel = "squareNanometers", managed = "Other")]
    pub unsafe fn squareNanometers() -> Id<NSUnitArea>;

    #[objc2::method(sel = "squareInches", managed = "Other")]
    pub unsafe fn squareInches() -> Id<NSUnitArea>;

    #[objc2::method(sel = "squareFeet", managed = "Other")]
    pub unsafe fn squareFeet() -> Id<NSUnitArea>;

    #[objc2::method(sel = "squareYards", managed = "Other")]
    pub unsafe fn squareYards() -> Id<NSUnitArea>;

    #[objc2::method(sel = "squareMiles", managed = "Other")]
    pub unsafe fn squareMiles() -> Id<NSUnitArea>;

    #[objc2::method(sel = "acres", managed = "Other")]
    pub unsafe fn acres() -> Id<NSUnitArea>;

    #[objc2::method(sel = "ares", managed = "Other")]
    pub unsafe fn ares() -> Id<NSUnitArea>;

    #[objc2::method(sel = "hectares", managed = "Other")]
    pub unsafe fn hectares() -> Id<NSUnitArea>;
}

#[objc2::interface(
    unsafe super = NSDimension,
    unsafe inherits = [
        NSUnit,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitConcentrationMass")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSUnitConcentrationMass;
}

#[cfg(feature = "Foundation_NSUnitConcentrationMass")]
unsafe impl NSCoding for NSUnitConcentrationMass {}

#[cfg(feature = "Foundation_NSUnitConcentrationMass")]
unsafe impl NSObjectProtocol for NSUnitConcentrationMass {}

#[cfg(feature = "Foundation_NSUnitConcentrationMass")]
unsafe impl NSSecureCoding for NSUnitConcentrationMass {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitConcentrationMass")]
    pub type NSUnitConcentrationMass;

    #[objc2::method(sel = "gramsPerLiter", managed = "Other")]
    pub unsafe fn gramsPerLiter() -> Id<NSUnitConcentrationMass>;

    #[objc2::method(sel = "milligramsPerDeciliter", managed = "Other")]
    pub unsafe fn milligramsPerDeciliter() -> Id<NSUnitConcentrationMass>;

    #[objc2::method(sel = "millimolesPerLiterWithGramsPerMole:", managed = "Other")]
    pub unsafe fn millimolesPerLiterWithGramsPerMole(
        grams_per_mole: c_double,
    ) -> Id<NSUnitConcentrationMass>;
}

#[objc2::interface(
    unsafe super = NSDimension,
    unsafe inherits = [
        NSUnit,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitDispersion")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSUnitDispersion;
}

#[cfg(feature = "Foundation_NSUnitDispersion")]
unsafe impl NSCoding for NSUnitDispersion {}

#[cfg(feature = "Foundation_NSUnitDispersion")]
unsafe impl NSObjectProtocol for NSUnitDispersion {}

#[cfg(feature = "Foundation_NSUnitDispersion")]
unsafe impl NSSecureCoding for NSUnitDispersion {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitDispersion")]
    pub type NSUnitDispersion;

    #[objc2::method(sel = "partsPerMillion", managed = "Other")]
    pub unsafe fn partsPerMillion() -> Id<NSUnitDispersion>;
}

#[objc2::interface(
    unsafe super = NSDimension,
    unsafe inherits = [
        NSUnit,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitDuration")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSUnitDuration;
}

#[cfg(feature = "Foundation_NSUnitDuration")]
unsafe impl NSCoding for NSUnitDuration {}

#[cfg(feature = "Foundation_NSUnitDuration")]
unsafe impl NSObjectProtocol for NSUnitDuration {}

#[cfg(feature = "Foundation_NSUnitDuration")]
unsafe impl NSSecureCoding for NSUnitDuration {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitDuration")]
    pub type NSUnitDuration;

    #[objc2::method(sel = "hours", managed = "Other")]
    pub unsafe fn hours() -> Id<NSUnitDuration>;

    #[objc2::method(sel = "minutes", managed = "Other")]
    pub unsafe fn minutes() -> Id<NSUnitDuration>;

    #[objc2::method(sel = "seconds", managed = "Other")]
    pub unsafe fn seconds() -> Id<NSUnitDuration>;

    #[objc2::method(sel = "milliseconds", managed = "Other")]
    pub unsafe fn milliseconds() -> Id<NSUnitDuration>;

    #[objc2::method(sel = "microseconds", managed = "Other")]
    pub unsafe fn microseconds() -> Id<NSUnitDuration>;

    #[objc2::method(sel = "nanoseconds", managed = "Other")]
    pub unsafe fn nanoseconds() -> Id<NSUnitDuration>;

    #[objc2::method(sel = "picoseconds", managed = "Other")]
    pub unsafe fn picoseconds() -> Id<NSUnitDuration>;
}

#[objc2::interface(
    unsafe super = NSDimension,
    unsafe inherits = [
        NSUnit,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitElectricCharge")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSUnitElectricCharge;
}

#[cfg(feature = "Foundation_NSUnitElectricCharge")]
unsafe impl NSCoding for NSUnitElectricCharge {}

#[cfg(feature = "Foundation_NSUnitElectricCharge")]
unsafe impl NSObjectProtocol for NSUnitElectricCharge {}

#[cfg(feature = "Foundation_NSUnitElectricCharge")]
unsafe impl NSSecureCoding for NSUnitElectricCharge {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitElectricCharge")]
    pub type NSUnitElectricCharge;

    #[objc2::method(sel = "coulombs", managed = "Other")]
    pub unsafe fn coulombs() -> Id<NSUnitElectricCharge>;

    #[objc2::method(sel = "megaampereHours", managed = "Other")]
    pub unsafe fn megaampereHours() -> Id<NSUnitElectricCharge>;

    #[objc2::method(sel = "kiloampereHours", managed = "Other")]
    pub unsafe fn kiloampereHours() -> Id<NSUnitElectricCharge>;

    #[objc2::method(sel = "ampereHours", managed = "Other")]
    pub unsafe fn ampereHours() -> Id<NSUnitElectricCharge>;

    #[objc2::method(sel = "milliampereHours", managed = "Other")]
    pub unsafe fn milliampereHours() -> Id<NSUnitElectricCharge>;

    #[objc2::method(sel = "microampereHours", managed = "Other")]
    pub unsafe fn microampereHours() -> Id<NSUnitElectricCharge>;
}

#[objc2::interface(
    unsafe super = NSDimension,
    unsafe inherits = [
        NSUnit,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitElectricCurrent")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSUnitElectricCurrent;
}

#[cfg(feature = "Foundation_NSUnitElectricCurrent")]
unsafe impl NSCoding for NSUnitElectricCurrent {}

#[cfg(feature = "Foundation_NSUnitElectricCurrent")]
unsafe impl NSObjectProtocol for NSUnitElectricCurrent {}

#[cfg(feature = "Foundation_NSUnitElectricCurrent")]
unsafe impl NSSecureCoding for NSUnitElectricCurrent {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitElectricCurrent")]
    pub type NSUnitElectricCurrent;

    #[objc2::method(sel = "megaamperes", managed = "Other")]
    pub unsafe fn megaamperes() -> Id<NSUnitElectricCurrent>;

    #[objc2::method(sel = "kiloamperes", managed = "Other")]
    pub unsafe fn kiloamperes() -> Id<NSUnitElectricCurrent>;

    #[objc2::method(sel = "amperes", managed = "Other")]
    pub unsafe fn amperes() -> Id<NSUnitElectricCurrent>;

    #[objc2::method(sel = "milliamperes", managed = "Other")]
    pub unsafe fn milliamperes() -> Id<NSUnitElectricCurrent>;

    #[objc2::method(sel = "microamperes", managed = "Other")]
    pub unsafe fn microamperes() -> Id<NSUnitElectricCurrent>;
}

#[objc2::interface(
    unsafe super = NSDimension,
    unsafe inherits = [
        NSUnit,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitElectricPotentialDifference")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSUnitElectricPotentialDifference;
}

#[cfg(feature = "Foundation_NSUnitElectricPotentialDifference")]
unsafe impl NSCoding for NSUnitElectricPotentialDifference {}

#[cfg(feature = "Foundation_NSUnitElectricPotentialDifference")]
unsafe impl NSObjectProtocol for NSUnitElectricPotentialDifference {}

#[cfg(feature = "Foundation_NSUnitElectricPotentialDifference")]
unsafe impl NSSecureCoding for NSUnitElectricPotentialDifference {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitElectricPotentialDifference")]
    pub type NSUnitElectricPotentialDifference;

    #[objc2::method(sel = "megavolts", managed = "Other")]
    pub unsafe fn megavolts() -> Id<NSUnitElectricPotentialDifference>;

    #[objc2::method(sel = "kilovolts", managed = "Other")]
    pub unsafe fn kilovolts() -> Id<NSUnitElectricPotentialDifference>;

    #[objc2::method(sel = "volts", managed = "Other")]
    pub unsafe fn volts() -> Id<NSUnitElectricPotentialDifference>;

    #[objc2::method(sel = "millivolts", managed = "Other")]
    pub unsafe fn millivolts() -> Id<NSUnitElectricPotentialDifference>;

    #[objc2::method(sel = "microvolts", managed = "Other")]
    pub unsafe fn microvolts() -> Id<NSUnitElectricPotentialDifference>;
}

#[objc2::interface(
    unsafe super = NSDimension,
    unsafe inherits = [
        NSUnit,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitElectricResistance")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSUnitElectricResistance;
}

#[cfg(feature = "Foundation_NSUnitElectricResistance")]
unsafe impl NSCoding for NSUnitElectricResistance {}

#[cfg(feature = "Foundation_NSUnitElectricResistance")]
unsafe impl NSObjectProtocol for NSUnitElectricResistance {}

#[cfg(feature = "Foundation_NSUnitElectricResistance")]
unsafe impl NSSecureCoding for NSUnitElectricResistance {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitElectricResistance")]
    pub type NSUnitElectricResistance;

    #[objc2::method(sel = "megaohms", managed = "Other")]
    pub unsafe fn megaohms() -> Id<NSUnitElectricResistance>;

    #[objc2::method(sel = "kiloohms", managed = "Other")]
    pub unsafe fn kiloohms() -> Id<NSUnitElectricResistance>;

    #[objc2::method(sel = "ohms", managed = "Other")]
    pub unsafe fn ohms() -> Id<NSUnitElectricResistance>;

    #[objc2::method(sel = "milliohms", managed = "Other")]
    pub unsafe fn milliohms() -> Id<NSUnitElectricResistance>;

    #[objc2::method(sel = "microohms", managed = "Other")]
    pub unsafe fn microohms() -> Id<NSUnitElectricResistance>;
}

#[objc2::interface(
    unsafe super = NSDimension,
    unsafe inherits = [
        NSUnit,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitEnergy")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSUnitEnergy;
}

#[cfg(feature = "Foundation_NSUnitEnergy")]
unsafe impl NSCoding for NSUnitEnergy {}

#[cfg(feature = "Foundation_NSUnitEnergy")]
unsafe impl NSObjectProtocol for NSUnitEnergy {}

#[cfg(feature = "Foundation_NSUnitEnergy")]
unsafe impl NSSecureCoding for NSUnitEnergy {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitEnergy")]
    pub type NSUnitEnergy;

    #[objc2::method(sel = "kilojoules", managed = "Other")]
    pub unsafe fn kilojoules() -> Id<NSUnitEnergy>;

    #[objc2::method(sel = "joules", managed = "Other")]
    pub unsafe fn joules() -> Id<NSUnitEnergy>;

    #[objc2::method(sel = "kilocalories", managed = "Other")]
    pub unsafe fn kilocalories() -> Id<NSUnitEnergy>;

    #[objc2::method(sel = "calories", managed = "Other")]
    pub unsafe fn calories() -> Id<NSUnitEnergy>;

    #[objc2::method(sel = "kilowattHours", managed = "Other")]
    pub unsafe fn kilowattHours() -> Id<NSUnitEnergy>;
}

#[objc2::interface(
    unsafe super = NSDimension,
    unsafe inherits = [
        NSUnit,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitFrequency")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSUnitFrequency;
}

#[cfg(feature = "Foundation_NSUnitFrequency")]
unsafe impl NSCoding for NSUnitFrequency {}

#[cfg(feature = "Foundation_NSUnitFrequency")]
unsafe impl NSObjectProtocol for NSUnitFrequency {}

#[cfg(feature = "Foundation_NSUnitFrequency")]
unsafe impl NSSecureCoding for NSUnitFrequency {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitFrequency")]
    pub type NSUnitFrequency;

    #[objc2::method(sel = "terahertz", managed = "Other")]
    pub unsafe fn terahertz() -> Id<NSUnitFrequency>;

    #[objc2::method(sel = "gigahertz", managed = "Other")]
    pub unsafe fn gigahertz() -> Id<NSUnitFrequency>;

    #[objc2::method(sel = "megahertz", managed = "Other")]
    pub unsafe fn megahertz() -> Id<NSUnitFrequency>;

    #[objc2::method(sel = "kilohertz", managed = "Other")]
    pub unsafe fn kilohertz() -> Id<NSUnitFrequency>;

    #[objc2::method(sel = "hertz", managed = "Other")]
    pub unsafe fn hertz() -> Id<NSUnitFrequency>;

    #[objc2::method(sel = "millihertz", managed = "Other")]
    pub unsafe fn millihertz() -> Id<NSUnitFrequency>;

    #[objc2::method(sel = "microhertz", managed = "Other")]
    pub unsafe fn microhertz() -> Id<NSUnitFrequency>;

    #[objc2::method(sel = "nanohertz", managed = "Other")]
    pub unsafe fn nanohertz() -> Id<NSUnitFrequency>;

    #[objc2::method(sel = "framesPerSecond", managed = "Other")]
    pub unsafe fn framesPerSecond() -> Id<NSUnitFrequency>;
}

#[objc2::interface(
    unsafe super = NSDimension,
    unsafe inherits = [
        NSUnit,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitFuelEfficiency")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSUnitFuelEfficiency;
}

#[cfg(feature = "Foundation_NSUnitFuelEfficiency")]
unsafe impl NSCoding for NSUnitFuelEfficiency {}

#[cfg(feature = "Foundation_NSUnitFuelEfficiency")]
unsafe impl NSObjectProtocol for NSUnitFuelEfficiency {}

#[cfg(feature = "Foundation_NSUnitFuelEfficiency")]
unsafe impl NSSecureCoding for NSUnitFuelEfficiency {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitFuelEfficiency")]
    pub type NSUnitFuelEfficiency;

    #[objc2::method(sel = "litersPer100Kilometers", managed = "Other")]
    pub unsafe fn litersPer100Kilometers() -> Id<NSUnitFuelEfficiency>;

    #[objc2::method(sel = "milesPerImperialGallon", managed = "Other")]
    pub unsafe fn milesPerImperialGallon() -> Id<NSUnitFuelEfficiency>;

    #[objc2::method(sel = "milesPerGallon", managed = "Other")]
    pub unsafe fn milesPerGallon() -> Id<NSUnitFuelEfficiency>;
}

#[objc2::interface(
    unsafe super = NSDimension,
    unsafe inherits = [
        NSUnit,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitInformationStorage")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSUnitInformationStorage;
}

#[cfg(feature = "Foundation_NSUnitInformationStorage")]
unsafe impl NSCoding for NSUnitInformationStorage {}

#[cfg(feature = "Foundation_NSUnitInformationStorage")]
unsafe impl NSObjectProtocol for NSUnitInformationStorage {}

#[cfg(feature = "Foundation_NSUnitInformationStorage")]
unsafe impl NSSecureCoding for NSUnitInformationStorage {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitInformationStorage")]
    pub type NSUnitInformationStorage;

    #[objc2::method(sel = "bytes", managed = "Other")]
    pub unsafe fn bytes() -> Id<NSUnitInformationStorage>;

    #[objc2::method(sel = "bits", managed = "Other")]
    pub unsafe fn bits() -> Id<NSUnitInformationStorage>;

    #[objc2::method(sel = "nibbles", managed = "Other")]
    pub unsafe fn nibbles() -> Id<NSUnitInformationStorage>;

    #[objc2::method(sel = "yottabytes", managed = "Other")]
    pub unsafe fn yottabytes() -> Id<NSUnitInformationStorage>;

    #[objc2::method(sel = "zettabytes", managed = "Other")]
    pub unsafe fn zettabytes() -> Id<NSUnitInformationStorage>;

    #[objc2::method(sel = "exabytes", managed = "Other")]
    pub unsafe fn exabytes() -> Id<NSUnitInformationStorage>;

    #[objc2::method(sel = "petabytes", managed = "Other")]
    pub unsafe fn petabytes() -> Id<NSUnitInformationStorage>;

    #[objc2::method(sel = "terabytes", managed = "Other")]
    pub unsafe fn terabytes() -> Id<NSUnitInformationStorage>;

    #[objc2::method(sel = "gigabytes", managed = "Other")]
    pub unsafe fn gigabytes() -> Id<NSUnitInformationStorage>;

    #[objc2::method(sel = "megabytes", managed = "Other")]
    pub unsafe fn megabytes() -> Id<NSUnitInformationStorage>;

    #[objc2::method(sel = "kilobytes", managed = "Other")]
    pub unsafe fn kilobytes() -> Id<NSUnitInformationStorage>;

    #[objc2::method(sel = "yottabits", managed = "Other")]
    pub unsafe fn yottabits() -> Id<NSUnitInformationStorage>;

    #[objc2::method(sel = "zettabits", managed = "Other")]
    pub unsafe fn zettabits() -> Id<NSUnitInformationStorage>;

    #[objc2::method(sel = "exabits", managed = "Other")]
    pub unsafe fn exabits() -> Id<NSUnitInformationStorage>;

    #[objc2::method(sel = "petabits", managed = "Other")]
    pub unsafe fn petabits() -> Id<NSUnitInformationStorage>;

    #[objc2::method(sel = "terabits", managed = "Other")]
    pub unsafe fn terabits() -> Id<NSUnitInformationStorage>;

    #[objc2::method(sel = "gigabits", managed = "Other")]
    pub unsafe fn gigabits() -> Id<NSUnitInformationStorage>;

    #[objc2::method(sel = "megabits", managed = "Other")]
    pub unsafe fn megabits() -> Id<NSUnitInformationStorage>;

    #[objc2::method(sel = "kilobits", managed = "Other")]
    pub unsafe fn kilobits() -> Id<NSUnitInformationStorage>;

    #[objc2::method(sel = "yobibytes", managed = "Other")]
    pub unsafe fn yobibytes() -> Id<NSUnitInformationStorage>;

    #[objc2::method(sel = "zebibytes", managed = "Other")]
    pub unsafe fn zebibytes() -> Id<NSUnitInformationStorage>;

    #[objc2::method(sel = "exbibytes", managed = "Other")]
    pub unsafe fn exbibytes() -> Id<NSUnitInformationStorage>;

    #[objc2::method(sel = "pebibytes", managed = "Other")]
    pub unsafe fn pebibytes() -> Id<NSUnitInformationStorage>;

    #[objc2::method(sel = "tebibytes", managed = "Other")]
    pub unsafe fn tebibytes() -> Id<NSUnitInformationStorage>;

    #[objc2::method(sel = "gibibytes", managed = "Other")]
    pub unsafe fn gibibytes() -> Id<NSUnitInformationStorage>;

    #[objc2::method(sel = "mebibytes", managed = "Other")]
    pub unsafe fn mebibytes() -> Id<NSUnitInformationStorage>;

    #[objc2::method(sel = "kibibytes", managed = "Other")]
    pub unsafe fn kibibytes() -> Id<NSUnitInformationStorage>;

    #[objc2::method(sel = "yobibits", managed = "Other")]
    pub unsafe fn yobibits() -> Id<NSUnitInformationStorage>;

    #[objc2::method(sel = "zebibits", managed = "Other")]
    pub unsafe fn zebibits() -> Id<NSUnitInformationStorage>;

    #[objc2::method(sel = "exbibits", managed = "Other")]
    pub unsafe fn exbibits() -> Id<NSUnitInformationStorage>;

    #[objc2::method(sel = "pebibits", managed = "Other")]
    pub unsafe fn pebibits() -> Id<NSUnitInformationStorage>;

    #[objc2::method(sel = "tebibits", managed = "Other")]
    pub unsafe fn tebibits() -> Id<NSUnitInformationStorage>;

    #[objc2::method(sel = "gibibits", managed = "Other")]
    pub unsafe fn gibibits() -> Id<NSUnitInformationStorage>;

    #[objc2::method(sel = "mebibits", managed = "Other")]
    pub unsafe fn mebibits() -> Id<NSUnitInformationStorage>;

    #[objc2::method(sel = "kibibits", managed = "Other")]
    pub unsafe fn kibibits() -> Id<NSUnitInformationStorage>;
}

#[objc2::interface(
    unsafe super = NSDimension,
    unsafe inherits = [
        NSUnit,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitLength")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSUnitLength;
}

#[cfg(feature = "Foundation_NSUnitLength")]
unsafe impl NSCoding for NSUnitLength {}

#[cfg(feature = "Foundation_NSUnitLength")]
unsafe impl NSObjectProtocol for NSUnitLength {}

#[cfg(feature = "Foundation_NSUnitLength")]
unsafe impl NSSecureCoding for NSUnitLength {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitLength")]
    pub type NSUnitLength;

    #[objc2::method(sel = "megameters", managed = "Other")]
    pub unsafe fn megameters() -> Id<NSUnitLength>;

    #[objc2::method(sel = "kilometers", managed = "Other")]
    pub unsafe fn kilometers() -> Id<NSUnitLength>;

    #[objc2::method(sel = "hectometers", managed = "Other")]
    pub unsafe fn hectometers() -> Id<NSUnitLength>;

    #[objc2::method(sel = "decameters", managed = "Other")]
    pub unsafe fn decameters() -> Id<NSUnitLength>;

    #[objc2::method(sel = "meters", managed = "Other")]
    pub unsafe fn meters() -> Id<NSUnitLength>;

    #[objc2::method(sel = "decimeters", managed = "Other")]
    pub unsafe fn decimeters() -> Id<NSUnitLength>;

    #[objc2::method(sel = "centimeters", managed = "Other")]
    pub unsafe fn centimeters() -> Id<NSUnitLength>;

    #[objc2::method(sel = "millimeters", managed = "Other")]
    pub unsafe fn millimeters() -> Id<NSUnitLength>;

    #[objc2::method(sel = "micrometers", managed = "Other")]
    pub unsafe fn micrometers() -> Id<NSUnitLength>;

    #[objc2::method(sel = "nanometers", managed = "Other")]
    pub unsafe fn nanometers() -> Id<NSUnitLength>;

    #[objc2::method(sel = "picometers", managed = "Other")]
    pub unsafe fn picometers() -> Id<NSUnitLength>;

    #[objc2::method(sel = "inches", managed = "Other")]
    pub unsafe fn inches() -> Id<NSUnitLength>;

    #[objc2::method(sel = "feet", managed = "Other")]
    pub unsafe fn feet() -> Id<NSUnitLength>;

    #[objc2::method(sel = "yards", managed = "Other")]
    pub unsafe fn yards() -> Id<NSUnitLength>;

    #[objc2::method(sel = "miles", managed = "Other")]
    pub unsafe fn miles() -> Id<NSUnitLength>;

    #[objc2::method(sel = "scandinavianMiles", managed = "Other")]
    pub unsafe fn scandinavianMiles() -> Id<NSUnitLength>;

    #[objc2::method(sel = "lightyears", managed = "Other")]
    pub unsafe fn lightyears() -> Id<NSUnitLength>;

    #[objc2::method(sel = "nauticalMiles", managed = "Other")]
    pub unsafe fn nauticalMiles() -> Id<NSUnitLength>;

    #[objc2::method(sel = "fathoms", managed = "Other")]
    pub unsafe fn fathoms() -> Id<NSUnitLength>;

    #[objc2::method(sel = "furlongs", managed = "Other")]
    pub unsafe fn furlongs() -> Id<NSUnitLength>;

    #[objc2::method(sel = "astronomicalUnits", managed = "Other")]
    pub unsafe fn astronomicalUnits() -> Id<NSUnitLength>;

    #[objc2::method(sel = "parsecs", managed = "Other")]
    pub unsafe fn parsecs() -> Id<NSUnitLength>;
}

#[objc2::interface(
    unsafe super = NSDimension,
    unsafe inherits = [
        NSUnit,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitIlluminance")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSUnitIlluminance;
}

#[cfg(feature = "Foundation_NSUnitIlluminance")]
unsafe impl NSCoding for NSUnitIlluminance {}

#[cfg(feature = "Foundation_NSUnitIlluminance")]
unsafe impl NSObjectProtocol for NSUnitIlluminance {}

#[cfg(feature = "Foundation_NSUnitIlluminance")]
unsafe impl NSSecureCoding for NSUnitIlluminance {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitIlluminance")]
    pub type NSUnitIlluminance;

    #[objc2::method(sel = "lux", managed = "Other")]
    pub unsafe fn lux() -> Id<NSUnitIlluminance>;
}

#[objc2::interface(
    unsafe super = NSDimension,
    unsafe inherits = [
        NSUnit,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitMass")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSUnitMass;
}

#[cfg(feature = "Foundation_NSUnitMass")]
unsafe impl NSCoding for NSUnitMass {}

#[cfg(feature = "Foundation_NSUnitMass")]
unsafe impl NSObjectProtocol for NSUnitMass {}

#[cfg(feature = "Foundation_NSUnitMass")]
unsafe impl NSSecureCoding for NSUnitMass {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitMass")]
    pub type NSUnitMass;

    #[objc2::method(sel = "kilograms", managed = "Other")]
    pub unsafe fn kilograms() -> Id<NSUnitMass>;

    #[objc2::method(sel = "grams", managed = "Other")]
    pub unsafe fn grams() -> Id<NSUnitMass>;

    #[objc2::method(sel = "decigrams", managed = "Other")]
    pub unsafe fn decigrams() -> Id<NSUnitMass>;

    #[objc2::method(sel = "centigrams", managed = "Other")]
    pub unsafe fn centigrams() -> Id<NSUnitMass>;

    #[objc2::method(sel = "milligrams", managed = "Other")]
    pub unsafe fn milligrams() -> Id<NSUnitMass>;

    #[objc2::method(sel = "micrograms", managed = "Other")]
    pub unsafe fn micrograms() -> Id<NSUnitMass>;

    #[objc2::method(sel = "nanograms", managed = "Other")]
    pub unsafe fn nanograms() -> Id<NSUnitMass>;

    #[objc2::method(sel = "picograms", managed = "Other")]
    pub unsafe fn picograms() -> Id<NSUnitMass>;

    #[objc2::method(sel = "ounces", managed = "Other")]
    pub unsafe fn ounces() -> Id<NSUnitMass>;

    #[objc2::method(sel = "poundsMass", managed = "Other")]
    pub unsafe fn poundsMass() -> Id<NSUnitMass>;

    #[objc2::method(sel = "stones", managed = "Other")]
    pub unsafe fn stones() -> Id<NSUnitMass>;

    #[objc2::method(sel = "metricTons", managed = "Other")]
    pub unsafe fn metricTons() -> Id<NSUnitMass>;

    #[objc2::method(sel = "shortTons", managed = "Other")]
    pub unsafe fn shortTons() -> Id<NSUnitMass>;

    #[objc2::method(sel = "carats", managed = "Other")]
    pub unsafe fn carats() -> Id<NSUnitMass>;

    #[objc2::method(sel = "ouncesTroy", managed = "Other")]
    pub unsafe fn ouncesTroy() -> Id<NSUnitMass>;

    #[objc2::method(sel = "slugs", managed = "Other")]
    pub unsafe fn slugs() -> Id<NSUnitMass>;
}

#[objc2::interface(
    unsafe super = NSDimension,
    unsafe inherits = [
        NSUnit,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitPower")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSUnitPower;
}

#[cfg(feature = "Foundation_NSUnitPower")]
unsafe impl NSCoding for NSUnitPower {}

#[cfg(feature = "Foundation_NSUnitPower")]
unsafe impl NSObjectProtocol for NSUnitPower {}

#[cfg(feature = "Foundation_NSUnitPower")]
unsafe impl NSSecureCoding for NSUnitPower {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitPower")]
    pub type NSUnitPower;

    #[objc2::method(sel = "terawatts", managed = "Other")]
    pub unsafe fn terawatts() -> Id<NSUnitPower>;

    #[objc2::method(sel = "gigawatts", managed = "Other")]
    pub unsafe fn gigawatts() -> Id<NSUnitPower>;

    #[objc2::method(sel = "megawatts", managed = "Other")]
    pub unsafe fn megawatts() -> Id<NSUnitPower>;

    #[objc2::method(sel = "kilowatts", managed = "Other")]
    pub unsafe fn kilowatts() -> Id<NSUnitPower>;

    #[objc2::method(sel = "watts", managed = "Other")]
    pub unsafe fn watts() -> Id<NSUnitPower>;

    #[objc2::method(sel = "milliwatts", managed = "Other")]
    pub unsafe fn milliwatts() -> Id<NSUnitPower>;

    #[objc2::method(sel = "microwatts", managed = "Other")]
    pub unsafe fn microwatts() -> Id<NSUnitPower>;

    #[objc2::method(sel = "nanowatts", managed = "Other")]
    pub unsafe fn nanowatts() -> Id<NSUnitPower>;

    #[objc2::method(sel = "picowatts", managed = "Other")]
    pub unsafe fn picowatts() -> Id<NSUnitPower>;

    #[objc2::method(sel = "femtowatts", managed = "Other")]
    pub unsafe fn femtowatts() -> Id<NSUnitPower>;

    #[objc2::method(sel = "horsepower", managed = "Other")]
    pub unsafe fn horsepower() -> Id<NSUnitPower>;
}

#[objc2::interface(
    unsafe super = NSDimension,
    unsafe inherits = [
        NSUnit,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitPressure")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSUnitPressure;
}

#[cfg(feature = "Foundation_NSUnitPressure")]
unsafe impl NSCoding for NSUnitPressure {}

#[cfg(feature = "Foundation_NSUnitPressure")]
unsafe impl NSObjectProtocol for NSUnitPressure {}

#[cfg(feature = "Foundation_NSUnitPressure")]
unsafe impl NSSecureCoding for NSUnitPressure {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitPressure")]
    pub type NSUnitPressure;

    #[objc2::method(sel = "newtonsPerMetersSquared", managed = "Other")]
    pub unsafe fn newtonsPerMetersSquared() -> Id<NSUnitPressure>;

    #[objc2::method(sel = "gigapascals", managed = "Other")]
    pub unsafe fn gigapascals() -> Id<NSUnitPressure>;

    #[objc2::method(sel = "megapascals", managed = "Other")]
    pub unsafe fn megapascals() -> Id<NSUnitPressure>;

    #[objc2::method(sel = "kilopascals", managed = "Other")]
    pub unsafe fn kilopascals() -> Id<NSUnitPressure>;

    #[objc2::method(sel = "hectopascals", managed = "Other")]
    pub unsafe fn hectopascals() -> Id<NSUnitPressure>;

    #[objc2::method(sel = "inchesOfMercury", managed = "Other")]
    pub unsafe fn inchesOfMercury() -> Id<NSUnitPressure>;

    #[objc2::method(sel = "bars", managed = "Other")]
    pub unsafe fn bars() -> Id<NSUnitPressure>;

    #[objc2::method(sel = "millibars", managed = "Other")]
    pub unsafe fn millibars() -> Id<NSUnitPressure>;

    #[objc2::method(sel = "millimetersOfMercury", managed = "Other")]
    pub unsafe fn millimetersOfMercury() -> Id<NSUnitPressure>;

    #[objc2::method(sel = "poundsForcePerSquareInch", managed = "Other")]
    pub unsafe fn poundsForcePerSquareInch() -> Id<NSUnitPressure>;
}

#[objc2::interface(
    unsafe super = NSDimension,
    unsafe inherits = [
        NSUnit,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitSpeed")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSUnitSpeed;
}

#[cfg(feature = "Foundation_NSUnitSpeed")]
unsafe impl NSCoding for NSUnitSpeed {}

#[cfg(feature = "Foundation_NSUnitSpeed")]
unsafe impl NSObjectProtocol for NSUnitSpeed {}

#[cfg(feature = "Foundation_NSUnitSpeed")]
unsafe impl NSSecureCoding for NSUnitSpeed {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitSpeed")]
    pub type NSUnitSpeed;

    #[objc2::method(sel = "metersPerSecond", managed = "Other")]
    pub unsafe fn metersPerSecond() -> Id<NSUnitSpeed>;

    #[objc2::method(sel = "kilometersPerHour", managed = "Other")]
    pub unsafe fn kilometersPerHour() -> Id<NSUnitSpeed>;

    #[objc2::method(sel = "milesPerHour", managed = "Other")]
    pub unsafe fn milesPerHour() -> Id<NSUnitSpeed>;

    #[objc2::method(sel = "knots", managed = "Other")]
    pub unsafe fn knots() -> Id<NSUnitSpeed>;
}

#[objc2::interface(
    unsafe super = NSDimension,
    unsafe inherits = [
        NSUnit,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitTemperature")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSUnitTemperature;
}

#[cfg(feature = "Foundation_NSUnitTemperature")]
unsafe impl NSCoding for NSUnitTemperature {}

#[cfg(feature = "Foundation_NSUnitTemperature")]
unsafe impl NSObjectProtocol for NSUnitTemperature {}

#[cfg(feature = "Foundation_NSUnitTemperature")]
unsafe impl NSSecureCoding for NSUnitTemperature {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitTemperature")]
    pub type NSUnitTemperature;

    #[objc2::method(sel = "kelvin", managed = "Other")]
    pub unsafe fn kelvin() -> Id<NSUnitTemperature>;

    #[objc2::method(sel = "celsius", managed = "Other")]
    pub unsafe fn celsius() -> Id<NSUnitTemperature>;

    #[objc2::method(sel = "fahrenheit", managed = "Other")]
    pub unsafe fn fahrenheit() -> Id<NSUnitTemperature>;
}

#[objc2::interface(
    unsafe super = NSDimension,
    unsafe inherits = [
        NSUnit,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitVolume")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSUnitVolume;
}

#[cfg(feature = "Foundation_NSUnitVolume")]
unsafe impl NSCoding for NSUnitVolume {}

#[cfg(feature = "Foundation_NSUnitVolume")]
unsafe impl NSObjectProtocol for NSUnitVolume {}

#[cfg(feature = "Foundation_NSUnitVolume")]
unsafe impl NSSecureCoding for NSUnitVolume {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitVolume")]
    pub type NSUnitVolume;

    #[objc2::method(sel = "megaliters", managed = "Other")]
    pub unsafe fn megaliters() -> Id<NSUnitVolume>;

    #[objc2::method(sel = "kiloliters", managed = "Other")]
    pub unsafe fn kiloliters() -> Id<NSUnitVolume>;

    #[objc2::method(sel = "liters", managed = "Other")]
    pub unsafe fn liters() -> Id<NSUnitVolume>;

    #[objc2::method(sel = "deciliters", managed = "Other")]
    pub unsafe fn deciliters() -> Id<NSUnitVolume>;

    #[objc2::method(sel = "centiliters", managed = "Other")]
    pub unsafe fn centiliters() -> Id<NSUnitVolume>;

    #[objc2::method(sel = "milliliters", managed = "Other")]
    pub unsafe fn milliliters() -> Id<NSUnitVolume>;

    #[objc2::method(sel = "cubicKilometers", managed = "Other")]
    pub unsafe fn cubicKilometers() -> Id<NSUnitVolume>;

    #[objc2::method(sel = "cubicMeters", managed = "Other")]
    pub unsafe fn cubicMeters() -> Id<NSUnitVolume>;

    #[objc2::method(sel = "cubicDecimeters", managed = "Other")]
    pub unsafe fn cubicDecimeters() -> Id<NSUnitVolume>;

    #[objc2::method(sel = "cubicCentimeters", managed = "Other")]
    pub unsafe fn cubicCentimeters() -> Id<NSUnitVolume>;

    #[objc2::method(sel = "cubicMillimeters", managed = "Other")]
    pub unsafe fn cubicMillimeters() -> Id<NSUnitVolume>;

    #[objc2::method(sel = "cubicInches", managed = "Other")]
    pub unsafe fn cubicInches() -> Id<NSUnitVolume>;

    #[objc2::method(sel = "cubicFeet", managed = "Other")]
    pub unsafe fn cubicFeet() -> Id<NSUnitVolume>;

    #[objc2::method(sel = "cubicYards", managed = "Other")]
    pub unsafe fn cubicYards() -> Id<NSUnitVolume>;

    #[objc2::method(sel = "cubicMiles", managed = "Other")]
    pub unsafe fn cubicMiles() -> Id<NSUnitVolume>;

    #[objc2::method(sel = "acreFeet", managed = "Other")]
    pub unsafe fn acreFeet() -> Id<NSUnitVolume>;

    #[objc2::method(sel = "bushels", managed = "Other")]
    pub unsafe fn bushels() -> Id<NSUnitVolume>;

    #[objc2::method(sel = "teaspoons", managed = "Other")]
    pub unsafe fn teaspoons() -> Id<NSUnitVolume>;

    #[objc2::method(sel = "tablespoons", managed = "Other")]
    pub unsafe fn tablespoons() -> Id<NSUnitVolume>;

    #[objc2::method(sel = "fluidOunces", managed = "Other")]
    pub unsafe fn fluidOunces() -> Id<NSUnitVolume>;

    #[objc2::method(sel = "cups", managed = "Other")]
    pub unsafe fn cups() -> Id<NSUnitVolume>;

    #[objc2::method(sel = "pints", managed = "Other")]
    pub unsafe fn pints() -> Id<NSUnitVolume>;

    #[objc2::method(sel = "quarts", managed = "Other")]
    pub unsafe fn quarts() -> Id<NSUnitVolume>;

    #[objc2::method(sel = "gallons", managed = "Other")]
    pub unsafe fn gallons() -> Id<NSUnitVolume>;

    #[objc2::method(sel = "imperialTeaspoons", managed = "Other")]
    pub unsafe fn imperialTeaspoons() -> Id<NSUnitVolume>;

    #[objc2::method(sel = "imperialTablespoons", managed = "Other")]
    pub unsafe fn imperialTablespoons() -> Id<NSUnitVolume>;

    #[objc2::method(sel = "imperialFluidOunces", managed = "Other")]
    pub unsafe fn imperialFluidOunces() -> Id<NSUnitVolume>;

    #[objc2::method(sel = "imperialPints", managed = "Other")]
    pub unsafe fn imperialPints() -> Id<NSUnitVolume>;

    #[objc2::method(sel = "imperialQuarts", managed = "Other")]
    pub unsafe fn imperialQuarts() -> Id<NSUnitVolume>;

    #[objc2::method(sel = "imperialGallons", managed = "Other")]
    pub unsafe fn imperialGallons() -> Id<NSUnitVolume>;

    #[objc2::method(sel = "metricCups", managed = "Other")]
    pub unsafe fn metricCups() -> Id<NSUnitVolume>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSUnit`
    #[cfg(feature = "Foundation_NSDimension")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSDimension")]
    pub type NSDimension;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithSymbol:", managed = "Init")]
    pub unsafe fn initWithSymbol(this: Option<Allocated<Self>>, symbol: &NSString) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSDimension`
    #[cfg(feature = "Foundation_NSUnitAcceleration")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitAcceleration")]
    pub type NSUnitAcceleration;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "Foundation_NSUnitConverter"
    ))]
    #[objc2::method(sel = "initWithSymbol:converter:", managed = "Init")]
    pub unsafe fn initWithSymbol_converter(
        this: Option<Allocated<Self>>,
        symbol: &NSString,
        converter: &NSUnitConverter,
    ) -> Id<Self>;

    #[objc2::method(sel = "baseUnit", managed = "Other")]
    pub unsafe fn baseUnit() -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSUnit`
    #[cfg(feature = "Foundation_NSUnitAcceleration")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitAcceleration")]
    pub type NSUnitAcceleration;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithSymbol:", managed = "Init")]
    pub unsafe fn initWithSymbol(this: Option<Allocated<Self>>, symbol: &NSString) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSDimension`
    #[cfg(feature = "Foundation_NSUnitAngle")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitAngle")]
    pub type NSUnitAngle;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "Foundation_NSUnitConverter"
    ))]
    #[objc2::method(sel = "initWithSymbol:converter:", managed = "Init")]
    pub unsafe fn initWithSymbol_converter(
        this: Option<Allocated<Self>>,
        symbol: &NSString,
        converter: &NSUnitConverter,
    ) -> Id<Self>;

    #[objc2::method(sel = "baseUnit", managed = "Other")]
    pub unsafe fn baseUnit() -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSUnit`
    #[cfg(feature = "Foundation_NSUnitAngle")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitAngle")]
    pub type NSUnitAngle;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithSymbol:", managed = "Init")]
    pub unsafe fn initWithSymbol(this: Option<Allocated<Self>>, symbol: &NSString) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSDimension`
    #[cfg(feature = "Foundation_NSUnitArea")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitArea")]
    pub type NSUnitArea;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "Foundation_NSUnitConverter"
    ))]
    #[objc2::method(sel = "initWithSymbol:converter:", managed = "Init")]
    pub unsafe fn initWithSymbol_converter(
        this: Option<Allocated<Self>>,
        symbol: &NSString,
        converter: &NSUnitConverter,
    ) -> Id<Self>;

    #[objc2::method(sel = "baseUnit", managed = "Other")]
    pub unsafe fn baseUnit() -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSUnit`
    #[cfg(feature = "Foundation_NSUnitArea")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitArea")]
    pub type NSUnitArea;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithSymbol:", managed = "Init")]
    pub unsafe fn initWithSymbol(this: Option<Allocated<Self>>, symbol: &NSString) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSDimension`
    #[cfg(feature = "Foundation_NSUnitConcentrationMass")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitConcentrationMass")]
    pub type NSUnitConcentrationMass;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "Foundation_NSUnitConverter"
    ))]
    #[objc2::method(sel = "initWithSymbol:converter:", managed = "Init")]
    pub unsafe fn initWithSymbol_converter(
        this: Option<Allocated<Self>>,
        symbol: &NSString,
        converter: &NSUnitConverter,
    ) -> Id<Self>;

    #[objc2::method(sel = "baseUnit", managed = "Other")]
    pub unsafe fn baseUnit() -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSUnit`
    #[cfg(feature = "Foundation_NSUnitConcentrationMass")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitConcentrationMass")]
    pub type NSUnitConcentrationMass;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithSymbol:", managed = "Init")]
    pub unsafe fn initWithSymbol(this: Option<Allocated<Self>>, symbol: &NSString) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSDimension`
    #[cfg(feature = "Foundation_NSUnitDispersion")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitDispersion")]
    pub type NSUnitDispersion;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "Foundation_NSUnitConverter"
    ))]
    #[objc2::method(sel = "initWithSymbol:converter:", managed = "Init")]
    pub unsafe fn initWithSymbol_converter(
        this: Option<Allocated<Self>>,
        symbol: &NSString,
        converter: &NSUnitConverter,
    ) -> Id<Self>;

    #[objc2::method(sel = "baseUnit", managed = "Other")]
    pub unsafe fn baseUnit() -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSUnit`
    #[cfg(feature = "Foundation_NSUnitDispersion")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitDispersion")]
    pub type NSUnitDispersion;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithSymbol:", managed = "Init")]
    pub unsafe fn initWithSymbol(this: Option<Allocated<Self>>, symbol: &NSString) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSDimension`
    #[cfg(feature = "Foundation_NSUnitDuration")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitDuration")]
    pub type NSUnitDuration;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "Foundation_NSUnitConverter"
    ))]
    #[objc2::method(sel = "initWithSymbol:converter:", managed = "Init")]
    pub unsafe fn initWithSymbol_converter(
        this: Option<Allocated<Self>>,
        symbol: &NSString,
        converter: &NSUnitConverter,
    ) -> Id<Self>;

    #[objc2::method(sel = "baseUnit", managed = "Other")]
    pub unsafe fn baseUnit() -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSUnit`
    #[cfg(feature = "Foundation_NSUnitDuration")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitDuration")]
    pub type NSUnitDuration;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithSymbol:", managed = "Init")]
    pub unsafe fn initWithSymbol(this: Option<Allocated<Self>>, symbol: &NSString) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSDimension`
    #[cfg(feature = "Foundation_NSUnitElectricCharge")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitElectricCharge")]
    pub type NSUnitElectricCharge;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "Foundation_NSUnitConverter"
    ))]
    #[objc2::method(sel = "initWithSymbol:converter:", managed = "Init")]
    pub unsafe fn initWithSymbol_converter(
        this: Option<Allocated<Self>>,
        symbol: &NSString,
        converter: &NSUnitConverter,
    ) -> Id<Self>;

    #[objc2::method(sel = "baseUnit", managed = "Other")]
    pub unsafe fn baseUnit() -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSUnit`
    #[cfg(feature = "Foundation_NSUnitElectricCharge")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitElectricCharge")]
    pub type NSUnitElectricCharge;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithSymbol:", managed = "Init")]
    pub unsafe fn initWithSymbol(this: Option<Allocated<Self>>, symbol: &NSString) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSDimension`
    #[cfg(feature = "Foundation_NSUnitElectricCurrent")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitElectricCurrent")]
    pub type NSUnitElectricCurrent;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "Foundation_NSUnitConverter"
    ))]
    #[objc2::method(sel = "initWithSymbol:converter:", managed = "Init")]
    pub unsafe fn initWithSymbol_converter(
        this: Option<Allocated<Self>>,
        symbol: &NSString,
        converter: &NSUnitConverter,
    ) -> Id<Self>;

    #[objc2::method(sel = "baseUnit", managed = "Other")]
    pub unsafe fn baseUnit() -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSUnit`
    #[cfg(feature = "Foundation_NSUnitElectricCurrent")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitElectricCurrent")]
    pub type NSUnitElectricCurrent;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithSymbol:", managed = "Init")]
    pub unsafe fn initWithSymbol(this: Option<Allocated<Self>>, symbol: &NSString) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSDimension`
    #[cfg(feature = "Foundation_NSUnitElectricPotentialDifference")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitElectricPotentialDifference")]
    pub type NSUnitElectricPotentialDifference;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "Foundation_NSUnitConverter"
    ))]
    #[objc2::method(sel = "initWithSymbol:converter:", managed = "Init")]
    pub unsafe fn initWithSymbol_converter(
        this: Option<Allocated<Self>>,
        symbol: &NSString,
        converter: &NSUnitConverter,
    ) -> Id<Self>;

    #[objc2::method(sel = "baseUnit", managed = "Other")]
    pub unsafe fn baseUnit() -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSUnit`
    #[cfg(feature = "Foundation_NSUnitElectricPotentialDifference")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitElectricPotentialDifference")]
    pub type NSUnitElectricPotentialDifference;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithSymbol:", managed = "Init")]
    pub unsafe fn initWithSymbol(this: Option<Allocated<Self>>, symbol: &NSString) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSDimension`
    #[cfg(feature = "Foundation_NSUnitElectricResistance")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitElectricResistance")]
    pub type NSUnitElectricResistance;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "Foundation_NSUnitConverter"
    ))]
    #[objc2::method(sel = "initWithSymbol:converter:", managed = "Init")]
    pub unsafe fn initWithSymbol_converter(
        this: Option<Allocated<Self>>,
        symbol: &NSString,
        converter: &NSUnitConverter,
    ) -> Id<Self>;

    #[objc2::method(sel = "baseUnit", managed = "Other")]
    pub unsafe fn baseUnit() -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSUnit`
    #[cfg(feature = "Foundation_NSUnitElectricResistance")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitElectricResistance")]
    pub type NSUnitElectricResistance;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithSymbol:", managed = "Init")]
    pub unsafe fn initWithSymbol(this: Option<Allocated<Self>>, symbol: &NSString) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSDimension`
    #[cfg(feature = "Foundation_NSUnitEnergy")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitEnergy")]
    pub type NSUnitEnergy;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "Foundation_NSUnitConverter"
    ))]
    #[objc2::method(sel = "initWithSymbol:converter:", managed = "Init")]
    pub unsafe fn initWithSymbol_converter(
        this: Option<Allocated<Self>>,
        symbol: &NSString,
        converter: &NSUnitConverter,
    ) -> Id<Self>;

    #[objc2::method(sel = "baseUnit", managed = "Other")]
    pub unsafe fn baseUnit() -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSUnit`
    #[cfg(feature = "Foundation_NSUnitEnergy")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitEnergy")]
    pub type NSUnitEnergy;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithSymbol:", managed = "Init")]
    pub unsafe fn initWithSymbol(this: Option<Allocated<Self>>, symbol: &NSString) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSDimension`
    #[cfg(feature = "Foundation_NSUnitFrequency")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitFrequency")]
    pub type NSUnitFrequency;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "Foundation_NSUnitConverter"
    ))]
    #[objc2::method(sel = "initWithSymbol:converter:", managed = "Init")]
    pub unsafe fn initWithSymbol_converter(
        this: Option<Allocated<Self>>,
        symbol: &NSString,
        converter: &NSUnitConverter,
    ) -> Id<Self>;

    #[objc2::method(sel = "baseUnit", managed = "Other")]
    pub unsafe fn baseUnit() -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSUnit`
    #[cfg(feature = "Foundation_NSUnitFrequency")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitFrequency")]
    pub type NSUnitFrequency;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithSymbol:", managed = "Init")]
    pub unsafe fn initWithSymbol(this: Option<Allocated<Self>>, symbol: &NSString) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSDimension`
    #[cfg(feature = "Foundation_NSUnitFuelEfficiency")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitFuelEfficiency")]
    pub type NSUnitFuelEfficiency;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "Foundation_NSUnitConverter"
    ))]
    #[objc2::method(sel = "initWithSymbol:converter:", managed = "Init")]
    pub unsafe fn initWithSymbol_converter(
        this: Option<Allocated<Self>>,
        symbol: &NSString,
        converter: &NSUnitConverter,
    ) -> Id<Self>;

    #[objc2::method(sel = "baseUnit", managed = "Other")]
    pub unsafe fn baseUnit() -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSUnit`
    #[cfg(feature = "Foundation_NSUnitFuelEfficiency")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitFuelEfficiency")]
    pub type NSUnitFuelEfficiency;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithSymbol:", managed = "Init")]
    pub unsafe fn initWithSymbol(this: Option<Allocated<Self>>, symbol: &NSString) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSDimension`
    #[cfg(feature = "Foundation_NSUnitInformationStorage")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitInformationStorage")]
    pub type NSUnitInformationStorage;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "Foundation_NSUnitConverter"
    ))]
    #[objc2::method(sel = "initWithSymbol:converter:", managed = "Init")]
    pub unsafe fn initWithSymbol_converter(
        this: Option<Allocated<Self>>,
        symbol: &NSString,
        converter: &NSUnitConverter,
    ) -> Id<Self>;

    #[objc2::method(sel = "baseUnit", managed = "Other")]
    pub unsafe fn baseUnit() -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSUnit`
    #[cfg(feature = "Foundation_NSUnitInformationStorage")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitInformationStorage")]
    pub type NSUnitInformationStorage;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithSymbol:", managed = "Init")]
    pub unsafe fn initWithSymbol(this: Option<Allocated<Self>>, symbol: &NSString) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSDimension`
    #[cfg(feature = "Foundation_NSUnitLength")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitLength")]
    pub type NSUnitLength;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "Foundation_NSUnitConverter"
    ))]
    #[objc2::method(sel = "initWithSymbol:converter:", managed = "Init")]
    pub unsafe fn initWithSymbol_converter(
        this: Option<Allocated<Self>>,
        symbol: &NSString,
        converter: &NSUnitConverter,
    ) -> Id<Self>;

    #[objc2::method(sel = "baseUnit", managed = "Other")]
    pub unsafe fn baseUnit() -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSUnit`
    #[cfg(feature = "Foundation_NSUnitLength")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitLength")]
    pub type NSUnitLength;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithSymbol:", managed = "Init")]
    pub unsafe fn initWithSymbol(this: Option<Allocated<Self>>, symbol: &NSString) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSDimension`
    #[cfg(feature = "Foundation_NSUnitIlluminance")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitIlluminance")]
    pub type NSUnitIlluminance;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "Foundation_NSUnitConverter"
    ))]
    #[objc2::method(sel = "initWithSymbol:converter:", managed = "Init")]
    pub unsafe fn initWithSymbol_converter(
        this: Option<Allocated<Self>>,
        symbol: &NSString,
        converter: &NSUnitConverter,
    ) -> Id<Self>;

    #[objc2::method(sel = "baseUnit", managed = "Other")]
    pub unsafe fn baseUnit() -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSUnit`
    #[cfg(feature = "Foundation_NSUnitIlluminance")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitIlluminance")]
    pub type NSUnitIlluminance;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithSymbol:", managed = "Init")]
    pub unsafe fn initWithSymbol(this: Option<Allocated<Self>>, symbol: &NSString) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSDimension`
    #[cfg(feature = "Foundation_NSUnitMass")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitMass")]
    pub type NSUnitMass;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "Foundation_NSUnitConverter"
    ))]
    #[objc2::method(sel = "initWithSymbol:converter:", managed = "Init")]
    pub unsafe fn initWithSymbol_converter(
        this: Option<Allocated<Self>>,
        symbol: &NSString,
        converter: &NSUnitConverter,
    ) -> Id<Self>;

    #[objc2::method(sel = "baseUnit", managed = "Other")]
    pub unsafe fn baseUnit() -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSUnit`
    #[cfg(feature = "Foundation_NSUnitMass")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitMass")]
    pub type NSUnitMass;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithSymbol:", managed = "Init")]
    pub unsafe fn initWithSymbol(this: Option<Allocated<Self>>, symbol: &NSString) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSDimension`
    #[cfg(feature = "Foundation_NSUnitPower")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitPower")]
    pub type NSUnitPower;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "Foundation_NSUnitConverter"
    ))]
    #[objc2::method(sel = "initWithSymbol:converter:", managed = "Init")]
    pub unsafe fn initWithSymbol_converter(
        this: Option<Allocated<Self>>,
        symbol: &NSString,
        converter: &NSUnitConverter,
    ) -> Id<Self>;

    #[objc2::method(sel = "baseUnit", managed = "Other")]
    pub unsafe fn baseUnit() -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSUnit`
    #[cfg(feature = "Foundation_NSUnitPower")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitPower")]
    pub type NSUnitPower;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithSymbol:", managed = "Init")]
    pub unsafe fn initWithSymbol(this: Option<Allocated<Self>>, symbol: &NSString) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSDimension`
    #[cfg(feature = "Foundation_NSUnitPressure")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitPressure")]
    pub type NSUnitPressure;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "Foundation_NSUnitConverter"
    ))]
    #[objc2::method(sel = "initWithSymbol:converter:", managed = "Init")]
    pub unsafe fn initWithSymbol_converter(
        this: Option<Allocated<Self>>,
        symbol: &NSString,
        converter: &NSUnitConverter,
    ) -> Id<Self>;

    #[objc2::method(sel = "baseUnit", managed = "Other")]
    pub unsafe fn baseUnit() -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSUnit`
    #[cfg(feature = "Foundation_NSUnitPressure")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitPressure")]
    pub type NSUnitPressure;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithSymbol:", managed = "Init")]
    pub unsafe fn initWithSymbol(this: Option<Allocated<Self>>, symbol: &NSString) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSDimension`
    #[cfg(feature = "Foundation_NSUnitSpeed")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitSpeed")]
    pub type NSUnitSpeed;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "Foundation_NSUnitConverter"
    ))]
    #[objc2::method(sel = "initWithSymbol:converter:", managed = "Init")]
    pub unsafe fn initWithSymbol_converter(
        this: Option<Allocated<Self>>,
        symbol: &NSString,
        converter: &NSUnitConverter,
    ) -> Id<Self>;

    #[objc2::method(sel = "baseUnit", managed = "Other")]
    pub unsafe fn baseUnit() -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSUnit`
    #[cfg(feature = "Foundation_NSUnitSpeed")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitSpeed")]
    pub type NSUnitSpeed;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithSymbol:", managed = "Init")]
    pub unsafe fn initWithSymbol(this: Option<Allocated<Self>>, symbol: &NSString) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSDimension`
    #[cfg(feature = "Foundation_NSUnitTemperature")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitTemperature")]
    pub type NSUnitTemperature;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "Foundation_NSUnitConverter"
    ))]
    #[objc2::method(sel = "initWithSymbol:converter:", managed = "Init")]
    pub unsafe fn initWithSymbol_converter(
        this: Option<Allocated<Self>>,
        symbol: &NSString,
        converter: &NSUnitConverter,
    ) -> Id<Self>;

    #[objc2::method(sel = "baseUnit", managed = "Other")]
    pub unsafe fn baseUnit() -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSUnit`
    #[cfg(feature = "Foundation_NSUnitTemperature")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitTemperature")]
    pub type NSUnitTemperature;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithSymbol:", managed = "Init")]
    pub unsafe fn initWithSymbol(this: Option<Allocated<Self>>, symbol: &NSString) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSDimension`
    #[cfg(feature = "Foundation_NSUnitVolume")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitVolume")]
    pub type NSUnitVolume;

    #[cfg(all(
        feature = "Foundation_NSString",
        feature = "Foundation_NSUnitConverter"
    ))]
    #[objc2::method(sel = "initWithSymbol:converter:", managed = "Init")]
    pub unsafe fn initWithSymbol_converter(
        this: Option<Allocated<Self>>,
        symbol: &NSString,
        converter: &NSUnitConverter,
    ) -> Id<Self>;

    #[objc2::method(sel = "baseUnit", managed = "Other")]
    pub unsafe fn baseUnit() -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSUnit`
    #[cfg(feature = "Foundation_NSUnitVolume")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUnitVolume")]
    pub type NSUnitVolume;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithSymbol:", managed = "Init")]
    pub unsafe fn initWithSymbol(this: Option<Allocated<Self>>, symbol: &NSString) -> Id<Self>;
}
