//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

extern_static!(NSHTTPPropertyStatusCodeKey: Option<&'static NSString>);

extern_static!(NSHTTPPropertyStatusReasonKey: Option<&'static NSString>);

extern_static!(NSHTTPPropertyServerHTTPVersionKey: Option<&'static NSString>);

extern_static!(NSHTTPPropertyRedirectionHeadersKey: Option<&'static NSString>);

extern_static!(NSHTTPPropertyErrorPageDataKey: Option<&'static NSString>);

extern_static!(NSHTTPPropertyHTTPProxy: Option<&'static NSString>);

extern_static!(NSFTPPropertyUserLoginKey: Option<&'static NSString>);

extern_static!(NSFTPPropertyUserPasswordKey: Option<&'static NSString>);

extern_static!(NSFTPPropertyActiveTransferModeKey: Option<&'static NSString>);

extern_static!(NSFTPPropertyFileOffsetKey: Option<&'static NSString>);

extern_static!(NSFTPPropertyFTPProxy: Option<&'static NSString>);

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSURLHandleStatus {
    NSURLHandleNotLoaded = 0,
    NSURLHandleLoadSucceeded = 1,
    NSURLHandleLoadInProgress = 2,
    NSURLHandleLoadFailed = 3,
}

#[objc2::protocol]
#[deprecated]
pub unsafe trait NSURLHandleClient {
    #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSURLHandle"))]
    #[deprecated]
    #[objc2::method(sel = "URLHandle:resourceDataDidBecomeAvailable:")]
    unsafe fn URLHandle_resourceDataDidBecomeAvailable(
        &self,
        sender: Option<&NSURLHandle>,
        new_bytes: Option<&NSData>,
    );

    #[cfg(feature = "Foundation_NSURLHandle")]
    #[deprecated]
    #[objc2::method(sel = "URLHandleResourceDidBeginLoading:")]
    unsafe fn URLHandleResourceDidBeginLoading(&self, sender: Option<&NSURLHandle>);

    #[cfg(feature = "Foundation_NSURLHandle")]
    #[deprecated]
    #[objc2::method(sel = "URLHandleResourceDidFinishLoading:")]
    unsafe fn URLHandleResourceDidFinishLoading(&self, sender: Option<&NSURLHandle>);

    #[cfg(feature = "Foundation_NSURLHandle")]
    #[deprecated]
    #[objc2::method(sel = "URLHandleResourceDidCancelLoading:")]
    unsafe fn URLHandleResourceDidCancelLoading(&self, sender: Option<&NSURLHandle>);

    #[cfg(all(feature = "Foundation_NSString", feature = "Foundation_NSURLHandle"))]
    #[deprecated]
    #[objc2::method(sel = "URLHandle:resourceDidFailLoadingWithReason:")]
    unsafe fn URLHandle_resourceDidFailLoadingWithReason(
        &self,
        sender: Option<&NSURLHandle>,
        reason: Option<&NSString>,
    );
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSURLHandle")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSURLHandle;
}

#[cfg(feature = "Foundation_NSURLHandle")]
unsafe impl NSObjectProtocol for NSURLHandle {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSURLHandle")]
    pub type NSURLHandle;

    #[deprecated]
    #[objc2::method(sel = "registerURLHandleClass:")]
    pub unsafe fn registerURLHandleClass(an_url_handle_subclass: Option<&Class>);

    #[cfg(feature = "Foundation_NSURL")]
    #[deprecated]
    #[objc2::method(sel = "URLHandleClassForURL:")]
    pub unsafe fn URLHandleClassForURL(an_url: Option<&NSURL>) -> Option<&'static Class>;

    #[deprecated]
    #[objc2::method(sel = "status")]
    pub unsafe fn status(&self) -> NSURLHandleStatus;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "failureReason", managed = "Other")]
    pub unsafe fn failureReason(&self) -> Option<Id<NSString>>;

    #[deprecated]
    #[objc2::method(sel = "addClient:")]
    pub unsafe fn addClient(&self, client: Option<&ProtocolObject<dyn NSURLHandleClient>>);

    #[deprecated]
    #[objc2::method(sel = "removeClient:")]
    pub unsafe fn removeClient(&self, client: Option<&ProtocolObject<dyn NSURLHandleClient>>);

    #[deprecated]
    #[objc2::method(sel = "loadInBackground")]
    pub unsafe fn loadInBackground(&self);

    #[deprecated]
    #[objc2::method(sel = "cancelLoadInBackground")]
    pub unsafe fn cancelLoadInBackground(&self);

    #[cfg(feature = "Foundation_NSData")]
    #[deprecated]
    #[objc2::method(sel = "resourceData", managed = "Other")]
    pub unsafe fn resourceData(&self) -> Option<Id<NSData>>;

    #[cfg(feature = "Foundation_NSData")]
    #[deprecated]
    #[objc2::method(sel = "availableResourceData", managed = "Other")]
    pub unsafe fn availableResourceData(&self) -> Option<Id<NSData>>;

    #[deprecated]
    #[objc2::method(sel = "expectedResourceDataSize")]
    pub unsafe fn expectedResourceDataSize(&self) -> c_longlong;

    #[deprecated]
    #[objc2::method(sel = "flushCachedData")]
    pub unsafe fn flushCachedData(&self);

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "backgroundLoadDidFailWithReason:")]
    pub unsafe fn backgroundLoadDidFailWithReason(&self, reason: Option<&NSString>);

    #[cfg(feature = "Foundation_NSData")]
    #[deprecated]
    #[objc2::method(sel = "didLoadBytes:loadComplete:")]
    pub unsafe fn didLoadBytes_loadComplete(&self, new_bytes: Option<&NSData>, yorn: bool);

    #[cfg(feature = "Foundation_NSURL")]
    #[deprecated]
    #[objc2::method(sel = "canInitWithURL:")]
    pub unsafe fn canInitWithURL(an_url: Option<&NSURL>) -> bool;

    #[cfg(feature = "Foundation_NSURL")]
    #[deprecated]
    #[objc2::method(sel = "cachedHandleForURL:", managed = "Other")]
    pub unsafe fn cachedHandleForURL(an_url: Option<&NSURL>) -> Option<Id<NSURLHandle>>;

    #[cfg(feature = "Foundation_NSURL")]
    #[deprecated]
    #[objc2::method(sel = "initWithURL:cached:", managed = "Init")]
    pub unsafe fn initWithURL_cached(
        this: Option<Allocated<Self>>,
        an_url: Option<&NSURL>,
        will_cache: bool,
    ) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "propertyForKey:", managed = "Other")]
    pub unsafe fn propertyForKey(&self, property_key: Option<&NSString>) -> Option<Id<Object>>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "propertyForKeyIfAvailable:", managed = "Other")]
    pub unsafe fn propertyForKeyIfAvailable(
        &self,
        property_key: Option<&NSString>,
    ) -> Option<Id<Object>>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "writeProperty:forKey:")]
    pub unsafe fn writeProperty_forKey(
        &self,
        property_value: Option<&Object>,
        property_key: Option<&NSString>,
    ) -> bool;

    #[cfg(feature = "Foundation_NSData")]
    #[deprecated]
    #[objc2::method(sel = "writeData:")]
    pub unsafe fn writeData(&self, data: Option<&NSData>) -> bool;

    #[cfg(feature = "Foundation_NSData")]
    #[deprecated]
    #[objc2::method(sel = "loadInForeground", managed = "Other")]
    pub unsafe fn loadInForeground(&self) -> Option<Id<NSData>>;

    #[deprecated]
    #[objc2::method(sel = "beginLoadInBackground")]
    pub unsafe fn beginLoadInBackground(&self);

    #[deprecated]
    #[objc2::method(sel = "endLoadInBackground")]
    pub unsafe fn endLoadInBackground(&self);
}
