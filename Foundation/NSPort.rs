//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

pub type NSSocketNativeHandle = c_int;

extern_static!(NSPortDidBecomeInvalidNotification: &'static NSNotificationName);

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSPort")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSPort;
}

#[cfg(feature = "Foundation_NSPort")]
unsafe impl NSCoding for NSPort {}

#[cfg(feature = "Foundation_NSPort")]
unsafe impl NSObjectProtocol for NSPort {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSPort")]
    pub type NSPort;

    #[objc2::method(sel = "port", managed = "Other")]
    pub unsafe fn port() -> Id<NSPort>;

    #[objc2::method(sel = "invalidate")]
    pub unsafe fn invalidate(&self);

    #[objc2::method(sel = "isValid")]
    pub unsafe fn isValid(&self) -> bool;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(&self, an_object: Option<&ProtocolObject<dyn NSPortDelegate>>);

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn NSPortDelegate>>>;

    #[cfg(feature = "Foundation_NSRunLoop")]
    #[objc2::method(sel = "scheduleInRunLoop:forMode:")]
    pub unsafe fn scheduleInRunLoop_forMode(&self, run_loop: &NSRunLoop, mode: &NSRunLoopMode);

    #[cfg(feature = "Foundation_NSRunLoop")]
    #[objc2::method(sel = "removeFromRunLoop:forMode:")]
    pub unsafe fn removeFromRunLoop_forMode(&self, run_loop: &NSRunLoop, mode: &NSRunLoopMode);

    #[objc2::method(sel = "reservedSpaceLength")]
    pub unsafe fn reservedSpaceLength(&self) -> NSUInteger;

    #[cfg(all(feature = "Foundation_NSDate", feature = "Foundation_NSMutableArray"))]
    #[objc2::method(sel = "sendBeforeDate:components:from:reserved:")]
    pub unsafe fn sendBeforeDate_components_from_reserved(
        &self,
        limit_date: &NSDate,
        components: Option<&NSMutableArray>,
        receive_port: Option<&NSPort>,
        header_space_reserved: NSUInteger,
    ) -> bool;

    #[cfg(all(feature = "Foundation_NSDate", feature = "Foundation_NSMutableArray"))]
    #[objc2::method(sel = "sendBeforeDate:msgid:components:from:reserved:")]
    pub unsafe fn sendBeforeDate_msgid_components_from_reserved(
        &self,
        limit_date: &NSDate,
        msg_id: NSUInteger,
        components: Option<&NSMutableArray>,
        receive_port: Option<&NSPort>,
        header_space_reserved: NSUInteger,
    ) -> bool;

    #[cfg(all(feature = "Foundation_NSConnection", feature = "Foundation_NSRunLoop"))]
    #[deprecated = "Use NSXPCConnection instead"]
    #[objc2::method(sel = "addConnection:toRunLoop:forMode:")]
    pub unsafe fn addConnection_toRunLoop_forMode(
        &self,
        conn: &NSConnection,
        run_loop: &NSRunLoop,
        mode: &NSRunLoopMode,
    );

    #[cfg(all(feature = "Foundation_NSConnection", feature = "Foundation_NSRunLoop"))]
    #[deprecated = "Use NSXPCConnection instead"]
    #[objc2::method(sel = "removeConnection:fromRunLoop:forMode:")]
    pub unsafe fn removeConnection_fromRunLoop_forMode(
        &self,
        conn: &NSConnection,
        run_loop: &NSRunLoop,
        mode: &NSRunLoopMode,
    );
}

#[objc2::protocol]
pub unsafe trait NSPortDelegate: NSObjectProtocol {
    #[cfg(feature = "Foundation_NSPortMessage")]
    #[objc2::method(optional, sel = "handlePortMessage:")]
    unsafe fn handlePortMessage(&self, message: &NSPortMessage);
}

#[ns_options]
#[underlying(NSUInteger)]
pub enum NSMachPortOptions {
    NSMachPortDeallocateNone = 0,
    NSMachPortDeallocateSendRight = 1 << 0,
    NSMachPortDeallocateReceiveRight = 1 << 1,
}

#[objc2::interface(
    unsafe super = NSPort,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSMachPort")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSMachPort;
}

#[cfg(feature = "Foundation_NSMachPort")]
unsafe impl NSCoding for NSMachPort {}

#[cfg(feature = "Foundation_NSMachPort")]
unsafe impl NSObjectProtocol for NSMachPort {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSMachPort")]
    pub type NSMachPort;

    #[objc2::method(sel = "portWithMachPort:", managed = "Other")]
    pub unsafe fn portWithMachPort(mach_port: u32) -> Id<NSPort>;

    #[objc2::method(sel = "initWithMachPort:", managed = "Init")]
    pub unsafe fn initWithMachPort(this: Option<Allocated<Self>>, mach_port: u32) -> Id<Self>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(&self, an_object: Option<&ProtocolObject<dyn NSMachPortDelegate>>);

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn NSMachPortDelegate>>>;

    #[objc2::method(sel = "portWithMachPort:options:", managed = "Other")]
    pub unsafe fn portWithMachPort_options(mach_port: u32, f: NSMachPortOptions) -> Id<NSPort>;

    #[objc2::method(sel = "initWithMachPort:options:", managed = "Init")]
    pub unsafe fn initWithMachPort_options(
        this: Option<Allocated<Self>>,
        mach_port: u32,
        f: NSMachPortOptions,
    ) -> Id<Self>;

    #[objc2::method(sel = "machPort")]
    pub unsafe fn machPort(&self) -> u32;

    #[cfg(feature = "Foundation_NSRunLoop")]
    #[objc2::method(sel = "scheduleInRunLoop:forMode:")]
    pub unsafe fn scheduleInRunLoop_forMode(&self, run_loop: &NSRunLoop, mode: &NSRunLoopMode);

    #[cfg(feature = "Foundation_NSRunLoop")]
    #[objc2::method(sel = "removeFromRunLoop:forMode:")]
    pub unsafe fn removeFromRunLoop_forMode(&self, run_loop: &NSRunLoop, mode: &NSRunLoopMode);
}

#[objc2::protocol]
pub unsafe trait NSMachPortDelegate: NSPortDelegate {
    #[objc2::method(optional, sel = "handleMachMessage:")]
    unsafe fn handleMachMessage(&self, msg: NonNull<c_void>);
}

#[objc2::interface(
    unsafe super = NSPort,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSMessagePort")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSMessagePort;
}

#[cfg(feature = "Foundation_NSMessagePort")]
unsafe impl NSCoding for NSMessagePort {}

#[cfg(feature = "Foundation_NSMessagePort")]
unsafe impl NSObjectProtocol for NSMessagePort {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSMessagePort")]
    pub type NSMessagePort;
}

#[objc2::interface(
    unsafe super = NSPort,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSSocketPort")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSSocketPort;
}

#[cfg(feature = "Foundation_NSSocketPort")]
unsafe impl NSCoding for NSSocketPort {}

#[cfg(feature = "Foundation_NSSocketPort")]
unsafe impl NSObjectProtocol for NSSocketPort {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSSocketPort")]
    pub type NSSocketPort;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "initWithTCPPort:", managed = "Init")]
    pub unsafe fn initWithTCPPort(
        this: Option<Allocated<Self>>,
        port: c_ushort,
    ) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(
        sel = "initWithProtocolFamily:socketType:protocol:address:",
        managed = "Init"
    )]
    pub unsafe fn initWithProtocolFamily_socketType_protocol_address(
        this: Option<Allocated<Self>>,
        family: c_int,
        r#type: c_int,
        protocol: c_int,
        address: &NSData,
    ) -> Option<Id<Self>>;

    #[objc2::method(
        sel = "initWithProtocolFamily:socketType:protocol:socket:",
        managed = "Init"
    )]
    pub unsafe fn initWithProtocolFamily_socketType_protocol_socket(
        this: Option<Allocated<Self>>,
        family: c_int,
        r#type: c_int,
        protocol: c_int,
        sock: NSSocketNativeHandle,
    ) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initRemoteWithTCPPort:host:", managed = "Init")]
    pub unsafe fn initRemoteWithTCPPort_host(
        this: Option<Allocated<Self>>,
        port: c_ushort,
        host_name: Option<&NSString>,
    ) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(
        sel = "initRemoteWithProtocolFamily:socketType:protocol:address:",
        managed = "Init"
    )]
    pub unsafe fn initRemoteWithProtocolFamily_socketType_protocol_address(
        this: Option<Allocated<Self>>,
        family: c_int,
        r#type: c_int,
        protocol: c_int,
        address: &NSData,
    ) -> Id<Self>;

    #[objc2::method(sel = "protocolFamily")]
    pub unsafe fn protocolFamily(&self) -> c_int;

    #[objc2::method(sel = "socketType")]
    pub unsafe fn socketType(&self) -> c_int;

    #[objc2::method(sel = "protocol")]
    pub unsafe fn protocol(&self) -> c_int;

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "address", managed = "Other")]
    pub unsafe fn address(&self) -> Id<NSData>;

    #[objc2::method(sel = "socket")]
    pub unsafe fn socket(&self) -> NSSocketNativeHandle;
}
