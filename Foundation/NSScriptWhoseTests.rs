//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSTestComparisonOperation {
    NSEqualToComparison = 0,
    NSLessThanOrEqualToComparison = 1,
    NSLessThanComparison = 2,
    NSGreaterThanOrEqualToComparison = 3,
    NSGreaterThanComparison = 4,
    NSBeginsWithComparison = 5,
    NSEndsWithComparison = 6,
    NSContainsComparison = 7,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSScriptWhoseTest")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSScriptWhoseTest;
}

#[cfg(feature = "Foundation_NSScriptWhoseTest")]
unsafe impl NSCoding for NSScriptWhoseTest {}

#[cfg(feature = "Foundation_NSScriptWhoseTest")]
unsafe impl NSObjectProtocol for NSScriptWhoseTest {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSScriptWhoseTest")]
    pub type NSScriptWhoseTest;

    #[objc2::method(sel = "isTrue")]
    pub unsafe fn isTrue(&self) -> bool;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(
        this: Option<Allocated<Self>>,
        in_coder: &NSCoder,
    ) -> Option<Id<Self>>;
}

#[objc2::interface(
    unsafe super = NSScriptWhoseTest,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSLogicalTest")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSLogicalTest;
}

#[cfg(feature = "Foundation_NSLogicalTest")]
unsafe impl NSCoding for NSLogicalTest {}

#[cfg(feature = "Foundation_NSLogicalTest")]
unsafe impl NSObjectProtocol for NSLogicalTest {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSLogicalTest")]
    pub type NSLogicalTest;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSSpecifierTest"))]
    #[objc2::method(sel = "initAndTestWithTests:", managed = "Init")]
    pub unsafe fn initAndTestWithTests(
        this: Option<Allocated<Self>>,
        sub_tests: &NSArray<NSSpecifierTest>,
    ) -> Id<Self>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSSpecifierTest"))]
    #[objc2::method(sel = "initOrTestWithTests:", managed = "Init")]
    pub unsafe fn initOrTestWithTests(
        this: Option<Allocated<Self>>,
        sub_tests: &NSArray<NSSpecifierTest>,
    ) -> Id<Self>;

    #[objc2::method(sel = "initNotTestWithTest:", managed = "Init")]
    pub unsafe fn initNotTestWithTest(
        this: Option<Allocated<Self>>,
        sub_test: &NSScriptWhoseTest,
    ) -> Id<Self>;
}

#[objc2::interface(
    unsafe super = NSScriptWhoseTest,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSSpecifierTest")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSSpecifierTest;
}

#[cfg(feature = "Foundation_NSSpecifierTest")]
unsafe impl NSCoding for NSSpecifierTest {}

#[cfg(feature = "Foundation_NSSpecifierTest")]
unsafe impl NSObjectProtocol for NSSpecifierTest {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSSpecifierTest")]
    pub type NSSpecifierTest;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(feature = "Foundation_NSCoder")]
    #[objc2::method(sel = "initWithCoder:", managed = "Init")]
    pub unsafe fn initWithCoder(
        this: Option<Allocated<Self>>,
        in_coder: &NSCoder,
    ) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSScriptObjectSpecifier")]
    #[objc2::method(
        sel = "initWithObjectSpecifier:comparisonOperator:testObject:",
        managed = "Init"
    )]
    pub unsafe fn initWithObjectSpecifier_comparisonOperator_testObject(
        this: Option<Allocated<Self>>,
        obj1: Option<&NSScriptObjectSpecifier>,
        comp_op: NSTestComparisonOperation,
        obj2: Option<&Object>,
    ) -> Id<Self>;
}
