//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSDate,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[deprecated = "Use NSCalendar and NSDateComponents and NSDateFormatter instead"]
    #[cfg(feature = "Foundation_NSCalendarDate")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSCalendarDate;
}

#[cfg(feature = "Foundation_NSCalendarDate")]
unsafe impl NSCoding for NSCalendarDate {}

#[cfg(feature = "Foundation_NSCalendarDate")]
unsafe impl NSObjectProtocol for NSCalendarDate {}

#[cfg(feature = "Foundation_NSCalendarDate")]
unsafe impl NSSecureCoding for NSCalendarDate {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSCalendarDate")]
    #[deprecated = "Use NSCalendar and NSDateComponents and NSDateFormatter instead"]
    pub type NSCalendarDate;

    #[deprecated = "Use NSCalendar instead"]
    #[objc2::method(sel = "calendarDate", managed = "Other")]
    pub unsafe fn calendarDate() -> Id<Object>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "Use NSDateFormatter instead"]
    #[objc2::method(sel = "dateWithString:calendarFormat:locale:", managed = "Other")]
    pub unsafe fn dateWithString_calendarFormat_locale(
        description: &NSString,
        format: &NSString,
        locale: Option<&Object>,
    ) -> Option<Id<Object>>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "Use NSDateFormatter instead"]
    #[objc2::method(sel = "dateWithString:calendarFormat:", managed = "Other")]
    pub unsafe fn dateWithString_calendarFormat(
        description: &NSString,
        format: &NSString,
    ) -> Option<Id<Object>>;

    #[cfg(feature = "Foundation_NSTimeZone")]
    #[deprecated = "Use NSCalendar and NSDateComponents instead"]
    #[objc2::method(
        sel = "dateWithYear:month:day:hour:minute:second:timeZone:",
        managed = "Other"
    )]
    pub unsafe fn dateWithYear_month_day_hour_minute_second_timeZone(
        year: NSInteger,
        month: NSUInteger,
        day: NSUInteger,
        hour: NSUInteger,
        minute: NSUInteger,
        second: NSUInteger,
        a_time_zone: Option<&NSTimeZone>,
    ) -> Id<Object>;

    #[deprecated = "Use NSCalendar instead"]
    #[objc2::method(
        sel = "dateByAddingYears:months:days:hours:minutes:seconds:",
        managed = "Other"
    )]
    pub unsafe fn dateByAddingYears_months_days_hours_minutes_seconds(
        &self,
        year: NSInteger,
        month: NSInteger,
        day: NSInteger,
        hour: NSInteger,
        minute: NSInteger,
        second: NSInteger,
    ) -> Id<NSCalendarDate>;

    #[deprecated]
    #[objc2::method(sel = "dayOfCommonEra")]
    pub unsafe fn dayOfCommonEra(&self) -> NSInteger;

    #[deprecated]
    #[objc2::method(sel = "dayOfMonth")]
    pub unsafe fn dayOfMonth(&self) -> NSInteger;

    #[deprecated]
    #[objc2::method(sel = "dayOfWeek")]
    pub unsafe fn dayOfWeek(&self) -> NSInteger;

    #[deprecated]
    #[objc2::method(sel = "dayOfYear")]
    pub unsafe fn dayOfYear(&self) -> NSInteger;

    #[deprecated]
    #[objc2::method(sel = "hourOfDay")]
    pub unsafe fn hourOfDay(&self) -> NSInteger;

    #[deprecated]
    #[objc2::method(sel = "minuteOfHour")]
    pub unsafe fn minuteOfHour(&self) -> NSInteger;

    #[deprecated]
    #[objc2::method(sel = "monthOfYear")]
    pub unsafe fn monthOfYear(&self) -> NSInteger;

    #[deprecated]
    #[objc2::method(sel = "secondOfMinute")]
    pub unsafe fn secondOfMinute(&self) -> NSInteger;

    #[deprecated]
    #[objc2::method(sel = "yearOfCommonEra")]
    pub unsafe fn yearOfCommonEra(&self) -> NSInteger;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "calendarFormat", managed = "Other")]
    pub unsafe fn calendarFormat(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "descriptionWithCalendarFormat:locale:", managed = "Other")]
    pub unsafe fn descriptionWithCalendarFormat_locale(
        &self,
        format: &NSString,
        locale: Option<&Object>,
    ) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "descriptionWithCalendarFormat:", managed = "Other")]
    pub unsafe fn descriptionWithCalendarFormat(&self, format: &NSString) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "descriptionWithLocale:", managed = "Other")]
    pub unsafe fn descriptionWithLocale(&self, locale: Option<&Object>) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSTimeZone")]
    #[deprecated]
    #[objc2::method(sel = "timeZone", managed = "Other")]
    pub unsafe fn timeZone(&self) -> Id<NSTimeZone>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "Use NSDateFormatter instead"]
    #[objc2::method(sel = "initWithString:calendarFormat:locale:", managed = "Init")]
    pub unsafe fn initWithString_calendarFormat_locale(
        this: Option<Allocated<Self>>,
        description: &NSString,
        format: &NSString,
        locale: Option<&Object>,
    ) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "Use NSDateFormatter instead"]
    #[objc2::method(sel = "initWithString:calendarFormat:", managed = "Init")]
    pub unsafe fn initWithString_calendarFormat(
        this: Option<Allocated<Self>>,
        description: &NSString,
        format: &NSString,
    ) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "Use NSDateFormatter instead"]
    #[objc2::method(sel = "initWithString:", managed = "Init")]
    pub unsafe fn initWithString(
        this: Option<Allocated<Self>>,
        description: &NSString,
    ) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSTimeZone")]
    #[deprecated = "Use NSCalendar and NSDateComponents instead"]
    #[objc2::method(
        sel = "initWithYear:month:day:hour:minute:second:timeZone:",
        managed = "Init"
    )]
    pub unsafe fn initWithYear_month_day_hour_minute_second_timeZone(
        this: Option<Allocated<Self>>,
        year: NSInteger,
        month: NSUInteger,
        day: NSUInteger,
        hour: NSUInteger,
        minute: NSUInteger,
        second: NSUInteger,
        a_time_zone: Option<&NSTimeZone>,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "setCalendarFormat:")]
    pub unsafe fn setCalendarFormat(&self, format: Option<&NSString>);

    #[cfg(feature = "Foundation_NSTimeZone")]
    #[deprecated]
    #[objc2::method(sel = "setTimeZone:")]
    pub unsafe fn setTimeZone(&self, a_time_zone: Option<&NSTimeZone>);

    #[deprecated]
    #[objc2::method(sel = "years:months:days:hours:minutes:seconds:sinceDate:")]
    pub unsafe fn years_months_days_hours_minutes_seconds_sinceDate(
        &self,
        yp: *mut NSInteger,
        mop: *mut NSInteger,
        dp: *mut NSInteger,
        hp: *mut NSInteger,
        mip: *mut NSInteger,
        sp: *mut NSInteger,
        date: &NSCalendarDate,
    );

    #[deprecated]
    #[objc2::method(sel = "distantFuture", managed = "Other")]
    pub unsafe fn distantFuture() -> Id<Self>;

    #[deprecated]
    #[objc2::method(sel = "distantPast", managed = "Other")]
    pub unsafe fn distantPast() -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSDate")]
    pub type NSDate;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "Create an NSDateFormatter with `init` and set the dateFormat property instead."]
    #[objc2::method(sel = "dateWithNaturalLanguageString:locale:", managed = "Other")]
    pub unsafe fn dateWithNaturalLanguageString_locale(
        string: &NSString,
        locale: Option<&Object>,
    ) -> Option<Id<Object>>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "Create an NSDateFormatter with `init` and set the dateFormat property instead."]
    #[objc2::method(sel = "dateWithNaturalLanguageString:", managed = "Other")]
    pub unsafe fn dateWithNaturalLanguageString(string: &NSString) -> Option<Id<Object>>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "Use NSDateFormatter instead"]
    #[objc2::method(sel = "dateWithString:", managed = "Other")]
    pub unsafe fn dateWithString(a_string: &NSString) -> Id<Object>;

    #[cfg(all(
        feature = "Foundation_NSCalendarDate",
        feature = "Foundation_NSString",
        feature = "Foundation_NSTimeZone"
    ))]
    #[deprecated]
    #[objc2::method(sel = "dateWithCalendarFormat:timeZone:", managed = "Other")]
    pub unsafe fn dateWithCalendarFormat_timeZone(
        &self,
        format: Option<&NSString>,
        a_time_zone: Option<&NSTimeZone>,
    ) -> Id<NSCalendarDate>;

    #[cfg(all(feature = "Foundation_NSString", feature = "Foundation_NSTimeZone"))]
    #[deprecated]
    #[objc2::method(
        sel = "descriptionWithCalendarFormat:timeZone:locale:",
        managed = "Other"
    )]
    pub unsafe fn descriptionWithCalendarFormat_timeZone_locale(
        &self,
        format: Option<&NSString>,
        a_time_zone: Option<&NSTimeZone>,
        locale: Option<&Object>,
    ) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "Use NSDateFormatter instead"]
    #[objc2::method(sel = "initWithString:", managed = "Init")]
    pub unsafe fn initWithString(
        this: Option<Allocated<Self>>,
        description: &NSString,
    ) -> Option<Id<Self>>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSDate`
    #[cfg(feature = "Foundation_NSCalendarDate")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSCalendarDate")]
    pub type NSCalendarDate;

    #[objc2::method(sel = "initWithTimeIntervalSinceReferenceDate:", managed = "Init")]
    pub unsafe fn initWithTimeIntervalSinceReferenceDate(
        this: Option<Allocated<Self>>,
        ti: NSTimeInterval,
    ) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSDate`
        ///
        /// NSDateCreation
    #[cfg(feature = "Foundation_NSCalendarDate")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSCalendarDate")]
    pub type NSCalendarDate;

    #[objc2::method(sel = "date", managed = "Other")]
    pub unsafe fn date() -> Id<Self>;

    #[objc2::method(sel = "dateWithTimeIntervalSinceNow:", managed = "Other")]
    pub unsafe fn dateWithTimeIntervalSinceNow(secs: NSTimeInterval) -> Id<Self>;

    #[objc2::method(sel = "dateWithTimeIntervalSinceReferenceDate:", managed = "Other")]
    pub unsafe fn dateWithTimeIntervalSinceReferenceDate(ti: NSTimeInterval) -> Id<Self>;

    #[objc2::method(sel = "dateWithTimeIntervalSince1970:", managed = "Other")]
    pub unsafe fn dateWithTimeIntervalSince1970(secs: NSTimeInterval) -> Id<Self>;

    #[objc2::method(sel = "dateWithTimeInterval:sinceDate:", managed = "Other")]
    pub unsafe fn dateWithTimeInterval_sinceDate(
        secs_to_be_added: NSTimeInterval,
        date: &NSDate,
    ) -> Id<Self>;

    #[objc2::method(sel = "initWithTimeIntervalSinceNow:", managed = "Init")]
    pub unsafe fn initWithTimeIntervalSinceNow(
        this: Option<Allocated<Self>>,
        secs: NSTimeInterval,
    ) -> Id<Self>;

    #[objc2::method(sel = "initWithTimeIntervalSince1970:", managed = "Init")]
    pub unsafe fn initWithTimeIntervalSince1970(
        this: Option<Allocated<Self>>,
        secs: NSTimeInterval,
    ) -> Id<Self>;

    #[objc2::method(sel = "initWithTimeInterval:sinceDate:", managed = "Init")]
    pub unsafe fn initWithTimeInterval_sinceDate(
        this: Option<Allocated<Self>>,
        secs_to_be_added: NSTimeInterval,
        date: &NSDate,
    ) -> Id<Self>;
}
