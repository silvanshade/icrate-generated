//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSXMLNodeKind {
    NSXMLInvalidKind = 0,
    NSXMLDocumentKind = 1,
    NSXMLElementKind = 2,
    NSXMLAttributeKind = 3,
    NSXMLNamespaceKind = 4,
    NSXMLProcessingInstructionKind = 5,
    NSXMLCommentKind = 6,
    NSXMLTextKind = 7,
    NSXMLDTDKind = 8,
    NSXMLEntityDeclarationKind = 9,
    NSXMLAttributeDeclarationKind = 10,
    NSXMLElementDeclarationKind = 11,
    NSXMLNotationDeclarationKind = 12,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSXMLNode")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSXMLNode;
}

#[cfg(feature = "Foundation_NSXMLNode")]
unsafe impl NSObjectProtocol for NSXMLNode {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSXMLNode")]
    pub type NSXMLNode;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "initWithKind:", managed = "Init")]
    pub unsafe fn initWithKind(this: Option<Allocated<Self>>, kind: NSXMLNodeKind) -> Id<Self>;

    #[objc2::method(sel = "initWithKind:options:", managed = "Init")]
    pub unsafe fn initWithKind_options(
        this: Option<Allocated<Self>>,
        kind: NSXMLNodeKind,
        options: NSXMLNodeOptions,
    ) -> Id<Self>;

    #[objc2::method(sel = "document", managed = "Other")]
    pub unsafe fn document() -> Id<Object>;

    #[cfg(feature = "Foundation_NSXMLElement")]
    #[objc2::method(sel = "documentWithRootElement:", managed = "Other")]
    pub unsafe fn documentWithRootElement(element: &NSXMLElement) -> Id<Object>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "elementWithName:", managed = "Other")]
    pub unsafe fn elementWithName(name: &NSString) -> Id<Object>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "elementWithName:URI:", managed = "Other")]
    pub unsafe fn elementWithName_URI(name: &NSString, uri: &NSString) -> Id<Object>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "elementWithName:stringValue:", managed = "Other")]
    pub unsafe fn elementWithName_stringValue(name: &NSString, string: &NSString) -> Id<Object>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "elementWithName:children:attributes:", managed = "Other")]
    pub unsafe fn elementWithName_children_attributes(
        name: &NSString,
        children: Option<&NSArray<NSXMLNode>>,
        attributes: Option<&NSArray<NSXMLNode>>,
    ) -> Id<Object>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "attributeWithName:stringValue:", managed = "Other")]
    pub unsafe fn attributeWithName_stringValue(
        name: &NSString,
        string_value: &NSString,
    ) -> Id<Object>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "attributeWithName:URI:stringValue:", managed = "Other")]
    pub unsafe fn attributeWithName_URI_stringValue(
        name: &NSString,
        uri: &NSString,
        string_value: &NSString,
    ) -> Id<Object>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "namespaceWithName:stringValue:", managed = "Other")]
    pub unsafe fn namespaceWithName_stringValue(
        name: &NSString,
        string_value: &NSString,
    ) -> Id<Object>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "processingInstructionWithName:stringValue:", managed = "Other")]
    pub unsafe fn processingInstructionWithName_stringValue(
        name: &NSString,
        string_value: &NSString,
    ) -> Id<Object>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "commentWithStringValue:", managed = "Other")]
    pub unsafe fn commentWithStringValue(string_value: &NSString) -> Id<Object>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "textWithStringValue:", managed = "Other")]
    pub unsafe fn textWithStringValue(string_value: &NSString) -> Id<Object>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "DTDNodeWithXMLString:", managed = "Other")]
    pub unsafe fn DTDNodeWithXMLString(string: &NSString) -> Option<Id<Object>>;

    #[objc2::method(sel = "kind")]
    pub unsafe fn kind(&self) -> NSXMLNodeKind;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "name", managed = "Other")]
    pub unsafe fn name(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setName:")]
    pub unsafe fn setName(&self, name: Option<&NSString>);

    #[objc2::method(sel = "objectValue", managed = "Other")]
    pub unsafe fn objectValue(&self) -> Option<Id<Object>>;

    #[objc2::method(sel = "setObjectValue:")]
    pub unsafe fn setObjectValue(&self, object_value: Option<&Object>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "stringValue", managed = "Other")]
    pub unsafe fn stringValue(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setStringValue:")]
    pub unsafe fn setStringValue(&self, string_value: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setStringValue:resolvingEntities:")]
    pub unsafe fn setStringValue_resolvingEntities(&self, string: &NSString, resolve: bool);

    #[objc2::method(sel = "index")]
    pub unsafe fn index(&self) -> NSUInteger;

    #[objc2::method(sel = "level")]
    pub unsafe fn level(&self) -> NSUInteger;

    #[cfg(feature = "Foundation_NSXMLDocument")]
    #[objc2::method(sel = "rootDocument", managed = "Other")]
    pub unsafe fn rootDocument(&self) -> Option<Id<NSXMLDocument>>;

    #[objc2::method(sel = "parent", managed = "Other")]
    pub unsafe fn parent(&self) -> Option<Id<NSXMLNode>>;

    #[objc2::method(sel = "childCount")]
    pub unsafe fn childCount(&self) -> NSUInteger;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "children", managed = "Other")]
    pub unsafe fn children(&self) -> Option<Id<NSArray<NSXMLNode>>>;

    #[objc2::method(sel = "childAtIndex:", managed = "Other")]
    pub unsafe fn childAtIndex(&self, index: NSUInteger) -> Option<Id<NSXMLNode>>;

    #[objc2::method(sel = "previousSibling", managed = "Other")]
    pub unsafe fn previousSibling(&self) -> Option<Id<NSXMLNode>>;

    #[objc2::method(sel = "nextSibling", managed = "Other")]
    pub unsafe fn nextSibling(&self) -> Option<Id<NSXMLNode>>;

    #[objc2::method(sel = "previousNode", managed = "Other")]
    pub unsafe fn previousNode(&self) -> Option<Id<NSXMLNode>>;

    #[objc2::method(sel = "nextNode", managed = "Other")]
    pub unsafe fn nextNode(&self) -> Option<Id<NSXMLNode>>;

    #[objc2::method(sel = "detach")]
    pub unsafe fn detach(&self);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "XPath", managed = "Other")]
    pub unsafe fn XPath(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "localName", managed = "Other")]
    pub unsafe fn localName(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "prefix", managed = "Other")]
    pub unsafe fn prefix(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "URI", managed = "Other")]
    pub unsafe fn URI(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setURI:")]
    pub unsafe fn setURI(&self, uri: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "localNameForName:", managed = "Other")]
    pub unsafe fn localNameForName(name: &NSString) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "prefixForName:", managed = "Other")]
    pub unsafe fn prefixForName(name: &NSString) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "predefinedNamespaceForPrefix:", managed = "Other")]
    pub unsafe fn predefinedNamespaceForPrefix(name: &NSString) -> Option<Id<NSXMLNode>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "description", managed = "Other")]
    pub unsafe fn description(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "XMLString", managed = "Other")]
    pub unsafe fn XMLString(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "XMLStringWithOptions:", managed = "Other")]
    pub unsafe fn XMLStringWithOptions(&self, options: NSXMLNodeOptions) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "canonicalXMLStringPreservingComments:", managed = "Other")]
    pub unsafe fn canonicalXMLStringPreservingComments(&self, comments: bool) -> Id<NSString>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "nodesForXPath:error:", managed = "Other", throws)]
    pub unsafe fn nodesForXPath_error(
        &self,
        xpath: &NSString,
    ) -> Result<Id<NSArray<NSXMLNode>>, Id<NSError>>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSError",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "objectsForXQuery:constants:error:", managed = "Other", throws)]
    pub unsafe fn objectsForXQuery_constants_error(
        &self,
        xquery: &NSString,
        constants: Option<&NSDictionary<NSString, Object>>,
    ) -> Result<Id<NSArray>, Id<NSError>>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "objectsForXQuery:error:", managed = "Other", throws)]
    pub unsafe fn objectsForXQuery_error(
        &self,
        xquery: &NSString,
    ) -> Result<Id<NSArray>, Id<NSError>>;
}
