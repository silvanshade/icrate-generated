//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

extern_static!(NSDefaultRunLoopMode: &'static NSRunLoopMode);

extern_static!(NSRunLoopCommonModes: &'static NSRunLoopMode);

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSRunLoop")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSRunLoop;
}

#[cfg(feature = "Foundation_NSRunLoop")]
unsafe impl NSObjectProtocol for NSRunLoop {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSRunLoop")]
    pub type NSRunLoop;

    #[objc2::method(sel = "currentRunLoop", managed = "Other")]
    pub unsafe fn currentRunLoop() -> Id<NSRunLoop>;

    #[objc2::method(sel = "mainRunLoop", managed = "Other")]
    pub unsafe fn mainRunLoop() -> Id<NSRunLoop>;

    #[objc2::method(sel = "currentMode", managed = "Other")]
    pub unsafe fn currentMode(&self) -> Option<Id<NSRunLoopMode>>;

    #[cfg(feature = "Foundation_NSTimer")]
    #[objc2::method(sel = "addTimer:forMode:")]
    pub unsafe fn addTimer_forMode(&self, timer: &NSTimer, mode: &NSRunLoopMode);

    #[cfg(feature = "Foundation_NSPort")]
    #[objc2::method(sel = "addPort:forMode:")]
    pub unsafe fn addPort_forMode(&self, a_port: &NSPort, mode: &NSRunLoopMode);

    #[cfg(feature = "Foundation_NSPort")]
    #[objc2::method(sel = "removePort:forMode:")]
    pub unsafe fn removePort_forMode(&self, a_port: &NSPort, mode: &NSRunLoopMode);

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "limitDateForMode:", managed = "Other")]
    pub unsafe fn limitDateForMode(&self, mode: &NSRunLoopMode) -> Option<Id<NSDate>>;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "acceptInputForMode:beforeDate:")]
    pub unsafe fn acceptInputForMode_beforeDate(&self, mode: &NSRunLoopMode, limit_date: &NSDate);
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSRunLoop")]
    pub type NSRunLoop;

    #[objc2::method(sel = "run")]
    pub unsafe fn run(&self);

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "runUntilDate:")]
    pub unsafe fn runUntilDate(&self, limit_date: &NSDate);

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "runMode:beforeDate:")]
    pub unsafe fn runMode_beforeDate(&self, mode: &NSRunLoopMode, limit_date: &NSDate) -> bool;

    #[deprecated = "Not supported"]
    #[objc2::method(sel = "configureAsServer")]
    pub unsafe fn configureAsServer(&self);

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "performInModes:block:")]
    pub unsafe fn performInModes_block(
        &self,
        modes: &NSArray<NSRunLoopMode>,
        block: &Block<(), ()>,
    );

    #[objc2::method(sel = "performBlock:")]
    pub unsafe fn performBlock(&self, block: &Block<(), ()>);
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSRunLoop")]
    pub type NSRunLoop;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "performSelector:target:argument:order:modes:")]
    pub unsafe fn performSelector_target_argument_order_modes(
        &self,
        a_selector: Sel,
        target: &Object,
        arg: Option<&Object>,
        order: NSUInteger,
        modes: &NSArray<NSRunLoopMode>,
    );

    #[objc2::method(sel = "cancelPerformSelector:target:argument:")]
    pub unsafe fn cancelPerformSelector_target_argument(
        &self,
        a_selector: Sel,
        target: &Object,
        arg: Option<&Object>,
    );

    #[objc2::method(sel = "cancelPerformSelectorsWithTarget:")]
    pub unsafe fn cancelPerformSelectorsWithTarget(&self, target: &Object);
}
