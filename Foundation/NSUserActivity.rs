//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

pub type NSUserActivityPersistentIdentifier = NSString;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUserActivity")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSUserActivity;
}

#[cfg(feature = "Foundation_NSUserActivity")]
unsafe impl NSObjectProtocol for NSUserActivity {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSUserActivity")]
    pub type NSUserActivity;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithActivityType:", managed = "Init")]
    pub unsafe fn initWithActivityType(
        this: Option<Allocated<Self>>,
        activity_type: &NSString,
    ) -> Id<Self>;

    #[deprecated = "Use initWithActivityType: with a specific activity type string"]
    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "activityType", managed = "Other")]
    pub unsafe fn activityType(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "title", managed = "Other")]
    pub unsafe fn title(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setTitle:")]
    pub unsafe fn setTitle(&self, title: Option<&NSString>);

    #[cfg(feature = "Foundation_NSDictionary")]
    #[objc2::method(sel = "userInfo", managed = "Other")]
    pub unsafe fn userInfo(&self) -> Option<Id<NSDictionary>>;

    #[cfg(feature = "Foundation_NSDictionary")]
    #[objc2::method(sel = "setUserInfo:")]
    pub unsafe fn setUserInfo(&self, user_info: Option<&NSDictionary>);

    #[cfg(feature = "Foundation_NSDictionary")]
    #[objc2::method(sel = "addUserInfoEntriesFromDictionary:")]
    pub unsafe fn addUserInfoEntriesFromDictionary(&self, other_dictionary: &NSDictionary);

    #[cfg(all(feature = "Foundation_NSSet", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "requiredUserInfoKeys", managed = "Other")]
    pub unsafe fn requiredUserInfoKeys(&self) -> Option<Id<NSSet<NSString>>>;

    #[cfg(all(feature = "Foundation_NSSet", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setRequiredUserInfoKeys:")]
    pub unsafe fn setRequiredUserInfoKeys(&self, required_user_info_keys: Option<&NSSet<NSString>>);

    #[objc2::method(sel = "needsSave")]
    pub unsafe fn needsSave(&self) -> bool;

    #[objc2::method(sel = "setNeedsSave:")]
    pub unsafe fn setNeedsSave(&self, needs_save: bool);

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "webpageURL", managed = "Other")]
    pub unsafe fn webpageURL(&self) -> Option<Id<NSURL>>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "setWebpageURL:")]
    pub unsafe fn setWebpageURL(&self, webpage_url: Option<&NSURL>);

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "referrerURL", managed = "Other")]
    pub unsafe fn referrerURL(&self) -> Option<Id<NSURL>>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "setReferrerURL:")]
    pub unsafe fn setReferrerURL(&self, referrer_url: Option<&NSURL>);

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "expirationDate", managed = "Other")]
    pub unsafe fn expirationDate(&self) -> Option<Id<NSDate>>;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "setExpirationDate:")]
    pub unsafe fn setExpirationDate(&self, expiration_date: Option<&NSDate>);

    #[cfg(all(feature = "Foundation_NSSet", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "keywords", managed = "Other")]
    pub unsafe fn keywords(&self) -> Id<NSSet<NSString>>;

    #[cfg(all(feature = "Foundation_NSSet", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setKeywords:")]
    pub unsafe fn setKeywords(&self, keywords: &NSSet<NSString>);

    #[objc2::method(sel = "supportsContinuationStreams")]
    pub unsafe fn supportsContinuationStreams(&self) -> bool;

    #[objc2::method(sel = "setSupportsContinuationStreams:")]
    pub unsafe fn setSupportsContinuationStreams(&self, supports_continuation_streams: bool);

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn NSUserActivityDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(&self, delegate: Option<&ProtocolObject<dyn NSUserActivityDelegate>>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "targetContentIdentifier", managed = "Other")]
    pub unsafe fn targetContentIdentifier(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setTargetContentIdentifier:")]
    pub unsafe fn setTargetContentIdentifier(&self, target_content_identifier: Option<&NSString>);

    #[objc2::method(sel = "becomeCurrent")]
    pub unsafe fn becomeCurrent(&self);

    #[objc2::method(sel = "resignCurrent")]
    pub unsafe fn resignCurrent(&self);

    #[objc2::method(sel = "invalidate")]
    pub unsafe fn invalidate(&self);

    #[cfg(all(
        feature = "Foundation_NSError",
        feature = "Foundation_NSInputStream",
        feature = "Foundation_NSOutputStream"
    ))]
    #[objc2::method(sel = "getContinuationStreamsWithCompletionHandler:")]
    pub unsafe fn getContinuationStreamsWithCompletionHandler(
        &self,
        completion_handler: &Block<(*mut NSInputStream, *mut NSOutputStream, *mut NSError), ()>,
    );

    #[objc2::method(sel = "isEligibleForHandoff")]
    pub unsafe fn isEligibleForHandoff(&self) -> bool;

    #[objc2::method(sel = "setEligibleForHandoff:")]
    pub unsafe fn setEligibleForHandoff(&self, eligible_for_handoff: bool);

    #[objc2::method(sel = "isEligibleForSearch")]
    pub unsafe fn isEligibleForSearch(&self) -> bool;

    #[objc2::method(sel = "setEligibleForSearch:")]
    pub unsafe fn setEligibleForSearch(&self, eligible_for_search: bool);

    #[objc2::method(sel = "isEligibleForPublicIndexing")]
    pub unsafe fn isEligibleForPublicIndexing(&self) -> bool;

    #[objc2::method(sel = "setEligibleForPublicIndexing:")]
    pub unsafe fn setEligibleForPublicIndexing(&self, eligible_for_public_indexing: bool);

    #[objc2::method(sel = "isEligibleForPrediction")]
    pub unsafe fn isEligibleForPrediction(&self) -> bool;

    #[objc2::method(sel = "setEligibleForPrediction:")]
    pub unsafe fn setEligibleForPrediction(&self, eligible_for_prediction: bool);

    #[objc2::method(sel = "persistentIdentifier", managed = "Other")]
    pub unsafe fn persistentIdentifier(&self) -> Option<Id<NSUserActivityPersistentIdentifier>>;

    #[objc2::method(sel = "setPersistentIdentifier:")]
    pub unsafe fn setPersistentIdentifier(
        &self,
        persistent_identifier: Option<&NSUserActivityPersistentIdentifier>,
    );

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "deleteSavedUserActivitiesWithPersistentIdentifiers:completionHandler:")]
    pub unsafe fn deleteSavedUserActivitiesWithPersistentIdentifiers_completionHandler(
        persistent_identifiers: &NSArray<NSUserActivityPersistentIdentifier>,
        handler: &Block<(), ()>,
    );

    #[objc2::method(sel = "deleteAllSavedUserActivitiesWithCompletionHandler:")]
    pub unsafe fn deleteAllSavedUserActivitiesWithCompletionHandler(handler: &Block<(), ()>);
}

extern_static!(NSUserActivityTypeBrowsingWeb: &'static NSString);

#[objc2::protocol]
pub unsafe trait NSUserActivityDelegate: NSObjectProtocol {
    #[cfg(feature = "Foundation_NSUserActivity")]
    #[objc2::method(optional, sel = "userActivityWillSave:")]
    unsafe fn userActivityWillSave(&self, user_activity: &NSUserActivity);

    #[cfg(feature = "Foundation_NSUserActivity")]
    #[objc2::method(optional, sel = "userActivityWasContinued:")]
    unsafe fn userActivityWasContinued(&self, user_activity: &NSUserActivity);

    #[cfg(all(
        feature = "Foundation_NSInputStream",
        feature = "Foundation_NSOutputStream",
        feature = "Foundation_NSUserActivity"
    ))]
    #[objc2::method(optional, sel = "userActivity:didReceiveInputStream:outputStream:")]
    unsafe fn userActivity_didReceiveInputStream_outputStream(
        &self,
        user_activity: &NSUserActivity,
        input_stream: &NSInputStream,
        output_stream: &NSOutputStream,
    );
}
