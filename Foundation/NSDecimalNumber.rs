//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

extern_static!(NSDecimalNumberExactnessException: &'static NSExceptionName);

extern_static!(NSDecimalNumberOverflowException: &'static NSExceptionName);

extern_static!(NSDecimalNumberUnderflowException: &'static NSExceptionName);

extern_static!(NSDecimalNumberDivideByZeroException: &'static NSExceptionName);

#[objc2::protocol]
pub unsafe trait NSDecimalNumberBehaviors {
    #[objc2::method(sel = "roundingMode")]
    unsafe fn roundingMode(&self) -> NSRoundingMode;

    #[objc2::method(sel = "scale")]
    unsafe fn scale(&self) -> c_short;

    #[cfg(feature = "Foundation_NSDecimalNumber")]
    #[objc2::method(
        sel = "exceptionDuringOperation:error:leftOperand:rightOperand:",
        managed = "Other"
    )]
    unsafe fn exceptionDuringOperation_error_leftOperand_rightOperand(
        &self,
        operation: Sel,
        error: NSCalculationError,
        left_operand: &NSDecimalNumber,
        right_operand: Option<&NSDecimalNumber>,
    ) -> Option<Id<NSDecimalNumber>>;
}

#[objc2::interface(
    unsafe super = NSNumber,
    unsafe inherits = [
        NSValue,
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSDecimalNumber")]
    #[derive(Debug, PartialEq, Hash)]
    pub type NSDecimalNumber;
}

#[cfg(feature = "Foundation_NSDecimalNumber")]
unsafe impl NSCoding for NSDecimalNumber {}

#[cfg(feature = "Foundation_NSDecimalNumber")]
unsafe impl NSObjectProtocol for NSDecimalNumber {}

#[cfg(feature = "Foundation_NSDecimalNumber")]
unsafe impl NSSecureCoding for NSDecimalNumber {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSDecimalNumber")]
    pub type NSDecimalNumber;

    #[objc2::method(sel = "initWithMantissa:exponent:isNegative:", managed = "Init")]
    pub unsafe fn initWithMantissa_exponent_isNegative(
        this: Option<Allocated<Self>>,
        mantissa: c_ulonglong,
        exponent: c_short,
        flag: bool,
    ) -> Id<Self>;

    #[objc2::method(sel = "initWithDecimal:", managed = "Init")]
    pub unsafe fn initWithDecimal(this: Option<Allocated<Self>>, dcm: NSDecimal) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithString:", managed = "Init")]
    pub unsafe fn initWithString(
        this: Option<Allocated<Self>>,
        number_value: Option<&NSString>,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "initWithString:locale:", managed = "Init")]
    pub unsafe fn initWithString_locale(
        this: Option<Allocated<Self>>,
        number_value: Option<&NSString>,
        locale: Option<&Object>,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "descriptionWithLocale:", managed = "Other")]
    pub unsafe fn descriptionWithLocale(&self, locale: Option<&Object>) -> Id<NSString>;

    #[objc2::method(sel = "decimalValue")]
    pub unsafe fn decimalValue(&self) -> NSDecimal;

    #[objc2::method(
        sel = "decimalNumberWithMantissa:exponent:isNegative:",
        managed = "Other"
    )]
    pub unsafe fn decimalNumberWithMantissa_exponent_isNegative(
        mantissa: c_ulonglong,
        exponent: c_short,
        flag: bool,
    ) -> Id<NSDecimalNumber>;

    #[objc2::method(sel = "decimalNumberWithDecimal:", managed = "Other")]
    pub unsafe fn decimalNumberWithDecimal(dcm: NSDecimal) -> Id<NSDecimalNumber>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "decimalNumberWithString:", managed = "Other")]
    pub unsafe fn decimalNumberWithString(number_value: Option<&NSString>) -> Id<NSDecimalNumber>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "decimalNumberWithString:locale:", managed = "Other")]
    pub unsafe fn decimalNumberWithString_locale(
        number_value: Option<&NSString>,
        locale: Option<&Object>,
    ) -> Id<NSDecimalNumber>;

    #[objc2::method(sel = "zero", managed = "Other")]
    pub unsafe fn zero() -> Id<NSDecimalNumber>;

    #[objc2::method(sel = "one", managed = "Other")]
    pub unsafe fn one() -> Id<NSDecimalNumber>;

    #[objc2::method(sel = "minimumDecimalNumber", managed = "Other")]
    pub unsafe fn minimumDecimalNumber() -> Id<NSDecimalNumber>;

    #[objc2::method(sel = "maximumDecimalNumber", managed = "Other")]
    pub unsafe fn maximumDecimalNumber() -> Id<NSDecimalNumber>;

    #[objc2::method(sel = "notANumber", managed = "Other")]
    pub unsafe fn notANumber() -> Id<NSDecimalNumber>;

    #[objc2::method(sel = "decimalNumberByAdding:", managed = "Other")]
    pub unsafe fn decimalNumberByAdding(
        &self,
        decimal_number: &NSDecimalNumber,
    ) -> Id<NSDecimalNumber>;

    #[objc2::method(sel = "decimalNumberByAdding:withBehavior:", managed = "Other")]
    pub unsafe fn decimalNumberByAdding_withBehavior(
        &self,
        decimal_number: &NSDecimalNumber,
        behavior: Option<&ProtocolObject<dyn NSDecimalNumberBehaviors>>,
    ) -> Id<NSDecimalNumber>;

    #[objc2::method(sel = "decimalNumberBySubtracting:", managed = "Other")]
    pub unsafe fn decimalNumberBySubtracting(
        &self,
        decimal_number: &NSDecimalNumber,
    ) -> Id<NSDecimalNumber>;

    #[objc2::method(sel = "decimalNumberBySubtracting:withBehavior:", managed = "Other")]
    pub unsafe fn decimalNumberBySubtracting_withBehavior(
        &self,
        decimal_number: &NSDecimalNumber,
        behavior: Option<&ProtocolObject<dyn NSDecimalNumberBehaviors>>,
    ) -> Id<NSDecimalNumber>;

    #[objc2::method(sel = "decimalNumberByMultiplyingBy:", managed = "Other")]
    pub unsafe fn decimalNumberByMultiplyingBy(
        &self,
        decimal_number: &NSDecimalNumber,
    ) -> Id<NSDecimalNumber>;

    #[objc2::method(sel = "decimalNumberByMultiplyingBy:withBehavior:", managed = "Other")]
    pub unsafe fn decimalNumberByMultiplyingBy_withBehavior(
        &self,
        decimal_number: &NSDecimalNumber,
        behavior: Option<&ProtocolObject<dyn NSDecimalNumberBehaviors>>,
    ) -> Id<NSDecimalNumber>;

    #[objc2::method(sel = "decimalNumberByDividingBy:", managed = "Other")]
    pub unsafe fn decimalNumberByDividingBy(
        &self,
        decimal_number: &NSDecimalNumber,
    ) -> Id<NSDecimalNumber>;

    #[objc2::method(sel = "decimalNumberByDividingBy:withBehavior:", managed = "Other")]
    pub unsafe fn decimalNumberByDividingBy_withBehavior(
        &self,
        decimal_number: &NSDecimalNumber,
        behavior: Option<&ProtocolObject<dyn NSDecimalNumberBehaviors>>,
    ) -> Id<NSDecimalNumber>;

    #[objc2::method(sel = "decimalNumberByRaisingToPower:", managed = "Other")]
    pub unsafe fn decimalNumberByRaisingToPower(&self, power: NSUInteger) -> Id<NSDecimalNumber>;

    #[objc2::method(sel = "decimalNumberByRaisingToPower:withBehavior:", managed = "Other")]
    pub unsafe fn decimalNumberByRaisingToPower_withBehavior(
        &self,
        power: NSUInteger,
        behavior: Option<&ProtocolObject<dyn NSDecimalNumberBehaviors>>,
    ) -> Id<NSDecimalNumber>;

    #[objc2::method(sel = "decimalNumberByMultiplyingByPowerOf10:", managed = "Other")]
    pub unsafe fn decimalNumberByMultiplyingByPowerOf10(
        &self,
        power: c_short,
    ) -> Id<NSDecimalNumber>;

    #[objc2::method(
        sel = "decimalNumberByMultiplyingByPowerOf10:withBehavior:",
        managed = "Other"
    )]
    pub unsafe fn decimalNumberByMultiplyingByPowerOf10_withBehavior(
        &self,
        power: c_short,
        behavior: Option<&ProtocolObject<dyn NSDecimalNumberBehaviors>>,
    ) -> Id<NSDecimalNumber>;

    #[objc2::method(sel = "decimalNumberByRoundingAccordingToBehavior:", managed = "Other")]
    pub unsafe fn decimalNumberByRoundingAccordingToBehavior(
        &self,
        behavior: Option<&ProtocolObject<dyn NSDecimalNumberBehaviors>>,
    ) -> Id<NSDecimalNumber>;

    #[objc2::method(sel = "compare:")]
    pub unsafe fn compare(&self, decimal_number: &NSNumber) -> NSComparisonResult;

    #[objc2::method(sel = "defaultBehavior", managed = "Other")]
    pub unsafe fn defaultBehavior() -> Id<ProtocolObject<dyn NSDecimalNumberBehaviors>>;

    #[objc2::method(sel = "setDefaultBehavior:")]
    pub unsafe fn setDefaultBehavior(
        default_behavior: &ProtocolObject<dyn NSDecimalNumberBehaviors>,
    );

    #[objc2::method(sel = "objCType")]
    pub unsafe fn objCType(&self) -> NonNull<c_char>;

    #[objc2::method(sel = "doubleValue")]
    pub unsafe fn doubleValue(&self) -> c_double;
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSDecimalNumberHandler")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSDecimalNumberHandler;
}

#[cfg(feature = "Foundation_NSDecimalNumberHandler")]
unsafe impl NSCoding for NSDecimalNumberHandler {}

#[cfg(feature = "Foundation_NSDecimalNumberHandler")]
unsafe impl NSDecimalNumberBehaviors for NSDecimalNumberHandler {}

#[cfg(feature = "Foundation_NSDecimalNumberHandler")]
unsafe impl NSObjectProtocol for NSDecimalNumberHandler {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSDecimalNumberHandler")]
    pub type NSDecimalNumberHandler;

    #[objc2::method(sel = "defaultDecimalNumberHandler", managed = "Other")]
    pub unsafe fn defaultDecimalNumberHandler() -> Id<NSDecimalNumberHandler>;

    #[objc2::method(
        sel = "initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:",
        managed = "Init"
    )]
    pub unsafe fn initWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero(
        this: Option<Allocated<Self>>,
        rounding_mode: NSRoundingMode,
        scale: c_short,
        exact: bool,
        overflow: bool,
        underflow: bool,
        divide_by_zero: bool,
    ) -> Id<Self>;

    #[objc2::method(
        sel = "decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:",
        managed = "Other"
    )]
    pub unsafe fn decimalNumberHandlerWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero(
        rounding_mode: NSRoundingMode,
        scale: c_short,
        exact: bool,
        overflow: bool,
        underflow: bool,
        divide_by_zero: bool,
    ) -> Id<Self>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSNumber")]
    pub type NSNumber;

    #[objc2::method(sel = "decimalValue")]
    pub unsafe fn decimalValue(&self) -> NSDecimal;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSScanner")]
    pub type NSScanner;

    #[objc2::method(sel = "scanDecimal:")]
    pub unsafe fn scanDecimal(&self, dcm: *mut NSDecimal) -> bool;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSValue`
    #[cfg(feature = "Foundation_NSDecimalNumber")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSDecimalNumber")]
    pub type NSDecimalNumber;

    #[objc2::method(sel = "initWithBytes:objCType:", managed = "Init")]
    pub unsafe fn initWithBytes_objCType(
        this: Option<Allocated<Self>>,
        value: NonNull<c_void>,
        r#type: NonNull<c_char>,
    ) -> Id<Self>;
}
