//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSTaskTerminationReason {
    NSTaskTerminationReasonExit = 1,
    NSTaskTerminationReasonUncaughtSignal = 2,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSTask")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSTask;
}

#[cfg(feature = "Foundation_NSTask")]
unsafe impl NSObjectProtocol for NSTask {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSTask")]
    pub type NSTask;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "executableURL", managed = "Other")]
    pub unsafe fn executableURL(&self) -> Option<Id<NSURL>>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "setExecutableURL:")]
    pub unsafe fn setExecutableURL(&self, executable_url: Option<&NSURL>);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "arguments", managed = "Other")]
    pub unsafe fn arguments(&self) -> Option<Id<NSArray<NSString>>>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setArguments:")]
    pub unsafe fn setArguments(&self, arguments: Option<&NSArray<NSString>>);

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "environment", managed = "Other")]
    pub unsafe fn environment(&self) -> Option<Id<NSDictionary<NSString, NSString>>>;

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setEnvironment:")]
    pub unsafe fn setEnvironment(&self, environment: Option<&NSDictionary<NSString, NSString>>);

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "currentDirectoryURL", managed = "Other")]
    pub unsafe fn currentDirectoryURL(&self) -> Option<Id<NSURL>>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "setCurrentDirectoryURL:")]
    pub unsafe fn setCurrentDirectoryURL(&self, current_directory_url: Option<&NSURL>);

    #[objc2::method(sel = "standardInput", managed = "Other")]
    pub unsafe fn standardInput(&self) -> Option<Id<Object>>;

    #[objc2::method(sel = "setStandardInput:")]
    pub unsafe fn setStandardInput(&self, standard_input: Option<&Object>);

    #[objc2::method(sel = "standardOutput", managed = "Other")]
    pub unsafe fn standardOutput(&self) -> Option<Id<Object>>;

    #[objc2::method(sel = "setStandardOutput:")]
    pub unsafe fn setStandardOutput(&self, standard_output: Option<&Object>);

    #[objc2::method(sel = "standardError", managed = "Other")]
    pub unsafe fn standardError(&self) -> Option<Id<Object>>;

    #[objc2::method(sel = "setStandardError:")]
    pub unsafe fn setStandardError(&self, standard_error: Option<&Object>);

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "launchAndReturnError:", throws)]
    pub unsafe fn launchAndReturnError(&self) -> Result<(), Id<NSError>>;

    #[objc2::method(sel = "interrupt")]
    pub unsafe fn interrupt(&self);

    #[objc2::method(sel = "terminate")]
    pub unsafe fn terminate(&self);

    #[objc2::method(sel = "suspend")]
    pub unsafe fn suspend(&self) -> bool;

    #[objc2::method(sel = "resume")]
    pub unsafe fn resume(&self) -> bool;

    #[objc2::method(sel = "processIdentifier")]
    pub unsafe fn processIdentifier(&self) -> c_int;

    #[objc2::method(sel = "isRunning")]
    pub unsafe fn isRunning(&self) -> bool;

    #[objc2::method(sel = "terminationStatus")]
    pub unsafe fn terminationStatus(&self) -> c_int;

    #[objc2::method(sel = "terminationReason")]
    pub unsafe fn terminationReason(&self) -> NSTaskTerminationReason;

    #[objc2::method(sel = "terminationHandler")]
    pub unsafe fn terminationHandler(&self) -> *mut Block<(NonNull<NSTask>,), ()>;

    #[objc2::method(sel = "setTerminationHandler:")]
    pub unsafe fn setTerminationHandler(
        &self,
        termination_handler: Option<&Block<(NonNull<NSTask>,), ()>>,
    );

    #[objc2::method(sel = "qualityOfService")]
    pub unsafe fn qualityOfService(&self) -> NSQualityOfService;

    #[objc2::method(sel = "setQualityOfService:")]
    pub unsafe fn setQualityOfService(&self, quality_of_service: NSQualityOfService);
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSTask")]
    pub type NSTask;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError",
        feature = "Foundation_NSString",
        feature = "Foundation_NSURL"
    ))]
    #[objc2::method(
        sel = "launchedTaskWithExecutableURL:arguments:error:terminationHandler:",
        managed = "Other"
    )]
    pub unsafe fn launchedTaskWithExecutableURL_arguments_error_terminationHandler(
        url: &NSURL,
        arguments: &NSArray<NSString>,
        error: Option<&mut Option<Id<NSError>>>,
        termination_handler: Option<&Block<(NonNull<NSTask>,), ()>>,
    ) -> Option<Id<NSTask>>;

    #[objc2::method(sel = "waitUntilExit")]
    pub unsafe fn waitUntilExit(&self);
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSTask")]
    pub type NSTask;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "launchPath", managed = "Other")]
    pub unsafe fn launchPath(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "setLaunchPath:")]
    pub unsafe fn setLaunchPath(&self, launch_path: Option<&NSString>);

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "currentDirectoryPath", managed = "Other")]
    pub unsafe fn currentDirectoryPath(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated]
    #[objc2::method(sel = "setCurrentDirectoryPath:")]
    pub unsafe fn setCurrentDirectoryPath(&self, current_directory_path: &NSString);

    #[deprecated]
    #[objc2::method(sel = "launch")]
    pub unsafe fn launch(&self);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[deprecated]
    #[objc2::method(sel = "launchedTaskWithLaunchPath:arguments:", managed = "Other")]
    pub unsafe fn launchedTaskWithLaunchPath_arguments(
        path: &NSString,
        arguments: &NSArray<NSString>,
    ) -> Id<NSTask>;
}

extern_static!(NSTaskDidTerminateNotification: &'static NSNotificationName);
