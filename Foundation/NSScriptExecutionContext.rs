//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreFoundation::*;
use crate::Foundation::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Foundation_NSScriptExecutionContext")]
    pub struct NSScriptExecutionContext;

    #[cfg(feature = "Foundation_NSScriptExecutionContext")]
    unsafe impl ClassType for NSScriptExecutionContext {
        type Super = NSObject;
    }
);

#[cfg(feature = "Foundation_NSScriptExecutionContext")]
unsafe impl NSObjectProtocol for NSScriptExecutionContext {}

extern_methods!(
    #[cfg(feature = "Foundation_NSScriptExecutionContext")]
    unsafe impl NSScriptExecutionContext {
        #[method_id(@__retain_semantics Other sharedScriptExecutionContext)]
        pub unsafe fn sharedScriptExecutionContext() -> Id<NSScriptExecutionContext, Shared>;

        #[method_id(@__retain_semantics Other topLevelObject)]
        pub unsafe fn topLevelObject(&self) -> Option<Id<Object, Shared>>;

        #[method(setTopLevelObject:)]
        pub unsafe fn setTopLevelObject(&self, top_level_object: Option<&Object>);

        #[method_id(@__retain_semantics Other objectBeingTested)]
        pub unsafe fn objectBeingTested(&self) -> Option<Id<Object, Shared>>;

        #[method(setObjectBeingTested:)]
        pub unsafe fn setObjectBeingTested(&self, object_being_tested: Option<&Object>);

        #[method_id(@__retain_semantics Other rangeContainerObject)]
        pub unsafe fn rangeContainerObject(&self) -> Option<Id<Object, Shared>>;

        #[method(setRangeContainerObject:)]
        pub unsafe fn setRangeContainerObject(&self, range_container_object: Option<&Object>);
    }
);
