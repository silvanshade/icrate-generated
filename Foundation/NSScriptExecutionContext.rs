//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSScriptExecutionContext")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSScriptExecutionContext;
}

#[cfg(feature = "Foundation_NSScriptExecutionContext")]
unsafe impl NSObjectProtocol for NSScriptExecutionContext {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSScriptExecutionContext")]
    pub type NSScriptExecutionContext;

    #[objc2::method(sel = "sharedScriptExecutionContext", managed = "Other")]
    pub unsafe fn sharedScriptExecutionContext() -> Id<NSScriptExecutionContext>;

    #[objc2::method(sel = "topLevelObject", managed = "Other")]
    pub unsafe fn topLevelObject(&self) -> Option<Id<Object>>;

    #[objc2::method(sel = "setTopLevelObject:")]
    pub unsafe fn setTopLevelObject(&self, top_level_object: Option<&Object>);

    #[objc2::method(sel = "objectBeingTested", managed = "Other")]
    pub unsafe fn objectBeingTested(&self) -> Option<Id<Object>>;

    #[objc2::method(sel = "setObjectBeingTested:")]
    pub unsafe fn setObjectBeingTested(&self, object_being_tested: Option<&Object>);

    #[objc2::method(sel = "rangeContainerObject", managed = "Other")]
    pub unsafe fn rangeContainerObject(&self) -> Option<Id<Object>>;

    #[objc2::method(sel = "setRangeContainerObject:")]
    pub unsafe fn setRangeContainerObject(&self, range_container_object: Option<&Object>);
}
