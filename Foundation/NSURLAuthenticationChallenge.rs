//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[objc2::protocol]
pub unsafe trait NSURLAuthenticationChallengeSender: NSObjectProtocol {
    #[cfg(all(
        feature = "Foundation_NSURLAuthenticationChallenge",
        feature = "Foundation_NSURLCredential"
    ))]
    #[objc2::method(sel = "useCredential:forAuthenticationChallenge:")]
    unsafe fn useCredential_forAuthenticationChallenge(
        &self,
        credential: &NSURLCredential,
        challenge: &NSURLAuthenticationChallenge,
    );

    #[cfg(feature = "Foundation_NSURLAuthenticationChallenge")]
    #[objc2::method(sel = "continueWithoutCredentialForAuthenticationChallenge:")]
    unsafe fn continueWithoutCredentialForAuthenticationChallenge(
        &self,
        challenge: &NSURLAuthenticationChallenge,
    );

    #[cfg(feature = "Foundation_NSURLAuthenticationChallenge")]
    #[objc2::method(sel = "cancelAuthenticationChallenge:")]
    unsafe fn cancelAuthenticationChallenge(&self, challenge: &NSURLAuthenticationChallenge);

    #[cfg(feature = "Foundation_NSURLAuthenticationChallenge")]
    #[objc2::method(optional, sel = "performDefaultHandlingForAuthenticationChallenge:")]
    unsafe fn performDefaultHandlingForAuthenticationChallenge(
        &self,
        challenge: &NSURLAuthenticationChallenge,
    );

    #[cfg(feature = "Foundation_NSURLAuthenticationChallenge")]
    #[objc2::method(optional, sel = "rejectProtectionSpaceAndContinueWithChallenge:")]
    unsafe fn rejectProtectionSpaceAndContinueWithChallenge(
        &self,
        challenge: &NSURLAuthenticationChallenge,
    );
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSURLAuthenticationChallenge")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSURLAuthenticationChallenge;
}

#[cfg(feature = "Foundation_NSURLAuthenticationChallenge")]
unsafe impl NSCoding for NSURLAuthenticationChallenge {}

#[cfg(feature = "Foundation_NSURLAuthenticationChallenge")]
unsafe impl NSObjectProtocol for NSURLAuthenticationChallenge {}

#[cfg(feature = "Foundation_NSURLAuthenticationChallenge")]
unsafe impl NSSecureCoding for NSURLAuthenticationChallenge {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSURLAuthenticationChallenge")]
    pub type NSURLAuthenticationChallenge;

    #[cfg(all(
        feature = "Foundation_NSError",
        feature = "Foundation_NSURLCredential",
        feature = "Foundation_NSURLProtectionSpace",
        feature = "Foundation_NSURLResponse"
    ))]
    #[objc2::method(
        sel = "initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:",
        managed = "Init"
    )]
    pub unsafe fn initWithProtectionSpace_proposedCredential_previousFailureCount_failureResponse_error_sender(
        this: Option<Allocated<Self>>,
        space: &NSURLProtectionSpace,
        credential: Option<&NSURLCredential>,
        previous_failure_count: NSInteger,
        response: Option<&NSURLResponse>,
        error: Option<&NSError>,
        sender: &ProtocolObject<dyn NSURLAuthenticationChallengeSender>,
    ) -> Id<Self>;

    #[objc2::method(sel = "initWithAuthenticationChallenge:sender:", managed = "Init")]
    pub unsafe fn initWithAuthenticationChallenge_sender(
        this: Option<Allocated<Self>>,
        challenge: &NSURLAuthenticationChallenge,
        sender: &ProtocolObject<dyn NSURLAuthenticationChallengeSender>,
    ) -> Id<Self>;

    #[cfg(feature = "Foundation_NSURLProtectionSpace")]
    #[objc2::method(sel = "protectionSpace", managed = "Other")]
    pub unsafe fn protectionSpace(&self) -> Id<NSURLProtectionSpace>;

    #[cfg(feature = "Foundation_NSURLCredential")]
    #[objc2::method(sel = "proposedCredential", managed = "Other")]
    pub unsafe fn proposedCredential(&self) -> Option<Id<NSURLCredential>>;

    #[objc2::method(sel = "previousFailureCount")]
    pub unsafe fn previousFailureCount(&self) -> NSInteger;

    #[cfg(feature = "Foundation_NSURLResponse")]
    #[objc2::method(sel = "failureResponse", managed = "Other")]
    pub unsafe fn failureResponse(&self) -> Option<Id<NSURLResponse>>;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "error", managed = "Other")]
    pub unsafe fn error(&self) -> Option<Id<NSError>>;

    #[objc2::method(sel = "sender", managed = "Other")]
    pub unsafe fn sender(
        &self,
    ) -> Option<Id<ProtocolObject<dyn NSURLAuthenticationChallengeSender>>>;
}
