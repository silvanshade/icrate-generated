//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[deprecated = "Use NSXPCConnection instead"]
    #[cfg(feature = "Foundation_NSConnection")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSConnection;
}

#[cfg(feature = "Foundation_NSConnection")]
unsafe impl NSObjectProtocol for NSConnection {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSConnection")]
    #[deprecated = "Use NSXPCConnection instead"]
    pub type NSConnection;

    #[cfg(all(
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSNumber",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "statistics", managed = "Other")]
    pub unsafe fn statistics(&self) -> Id<NSDictionary<NSString, NSNumber>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "allConnections", managed = "Other")]
    pub unsafe fn allConnections() -> Id<NSArray<NSConnection>>;

    #[deprecated]
    #[objc2::method(sel = "defaultConnection", managed = "Other")]
    pub unsafe fn defaultConnection() -> Id<NSConnection>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "connectionWithRegisteredName:host:", managed = "Other")]
    pub unsafe fn connectionWithRegisteredName_host(
        name: &NSString,
        host_name: Option<&NSString>,
    ) -> Option<Id<Self>>;

    #[cfg(all(
        feature = "Foundation_NSPortNameServer",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        sel = "connectionWithRegisteredName:host:usingNameServer:",
        managed = "Other"
    )]
    pub unsafe fn connectionWithRegisteredName_host_usingNameServer(
        name: &NSString,
        host_name: Option<&NSString>,
        server: &NSPortNameServer,
    ) -> Option<Id<Self>>;

    #[cfg(all(
        feature = "Foundation_NSDistantObject",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        sel = "rootProxyForConnectionWithRegisteredName:host:",
        managed = "Other"
    )]
    pub unsafe fn rootProxyForConnectionWithRegisteredName_host(
        name: &NSString,
        host_name: Option<&NSString>,
    ) -> Option<Id<NSDistantObject>>;

    #[cfg(all(
        feature = "Foundation_NSDistantObject",
        feature = "Foundation_NSPortNameServer",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        sel = "rootProxyForConnectionWithRegisteredName:host:usingNameServer:",
        managed = "Other"
    )]
    pub unsafe fn rootProxyForConnectionWithRegisteredName_host_usingNameServer(
        name: &NSString,
        host_name: Option<&NSString>,
        server: &NSPortNameServer,
    ) -> Option<Id<NSDistantObject>>;

    #[cfg(all(
        feature = "Foundation_NSPortNameServer",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        sel = "serviceConnectionWithName:rootObject:usingNameServer:",
        managed = "Other"
    )]
    pub unsafe fn serviceConnectionWithName_rootObject_usingNameServer(
        name: &NSString,
        root: &Object,
        server: &NSPortNameServer,
    ) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "serviceConnectionWithName:rootObject:", managed = "Other")]
    pub unsafe fn serviceConnectionWithName_rootObject(
        name: &NSString,
        root: &Object,
    ) -> Option<Id<Self>>;

    #[objc2::method(sel = "requestTimeout")]
    pub unsafe fn requestTimeout(&self) -> NSTimeInterval;

    #[objc2::method(sel = "setRequestTimeout:")]
    pub unsafe fn setRequestTimeout(&self, request_timeout: NSTimeInterval);

    #[objc2::method(sel = "replyTimeout")]
    pub unsafe fn replyTimeout(&self) -> NSTimeInterval;

    #[objc2::method(sel = "setReplyTimeout:")]
    pub unsafe fn setReplyTimeout(&self, reply_timeout: NSTimeInterval);

    #[objc2::method(sel = "rootObject", managed = "Other")]
    pub unsafe fn rootObject(&self) -> Option<Id<Object>>;

    #[objc2::method(sel = "setRootObject:")]
    pub unsafe fn setRootObject(&self, root_object: Option<&Object>);

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn NSConnectionDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(&self, delegate: Option<&ProtocolObject<dyn NSConnectionDelegate>>);

    #[objc2::method(sel = "independentConversationQueueing")]
    pub unsafe fn independentConversationQueueing(&self) -> bool;

    #[objc2::method(sel = "setIndependentConversationQueueing:")]
    pub unsafe fn setIndependentConversationQueueing(
        &self,
        independent_conversation_queueing: bool,
    );

    #[objc2::method(sel = "isValid")]
    pub unsafe fn isValid(&self) -> bool;

    #[cfg(feature = "Foundation_NSDistantObject")]
    #[objc2::method(sel = "rootProxy", managed = "Other")]
    pub unsafe fn rootProxy(&self) -> Id<NSDistantObject>;

    #[objc2::method(sel = "invalidate")]
    pub unsafe fn invalidate(&self);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "addRequestMode:")]
    pub unsafe fn addRequestMode(&self, rmode: &NSString);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "removeRequestMode:")]
    pub unsafe fn removeRequestMode(&self, rmode: &NSString);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "requestModes", managed = "Other")]
    pub unsafe fn requestModes(&self) -> Id<NSArray<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "registerName:")]
    pub unsafe fn registerName(&self, name: Option<&NSString>) -> bool;

    #[cfg(all(
        feature = "Foundation_NSPortNameServer",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "registerName:withNameServer:")]
    pub unsafe fn registerName_withNameServer(
        &self,
        name: Option<&NSString>,
        server: &NSPortNameServer,
    ) -> bool;

    #[cfg(feature = "Foundation_NSPort")]
    #[objc2::method(sel = "connectionWithReceivePort:sendPort:", managed = "Other")]
    pub unsafe fn connectionWithReceivePort_sendPort(
        receive_port: Option<&NSPort>,
        send_port: Option<&NSPort>,
    ) -> Option<Id<Self>>;

    #[objc2::method(sel = "currentConversation", managed = "Other")]
    pub unsafe fn currentConversation() -> Option<Id<Object>>;

    #[cfg(feature = "Foundation_NSPort")]
    #[objc2::method(sel = "initWithReceivePort:sendPort:", managed = "Init")]
    pub unsafe fn initWithReceivePort_sendPort(
        this: Option<Allocated<Self>>,
        receive_port: Option<&NSPort>,
        send_port: Option<&NSPort>,
    ) -> Option<Id<Self>>;

    #[cfg(feature = "Foundation_NSPort")]
    #[objc2::method(sel = "sendPort", managed = "Other")]
    pub unsafe fn sendPort(&self) -> Id<NSPort>;

    #[cfg(feature = "Foundation_NSPort")]
    #[objc2::method(sel = "receivePort", managed = "Other")]
    pub unsafe fn receivePort(&self) -> Id<NSPort>;

    #[objc2::method(sel = "enableMultipleThreads")]
    pub unsafe fn enableMultipleThreads(&self);

    #[objc2::method(sel = "multipleThreadsEnabled")]
    pub unsafe fn multipleThreadsEnabled(&self) -> bool;

    #[cfg(feature = "Foundation_NSRunLoop")]
    #[objc2::method(sel = "addRunLoop:")]
    pub unsafe fn addRunLoop(&self, runloop: &NSRunLoop);

    #[cfg(feature = "Foundation_NSRunLoop")]
    #[objc2::method(sel = "removeRunLoop:")]
    pub unsafe fn removeRunLoop(&self, runloop: &NSRunLoop);

    #[objc2::method(sel = "runInNewThread")]
    pub unsafe fn runInNewThread(&self);

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "remoteObjects", managed = "Other")]
    pub unsafe fn remoteObjects(&self) -> Id<NSArray>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "localObjects", managed = "Other")]
    pub unsafe fn localObjects(&self) -> Id<NSArray>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "dispatchWithComponents:")]
    pub unsafe fn dispatchWithComponents(&self, components: &NSArray);
}

extern_static!(NSConnectionReplyMode: &'static NSString);

extern_static!(NSConnectionDidDieNotification: &'static NSString);

#[objc2::protocol]
#[deprecated = "Use NSXPCConnection instead"]
pub unsafe trait NSConnectionDelegate: NSObjectProtocol {
    #[cfg(feature = "Foundation_NSConnection")]
    #[objc2::method(optional, sel = "makeNewConnection:sender:")]
    unsafe fn makeNewConnection_sender(&self, conn: &NSConnection, ancestor: &NSConnection)
        -> bool;

    #[cfg(feature = "Foundation_NSConnection")]
    #[objc2::method(optional, sel = "connection:shouldMakeNewConnection:")]
    unsafe fn connection_shouldMakeNewConnection(
        &self,
        ancestor: &NSConnection,
        conn: &NSConnection,
    ) -> bool;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSData"))]
    #[objc2::method(optional, sel = "authenticationDataForComponents:", managed = "Other")]
    unsafe fn authenticationDataForComponents(&self, components: &NSArray) -> Id<NSData>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSData"))]
    #[objc2::method(optional, sel = "authenticateComponents:withData:")]
    unsafe fn authenticateComponents_withData(
        &self,
        components: &NSArray,
        signature: &NSData,
    ) -> bool;

    #[cfg(feature = "Foundation_NSConnection")]
    #[objc2::method(optional, sel = "createConversationForConnection:", managed = "Other")]
    unsafe fn createConversationForConnection(&self, conn: &NSConnection) -> Id<Object>;

    #[cfg(all(
        feature = "Foundation_NSConnection",
        feature = "Foundation_NSDistantObjectRequest"
    ))]
    #[objc2::method(optional, sel = "connection:handleRequest:")]
    unsafe fn connection_handleRequest(
        &self,
        connection: &NSConnection,
        doreq: &NSDistantObjectRequest,
    ) -> bool;
}

extern_static!(NSFailedAuthenticationException: &'static NSString);

extern_static!(NSConnectionDidInitializeNotification: &'static NSString);

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[deprecated = "Use NSXPCConnection instead"]
    #[cfg(feature = "Foundation_NSDistantObjectRequest")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSDistantObjectRequest;
}

#[cfg(feature = "Foundation_NSDistantObjectRequest")]
unsafe impl NSObjectProtocol for NSDistantObjectRequest {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSDistantObjectRequest")]
    #[deprecated = "Use NSXPCConnection instead"]
    pub type NSDistantObjectRequest;

    #[cfg(feature = "Foundation_NSInvocation")]
    #[objc2::method(sel = "invocation", managed = "Other")]
    pub unsafe fn invocation(&self) -> Id<NSInvocation>;

    #[cfg(feature = "Foundation_NSConnection")]
    #[objc2::method(sel = "connection", managed = "Other")]
    pub unsafe fn connection(&self) -> Id<NSConnection>;

    #[objc2::method(sel = "conversation", managed = "Other")]
    pub unsafe fn conversation(&self) -> Id<Object>;

    #[cfg(feature = "Foundation_NSException")]
    #[objc2::method(sel = "replyWithException:")]
    pub unsafe fn replyWithException(&self, exception: Option<&NSException>);
}
