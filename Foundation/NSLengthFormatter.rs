//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSLengthFormatterUnit {
    NSLengthFormatterUnitMillimeter = 8,
    NSLengthFormatterUnitCentimeter = 9,
    NSLengthFormatterUnitMeter = 11,
    NSLengthFormatterUnitKilometer = 14,
    NSLengthFormatterUnitInch = (5 << 8) + 1,
    NSLengthFormatterUnitFoot = (5 << 8) + 2,
    NSLengthFormatterUnitYard = (5 << 8) + 3,
    NSLengthFormatterUnitMile = (5 << 8) + 4,
}

#[objc2::interface(
    unsafe super = NSFormatter,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSLengthFormatter")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSLengthFormatter;
}

#[cfg(feature = "Foundation_NSLengthFormatter")]
unsafe impl NSCoding for NSLengthFormatter {}

#[cfg(feature = "Foundation_NSLengthFormatter")]
unsafe impl NSObjectProtocol for NSLengthFormatter {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSLengthFormatter")]
    pub type NSLengthFormatter;

    #[cfg(feature = "Foundation_NSNumberFormatter")]
    #[objc2::method(sel = "numberFormatter", managed = "Other")]
    pub unsafe fn numberFormatter(&self) -> Id<NSNumberFormatter>;

    #[cfg(feature = "Foundation_NSNumberFormatter")]
    #[objc2::method(sel = "setNumberFormatter:")]
    pub unsafe fn setNumberFormatter(&self, number_formatter: Option<&NSNumberFormatter>);

    #[objc2::method(sel = "unitStyle")]
    pub unsafe fn unitStyle(&self) -> NSFormattingUnitStyle;

    #[objc2::method(sel = "setUnitStyle:")]
    pub unsafe fn setUnitStyle(&self, unit_style: NSFormattingUnitStyle);

    #[objc2::method(sel = "isForPersonHeightUse")]
    pub unsafe fn isForPersonHeightUse(&self) -> bool;

    #[objc2::method(sel = "setForPersonHeightUse:")]
    pub unsafe fn setForPersonHeightUse(&self, for_person_height_use: bool);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "stringFromValue:unit:", managed = "Other")]
    pub unsafe fn stringFromValue_unit(
        &self,
        value: c_double,
        unit: NSLengthFormatterUnit,
    ) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "stringFromMeters:", managed = "Other")]
    pub unsafe fn stringFromMeters(&self, number_in_meters: c_double) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "unitStringFromValue:unit:", managed = "Other")]
    pub unsafe fn unitStringFromValue_unit(
        &self,
        value: c_double,
        unit: NSLengthFormatterUnit,
    ) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "unitStringFromMeters:usedUnit:", managed = "Other")]
    pub unsafe fn unitStringFromMeters_usedUnit(
        &self,
        number_in_meters: c_double,
        unitp: *mut NSLengthFormatterUnit,
    ) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "getObjectValue:forString:errorDescription:")]
    pub unsafe fn getObjectValue_forString_errorDescription(
        &self,
        obj: Option<&mut Option<Id<Object>>>,
        string: &NSString,
        error: Option<&mut Option<Id<NSString>>>,
    ) -> bool;
}
