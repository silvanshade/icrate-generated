//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[deprecated = "Use NSXPCConnection instead"]
    #[cfg(feature = "Foundation_NSPortNameServer")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSPortNameServer;
}

#[cfg(feature = "Foundation_NSPortNameServer")]
unsafe impl NSObjectProtocol for NSPortNameServer {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSPortNameServer")]
    #[deprecated = "Use NSXPCConnection instead"]
    pub type NSPortNameServer;

    #[objc2::method(sel = "systemDefaultPortNameServer", managed = "Other")]
    pub unsafe fn systemDefaultPortNameServer() -> Id<NSPortNameServer>;

    #[cfg(all(feature = "Foundation_NSPort", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "portForName:", managed = "Other")]
    pub unsafe fn portForName(&self, name: &NSString) -> Option<Id<NSPort>>;

    #[cfg(all(feature = "Foundation_NSPort", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "portForName:host:", managed = "Other")]
    pub unsafe fn portForName_host(
        &self,
        name: &NSString,
        host: Option<&NSString>,
    ) -> Option<Id<NSPort>>;

    #[cfg(all(feature = "Foundation_NSPort", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "registerPort:name:")]
    pub unsafe fn registerPort_name(&self, port: &NSPort, name: &NSString) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "removePortForName:")]
    pub unsafe fn removePortForName(&self, name: &NSString) -> bool;
}

#[objc2::interface(
    unsafe super = NSPortNameServer,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[deprecated = "Use NSXPCConnection instead"]
    #[cfg(feature = "Foundation_NSMachBootstrapServer")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSMachBootstrapServer;
}

#[cfg(feature = "Foundation_NSMachBootstrapServer")]
unsafe impl NSObjectProtocol for NSMachBootstrapServer {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSMachBootstrapServer")]
    #[deprecated = "Use NSXPCConnection instead"]
    pub type NSMachBootstrapServer;

    #[objc2::method(sel = "sharedInstance", managed = "Other")]
    pub unsafe fn sharedInstance() -> Id<Object>;

    #[cfg(all(feature = "Foundation_NSPort", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "portForName:", managed = "Other")]
    pub unsafe fn portForName(&self, name: &NSString) -> Option<Id<NSPort>>;

    #[cfg(all(feature = "Foundation_NSPort", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "portForName:host:", managed = "Other")]
    pub unsafe fn portForName_host(
        &self,
        name: &NSString,
        host: Option<&NSString>,
    ) -> Option<Id<NSPort>>;

    #[cfg(all(feature = "Foundation_NSPort", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "registerPort:name:")]
    pub unsafe fn registerPort_name(&self, port: &NSPort, name: &NSString) -> bool;

    #[cfg(all(feature = "Foundation_NSPort", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "servicePortWithName:", managed = "Other")]
    pub unsafe fn servicePortWithName(&self, name: &NSString) -> Option<Id<NSPort>>;
}

#[objc2::interface(
    unsafe super = NSPortNameServer,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[deprecated = "Use NSXPCConnection instead"]
    #[cfg(feature = "Foundation_NSMessagePortNameServer")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSMessagePortNameServer;
}

#[cfg(feature = "Foundation_NSMessagePortNameServer")]
unsafe impl NSObjectProtocol for NSMessagePortNameServer {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSMessagePortNameServer")]
    #[deprecated = "Use NSXPCConnection instead"]
    pub type NSMessagePortNameServer;

    #[objc2::method(sel = "sharedInstance", managed = "Other")]
    pub unsafe fn sharedInstance() -> Id<Object>;

    #[cfg(all(feature = "Foundation_NSPort", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "portForName:", managed = "Other")]
    pub unsafe fn portForName(&self, name: &NSString) -> Option<Id<NSPort>>;

    #[cfg(all(feature = "Foundation_NSPort", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "portForName:host:", managed = "Other")]
    pub unsafe fn portForName_host(
        &self,
        name: &NSString,
        host: Option<&NSString>,
    ) -> Option<Id<NSPort>>;
}

#[objc2::interface(
    unsafe super = NSPortNameServer,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[deprecated = "Use NSXPCConnection instead"]
    #[cfg(feature = "Foundation_NSSocketPortNameServer")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSSocketPortNameServer;
}

#[cfg(feature = "Foundation_NSSocketPortNameServer")]
unsafe impl NSObjectProtocol for NSSocketPortNameServer {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSSocketPortNameServer")]
    #[deprecated = "Use NSXPCConnection instead"]
    pub type NSSocketPortNameServer;

    #[objc2::method(sel = "sharedInstance", managed = "Other")]
    pub unsafe fn sharedInstance() -> Id<Object>;

    #[cfg(all(feature = "Foundation_NSPort", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "portForName:", managed = "Other")]
    pub unsafe fn portForName(&self, name: &NSString) -> Option<Id<NSPort>>;

    #[cfg(all(feature = "Foundation_NSPort", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "portForName:host:", managed = "Other")]
    pub unsafe fn portForName_host(
        &self,
        name: &NSString,
        host: Option<&NSString>,
    ) -> Option<Id<NSPort>>;

    #[cfg(all(feature = "Foundation_NSPort", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "registerPort:name:")]
    pub unsafe fn registerPort_name(&self, port: &NSPort, name: &NSString) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "removePortForName:")]
    pub unsafe fn removePortForName(&self, name: &NSString) -> bool;

    #[cfg(all(feature = "Foundation_NSPort", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "portForName:host:nameServerPortNumber:", managed = "Other")]
    pub unsafe fn portForName_host_nameServerPortNumber(
        &self,
        name: &NSString,
        host: Option<&NSString>,
        port_number: u16,
    ) -> Option<Id<NSPort>>;

    #[cfg(all(feature = "Foundation_NSPort", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "registerPort:name:nameServerPortNumber:")]
    pub unsafe fn registerPort_name_nameServerPortNumber(
        &self,
        port: &NSPort,
        name: &NSString,
        port_number: u16,
    ) -> bool;

    #[objc2::method(sel = "defaultNameServerPortNumber")]
    pub unsafe fn defaultNameServerPortNumber(&self) -> u16;

    #[objc2::method(sel = "setDefaultNameServerPortNumber:")]
    pub unsafe fn setDefaultNameServerPortNumber(&self, default_name_server_port_number: u16);
}
