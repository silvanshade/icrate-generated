//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSHTTPCookieAcceptPolicy {
    NSHTTPCookieAcceptPolicyAlways = 0,
    NSHTTPCookieAcceptPolicyNever = 1,
    NSHTTPCookieAcceptPolicyOnlyFromMainDocumentDomain = 2,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSHTTPCookieStorage")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSHTTPCookieStorage;
}

#[cfg(feature = "Foundation_NSHTTPCookieStorage")]
unsafe impl NSObjectProtocol for NSHTTPCookieStorage {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSHTTPCookieStorage")]
    pub type NSHTTPCookieStorage;

    #[objc2::method(sel = "sharedHTTPCookieStorage", managed = "Other")]
    pub unsafe fn sharedHTTPCookieStorage() -> Id<NSHTTPCookieStorage>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(
        sel = "sharedCookieStorageForGroupContainerIdentifier:",
        managed = "Other"
    )]
    pub unsafe fn sharedCookieStorageForGroupContainerIdentifier(
        identifier: &NSString,
    ) -> Id<NSHTTPCookieStorage>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSHTTPCookie"))]
    #[objc2::method(sel = "cookies", managed = "Other")]
    pub unsafe fn cookies(&self) -> Option<Id<NSArray<NSHTTPCookie>>>;

    #[cfg(feature = "Foundation_NSHTTPCookie")]
    #[objc2::method(sel = "setCookie:")]
    pub unsafe fn setCookie(&self, cookie: &NSHTTPCookie);

    #[cfg(feature = "Foundation_NSHTTPCookie")]
    #[objc2::method(sel = "deleteCookie:")]
    pub unsafe fn deleteCookie(&self, cookie: &NSHTTPCookie);

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "removeCookiesSinceDate:")]
    pub unsafe fn removeCookiesSinceDate(&self, date: &NSDate);

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSHTTPCookie",
        feature = "Foundation_NSURL"
    ))]
    #[objc2::method(sel = "cookiesForURL:", managed = "Other")]
    pub unsafe fn cookiesForURL(&self, url: &NSURL) -> Option<Id<NSArray<NSHTTPCookie>>>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSHTTPCookie",
        feature = "Foundation_NSURL"
    ))]
    #[objc2::method(sel = "setCookies:forURL:mainDocumentURL:")]
    pub unsafe fn setCookies_forURL_mainDocumentURL(
        &self,
        cookies: &NSArray<NSHTTPCookie>,
        url: Option<&NSURL>,
        main_document_url: Option<&NSURL>,
    );

    #[objc2::method(sel = "cookieAcceptPolicy")]
    pub unsafe fn cookieAcceptPolicy(&self) -> NSHTTPCookieAcceptPolicy;

    #[objc2::method(sel = "setCookieAcceptPolicy:")]
    pub unsafe fn setCookieAcceptPolicy(&self, cookie_accept_policy: NSHTTPCookieAcceptPolicy);

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSHTTPCookie",
        feature = "Foundation_NSSortDescriptor"
    ))]
    #[objc2::method(sel = "sortedCookiesUsingDescriptors:", managed = "Other")]
    pub unsafe fn sortedCookiesUsingDescriptors(
        &self,
        sort_order: &NSArray<NSSortDescriptor>,
    ) -> Id<NSArray<NSHTTPCookie>>;
}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "Foundation_NSHTTPCookieStorage")]
    pub type NSHTTPCookieStorage;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSHTTPCookie",
        feature = "Foundation_NSURLSessionTask"
    ))]
    #[objc2::method(sel = "storeCookies:forTask:")]
    pub unsafe fn storeCookies_forTask(
        &self,
        cookies: &NSArray<NSHTTPCookie>,
        task: &NSURLSessionTask,
    );

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSHTTPCookie",
        feature = "Foundation_NSURLSessionTask"
    ))]
    #[objc2::method(sel = "getCookiesForTask:completionHandler:")]
    pub unsafe fn getCookiesForTask_completionHandler(
        &self,
        task: &NSURLSessionTask,
        completion_handler: &Block<(*mut NSArray<NSHTTPCookie>,), ()>,
    );
}

extern_static!(NSHTTPCookieManagerAcceptPolicyChangedNotification: &'static NSNotificationName);

extern_static!(NSHTTPCookieManagerCookiesChangedNotification: &'static NSNotificationName);
