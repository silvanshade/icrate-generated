//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreLocation::*;
use crate::Foundation::*;
use crate::UserNotifications::*;

#[objc2::protocol]
pub unsafe trait UNNotificationContentProviding: NSObjectProtocol {}

#[ns_enum]
#[underlying(NSUInteger)]
pub enum UNNotificationInterruptionLevel {
    UNNotificationInterruptionLevelPassive = 0,
    UNNotificationInterruptionLevelActive = 1,
    UNNotificationInterruptionLevelTimeSensitive = 2,
    UNNotificationInterruptionLevelCritical = 3,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "UserNotifications_UNNotificationContent")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type UNNotificationContent;
}

#[cfg(feature = "UserNotifications_UNNotificationContent")]
unsafe impl NSCoding for UNNotificationContent {}

#[cfg(feature = "UserNotifications_UNNotificationContent")]
unsafe impl NSObjectProtocol for UNNotificationContent {}

#[cfg(feature = "UserNotifications_UNNotificationContent")]
unsafe impl NSSecureCoding for UNNotificationContent {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "UserNotifications_UNNotificationContent")]
    pub type UNNotificationContent;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "UserNotifications_UNNotificationAttachment"
    ))]
    #[objc2::method(sel = "attachments", managed = "Other")]
    pub unsafe fn attachments(&self) -> Id<NSArray<UNNotificationAttachment>>;

    #[cfg(feature = "Foundation_NSNumber")]
    #[objc2::method(sel = "badge", managed = "Other")]
    pub unsafe fn badge(&self) -> Option<Id<NSNumber>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "body", managed = "Other")]
    pub unsafe fn body(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "categoryIdentifier", managed = "Other")]
    pub unsafe fn categoryIdentifier(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "launchImageName", managed = "Other")]
    pub unsafe fn launchImageName(&self) -> Id<NSString>;

    #[cfg(feature = "UserNotifications_UNNotificationSound")]
    #[objc2::method(sel = "sound", managed = "Other")]
    pub unsafe fn sound(&self) -> Option<Id<UNNotificationSound>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "subtitle", managed = "Other")]
    pub unsafe fn subtitle(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "threadIdentifier", managed = "Other")]
    pub unsafe fn threadIdentifier(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "title", managed = "Other")]
    pub unsafe fn title(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSDictionary")]
    #[objc2::method(sel = "userInfo", managed = "Other")]
    pub unsafe fn userInfo(&self) -> Id<NSDictionary>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "summaryArgument is ignored"]
    #[objc2::method(sel = "summaryArgument", managed = "Other")]
    pub unsafe fn summaryArgument(&self) -> Id<NSString>;

    #[deprecated = "summaryArgumentCount is ignored"]
    #[objc2::method(sel = "summaryArgumentCount")]
    pub unsafe fn summaryArgumentCount(&self) -> NSUInteger;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "targetContentIdentifier", managed = "Other")]
    pub unsafe fn targetContentIdentifier(&self) -> Option<Id<NSString>>;

    #[objc2::method(sel = "interruptionLevel")]
    pub unsafe fn interruptionLevel(&self) -> UNNotificationInterruptionLevel;

    #[objc2::method(sel = "relevanceScore")]
    pub unsafe fn relevanceScore(&self) -> c_double;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "filterCriteria", managed = "Other")]
    pub unsafe fn filterCriteria(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(
        sel = "contentByUpdatingWithProvider:error:",
        managed = "Other",
        throws
    )]
    pub unsafe fn contentByUpdatingWithProvider_error(
        &self,
        provider: &ProtocolObject<dyn UNNotificationContentProviding>,
    ) -> Result<Id<UNNotificationContent>, Id<NSError>>;
}

#[objc2::interface(
    unsafe super = UNNotificationContent,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "UserNotifications_UNMutableNotificationContent")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type UNMutableNotificationContent;
}

#[cfg(feature = "UserNotifications_UNMutableNotificationContent")]
unsafe impl NSCoding for UNMutableNotificationContent {}

#[cfg(feature = "UserNotifications_UNMutableNotificationContent")]
unsafe impl NSObjectProtocol for UNMutableNotificationContent {}

#[cfg(feature = "UserNotifications_UNMutableNotificationContent")]
unsafe impl NSSecureCoding for UNMutableNotificationContent {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "UserNotifications_UNMutableNotificationContent")]
    pub type UNMutableNotificationContent;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "UserNotifications_UNNotificationAttachment"
    ))]
    #[objc2::method(sel = "attachments", managed = "Other")]
    pub unsafe fn attachments(&self) -> Id<NSArray<UNNotificationAttachment>>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "UserNotifications_UNNotificationAttachment"
    ))]
    #[objc2::method(sel = "setAttachments:")]
    pub unsafe fn setAttachments(&self, attachments: &NSArray<UNNotificationAttachment>);

    #[cfg(feature = "Foundation_NSNumber")]
    #[objc2::method(sel = "badge", managed = "Other")]
    pub unsafe fn badge(&self) -> Option<Id<NSNumber>>;

    #[cfg(feature = "Foundation_NSNumber")]
    #[objc2::method(sel = "setBadge:")]
    pub unsafe fn setBadge(&self, badge: Option<&NSNumber>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "body", managed = "Other")]
    pub unsafe fn body(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setBody:")]
    pub unsafe fn setBody(&self, body: &NSString);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "categoryIdentifier", managed = "Other")]
    pub unsafe fn categoryIdentifier(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setCategoryIdentifier:")]
    pub unsafe fn setCategoryIdentifier(&self, category_identifier: &NSString);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "launchImageName", managed = "Other")]
    pub unsafe fn launchImageName(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setLaunchImageName:")]
    pub unsafe fn setLaunchImageName(&self, launch_image_name: &NSString);

    #[cfg(feature = "UserNotifications_UNNotificationSound")]
    #[objc2::method(sel = "sound", managed = "Other")]
    pub unsafe fn sound(&self) -> Option<Id<UNNotificationSound>>;

    #[cfg(feature = "UserNotifications_UNNotificationSound")]
    #[objc2::method(sel = "setSound:")]
    pub unsafe fn setSound(&self, sound: Option<&UNNotificationSound>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "subtitle", managed = "Other")]
    pub unsafe fn subtitle(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setSubtitle:")]
    pub unsafe fn setSubtitle(&self, subtitle: &NSString);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "threadIdentifier", managed = "Other")]
    pub unsafe fn threadIdentifier(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setThreadIdentifier:")]
    pub unsafe fn setThreadIdentifier(&self, thread_identifier: &NSString);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "title", managed = "Other")]
    pub unsafe fn title(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setTitle:")]
    pub unsafe fn setTitle(&self, title: &NSString);

    #[cfg(feature = "Foundation_NSDictionary")]
    #[objc2::method(sel = "userInfo", managed = "Other")]
    pub unsafe fn userInfo(&self) -> Id<NSDictionary>;

    #[cfg(feature = "Foundation_NSDictionary")]
    #[objc2::method(sel = "setUserInfo:")]
    pub unsafe fn setUserInfo(&self, user_info: &NSDictionary);

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "summaryArgument is ignored"]
    #[objc2::method(sel = "summaryArgument", managed = "Other")]
    pub unsafe fn summaryArgument(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "summaryArgument is ignored"]
    #[objc2::method(sel = "setSummaryArgument:")]
    pub unsafe fn setSummaryArgument(&self, summary_argument: &NSString);

    #[deprecated = "summaryArgumentCount is ignored"]
    #[objc2::method(sel = "summaryArgumentCount")]
    pub unsafe fn summaryArgumentCount(&self) -> NSUInteger;

    #[deprecated = "summaryArgumentCount is ignored"]
    #[objc2::method(sel = "setSummaryArgumentCount:")]
    pub unsafe fn setSummaryArgumentCount(&self, summary_argument_count: NSUInteger);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "targetContentIdentifier", managed = "Other")]
    pub unsafe fn targetContentIdentifier(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setTargetContentIdentifier:")]
    pub unsafe fn setTargetContentIdentifier(&self, target_content_identifier: Option<&NSString>);

    #[objc2::method(sel = "interruptionLevel")]
    pub unsafe fn interruptionLevel(&self) -> UNNotificationInterruptionLevel;

    #[objc2::method(sel = "setInterruptionLevel:")]
    pub unsafe fn setInterruptionLevel(&self, interruption_level: UNNotificationInterruptionLevel);

    #[objc2::method(sel = "relevanceScore")]
    pub unsafe fn relevanceScore(&self) -> c_double;

    #[objc2::method(sel = "setRelevanceScore:")]
    pub unsafe fn setRelevanceScore(&self, relevance_score: c_double);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "filterCriteria", managed = "Other")]
    pub unsafe fn filterCriteria(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setFilterCriteria:")]
    pub unsafe fn setFilterCriteria(&self, filter_criteria: Option<&NSString>);
}
