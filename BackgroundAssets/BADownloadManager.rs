//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::BackgroundAssets::*;
use crate::Foundation::*;

#[objc2::protocol]
pub unsafe trait BADownloadManagerDelegate: NSObjectProtocol {
    #[cfg(feature = "BackgroundAssets_BADownload")]
    #[objc2::method(optional, sel = "downloadDidBegin:")]
    unsafe fn downloadDidBegin(&self, download: &BADownload);

    #[cfg(feature = "BackgroundAssets_BADownload")]
    #[objc2::method(optional, sel = "downloadDidPause:")]
    unsafe fn downloadDidPause(&self, download: &BADownload);

    #[cfg(feature = "BackgroundAssets_BADownload")]
    #[objc2::method(
        optional,
        sel = "download:didWriteBytes:totalBytesWritten:totalBytesExpectedToWrite:"
    )]
    unsafe fn download_didWriteBytes_totalBytesWritten_totalBytesExpectedToWrite(
        &self,
        download: &BADownload,
        bytes_written: i64,
        total_bytes_written: i64,
        total_expected_bytes: i64,
    );

    #[cfg(all(
        feature = "BackgroundAssets_BADownload",
        feature = "Foundation_NSURLAuthenticationChallenge",
        feature = "Foundation_NSURLCredential"
    ))]
    #[objc2::method(optional, sel = "download:didReceiveChallenge:completionHandler:")]
    unsafe fn download_didReceiveChallenge_completionHandler(
        &self,
        download: &BADownload,
        challenge: &NSURLAuthenticationChallenge,
        completion_handler: &Block<
            (NSURLSessionAuthChallengeDisposition, *mut NSURLCredential),
            (),
        >,
    );

    #[cfg(all(
        feature = "BackgroundAssets_BADownload",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(optional, sel = "download:failedWithError:")]
    unsafe fn download_failedWithError(&self, download: &BADownload, error: &NSError);

    #[cfg(all(feature = "BackgroundAssets_BADownload", feature = "Foundation_NSURL"))]
    #[objc2::method(optional, sel = "download:finishedWithFileURL:")]
    unsafe fn download_finishedWithFileURL(&self, download: &BADownload, file_url: &NSURL);
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "BackgroundAssets_BADownloadManager")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type BADownloadManager;
}

#[cfg(feature = "BackgroundAssets_BADownloadManager")]
unsafe impl NSObjectProtocol for BADownloadManager {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "BackgroundAssets_BADownloadManager")]
    pub type BADownloadManager;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;

    #[objc2::method(sel = "sharedManager", managed = "Other")]
    pub unsafe fn sharedManager() -> Id<BADownloadManager>;

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn BADownloadManagerDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(
        &self,
        delegate: Option<&ProtocolObject<dyn BADownloadManagerDelegate>>,
    );

    #[cfg(all(
        feature = "BackgroundAssets_BADownload",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "fetchCurrentDownloadsWithCompletionHandler:")]
    pub unsafe fn fetchCurrentDownloadsWithCompletionHandler(
        &self,
        completion_handler: &Block<(NonNull<NSArray<BADownload>>, *mut NSError), ()>,
    );

    #[cfg(all(
        feature = "BackgroundAssets_BADownload",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "scheduleDownload:error:", throws)]
    pub unsafe fn scheduleDownload_error(&self, download: &BADownload) -> Result<(), Id<NSError>>;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "performWithExclusiveControl:")]
    pub unsafe fn performWithExclusiveControl(
        &self,
        perform_handler: &Block<(Bool, *mut NSError), ()>,
    );

    #[cfg(all(feature = "Foundation_NSDate", feature = "Foundation_NSError"))]
    #[objc2::method(sel = "performWithExclusiveControlBeforeDate:performHandler:")]
    pub unsafe fn performWithExclusiveControlBeforeDate_performHandler(
        &self,
        date: &NSDate,
        perform_handler: &Block<(Bool, *mut NSError), ()>,
    );

    #[cfg(all(
        feature = "BackgroundAssets_BADownload",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "startForegroundDownload:error:", throws)]
    pub unsafe fn startForegroundDownload_error(
        &self,
        download: &BADownload,
    ) -> Result<(), Id<NSError>>;

    #[cfg(all(
        feature = "BackgroundAssets_BADownload",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "cancelDownload:error:", throws)]
    pub unsafe fn cancelDownload_error(&self, download: &BADownload) -> Result<(), Id<NSError>>;
}
