//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::BackgroundAssets::*;
use crate::Foundation::*;

#[objc2::protocol]
pub unsafe trait BADownloaderExtension: NSObjectProtocol {
    #[cfg(all(
        feature = "BackgroundAssets_BAAppExtensionInfo",
        feature = "BackgroundAssets_BADownload",
        feature = "Foundation_NSSet",
        feature = "Foundation_NSURL"
    ))]
    #[objc2::method(
        optional,
        sel = "downloadsForRequest:manifestURL:extensionInfo:",
        managed = "Other"
    )]
    unsafe fn downloadsForRequest_manifestURL_extensionInfo(
        &self,
        content_request: BAContentRequest,
        manifest_url: &NSURL,
        extension_info: &BAAppExtensionInfo,
    ) -> Id<NSSet<BADownload>>;

    #[cfg(all(
        feature = "BackgroundAssets_BADownload",
        feature = "Foundation_NSURLAuthenticationChallenge",
        feature = "Foundation_NSURLCredential"
    ))]
    #[objc2::method(
        optional,
        sel = "backgroundDownload:didReceiveChallenge:completionHandler:"
    )]
    unsafe fn backgroundDownload_didReceiveChallenge_completionHandler(
        &self,
        download: &BADownload,
        challenge: &NSURLAuthenticationChallenge,
        completion_handler: &Block<
            (NSURLSessionAuthChallengeDisposition, *mut NSURLCredential),
            (),
        >,
    );

    #[cfg(all(
        feature = "BackgroundAssets_BADownload",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(optional, sel = "backgroundDownload:failedWithError:")]
    unsafe fn backgroundDownload_failedWithError(&self, download: &BADownload, error: &NSError);

    #[cfg(all(feature = "BackgroundAssets_BADownload", feature = "Foundation_NSURL"))]
    #[objc2::method(optional, sel = "backgroundDownload:finishedWithFileURL:")]
    unsafe fn backgroundDownload_finishedWithFileURL(
        &self,
        download: &BADownload,
        file_url: &NSURL,
    );

    #[objc2::method(optional, sel = "extensionWillTerminate")]
    unsafe fn extensionWillTerminate(&self);
}
