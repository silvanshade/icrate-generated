//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::ExternalAccessory::*;
use crate::Foundation::*;

#[extern_enum]
#[underlying(c_uint)]
pub enum __anonymous__ {
    EAConnectionIDNone = 0,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "ExternalAccessory_EAAccessory")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type EAAccessory;
}

#[cfg(feature = "ExternalAccessory_EAAccessory")]
unsafe impl NSObjectProtocol for EAAccessory {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "ExternalAccessory_EAAccessory")]
    pub type EAAccessory;

    #[objc2::method(sel = "isConnected")]
    pub unsafe fn isConnected(&self) -> bool;

    #[objc2::method(sel = "connectionID")]
    pub unsafe fn connectionID(&self) -> NSUInteger;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "manufacturer", managed = "Other")]
    pub unsafe fn manufacturer(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "name", managed = "Other")]
    pub unsafe fn name(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "modelNumber", managed = "Other")]
    pub unsafe fn modelNumber(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "serialNumber", managed = "Other")]
    pub unsafe fn serialNumber(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "firmwareRevision", managed = "Other")]
    pub unsafe fn firmwareRevision(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "hardwareRevision", managed = "Other")]
    pub unsafe fn hardwareRevision(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[deprecated = "Not supported"]
    #[objc2::method(sel = "dockType", managed = "Other")]
    pub unsafe fn dockType(&self) -> Id<NSString>;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "protocolStrings", managed = "Other")]
    pub unsafe fn protocolStrings(&self) -> Id<NSArray<NSString>>;

    #[objc2::method(sel = "delegate", managed = "Other")]
    pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn EAAccessoryDelegate>>>;

    #[objc2::method(sel = "setDelegate:")]
    pub unsafe fn setDelegate(&self, delegate: Option<&ProtocolObject<dyn EAAccessoryDelegate>>);
}

#[objc2::protocol]
pub unsafe trait EAAccessoryDelegate: NSObjectProtocol {
    #[cfg(feature = "ExternalAccessory_EAAccessory")]
    #[objc2::method(optional, sel = "accessoryDidDisconnect:")]
    unsafe fn accessoryDidDisconnect(&self, accessory: &EAAccessory);
}
