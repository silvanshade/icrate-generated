//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::BackgroundTasks::*;
use crate::Foundation::*;

extern_static!(BGTaskSchedulerErrorDomain: &'static NSErrorDomain);

#[ns_error_enum]
#[underlying(NSInteger)]
pub enum BGTaskSchedulerErrorCode {
    BGTaskSchedulerErrorCodeUnavailable = 1,
    BGTaskSchedulerErrorCodeTooManyPendingTaskRequests = 2,
    BGTaskSchedulerErrorCodeNotPermitted = 3,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "BackgroundTasks_BGTaskScheduler")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type BGTaskScheduler;
}

#[cfg(feature = "BackgroundTasks_BGTaskScheduler")]
unsafe impl NSObjectProtocol for BGTaskScheduler {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "BackgroundTasks_BGTaskScheduler")]
    pub type BGTaskScheduler;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;

    #[objc2::method(sel = "sharedScheduler", managed = "Other")]
    pub unsafe fn sharedScheduler() -> Id<BGTaskScheduler>;

    #[cfg(all(
        feature = "BackgroundTasks_BGTaskRequest",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "submitTaskRequest:error:", throws)]
    pub unsafe fn submitTaskRequest_error(
        &self,
        task_request: &BGTaskRequest,
    ) -> Result<(), Id<NSError>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "cancelTaskRequestWithIdentifier:")]
    pub unsafe fn cancelTaskRequestWithIdentifier(&self, identifier: &NSString);

    #[objc2::method(sel = "cancelAllTaskRequests")]
    pub unsafe fn cancelAllTaskRequests(&self);

    #[cfg(all(
        feature = "BackgroundTasks_BGTaskRequest",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(sel = "getPendingTaskRequestsWithCompletionHandler:")]
    pub unsafe fn getPendingTaskRequestsWithCompletionHandler(
        &self,
        completion_handler: &Block<(NonNull<NSArray<BGTaskRequest>>,), ()>,
    );
}
