//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "CoreData_NSMigrationManager")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSMigrationManager;
}

#[cfg(feature = "CoreData_NSMigrationManager")]
unsafe impl NSObjectProtocol for NSMigrationManager {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "CoreData_NSMigrationManager")]
    pub type NSMigrationManager;

    #[cfg(feature = "CoreData_NSManagedObjectModel")]
    #[objc2::method(sel = "initWithSourceModel:destinationModel:", managed = "Init")]
    pub unsafe fn initWithSourceModel_destinationModel(
        this: Option<Allocated<Self>>,
        source_model: &NSManagedObjectModel,
        destination_model: &NSManagedObjectModel,
    ) -> Id<Self>;

    #[cfg(all(
        feature = "CoreData_NSMappingModel",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSError",
        feature = "Foundation_NSString",
        feature = "Foundation_NSURL"
    ))]
    #[objc2::method(
        sel = "migrateStoreFromURL:type:options:withMappingModel:toDestinationURL:destinationType:destinationOptions:error:",
        throws
    )]
    pub unsafe fn migrateStoreFromURL_type_options_withMappingModel_toDestinationURL_destinationType_destinationOptions_error(
        &self,
        source_url: &NSURL,
        s_store_type: &NSString,
        s_options: Option<&NSDictionary>,
        mappings: Option<&NSMappingModel>,
        d_url: &NSURL,
        d_store_type: &NSString,
        d_options: Option<&NSDictionary>,
    ) -> Result<(), Id<NSError>>;

    #[objc2::method(sel = "usesStoreSpecificMigrationManager")]
    pub unsafe fn usesStoreSpecificMigrationManager(&self) -> bool;

    #[objc2::method(sel = "setUsesStoreSpecificMigrationManager:")]
    pub unsafe fn setUsesStoreSpecificMigrationManager(
        &self,
        uses_store_specific_migration_manager: bool,
    );

    #[objc2::method(sel = "reset")]
    pub unsafe fn reset(&self);

    #[cfg(feature = "CoreData_NSMappingModel")]
    #[objc2::method(sel = "mappingModel", managed = "Other")]
    pub unsafe fn mappingModel(&self) -> Id<NSMappingModel>;

    #[cfg(feature = "CoreData_NSManagedObjectModel")]
    #[objc2::method(sel = "sourceModel", managed = "Other")]
    pub unsafe fn sourceModel(&self) -> Id<NSManagedObjectModel>;

    #[cfg(feature = "CoreData_NSManagedObjectModel")]
    #[objc2::method(sel = "destinationModel", managed = "Other")]
    pub unsafe fn destinationModel(&self) -> Id<NSManagedObjectModel>;

    #[cfg(feature = "CoreData_NSManagedObjectContext")]
    #[objc2::method(sel = "sourceContext", managed = "Other")]
    pub unsafe fn sourceContext(&self) -> Id<NSManagedObjectContext>;

    #[cfg(feature = "CoreData_NSManagedObjectContext")]
    #[objc2::method(sel = "destinationContext", managed = "Other")]
    pub unsafe fn destinationContext(&self) -> Id<NSManagedObjectContext>;

    #[cfg(all(
        feature = "CoreData_NSEntityDescription",
        feature = "CoreData_NSEntityMapping"
    ))]
    #[objc2::method(sel = "sourceEntityForEntityMapping:", managed = "Other")]
    pub unsafe fn sourceEntityForEntityMapping(
        &self,
        m_entity: &NSEntityMapping,
    ) -> Option<Id<NSEntityDescription>>;

    #[cfg(all(
        feature = "CoreData_NSEntityDescription",
        feature = "CoreData_NSEntityMapping"
    ))]
    #[objc2::method(sel = "destinationEntityForEntityMapping:", managed = "Other")]
    pub unsafe fn destinationEntityForEntityMapping(
        &self,
        m_entity: &NSEntityMapping,
    ) -> Option<Id<NSEntityDescription>>;

    #[cfg(all(
        feature = "CoreData_NSEntityMapping",
        feature = "CoreData_NSManagedObject"
    ))]
    #[objc2::method(sel = "associateSourceInstance:withDestinationInstance:forEntityMapping:")]
    pub unsafe fn associateSourceInstance_withDestinationInstance_forEntityMapping(
        &self,
        source_instance: &NSManagedObject,
        destination_instance: &NSManagedObject,
        entity_mapping: &NSEntityMapping,
    );

    #[cfg(all(
        feature = "CoreData_NSManagedObject",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        sel = "destinationInstancesForEntityMappingNamed:sourceInstances:",
        managed = "Other"
    )]
    pub unsafe fn destinationInstancesForEntityMappingNamed_sourceInstances(
        &self,
        mapping_name: &NSString,
        source_instances: Option<&NSArray<NSManagedObject>>,
    ) -> Id<NSArray<NSManagedObject>>;

    #[cfg(all(
        feature = "CoreData_NSManagedObject",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        sel = "sourceInstancesForEntityMappingNamed:destinationInstances:",
        managed = "Other"
    )]
    pub unsafe fn sourceInstancesForEntityMappingNamed_destinationInstances(
        &self,
        mapping_name: &NSString,
        destination_instances: Option<&NSArray<NSManagedObject>>,
    ) -> Id<NSArray<NSManagedObject>>;

    #[cfg(feature = "CoreData_NSEntityMapping")]
    #[objc2::method(sel = "currentEntityMapping", managed = "Other")]
    pub unsafe fn currentEntityMapping(&self) -> Id<NSEntityMapping>;

    #[objc2::method(sel = "migrationProgress")]
    pub unsafe fn migrationProgress(&self) -> c_float;

    #[cfg(feature = "Foundation_NSDictionary")]
    #[objc2::method(sel = "userInfo", managed = "Other")]
    pub unsafe fn userInfo(&self) -> Option<Id<NSDictionary>>;

    #[cfg(feature = "Foundation_NSDictionary")]
    #[objc2::method(sel = "setUserInfo:")]
    pub unsafe fn setUserInfo(&self, user_info: Option<&NSDictionary>);

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "cancelMigrationWithError:")]
    pub unsafe fn cancelMigrationWithError(&self, error: &NSError);
}
