//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum NSPersistentCloudKitContainerEventType {
    NSPersistentCloudKitContainerEventTypeSetup = 0,
    NSPersistentCloudKitContainerEventTypeImport = 1,
    NSPersistentCloudKitContainerEventTypeExport = 2,
}

extern_static!(NSPersistentCloudKitContainerEventChangedNotification: &'static NSNotificationName);

extern_static!(NSPersistentCloudKitContainerEventUserInfoKey: &'static NSString);

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "CoreData_NSPersistentCloudKitContainerEvent")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSPersistentCloudKitContainerEvent;
}

#[cfg(feature = "CoreData_NSPersistentCloudKitContainerEvent")]
unsafe impl NSObjectProtocol for NSPersistentCloudKitContainerEvent {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "CoreData_NSPersistentCloudKitContainerEvent")]
    pub type NSPersistentCloudKitContainerEvent;

    #[cfg(feature = "Foundation_NSUUID")]
    #[objc2::method(sel = "identifier", managed = "Other")]
    pub unsafe fn identifier(&self) -> Id<NSUUID>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "storeIdentifier", managed = "Other")]
    pub unsafe fn storeIdentifier(&self) -> Id<NSString>;

    #[objc2::method(sel = "type")]
    pub unsafe fn r#type(&self) -> NSPersistentCloudKitContainerEventType;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "startDate", managed = "Other")]
    pub unsafe fn startDate(&self) -> Id<NSDate>;

    #[cfg(feature = "Foundation_NSDate")]
    #[objc2::method(sel = "endDate", managed = "Other")]
    pub unsafe fn endDate(&self) -> Option<Id<NSDate>>;

    #[objc2::method(sel = "succeeded")]
    pub unsafe fn succeeded(&self) -> bool;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "error", managed = "Other")]
    pub unsafe fn error(&self) -> Option<Id<NSError>>;

    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;
}
