//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreData::*;
use crate::Foundation::*;

extern_static!(NSManagedObjectContextWillSaveNotification: &'static NSString);

extern_static!(NSManagedObjectContextDidSaveNotification: &'static NSString);

extern_static!(NSManagedObjectContextObjectsDidChangeNotification: &'static NSString);

extern_static!(NSManagedObjectContextDidSaveObjectIDsNotification: &'static NSString);

extern_static!(NSManagedObjectContextDidMergeChangesObjectIDsNotification: &'static NSString);

extern_static!(NSInsertedObjectsKey: &'static NSString);

extern_static!(NSUpdatedObjectsKey: &'static NSString);

extern_static!(NSDeletedObjectsKey: &'static NSString);

extern_static!(NSRefreshedObjectsKey: &'static NSString);

extern_static!(NSInvalidatedObjectsKey: &'static NSString);

extern_static!(NSManagedObjectContextQueryGenerationKey: &'static NSString);

extern_static!(NSInvalidatedAllObjectsKey: &'static NSString);

extern_static!(NSInsertedObjectIDsKey: &'static NSString);

extern_static!(NSUpdatedObjectIDsKey: &'static NSString);

extern_static!(NSDeletedObjectIDsKey: &'static NSString);

extern_static!(NSRefreshedObjectIDsKey: &'static NSString);

extern_static!(NSInvalidatedObjectIDsKey: &'static NSString);

#[ns_enum]
#[underlying(NSUInteger)]
pub enum NSManagedObjectContextConcurrencyType {
    #[deprecated = "Use another NSManagedObjectContextConcurrencyType"]
    NSConfinementConcurrencyType = 0x00,
    NSPrivateQueueConcurrencyType = 0x01,
    NSMainQueueConcurrencyType = 0x02,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "CoreData_NSManagedObjectContext")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSManagedObjectContext;
}

#[cfg(feature = "CoreData_NSManagedObjectContext")]
unsafe impl NSCoding for NSManagedObjectContext {}

#[cfg(feature = "CoreData_NSManagedObjectContext")]
unsafe impl NSLocking for NSManagedObjectContext {}

#[cfg(feature = "CoreData_NSManagedObjectContext")]
unsafe impl NSObjectProtocol for NSManagedObjectContext {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "CoreData_NSManagedObjectContext")]
    pub type NSManagedObjectContext;

    #[deprecated = "Use -initWithConcurrencyType: instead"]
    #[objc2::method(sel = "new", managed = "New")]
    pub unsafe fn new() -> Id<Self>;

    #[deprecated = "Use -initWithConcurrencyType: instead"]
    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[objc2::method(sel = "initWithConcurrencyType:", managed = "Init")]
    pub unsafe fn initWithConcurrencyType(
        this: Option<Allocated<Self>>,
        ct: NSManagedObjectContextConcurrencyType,
    ) -> Id<Self>;

    #[objc2::method(sel = "performBlock:")]
    pub unsafe fn performBlock(&self, block: &Block<(), ()>);

    #[objc2::method(sel = "performBlockAndWait:")]
    pub unsafe fn performBlockAndWait(&self, block: &Block<(), ()>);

    #[cfg(feature = "CoreData_NSPersistentStoreCoordinator")]
    #[objc2::method(sel = "persistentStoreCoordinator", managed = "Other")]
    pub unsafe fn persistentStoreCoordinator(&self) -> Option<Id<NSPersistentStoreCoordinator>>;

    #[cfg(feature = "CoreData_NSPersistentStoreCoordinator")]
    #[objc2::method(sel = "setPersistentStoreCoordinator:")]
    pub unsafe fn setPersistentStoreCoordinator(
        &self,
        persistent_store_coordinator: Option<&NSPersistentStoreCoordinator>,
    );

    #[objc2::method(sel = "parentContext", managed = "Other")]
    pub unsafe fn parentContext(&self) -> Option<Id<NSManagedObjectContext>>;

    #[objc2::method(sel = "setParentContext:")]
    pub unsafe fn setParentContext(&self, parent_context: Option<&NSManagedObjectContext>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "name", managed = "Other")]
    pub unsafe fn name(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setName:")]
    pub unsafe fn setName(&self, name: Option<&NSString>);

    #[cfg(feature = "Foundation_NSUndoManager")]
    #[objc2::method(sel = "undoManager", managed = "Other")]
    pub unsafe fn undoManager(&self) -> Option<Id<NSUndoManager>>;

    #[cfg(feature = "Foundation_NSUndoManager")]
    #[objc2::method(sel = "setUndoManager:")]
    pub unsafe fn setUndoManager(&self, undo_manager: Option<&NSUndoManager>);

    #[objc2::method(sel = "hasChanges")]
    pub unsafe fn hasChanges(&self) -> bool;

    #[cfg(feature = "Foundation_NSMutableDictionary")]
    #[objc2::method(sel = "userInfo", managed = "Other")]
    pub unsafe fn userInfo(&self) -> Id<NSMutableDictionary, Owned>;

    #[objc2::method(sel = "concurrencyType")]
    pub unsafe fn concurrencyType(&self) -> NSManagedObjectContextConcurrencyType;

    #[cfg(all(
        feature = "CoreData_NSManagedObject",
        feature = "CoreData_NSManagedObjectID"
    ))]
    #[objc2::method(sel = "objectRegisteredForID:", managed = "Other")]
    pub unsafe fn objectRegisteredForID(
        &self,
        object_id: &NSManagedObjectID,
    ) -> Option<Id<NSManagedObject>>;

    #[cfg(all(
        feature = "CoreData_NSManagedObject",
        feature = "CoreData_NSManagedObjectID"
    ))]
    #[objc2::method(sel = "objectWithID:", managed = "Other")]
    pub unsafe fn objectWithID(&self, object_id: &NSManagedObjectID) -> Id<NSManagedObject>;

    #[cfg(all(
        feature = "CoreData_NSManagedObject",
        feature = "CoreData_NSManagedObjectID",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "existingObjectWithID:error:", managed = "Other", throws)]
    pub unsafe fn existingObjectWithID_error(
        &self,
        object_id: &NSManagedObjectID,
    ) -> Result<Id<NSManagedObject>, Id<NSError>>;

    #[cfg(all(
        feature = "CoreData_NSFetchRequest",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "executeFetchRequest:error:", managed = "Other", throws)]
    pub unsafe fn executeFetchRequest_error(
        &self,
        request: &NSFetchRequest,
    ) -> Result<Id<NSArray>, Id<NSError>>;

    #[cfg(all(
        feature = "CoreData_NSPersistentStoreRequest",
        feature = "CoreData_NSPersistentStoreResult",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "executeRequest:error:", managed = "Other", throws)]
    pub unsafe fn executeRequest_error(
        &self,
        request: &NSPersistentStoreRequest,
    ) -> Result<Id<NSPersistentStoreResult>, Id<NSError>>;

    #[cfg(feature = "CoreData_NSManagedObject")]
    #[objc2::method(sel = "insertObject:")]
    pub unsafe fn insertObject(&self, object: &NSManagedObject);

    #[cfg(feature = "CoreData_NSManagedObject")]
    #[objc2::method(sel = "deleteObject:")]
    pub unsafe fn deleteObject(&self, object: &NSManagedObject);

    #[cfg(feature = "CoreData_NSManagedObject")]
    #[objc2::method(sel = "refreshObject:mergeChanges:")]
    pub unsafe fn refreshObject_mergeChanges(&self, object: &NSManagedObject, flag: bool);

    #[cfg(feature = "CoreData_NSManagedObject")]
    #[objc2::method(sel = "detectConflictsForObject:")]
    pub unsafe fn detectConflictsForObject(&self, object: &NSManagedObject);

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "observeValueForKeyPath:ofObject:change:context:")]
    pub unsafe fn observeValueForKeyPath_ofObject_change_context(
        &self,
        key_path: Option<&NSString>,
        object: Option<&Object>,
        change: Option<&NSDictionary<NSString, Object>>,
        context: *mut c_void,
    );

    #[objc2::method(sel = "processPendingChanges")]
    pub unsafe fn processPendingChanges(&self);

    #[cfg(feature = "CoreData_NSPersistentStore")]
    #[objc2::method(sel = "assignObject:toPersistentStore:")]
    pub unsafe fn assignObject_toPersistentStore(&self, object: &Object, store: &NSPersistentStore);

    #[cfg(all(feature = "CoreData_NSManagedObject", feature = "Foundation_NSSet"))]
    #[objc2::method(sel = "insertedObjects", managed = "Other")]
    pub unsafe fn insertedObjects(&self) -> Id<NSSet<NSManagedObject>>;

    #[cfg(all(feature = "CoreData_NSManagedObject", feature = "Foundation_NSSet"))]
    #[objc2::method(sel = "updatedObjects", managed = "Other")]
    pub unsafe fn updatedObjects(&self) -> Id<NSSet<NSManagedObject>>;

    #[cfg(all(feature = "CoreData_NSManagedObject", feature = "Foundation_NSSet"))]
    #[objc2::method(sel = "deletedObjects", managed = "Other")]
    pub unsafe fn deletedObjects(&self) -> Id<NSSet<NSManagedObject>>;

    #[cfg(all(feature = "CoreData_NSManagedObject", feature = "Foundation_NSSet"))]
    #[objc2::method(sel = "registeredObjects", managed = "Other")]
    pub unsafe fn registeredObjects(&self) -> Id<NSSet<NSManagedObject>>;

    #[objc2::method(sel = "undo")]
    pub unsafe fn undo(&self);

    #[objc2::method(sel = "redo")]
    pub unsafe fn redo(&self);

    #[objc2::method(sel = "reset")]
    pub unsafe fn reset(&self);

    #[objc2::method(sel = "rollback")]
    pub unsafe fn rollback(&self);

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "save:", throws)]
    pub unsafe fn save(&self) -> Result<(), Id<NSError>>;

    #[objc2::method(sel = "refreshAllObjects")]
    pub unsafe fn refreshAllObjects(&self);

    #[deprecated = "Use a queue style context and -performBlockAndWait: instead"]
    #[objc2::method(sel = "lock")]
    pub unsafe fn lock(&self);

    #[deprecated = "Use a queue style context and -performBlockAndWait: instead"]
    #[objc2::method(sel = "unlock")]
    pub unsafe fn unlock(&self);

    #[deprecated = "Use a queue style context and -performBlock: instead"]
    #[objc2::method(sel = "tryLock")]
    pub unsafe fn tryLock(&self) -> bool;

    #[objc2::method(sel = "propagatesDeletesAtEndOfEvent")]
    pub unsafe fn propagatesDeletesAtEndOfEvent(&self) -> bool;

    #[objc2::method(sel = "setPropagatesDeletesAtEndOfEvent:")]
    pub unsafe fn setPropagatesDeletesAtEndOfEvent(&self, propagates_deletes_at_end_of_event: bool);

    #[objc2::method(sel = "retainsRegisteredObjects")]
    pub unsafe fn retainsRegisteredObjects(&self) -> bool;

    #[objc2::method(sel = "setRetainsRegisteredObjects:")]
    pub unsafe fn setRetainsRegisteredObjects(&self, retains_registered_objects: bool);

    #[objc2::method(sel = "shouldDeleteInaccessibleFaults")]
    pub unsafe fn shouldDeleteInaccessibleFaults(&self) -> bool;

    #[objc2::method(sel = "setShouldDeleteInaccessibleFaults:")]
    pub unsafe fn setShouldDeleteInaccessibleFaults(&self, should_delete_inaccessible_faults: bool);

    #[cfg(all(
        feature = "CoreData_NSManagedObject",
        feature = "CoreData_NSManagedObjectID",
        feature = "CoreData_NSPropertyDescription"
    ))]
    #[objc2::method(sel = "shouldHandleInaccessibleFault:forObjectID:triggeredByProperty:")]
    pub unsafe fn shouldHandleInaccessibleFault_forObjectID_triggeredByProperty(
        &self,
        fault: &NSManagedObject,
        oid: &NSManagedObjectID,
        property: Option<&NSPropertyDescription>,
    ) -> bool;

    #[objc2::method(sel = "stalenessInterval")]
    pub unsafe fn stalenessInterval(&self) -> NSTimeInterval;

    #[objc2::method(sel = "setStalenessInterval:")]
    pub unsafe fn setStalenessInterval(&self, staleness_interval: NSTimeInterval);

    #[objc2::method(sel = "mergePolicy", managed = "Other")]
    pub unsafe fn mergePolicy(&self) -> Id<Object>;

    #[objc2::method(sel = "setMergePolicy:")]
    pub unsafe fn setMergePolicy(&self, merge_policy: &Object);

    #[cfg(all(
        feature = "CoreData_NSManagedObject",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "obtainPermanentIDsForObjects:error:", throws)]
    pub unsafe fn obtainPermanentIDsForObjects_error(
        &self,
        objects: &NSArray<NSManagedObject>,
    ) -> Result<(), Id<NSError>>;

    #[cfg(feature = "Foundation_NSNotification")]
    #[objc2::method(sel = "mergeChangesFromContextDidSaveNotification:")]
    pub unsafe fn mergeChangesFromContextDidSaveNotification(&self, notification: &NSNotification);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSDictionary"))]
    #[objc2::method(sel = "mergeChangesFromRemoteContextSave:intoContexts:")]
    pub unsafe fn mergeChangesFromRemoteContextSave_intoContexts(
        change_notification_data: &NSDictionary,
        contexts: &NSArray<NSManagedObjectContext>,
    );

    #[cfg(feature = "CoreData_NSQueryGenerationToken")]
    #[objc2::method(sel = "queryGenerationToken", managed = "Other")]
    pub unsafe fn queryGenerationToken(&self) -> Option<Id<NSQueryGenerationToken>>;

    #[cfg(all(
        feature = "CoreData_NSQueryGenerationToken",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "setQueryGenerationFromToken:error:", throws)]
    pub unsafe fn setQueryGenerationFromToken_error(
        &self,
        generation: Option<&NSQueryGenerationToken>,
    ) -> Result<(), Id<NSError>>;

    #[objc2::method(sel = "automaticallyMergesChangesFromParent")]
    pub unsafe fn automaticallyMergesChangesFromParent(&self) -> bool;

    #[objc2::method(sel = "setAutomaticallyMergesChangesFromParent:")]
    pub unsafe fn setAutomaticallyMergesChangesFromParent(
        &self,
        automatically_merges_changes_from_parent: bool,
    );

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "transactionAuthor", managed = "Other")]
    pub unsafe fn transactionAuthor(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setTransactionAuthor:")]
    pub unsafe fn setTransactionAuthor(&self, transaction_author: Option<&NSString>);
}
