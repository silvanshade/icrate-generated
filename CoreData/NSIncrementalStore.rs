//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSPersistentStore,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "CoreData_NSIncrementalStore")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSIncrementalStore;
}

#[cfg(feature = "CoreData_NSIncrementalStore")]
unsafe impl NSObjectProtocol for NSIncrementalStore {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "CoreData_NSIncrementalStore")]
    pub type NSIncrementalStore;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "loadMetadata:", throws)]
    pub unsafe fn loadMetadata(&self) -> Result<(), Id<NSError>>;

    #[cfg(all(
        feature = "CoreData_NSManagedObjectContext",
        feature = "CoreData_NSPersistentStoreRequest",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "executeRequest:withContext:error:", managed = "Other", throws)]
    pub unsafe fn executeRequest_withContext_error(
        &self,
        request: &NSPersistentStoreRequest,
        context: Option<&NSManagedObjectContext>,
    ) -> Result<Id<Object>, Id<NSError>>;

    #[cfg(all(
        feature = "CoreData_NSIncrementalStoreNode",
        feature = "CoreData_NSManagedObjectContext",
        feature = "CoreData_NSManagedObjectID",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(
        sel = "newValuesForObjectWithID:withContext:error:",
        managed = "New",
        throws
    )]
    pub unsafe fn newValuesForObjectWithID_withContext_error(
        &self,
        object_id: &NSManagedObjectID,
        context: &NSManagedObjectContext,
    ) -> Result<Id<NSIncrementalStoreNode>, Id<NSError>>;

    #[cfg(all(
        feature = "CoreData_NSManagedObjectContext",
        feature = "CoreData_NSManagedObjectID",
        feature = "CoreData_NSRelationshipDescription",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(
        sel = "newValueForRelationship:forObjectWithID:withContext:error:",
        managed = "New",
        throws
    )]
    pub unsafe fn newValueForRelationship_forObjectWithID_withContext_error(
        &self,
        relationship: &NSRelationshipDescription,
        object_id: &NSManagedObjectID,
        context: Option<&NSManagedObjectContext>,
    ) -> Result<Id<Object>, Id<NSError>>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "identifierForNewStoreAtURL:", managed = "Other")]
    pub unsafe fn identifierForNewStoreAtURL(store_url: &NSURL) -> Id<Object>;

    #[cfg(all(
        feature = "CoreData_NSManagedObject",
        feature = "CoreData_NSManagedObjectID",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSError"
    ))]
    #[objc2::method(sel = "obtainPermanentIDsForObjects:error:", managed = "Other", throws)]
    pub unsafe fn obtainPermanentIDsForObjects_error(
        &self,
        array: &NSArray<NSManagedObject>,
    ) -> Result<Id<NSArray<NSManagedObjectID>>, Id<NSError>>;

    #[cfg(all(feature = "CoreData_NSManagedObjectID", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "managedObjectContextDidRegisterObjectsWithIDs:")]
    pub unsafe fn managedObjectContextDidRegisterObjectsWithIDs(
        &self,
        object_i_ds: &NSArray<NSManagedObjectID>,
    );

    #[cfg(all(feature = "CoreData_NSManagedObjectID", feature = "Foundation_NSArray"))]
    #[objc2::method(sel = "managedObjectContextDidUnregisterObjectsWithIDs:")]
    pub unsafe fn managedObjectContextDidUnregisterObjectsWithIDs(
        &self,
        object_i_ds: &NSArray<NSManagedObjectID>,
    );

    #[cfg(all(
        feature = "CoreData_NSEntityDescription",
        feature = "CoreData_NSManagedObjectID"
    ))]
    #[objc2::method(sel = "newObjectIDForEntity:referenceObject:", managed = "New")]
    pub unsafe fn newObjectIDForEntity_referenceObject(
        &self,
        entity: &NSEntityDescription,
        data: &Object,
    ) -> Id<NSManagedObjectID>;

    #[cfg(feature = "CoreData_NSManagedObjectID")]
    #[objc2::method(sel = "referenceObjectForObjectID:", managed = "Other")]
    pub unsafe fn referenceObjectForObjectID(&self, object_id: &NSManagedObjectID) -> Id<Object>;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSPersistentStore`
    #[cfg(feature = "CoreData_NSIncrementalStore")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "CoreData_NSIncrementalStore")]
    pub type NSIncrementalStore;

    #[cfg(all(
        feature = "CoreData_NSPersistentStoreCoordinator",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSString",
        feature = "Foundation_NSURL"
    ))]
    #[objc2::method(
        sel = "initWithPersistentStoreCoordinator:configurationName:URL:options:",
        managed = "Init"
    )]
    pub unsafe fn initWithPersistentStoreCoordinator_configurationName_URL_options(
        this: Option<Allocated<Self>>,
        root: Option<&NSPersistentStoreCoordinator>,
        name: Option<&NSString>,
        url: &NSURL,
        options: Option<&NSDictionary>,
    ) -> Id<Self>;
}
