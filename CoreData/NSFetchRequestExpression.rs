//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreData::*;
use crate::Foundation::*;

extern_static!(NSFetchRequestExpressionType: NSExpressionType = 50);

#[objc2::interface(
    unsafe super = NSExpression,
    unsafe inherits = [
        NSObject,
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "CoreData_NSFetchRequestExpression")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSFetchRequestExpression;
}

#[cfg(feature = "CoreData_NSFetchRequestExpression")]
unsafe impl NSCoding for NSFetchRequestExpression {}

#[cfg(feature = "CoreData_NSFetchRequestExpression")]
unsafe impl NSObjectProtocol for NSFetchRequestExpression {}

#[cfg(feature = "CoreData_NSFetchRequestExpression")]
unsafe impl NSSecureCoding for NSFetchRequestExpression {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "CoreData_NSFetchRequestExpression")]
    pub type NSFetchRequestExpression;

    #[objc2::method(sel = "expressionForFetch:context:countOnly:", managed = "Other")]
    pub unsafe fn expressionForFetch_context_countOnly(
        fetch: &NSExpression,
        context: &NSExpression,
        count_flag: bool,
    ) -> Id<NSExpression>;

    #[objc2::method(sel = "requestExpression", managed = "Other")]
    pub unsafe fn requestExpression(&self) -> Id<NSExpression>;

    #[objc2::method(sel = "contextExpression", managed = "Other")]
    pub unsafe fn contextExpression(&self) -> Id<NSExpression>;

    #[objc2::method(sel = "isCountOnlyRequest")]
    pub unsafe fn isCountOnlyRequest(&self) -> bool;
}

#[objc2::interface(
    unsafe continue,
    impl_attrs = {
        /// Methods declared on superclass `NSExpression`
    #[cfg(feature = "CoreData_NSFetchRequestExpression")]
    }
)]
extern "Objective-C" {
    #[cfg(feature = "CoreData_NSFetchRequestExpression")]
    pub type NSFetchRequestExpression;

    #[objc2::method(sel = "initWithExpressionType:", managed = "Init")]
    pub unsafe fn initWithExpressionType(
        this: Option<Allocated<Self>>,
        r#type: NSExpressionType,
    ) -> Id<Self>;
}
