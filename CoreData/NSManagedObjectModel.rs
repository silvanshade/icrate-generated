//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "CoreData_NSManagedObjectModel")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type NSManagedObjectModel;
}

#[cfg(feature = "CoreData_NSManagedObjectModel")]
unsafe impl NSCoding for NSManagedObjectModel {}

#[cfg(feature = "CoreData_NSManagedObjectModel")]
unsafe impl NSFastEnumeration for NSManagedObjectModel {}

#[cfg(feature = "CoreData_NSManagedObjectModel")]
unsafe impl NSObjectProtocol for NSManagedObjectModel {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "CoreData_NSManagedObjectModel")]
    pub type NSManagedObjectModel;

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSBundle"))]
    #[objc2::method(sel = "mergedModelFromBundles:", managed = "Other")]
    pub unsafe fn mergedModelFromBundles(
        bundles: Option<&NSArray<NSBundle>>,
    ) -> Option<Id<NSManagedObjectModel>>;

    #[cfg(feature = "Foundation_NSArray")]
    #[objc2::method(sel = "modelByMergingModels:", managed = "Other")]
    pub unsafe fn modelByMergingModels(
        models: Option<&NSArray<NSManagedObjectModel>>,
    ) -> Option<Id<NSManagedObjectModel>>;

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(feature = "Foundation_NSURL")]
    #[objc2::method(sel = "initWithContentsOfURL:", managed = "Init")]
    pub unsafe fn initWithContentsOfURL(
        this: Option<Allocated<Self>>,
        url: &NSURL,
    ) -> Option<Id<Self>>;

    #[cfg(all(
        feature = "CoreData_NSEntityDescription",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "entitiesByName", managed = "Other")]
    pub unsafe fn entitiesByName(&self) -> Id<NSDictionary<NSString, NSEntityDescription>>;

    #[cfg(all(
        feature = "CoreData_NSEntityDescription",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(sel = "entities", managed = "Other")]
    pub unsafe fn entities(&self) -> Id<NSArray<NSEntityDescription>>;

    #[cfg(all(
        feature = "CoreData_NSEntityDescription",
        feature = "Foundation_NSArray"
    ))]
    #[objc2::method(sel = "setEntities:")]
    pub unsafe fn setEntities(&self, entities: &NSArray<NSEntityDescription>);

    #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "configurations", managed = "Other")]
    pub unsafe fn configurations(&self) -> Id<NSArray<NSString>>;

    #[cfg(all(
        feature = "CoreData_NSEntityDescription",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "entitiesForConfiguration:", managed = "Other")]
    pub unsafe fn entitiesForConfiguration(
        &self,
        configuration: Option<&NSString>,
    ) -> Option<Id<NSArray<NSEntityDescription>>>;

    #[cfg(all(
        feature = "CoreData_NSEntityDescription",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "setEntities:forConfiguration:")]
    pub unsafe fn setEntities_forConfiguration(
        &self,
        entities: &NSArray<NSEntityDescription>,
        configuration: &NSString,
    );

    #[cfg(all(feature = "CoreData_NSFetchRequest", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setFetchRequestTemplate:forName:")]
    pub unsafe fn setFetchRequestTemplate_forName(
        &self,
        fetch_request_template: Option<&NSFetchRequest>,
        name: &NSString,
    );

    #[cfg(all(feature = "CoreData_NSFetchRequest", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "fetchRequestTemplateForName:", managed = "Other")]
    pub unsafe fn fetchRequestTemplateForName(&self, name: &NSString)
        -> Option<Id<NSFetchRequest>>;

    #[cfg(all(
        feature = "CoreData_NSFetchRequest",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(
        sel = "fetchRequestFromTemplateWithName:substitutionVariables:",
        managed = "Other"
    )]
    pub unsafe fn fetchRequestFromTemplateWithName_substitutionVariables(
        &self,
        name: &NSString,
        variables: &NSDictionary<NSString, Object>,
    ) -> Option<Id<NSFetchRequest>>;

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "localizationDictionary", managed = "Other")]
    pub unsafe fn localizationDictionary(&self) -> Option<Id<NSDictionary<NSString, NSString>>>;

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "setLocalizationDictionary:")]
    pub unsafe fn setLocalizationDictionary(
        &self,
        localization_dictionary: Option<&NSDictionary<NSString, NSString>>,
    );

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSBundle",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "mergedModelFromBundles:forStoreMetadata:", managed = "Other")]
    pub unsafe fn mergedModelFromBundles_forStoreMetadata(
        bundles: Option<&NSArray<NSBundle>>,
        metadata: &NSDictionary<NSString, Object>,
    ) -> Option<Id<NSManagedObjectModel>>;

    #[cfg(all(
        feature = "Foundation_NSArray",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "modelByMergingModels:forStoreMetadata:", managed = "Other")]
    pub unsafe fn modelByMergingModels_forStoreMetadata(
        models: &NSArray<NSManagedObjectModel>,
        metadata: &NSDictionary<NSString, Object>,
    ) -> Option<Id<NSManagedObjectModel>>;

    #[cfg(all(
        feature = "CoreData_NSFetchRequest",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "fetchRequestTemplatesByName", managed = "Other")]
    pub unsafe fn fetchRequestTemplatesByName(&self) -> Id<NSDictionary<NSString, NSFetchRequest>>;

    #[cfg(feature = "Foundation_NSSet")]
    #[objc2::method(sel = "versionIdentifiers", managed = "Other")]
    pub unsafe fn versionIdentifiers(&self) -> Id<NSSet>;

    #[cfg(feature = "Foundation_NSSet")]
    #[objc2::method(sel = "setVersionIdentifiers:")]
    pub unsafe fn setVersionIdentifiers(&self, version_identifiers: &NSSet);

    #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "isConfiguration:compatibleWithStoreMetadata:")]
    pub unsafe fn isConfiguration_compatibleWithStoreMetadata(
        &self,
        configuration: Option<&NSString>,
        metadata: &NSDictionary<NSString, Object>,
    ) -> bool;

    #[cfg(all(
        feature = "Foundation_NSData",
        feature = "Foundation_NSDictionary",
        feature = "Foundation_NSString"
    ))]
    #[objc2::method(sel = "entityVersionHashesByName", managed = "Other")]
    pub unsafe fn entityVersionHashesByName(&self) -> Id<NSDictionary<NSString, NSData>>;
}
