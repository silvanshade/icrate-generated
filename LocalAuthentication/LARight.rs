//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;
use crate::LocalAuthentication::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum LARightState {
    LARightStateUnknown = 0,
    LARightStateAuthorizing = 1,
    LARightStateAuthorized = 2,
    LARightStateNotAuthorized = 3,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "LocalAuthentication_LARight")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type LARight;
}

#[cfg(feature = "LocalAuthentication_LARight")]
unsafe impl NSObjectProtocol for LARight {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "LocalAuthentication_LARight")]
    pub type LARight;

    #[objc2::method(sel = "state")]
    pub unsafe fn state(&self) -> LARightState;

    #[objc2::method(sel = "tag")]
    pub unsafe fn tag(&self) -> NSInteger;

    #[objc2::method(sel = "setTag:")]
    pub unsafe fn setTag(&self, tag: NSInteger);

    #[objc2::method(sel = "init", managed = "Init")]
    pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

    #[cfg(feature = "LocalAuthentication_LAAuthenticationRequirement")]
    #[objc2::method(sel = "initWithRequirement:", managed = "Init")]
    pub unsafe fn initWithRequirement(
        this: Option<Allocated<Self>>,
        requirement: &LAAuthenticationRequirement,
    ) -> Id<Self>;

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "authorizeWithLocalizedReason:completion:")]
    pub unsafe fn authorizeWithLocalizedReason_completion(
        &self,
        localized_reason: &NSString,
        handler: &Block<(*mut NSError,), ()>,
    );

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "checkCanAuthorizeWithCompletion:")]
    pub unsafe fn checkCanAuthorizeWithCompletion(&self, handler: &Block<(*mut NSError,), ()>);

    #[objc2::method(sel = "deauthorizeWithCompletion:")]
    pub unsafe fn deauthorizeWithCompletion(&self, handler: &Block<(), ()>);
}
