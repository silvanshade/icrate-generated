//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;
use crate::LocalAuthentication::*;

#[ns_enum]
#[underlying(NSInteger)]
pub enum LAPolicy {
    LAPolicyDeviceOwnerAuthenticationWithBiometrics = 1,
    LAPolicyDeviceOwnerAuthentication = 2,
    LAPolicyDeviceOwnerAuthenticationWithWatch = 3,
    LAPolicyDeviceOwnerAuthenticationWithBiometricsOrWatch = 4,
    LAPolicyDeviceOwnerAuthenticationWithWristDetection = 5,
}

extern_static!(LATouchIDAuthenticationMaximumAllowableReuseDuration: NSTimeInterval);

#[ns_enum]
#[underlying(NSInteger)]
pub enum LAAccessControlOperation {
    LAAccessControlOperationCreateItem = 0,
    LAAccessControlOperationUseItem = 1,
    LAAccessControlOperationCreateKey = 2,
    LAAccessControlOperationUseKeySign = 3,
    LAAccessControlOperationUseKeyDecrypt = 4,
    LAAccessControlOperationUseKeyKeyExchange = 5,
}

#[ns_enum]
#[underlying(NSInteger)]
pub enum LABiometryType {
    LABiometryTypeNone = 0,
    #[deprecated]
    LABiometryNone = LABiometryTypeNone,
    LABiometryTypeTouchID = 1,
    LABiometryTypeFaceID = 2,
}

#[objc2::interface(
    unsafe super = NSObject,
    unsafe inherits = [
    ]
)]
extern "Objective-C" {
    #[cfg(feature = "LocalAuthentication_LAContext")]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub type LAContext;
}

#[cfg(feature = "LocalAuthentication_LAContext")]
unsafe impl NSObjectProtocol for LAContext {}

#[objc2::interface(
    unsafe continue,
)]
extern "Objective-C" {
    #[cfg(feature = "LocalAuthentication_LAContext")]
    pub type LAContext;

    #[cfg(feature = "Foundation_NSError")]
    #[objc2::method(sel = "canEvaluatePolicy:error:", throws)]
    pub unsafe fn canEvaluatePolicy_error(&self, policy: LAPolicy) -> Result<(), Id<NSError>>;

    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSString"))]
    #[objc2::method(sel = "evaluatePolicy:localizedReason:reply:")]
    pub unsafe fn evaluatePolicy_localizedReason_reply(
        &self,
        policy: LAPolicy,
        localized_reason: &NSString,
        reply: &Block<(Bool, *mut NSError), ()>,
    );

    #[objc2::method(sel = "invalidate")]
    pub unsafe fn invalidate(&self);

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "setCredential:type:")]
    pub unsafe fn setCredential_type(
        &self,
        credential: Option<&NSData>,
        r#type: LACredentialType,
    ) -> bool;

    #[objc2::method(sel = "isCredentialSet:")]
    pub unsafe fn isCredentialSet(&self, r#type: LACredentialType) -> bool;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "localizedFallbackTitle", managed = "Other")]
    pub unsafe fn localizedFallbackTitle(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setLocalizedFallbackTitle:")]
    pub unsafe fn setLocalizedFallbackTitle(&self, localized_fallback_title: Option<&NSString>);

    #[cfg(feature = "Foundation_NSNumber")]
    #[deprecated = "No longer supported"]
    #[objc2::method(sel = "maxBiometryFailures", managed = "Other")]
    pub unsafe fn maxBiometryFailures(&self) -> Option<Id<NSNumber>>;

    #[cfg(feature = "Foundation_NSNumber")]
    #[deprecated = "No longer supported"]
    #[objc2::method(sel = "setMaxBiometryFailures:")]
    pub unsafe fn setMaxBiometryFailures(&self, max_biometry_failures: Option<&NSNumber>);

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "localizedCancelTitle", managed = "Other")]
    pub unsafe fn localizedCancelTitle(&self) -> Option<Id<NSString>>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setLocalizedCancelTitle:")]
    pub unsafe fn setLocalizedCancelTitle(&self, localized_cancel_title: Option<&NSString>);

    #[cfg(feature = "Foundation_NSData")]
    #[objc2::method(sel = "evaluatedPolicyDomainState", managed = "Other")]
    pub unsafe fn evaluatedPolicyDomainState(&self) -> Option<Id<NSData>>;

    #[objc2::method(sel = "touchIDAuthenticationAllowableReuseDuration")]
    pub unsafe fn touchIDAuthenticationAllowableReuseDuration(&self) -> NSTimeInterval;

    #[objc2::method(sel = "setTouchIDAuthenticationAllowableReuseDuration:")]
    pub unsafe fn setTouchIDAuthenticationAllowableReuseDuration(
        &self,
        touch_id_authentication_allowable_reuse_duration: NSTimeInterval,
    );

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "localizedReason", managed = "Other")]
    pub unsafe fn localizedReason(&self) -> Id<NSString>;

    #[cfg(feature = "Foundation_NSString")]
    #[objc2::method(sel = "setLocalizedReason:")]
    pub unsafe fn setLocalizedReason(&self, localized_reason: &NSString);

    #[objc2::method(sel = "interactionNotAllowed")]
    pub unsafe fn interactionNotAllowed(&self) -> bool;

    #[objc2::method(sel = "setInteractionNotAllowed:")]
    pub unsafe fn setInteractionNotAllowed(&self, interaction_not_allowed: bool);

    #[objc2::method(sel = "biometryType")]
    pub unsafe fn biometryType(&self) -> LABiometryType;
}
